uint64_t _GEORPProblemStatusRequestCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  void *v2;
  uint64_t vars8;

  [*(id *)(a1 + 64) readAll:1];
  [*(id *)(a1 + 32) readAll:1];
  [*(id *)(a1 + 24) readAll:1];
  [*(id *)(a1 + 16) readAll:1];
  v2 = *(void **)(a1 + 48);

  return [v2 readAll:1];
}

unint64_t GEORPProblemStatusRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 76))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPProblemStatusRequestReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = [v8 position];
  *(_DWORD *)(a1 + 76) = [v8 length];
  if (a3) {
    v9 = (int *)&GEORPProblemStatusRequestReadAllFrom_recursiveTag;
  }
  else {
    v9 = (int *)&GEORPProblemStatusRequestReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPProblemStatusRequestReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEORPProblemStatusRequestCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_189D62C08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPProblemStatusRequestReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPProblemStatusRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D62C6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemStatusRequestIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEORPUserCredentialsIsValid(a1)) {
            goto LABEL_43;
          }
          goto LABEL_56;
        case 2u:
          if (v15 == 2) {
            goto LABEL_26;
          }
          goto LABEL_56;
        case 3u:
          if (v15 == 2) {
            goto LABEL_26;
          }
          goto LABEL_56;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORPClientCapabilitiesIsValid(a1)) {
            goto LABEL_56;
          }
          goto LABEL_43;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAnalyticMetadataIsValid(a1)) {
            goto LABEL_56;
          }
          goto LABEL_43;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOABSecondPartyPlaceRequestClientMetaDataIsValid(a1)) {
            goto LABEL_56;
          }
          goto LABEL_43;
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOServicesStateIsValid(a1)) {
            goto LABEL_56;
          }
LABEL_43:
          PBReaderRecallMark();
          continue;
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_56;
          }
          unsigned int v17 = 0;
          break;
        default:
LABEL_26:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_56:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v18 = *v2;
        uint64_t v19 = *(void *)&a1[v18];
        unint64_t v20 = v19 + 1;
        if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
          break;
        }
        int v21 = *(char *)(*(void *)&a1[*v5] + v19);
        *(void *)&a1[v18] = v20;
        if (v21 < 0 && v17++ <= 8) {
          continue;
        }
        goto LABEL_44;
      }
      a1[*v4] = 1;
LABEL_44:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

void sub_189D63288(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPProblemStatusRequestIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  unsigned int v2 = *(unsigned __int16 *)(a1 + 88);
  if ((v2 & 0x100) != 0) {
    return 1;
  }
  if ((v2 & 0x80) != 0)
  {
    if (GEORPUserCredentialsIsDirty(*(void *)(a1 + 64))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 88);
  }
  if ((v2 & 0x58) != 0) {
    return 1;
  }
  if ((v2 & 4) != 0)
  {
    if (GEOPDAnalyticMetadataIsDirty(*(os_unfair_lock_s **)(a1 + 24))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 88);
  }
  if ((v2 & 2) != 0)
  {
    if (GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(*(os_unfair_lock_s **)(a1 + 16))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 88);
  }
  return (v2 >> 5) & 1;
}

os_unfair_lock_s *GEORPProblemStatusRequestIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEORPProblemStatusRequestIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 20);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189D63890(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemStatusResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    char v6 = (int *)MEMORY[0x1E4F940E8];
    unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
    unint64_t v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          uint64_t v14 = *(void *)&v5[v13];
          unint64_t v15 = v14 + 1;
          if (v14 == -1 || v15 > *(void *)&v5[*v7]) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          BOOL v17 = v11++ >= 9;
          if (v17)
          {
            unint64_t v12 = 0;
            int v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v18 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v18 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_40;
          }
          v27 = objc_alloc_init(GEORPProblemStatus);
          if (!GEORPProblemStatusReadAllFrom((uint64_t)v27, v5, a3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          objc_msgSend((id)a1, "addProblemStatus:", v27, 0, 0);
        }
        else if ((v12 >> 3) == 1)
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v23 = *v6;
            uint64_t v24 = *(void *)&v5[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&v5[*v7]) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)&v5[*v9] + v24);
            *(void *)&v5[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0) {
              goto LABEL_34;
            }
            v20 += 7;
            BOOL v17 = v21++ >= 9;
            if (v17)
            {
              LODWORD(v22) = 0;
              goto LABEL_36;
            }
          }
          v5[*v8] = 1;
LABEL_34:
          if (v5[*v8]) {
            LODWORD(v22) = 0;
          }
LABEL_36:
          *(_DWORD *)(a1 + 16) = v22;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v28 = v5[*v8] == 0;
  }
  else
  {
LABEL_40:
    BOOL v28 = 0;
  }
  objc_sync_exit(v5);

  return v28;
}

void sub_189D64C0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemStatusResponseReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEORPProblemStatusResponseReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D64C70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPProblemStatusResponseIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  unsigned int v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORPProblemStatusIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_38;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8) {
            continue;
          }
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

void sub_189D657BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPResolutionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 76);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 72)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 88)), (uint16x4_t)0xFFFAFFF9FFFDFFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 88) >> 4) & 1));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v10 | v14;
        if (((v10 | v14) | v8)) {
          char v16 = 0;
        }
        else {
          char v16 = a3;
        }
        char v67 = (v16 == 0) | v15;
        unsigned int v17 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940B8];
        char v66 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_104;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      uint64_t v24 = *(void *)(v3 + v23);
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)(v3 + *v6)) {
        break;
      }
      char v26 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      BOOL v27 = v21++ >= 9;
      if (v27)
      {
        unint64_t v22 = 0;
        int v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_104:
      if (v15)
      {
        char v60 = 1;
        goto LABEL_116;
      }
      if (v16)
      {
        while (1)
        {
          int v61 = *v16++;
          __int16 v62 = 8;
          switch(v61)
          {
            case 0:
              goto LABEL_117;
            case 3:
              goto LABEL_112;
            case 4:
              __int16 v62 = 32;
              goto LABEL_112;
            case 5:
              __int16 v62 = 128;
              goto LABEL_112;
            case 7:
              __int16 v62 = 64;
              goto LABEL_112;
            case 8:
              __int16 v62 = 16;
LABEL_112:
              *(_WORD *)(a1 + 88) |= v62;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_117;
    }
    unint64_t v30 = v22 >> 3;
    BOOL v31 = v15;
    if ((v67 & 1) == 0)
    {
      v32 = v16;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_83;
        }
        *(_WORD *)(a1 + 88) |= 1u;
        uint64_t v36 = *v17;
        unint64_t v37 = *(void *)(v3 + v36);
        if (v37 <= 0xFFFFFFFFFFFFFFF7 && v37 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v38 = *(void *)(*(void *)(v3 + *v19) + v37);
          *(void *)(v3 + v36) = v37 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v18) = 1;
          uint64_t v38 = 0;
        }
        *(void *)(a1 + 48) = v38;
        goto LABEL_103;
      case 3:
        if (!v31) {
          goto LABEL_83;
        }
        if ((*(_WORD *)(a1 + 88) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_115;
          }
          __int16 v59 = *(_WORD *)(a1 + 88) << 12;
LABEL_99:
          v7 += v59 >> 15;
          goto LABEL_100;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_115;
        }
        v65 = objc_alloc_init(GEOMapRegion);
        if (GEOMapRegionReadAllFrom((uint64_t)v65, (void *)v3))
        {
          PBReaderRecallMark();
          v40 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v65;
LABEL_74:

          --v7;
LABEL_100:
          char v15 = v66;
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_103:
          if (!(v15 & 1 | (v7 != 0))) {
            goto LABEL_104;
          }
          continue;
        }
LABEL_114:

LABEL_115:
        char v60 = 0;
        char v15 = v66;
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_116:
        *(_WORD *)(a1 + 88) |= 8u;
        *(_WORD *)(a1 + 88) |= 0x20u;
        *(_WORD *)(a1 + 88) |= 0x80u;
        *(_WORD *)(a1 + 88) |= 0x40u;
        *(_WORD *)(a1 + 88) |= 0x10u;
        if (v60)
        {
LABEL_117:
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if (v15) {
            goto LABEL_118;
          }
        }
        else
        {
          unint64_t v3 = 0;
          if (v15)
          {
LABEL_118:
            v63 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = 0;
          }
        }
        return v3;
      case 4:
        if (!v31 || (*(_WORD *)(a1 + 88) & 0x20) != 0) {
          goto LABEL_83;
        }
        PBReaderReadString();
        v41 = (GEOMapRegion *)objc_claimAutoreleasedReturnValue();
        if (!v41) {
          goto LABEL_58;
        }
        v65 = v41;
        -[GEORPResolution _addNoFlagsLocalizedChangeList:](a1, v41);
        goto LABEL_57;
      case 5:
        if (!v31 || (*(_WORD *)(a1 + 88) & 0x80) != 0) {
          goto LABEL_83;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_115;
        }
        v65 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v65, (void *)v3, v9 & 1)) {
          goto LABEL_114;
        }
        PBReaderRecallMark();
        -[GEORPResolution _addNoFlagsUpdatedPlace:](a1, v65);
LABEL_57:
        v41 = v65;
LABEL_58:

        goto LABEL_100;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_83;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 88) |= 2u;
        while (2)
        {
          uint64_t v45 = *v17;
          uint64_t v46 = *(void *)(v3 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(v3 + *v19) + v46);
            *(void *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              BOOL v27 = v43++ >= 9;
              if (v27)
              {
                uint64_t v44 = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          uint64_t v44 = 0;
        }
LABEL_88:
        *(void *)(a1 + 56) = v44;
        goto LABEL_103;
      case 7:
        if (!v31) {
          goto LABEL_83;
        }
        if ((*(_WORD *)(a1 + 88) & 0x40) == 0)
        {
          uint64_t v49 = PBReaderReadString();
          uint64_t v50 = 40;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_115;
        }
        __int16 v59 = *(_WORD *)(a1 + 88) << 9;
        goto LABEL_99;
      case 8:
        if (!v31) {
          goto LABEL_83;
        }
        if ((*(_WORD *)(a1 + 88) & 0x10) == 0)
        {
          uint64_t v49 = PBReaderReadString();
          uint64_t v50 = 24;
LABEL_73:
          v40 = *(void **)(a1 + v50);
          *(void *)(a1 + v50) = v49;
          goto LABEL_74;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_115;
        }
        __int16 v59 = *(_WORD *)(a1 + 88) << 11;
        goto LABEL_99;
      case 9:
        if (v8)
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + 88) |= 4u;
          while (1)
          {
            uint64_t v54 = *v17;
            uint64_t v55 = *(void *)(v3 + v54);
            unint64_t v56 = v55 + 1;
            if (v55 == -1 || v56 > *(void *)(v3 + *v6)) {
              break;
            }
            char v57 = *(unsigned char *)(*(void *)(v3 + *v19) + v55);
            *(void *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if ((v57 & 0x80) == 0) {
              goto LABEL_90;
            }
            v51 += 7;
            BOOL v27 = v52++ >= 9;
            if (v27)
            {
              LODWORD(v53) = 0;
              goto LABEL_92;
            }
          }
          *(unsigned char *)(v3 + *v18) = 1;
LABEL_90:
          if (*(unsigned char *)(v3 + *v18)) {
            LODWORD(v53) = 0;
          }
LABEL_92:
          *(_DWORD *)(a1 + 84) = v53;
        }
        else
        {
LABEL_83:
          char v58 = PBReaderSkipValueWithTag();
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
          char v15 = v66;
          if ((v58 & 1) == 0)
          {
LABEL_113:
            char v60 = 0;
            goto LABEL_116;
          }
        }
        goto LABEL_103;
      default:
        int v39 = PBReaderSkipValueWithTag();
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        char v15 = v66;
        if (!v39) {
          goto LABEL_113;
        }
        goto LABEL_103;
    }
  }
}

void sub_189D66168(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6652C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D66968(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D66AD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D67914(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEORPResolutionCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 16) readAll:1];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(a1 + 64);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v6++), "readAll:", 1, (void)v7);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

unint64_t GEORPResolutionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 76))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPResolutionReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = [v8 position];
  *(_DWORD *)(a1 + 76) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEORPResolutionReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEORPResolutionReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPResolutionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEORPResolutionCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_189D67BC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPResolutionReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPResolutionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D67C24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D67F90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPResolutionIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  BOOL v2 = (*(_WORD *)(a1 + 88) & 0x1F8) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return v2;
}

void sub_189D68710(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestedRouteIndexReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      long long v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        int v17 = v10 & 7;
        if (v16 || v17 == 4) {
          break;
        }
        unint64_t v19 = v10 >> 3;
        if ((v10 >> 3) == 5)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark()) {
              goto LABEL_73;
            }
            while (*(void *)&v3[*v4] < *(void *)&v3[*v5] && !v3[*v6])
            {
              char v27 = 0;
              unsigned int v28 = 0;
              uint64_t v29 = 0;
              while (1)
              {
                uint64_t v30 = *v4;
                uint64_t v31 = *(void *)&v3[v30];
                unint64_t v32 = v31 + 1;
                if (v31 == -1 || v32 > *(void *)&v3[*v5]) {
                  break;
                }
                char v33 = *(unsigned char *)(*(void *)&v3[*v7] + v31);
                *(void *)&v3[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  BOOL v15 = v28++ >= 9;
                  if (!v15) {
                    continue;
                  }
                }
                goto LABEL_41;
              }
              v3[*v6] = 1;
LABEL_41:
              PBRepeatedUInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            while (1)
            {
              uint64_t v44 = *v4;
              uint64_t v45 = *(void *)&v3[v44];
              unint64_t v46 = v45 + 1;
              if (v45 == -1 || v46 > *(void *)&v3[*v5]) {
                break;
              }
              char v47 = *(unsigned char *)(*(void *)&v3[*v7] + v45);
              *(void *)&v3[v44] = v46;
              v43 |= (unint64_t)(v47 & 0x7F) << v41;
              if (v47 < 0)
              {
                v41 += 7;
                BOOL v15 = v42++ >= 9;
                if (!v15) {
                  continue;
                }
              }
              goto LABEL_71;
            }
            v3[*v6] = 1;
LABEL_71:
            PBRepeatedUInt32Add();
          }
        }
        else
        {
          if (v19 == 3)
          {
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v22 = 0;
            *(unsigned char *)(a1 + 40) |= 2u;
            while (1)
            {
              uint64_t v36 = *v4;
              uint64_t v37 = *(void *)&v3[v36];
              unint64_t v38 = v37 + 1;
              if (v37 == -1 || v38 > *(void *)&v3[*v5]) {
                break;
              }
              char v39 = *(unsigned char *)(*(void *)&v3[*v7] + v37);
              *(void *)&v3[v36] = v38;
              v22 |= (unint64_t)(v39 & 0x7F) << v34;
              if ((v39 & 0x80) == 0) {
                goto LABEL_56;
              }
              v34 += 7;
              BOOL v15 = v35++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_58;
              }
            }
            v3[*v6] = 1;
LABEL_56:
            if (v3[*v6]) {
              LODWORD(v22) = 0;
            }
LABEL_58:
            uint64_t v40 = 36;
          }
          else
          {
            if (v19 != 2)
            {
              if (!PBReaderSkipValueWithTag()) {
                goto LABEL_73;
              }
              continue;
            }
            char v20 = 0;
            unsigned int v21 = 0;
            uint64_t v22 = 0;
            *(unsigned char *)(a1 + 40) |= 1u;
            while (1)
            {
              uint64_t v23 = *v4;
              uint64_t v24 = *(void *)&v3[v23];
              unint64_t v25 = v24 + 1;
              if (v24 == -1 || v25 > *(void *)&v3[*v5]) {
                break;
              }
              char v26 = *(unsigned char *)(*(void *)&v3[*v7] + v24);
              *(void *)&v3[v23] = v25;
              v22 |= (unint64_t)(v26 & 0x7F) << v20;
              if ((v26 & 0x80) == 0) {
                goto LABEL_52;
              }
              v20 += 7;
              BOOL v15 = v21++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_54;
              }
            }
            v3[*v6] = 1;
LABEL_52:
            if (v3[*v6]) {
              LODWORD(v22) = 0;
            }
LABEL_54:
            uint64_t v40 = 32;
          }
          *(_DWORD *)(a1 + v40) = v22;
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v48 = v3[*v6] == 0;
  }
  else
  {
LABEL_73:
    BOOL v48 = 0;
  }
  objc_sync_exit(v3);

  return v48;
}

void sub_189D69890(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestedRouteIndexReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEORPSuggestedRouteIndexReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D698F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestionEntryReadAllFrom(unsigned char *a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      long long v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            a1[28] |= 4u;
            while (1)
            {
              uint64_t v21 = *v4;
              uint64_t v22 = *(void *)&v3[v21];
              unint64_t v23 = v22 + 1;
              if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
                break;
              }
              char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
              *(void *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0) {
                goto LABEL_47;
              }
              v18 += 7;
              BOOL v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_49;
              }
            }
            v3[*v6] = 1;
LABEL_47:
            if (v3[*v6]) {
              LODWORD(v20) = 0;
            }
LABEL_49:
            uint64_t v38 = 24;
            goto LABEL_58;
          case 2u:
            unint64_t v25 = PBReaderReadString();
            if (v25) {
              [a1 addDisplayLine:v25];
            }

            continue;
          case 3u:
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v20 = 0;
            a1[28] |= 2u;
            while (2)
            {
              uint64_t v28 = *v4;
              uint64_t v29 = *(void *)&v3[v28];
              unint64_t v30 = v29 + 1;
              if (v29 == -1 || v30 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v31 = *(unsigned char *)(*(void *)&v3[*v7] + v29);
                *(void *)&v3[v28] = v30;
                v20 |= (unint64_t)(v31 & 0x7F) << v26;
                if (v31 < 0)
                {
                  v26 += 7;
                  BOOL v15 = v27++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_53;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v20) = 0;
            }
LABEL_53:
            uint64_t v38 = 20;
            goto LABEL_58;
          case 4u:
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v20 = 0;
            a1[28] |= 1u;
            break;
          default:
            if (!PBReaderSkipValueWithTag()) {
              goto LABEL_61;
            }
            continue;
        }
        while (1)
        {
          uint64_t v34 = *v4;
          uint64_t v35 = *(void *)&v3[v34];
          unint64_t v36 = v35 + 1;
          if (v35 == -1 || v36 > *(void *)&v3[*v5]) {
            break;
          }
          char v37 = *(unsigned char *)(*(void *)&v3[*v7] + v35);
          *(void *)&v3[v34] = v36;
          v20 |= (unint64_t)(v37 & 0x7F) << v32;
          if ((v37 & 0x80) == 0) {
            goto LABEL_55;
          }
          v32 += 7;
          BOOL v15 = v33++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_57;
          }
        }
        v3[*v6] = 1;
LABEL_55:
        if (v3[*v6]) {
          LODWORD(v20) = 0;
        }
LABEL_57:
        uint64_t v38 = 16;
LABEL_58:
        *(_DWORD *)&a1[v38] = v20;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v39 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    BOOL v39 = 0;
  }
  objc_sync_exit(v3);

  return v39;
}

void sub_189D6ABBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestionEntryReadFrom(unsigned char *a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEORPSuggestionEntryReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D6AC30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPSuggestionEntryIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_50;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_46;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_47;
          }
        case 2u:
          if (v15 == 2) {
            goto LABEL_28;
          }
          goto LABEL_50;
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_50;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_46;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_47;
          }
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_50;
          }
          unsigned int v28 = 0;
          break;
        default:
LABEL_28:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_50:
          BOOL v33 = 0;
          goto LABEL_49;
      }
      while (1)
      {
        uint64_t v29 = *v2;
        uint64_t v30 = *(void *)&a1[v29];
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
          break;
        }
        int v32 = *(char *)(*(void *)&a1[*v5] + v30);
        *(void *)&a1[v29] = v31;
        if (v32 < 0)
        {
          BOOL v22 = v28++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_47;
      }
LABEL_46:
      a1[*v4] = 1;
LABEL_47:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

void sub_189D6B874(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPSuggestionListReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        int v14 = v10 | (v11 > 2);
        if ((v14 | v8)) {
          int v15 = 0;
        }
        else {
          int v15 = a3;
        }
        LODWORD(v16) = v14;
        unsigned int v17 = (int *)MEMORY[0x1E4F940E8];
        char v49 = (v15 == 0) | v14;
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_70;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      uint64_t v24 = *(void *)(v3 + v23);
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)(v3 + *v6)) {
        break;
      }
      char v26 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      if (v21++ >= 9)
      {
        unint64_t v22 = 0;
        int v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_70:
      if (v16)
      {
        char v43 = 1;
        goto LABEL_82;
      }
      if (v15)
      {
        while (1)
        {
          int v44 = *v15++;
          char v45 = 8;
          switch(v44)
          {
            case 0:
              goto LABEL_83;
            case 1:
              goto LABEL_77;
            case 2:
              char v45 = 4;
              goto LABEL_77;
            case 3:
              char v45 = 1;
              goto LABEL_77;
            case 4:
              char v45 = 2;
LABEL_77:
              *(unsigned char *)(a1 + 60) |= v45;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_83;
    }
    unint64_t v30 = v22 >> 3;
    BOOL v31 = (char)v16;
    if ((v49 & 1) == 0)
    {
      int v32 = v15;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31) {
          goto LABEL_59;
        }
        if ((*(unsigned char *)(a1 + 60) & 8) == 0)
        {
          uint64_t v36 = PBReaderReadString();
          char v37 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v36;

          --v7;
          goto LABEL_68;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_79;
        }
        char v42 = 16 * *(unsigned char *)(a1 + 60);
        goto LABEL_67;
      case 2:
        if (!v31 || (*(unsigned char *)(a1 + 60) & 4) != 0) {
          goto LABEL_59;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_79;
        }
        int v48 = (int)v16;
        int v16 = objc_alloc_init(GEORPSuggestionEntry);
        if (!GEORPSuggestionEntryReadAllFrom(v16, (void *)v3)) {
          goto LABEL_80;
        }
        PBReaderRecallMark();
        -[GEORPSuggestionList _addNoFlagsEntry:](a1, v16);

        goto LABEL_58;
      case 3:
        if (!v31) {
          goto LABEL_59;
        }
        if (*(unsigned char *)(a1 + 60))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_79;
          }
          v7 -= *(unsigned char *)(a1 + 60) & 1;
          goto LABEL_68;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_79;
        }
        int v48 = (int)v16;
        int v16 = objc_alloc_init(GEOPDPlaceRequest);
        if (!GEOPDPlaceRequestReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1)) {
          goto LABEL_80;
        }
        PBReaderRecallMark();
        uint64_t v39 = 16;
        goto LABEL_57;
      case 4:
        if (!v31)
        {
LABEL_59:
          char v41 = PBReaderSkipValueWithTag();
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
          if ((v41 & 1) == 0)
          {
LABEL_78:
            char v43 = 0;
            goto LABEL_82;
          }
LABEL_69:
          if (!(v16 & 1 | (v7 != 0))) {
            goto LABEL_70;
          }
          continue;
        }
        if ((*(unsigned char *)(a1 + 60) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_79:
            char v43 = 0;
            goto LABEL_81;
          }
          char v42 = *(unsigned char *)(a1 + 60) << 6;
LABEL_67:
          v7 += v42 >> 7;
          goto LABEL_68;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_79;
        }
        int v48 = (int)v16;
        int v16 = objc_alloc_init(GEOPDPlaceResponse);
        if (GEOPDPlaceResponseReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          uint64_t v39 = 24;
LABEL_57:
          uint64_t v40 = *(void **)(a1 + v39);
          *(void *)(a1 + v39) = v16;

          --v7;
LABEL_58:
          LODWORD(v16) = v48;
LABEL_68:
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_69;
        }
LABEL_80:

        char v43 = 0;
        LOBYTE(v16) = v48;
LABEL_81:
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_82:
        *(unsigned char *)(a1 + 60) |= 8u;
        *(unsigned char *)(a1 + 60) |= 4u;
        *(unsigned char *)(a1 + 60) |= 1u;
        *(unsigned char *)(a1 + 60) |= 2u;
        if (v43)
        {
LABEL_83:
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if (v16) {
            goto LABEL_84;
          }
        }
        else
        {
          unint64_t v3 = 0;
          if (v16)
          {
LABEL_84:
            unint64_t v46 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = 0;
          }
        }
        return v3;
      default:
        int v38 = PBReaderSkipValueWithTag();
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        if (!v38) {
          goto LABEL_78;
        }
        goto LABEL_69;
    }
  }
}

void sub_189D6BFEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6C3AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6C514(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6CCE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPSuggestionListCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = a1[4];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * v6++), "readAll:", 1, (void)v8);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  [a1[2] readAll:1];
  return [a1[3] readAll:1];
}

unint64_t GEORPSuggestionListReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPSuggestionListReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEORPSuggestionListReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEORPSuggestionListReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPSuggestionListReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEORPSuggestionListCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189D6CFA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPSuggestionListReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPSuggestionListReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D6D008(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6D264(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPSuggestionListIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v2 = *(unsigned char *)(a1 + 60);
  if ((v2 & 0x1C) != 0) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 60))
  {
    if (GEOPDPlaceRequestIsDirty(*(os_unfair_lock_s **)(a1 + 16))) {
      return 1;
    }
    char v2 = *(unsigned char *)(a1 + 60);
  }
  if ((v2 & 2) == 0) {
    return 0;
  }
  uint64_t v4 = *(os_unfair_lock_s **)(a1 + 24);

  return (uint64_t)GEOPDPlaceResponseIsDirty(v4);
}

os_unfair_lock_s *GEORPSuggestionListIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEORPSuggestionListIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189D6D7AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6DD38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPTransitLineTileInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  int v10 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1) + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (1)
  {
    unsigned int v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      char v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3) {
      break;
    }
    char v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  int v12 = v7 & 1 | v10;
  BOOL v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1) {
    int v14 = 0;
  }
  else {
    int v14 = a3;
  }
  if (v12) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v14 == 0;
  }
  BOOL v52 = v15;
  int v16 = (int *)MEMORY[0x1E4F940E8];
  unsigned int v17 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v18 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(void *)(v3 + *v16) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v17)) {
      goto LABEL_75;
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v21 = 0;
    while (1)
    {
      uint64_t v22 = *v16;
      uint64_t v23 = *(void *)(v3 + v22);
      unint64_t v24 = v23 + 1;
      if (v23 == -1 || v24 > *(void *)(v3 + *v6)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(v3 + *v18) + v23);
      *(void *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0) {
        goto LABEL_27;
      }
      v19 += 7;
      BOOL v26 = v20++ >= 9;
      if (v26)
      {
        unint64_t v21 = 0;
        int v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(unsigned char *)(v3 + *v17) = 1;
LABEL_27:
    int v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(unsigned char *)(v3 + *v17)) {
      unint64_t v21 = 0;
    }
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_75:
      if (v13)
      {
        char v47 = 1;
        goto LABEL_85;
      }
      if (!v14)
      {
LABEL_86:
        unint64_t v3 = *(unsigned char *)(v3 + *v17) == 0;
        if (!v13) {
          return v3;
        }
        goto LABEL_87;
      }
      while (1)
      {
        int v49 = *v14++;
        int v48 = v49;
        if (v49 == 2) {
          goto LABEL_83;
        }
        if (v48 == 3)
        {
          LOBYTE(v48) = 4;
LABEL_83:
          *(unsigned char *)(a1 + 52) |= v48;
        }
        else if (!v48)
        {
          goto LABEL_86;
        }
      }
    }
    unint64_t v29 = v21 >> 3;
    BOOL v30 = v13;
    if (!v52)
    {
      BOOL v31 = v14;
      do
      {
        int v33 = *v31++;
        int v32 = v33;
        BOOL v30 = v33 != 0;
        if (v33) {
          BOOL v34 = v32 == v29;
        }
        else {
          BOOL v34 = 1;
        }
      }
      while (!v34);
    }
    if (v29 == 3)
    {
      if (!v30) {
        goto LABEL_60;
      }
      if ((*(unsigned char *)(a1 + 52) & 4) == 0)
      {
        uint64_t v42 = PBReaderReadString();
        uint64_t v43 = 32;
LABEL_57:
        int v44 = *(void **)(a1 + v43);
        *(void *)(a1 + v43) = v42;

        --v9;
        goto LABEL_71;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_84;
      }
      char v45 = 32 * *(unsigned char *)(a1 + 52);
LABEL_70:
      v9 += v45 >> 7;
      goto LABEL_71;
    }
    if (v29 != 2)
    {
      if (v29 == 1)
      {
        if (v8)
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          *(unsigned char *)(a1 + 52) |= 1u;
          while (1)
          {
            uint64_t v38 = *v16;
            uint64_t v39 = *(void *)(v3 + v38);
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)(v3 + *v6)) {
              break;
            }
            char v41 = *(unsigned char *)(*(void *)(v3 + *v18) + v39);
            *(void *)(v3 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if ((v41 & 0x80) == 0) {
              goto LABEL_63;
            }
            v35 += 7;
            BOOL v26 = v36++ >= 9;
            if (v26)
            {
              uint64_t v37 = 0;
              goto LABEL_65;
            }
          }
          *(unsigned char *)(v3 + *v17) = 1;
LABEL_63:
          if (*(unsigned char *)(v3 + *v17)) {
            uint64_t v37 = 0;
          }
LABEL_65:
          *(void *)(a1 + 16) = v37;
          goto LABEL_71;
        }
LABEL_60:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_84;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_84;
      }
LABEL_71:
      if (v9) {
        char v46 = 1;
      }
      else {
        char v46 = v13;
      }
      if ((v46 & 1) == 0) {
        goto LABEL_75;
      }
      continue;
    }
    break;
  }
  if (!v30) {
    goto LABEL_60;
  }
  if ((*(unsigned char *)(a1 + 52) & 2) == 0)
  {
    uint64_t v42 = PBReaderReadString();
    uint64_t v43 = 24;
    goto LABEL_57;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v45 = *(unsigned char *)(a1 + 52) << 6;
    goto LABEL_70;
  }
LABEL_84:
  char v47 = 0;
LABEL_85:
  *(unsigned char *)(a1 + 52) |= 2u;
  *(unsigned char *)(a1 + 52) |= 4u;
  if (v47) {
    goto LABEL_86;
  }
  unint64_t v3 = 0;
  if (v13)
  {
LABEL_87:
    uint64_t v50 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189D6E330(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6E808(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPTransitLineTileInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPTransitLineTileInfoReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEORPTransitLineTileInfoReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEORPTransitLineTileInfoReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPTransitLineTileInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189D6E994(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPTransitLineTileInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPTransitLineTileInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D6E9F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6EBAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPTransitLineTileInfoIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = (*(unsigned char *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189D6EED0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6F2E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUpdatedLabelReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 36);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 32)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(unsigned char *)(a1 + 44) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v7;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        int v14 = v10 & 1 | v11;
        BOOL v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1) {
          int v16 = 0;
        }
        else {
          int v16 = a3;
        }
        BOOL v17 = v16 == 0;
        if (v14) {
          BOOL v17 = 1;
        }
        BOOL v48 = v17;
        uint64_t v18 = (int *)MEMORY[0x1E4F940E8];
        char v19 = (int *)MEMORY[0x1E4F940C8];
        unsigned int v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v7;
        uint64_t v13 = v10;
LABEL_8:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_60;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_25;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_25:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_60:
      if (v15)
      {
        char v42 = 1;
        goto LABEL_72;
      }
      if (!v16) {
        goto LABEL_73;
      }
      while (1)
      {
        int v45 = *v16++;
        int v44 = v45;
        if (v45 == 1) {
          break;
        }
        if (v44 == 2)
        {
          char v43 = 1;
LABEL_66:
          *(unsigned char *)(a1 + 44) |= v43;
        }
        else if (!v44)
        {
          goto LABEL_73;
        }
      }
      char v43 = 2;
      goto LABEL_66;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v15;
    if (!v48)
    {
      int v33 = v16;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (v32)
      {
        if ((*(unsigned char *)(a1 + 44) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_71;
          }
          v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
        }
        else
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v37;

          --v9;
        }
        goto LABEL_56;
      }
LABEL_50:
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_71;
      }
      goto LABEL_56;
    }
    if (!PBReaderSkipValueWithTag()) {
      goto LABEL_71;
    }
LABEL_56:
    if (v9) {
      char v41 = 1;
    }
    else {
      char v41 = v15;
    }
    if ((v41 & 1) == 0) {
      goto LABEL_60;
    }
  }
  if (!v32) {
    goto LABEL_50;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_71:
      char v42 = 0;
      goto LABEL_72;
    }
    v9 -= *(unsigned char *)(a1 + 44) & 1;
    goto LABEL_56;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_71;
  }
  uint64_t v39 = objc_alloc_init(GEOLatLng);
  if (GEOLatLngReadAllFrom((uint64_t)v39, (void *)v3))
  {
    PBReaderRecallMark();
    unint64_t v40 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v39;

    --v9;
    char v19 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_56;
  }

  char v42 = 0;
  char v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_72:
  *(unsigned char *)(a1 + 44) |= 2u;
  *(unsigned char *)(a1 + 44) |= 1u;
  if (v42)
  {
LABEL_73:
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
    if (v15) {
      goto LABEL_74;
    }
  }
  else
  {
    unint64_t v3 = 0;
    if (v15)
    {
LABEL_74:
      char v46 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = 0;
    }
  }
  return v3;
}

void sub_189D6F8C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D6FD24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUpdatedLabelReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 36))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPUpdatedLabelReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = [v8 position];
  *(_DWORD *)(a1 + 36) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEORPUpdatedLabelReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEORPUpdatedLabelReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPUpdatedLabelReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 16) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189D6FECC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUpdatedLabelReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPUpdatedLabelReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D6FF30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D700C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPUpdatedLabelIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  BOOL v2 = (*(unsigned char *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_189D703A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D7073C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserCredentialsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 36);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 32)];
  char v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  int v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(unsigned char *)(a1 + 44) & 1);
  while (1)
  {
    unsigned int v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      char v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3) {
      break;
    }
    char v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  int v12 = v7 & 1 | v10;
  BOOL v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1) {
    int v14 = 0;
  }
  else {
    int v14 = a3;
  }
  BOOL v15 = (int *)MEMORY[0x1E4F940E8];
  int v16 = (int *)MEMORY[0x1E4F940C8];
  if (v12) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = v14 == 0;
  }
  uint64_t v18 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(void *)(v3 + *v15) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v16)) {
      goto LABEL_62;
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v21 = 0;
    while (1)
    {
      uint64_t v22 = *v15;
      uint64_t v23 = *(void *)(v3 + v22);
      unint64_t v24 = v23 + 1;
      if (v23 == -1 || v24 > *(void *)(v3 + *v6)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(v3 + *v18) + v23);
      *(void *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0) {
        goto LABEL_27;
      }
      v19 += 7;
      if (v20++ >= 9)
      {
        unint64_t v21 = 0;
        int v27 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_29;
      }
    }
    *(unsigned char *)(v3 + *v16) = 1;
LABEL_27:
    int v27 = *(unsigned __int8 *)(v3 + *v16);
    if (*(unsigned char *)(v3 + *v16)) {
      unint64_t v21 = 0;
    }
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_62:
      if (v13)
      {
        char v41 = 1;
        goto LABEL_74;
      }
      if (!v14) {
        goto LABEL_75;
      }
      while (1)
      {
        int v43 = *v14++;
        int v42 = v43;
        if (v43 == 1) {
          break;
        }
        if (v42 == 2)
        {
          char v44 = 1;
LABEL_71:
          *(unsigned char *)(a1 + 44) |= v44;
        }
        else if (!v42)
        {
          goto LABEL_75;
        }
      }
      char v44 = 2;
      goto LABEL_71;
    }
    unint64_t v29 = v21 >> 3;
    BOOL v30 = v13;
    if (!v17)
    {
      unint64_t v31 = v14;
      do
      {
        int v33 = *v31++;
        int v32 = v33;
        BOOL v30 = v33 != 0;
        if (v33) {
          BOOL v34 = v32 == v29;
        }
        else {
          BOOL v34 = 1;
        }
      }
      while (!v34);
    }
    if (v29 != 2)
    {
      if (v29 != 1)
      {
        int v38 = PBReaderSkipValueWithTag();
        int v16 = (int *)MEMORY[0x1E4F940C8];
        if (!v38) {
          goto LABEL_72;
        }
        goto LABEL_58;
      }
      if (v30)
      {
        if ((*(unsigned char *)(a1 + 44) & 2) == 0)
        {
          uint64_t v35 = PBReaderReadString();
          uint64_t v36 = 24;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_73;
        }
        v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
LABEL_57:
        int v16 = (int *)MEMORY[0x1E4F940C8];
LABEL_58:
        if (v9) {
          char v40 = 1;
        }
        else {
          char v40 = v13;
        }
        if ((v40 & 1) == 0) {
          goto LABEL_62;
        }
        continue;
      }
LABEL_51:
      char v39 = PBReaderSkipValueWithTag();
      int v16 = (int *)MEMORY[0x1E4F940C8];
      if ((v39 & 1) == 0)
      {
LABEL_72:
        char v41 = 0;
        goto LABEL_74;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v30) {
    goto LABEL_51;
  }
  if ((*(unsigned char *)(a1 + 44) & 1) == 0)
  {
    uint64_t v35 = PBReaderReadString();
    uint64_t v36 = 16;
LABEL_48:
    uint64_t v37 = *(void **)(a1 + v36);
    *(void *)(a1 + v36) = v35;

    int v16 = (int *)MEMORY[0x1E4F940C8];
    --v9;
    goto LABEL_58;
  }
  if (PBReaderSkipValueWithTag())
  {
    v9 -= *(unsigned char *)(a1 + 44) & 1;
    goto LABEL_57;
  }
LABEL_73:
  char v41 = 0;
  int v16 = (int *)MEMORY[0x1E4F940C8];
LABEL_74:
  *(unsigned char *)(a1 + 44) |= 2u;
  *(unsigned char *)(a1 + 44) |= 1u;
  if (v41)
  {
LABEL_75:
    unint64_t v3 = *(unsigned char *)(v3 + *v16) == 0;
    if (v13) {
      goto LABEL_76;
    }
  }
  else
  {
    unint64_t v3 = 0;
    if (v13)
    {
LABEL_76:
      int v45 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = 0;
    }
  }
  return v3;
}

void sub_189D70C84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D710AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserCredentialsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 36))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPUserCredentialsReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = [v8 position];
  *(_DWORD *)(a1 + 36) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEORPUserCredentialsReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEORPUserCredentialsReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPUserCredentialsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189D71238(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserCredentialsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPUserCredentialsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D7129C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D7142C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPUserCredentialsIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  BOOL v2 = (*(unsigned char *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_189D716DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D71A5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserSearchInputReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFDFFFCFFFBLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 72) & 4) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v10 | v14;
        if (((v10 | v14) | v8)) {
          int v16 = 0;
        }
        else {
          int v16 = a3;
        }
        char v57 = (v16 == 0) | v15;
        BOOL v17 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        char v19 = (int *)MEMORY[0x1E4F940B8];
        char v56 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_90;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      uint64_t v24 = *(void *)(v3 + v23);
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)(v3 + *v6)) {
        break;
      }
      char v26 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      BOOL v27 = v21++ >= 9;
      if (v27)
      {
        unint64_t v22 = 0;
        int v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_90:
      if (v15)
      {
        char v50 = 1;
        goto LABEL_102;
      }
      if (v16)
      {
        while (1)
        {
          int v51 = *v16++;
          char v52 = 16;
          switch(v51)
          {
            case 0:
              goto LABEL_103;
            case 1:
              goto LABEL_98;
            case 2:
              char v52 = 32;
              goto LABEL_98;
            case 3:
              char v52 = 8;
              goto LABEL_98;
            case 4:
              char v52 = 2;
              goto LABEL_98;
            case 5:
              char v52 = 4;
LABEL_98:
              *(unsigned char *)(a1 + 72) |= v52;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_103;
    }
    unint64_t v30 = v22 >> 3;
    BOOL v31 = v15;
    if ((v57 & 1) == 0)
    {
      int v32 = v16;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31) {
          goto LABEL_71;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x10) == 0)
        {
          uint64_t v36 = PBReaderReadString();
          uint64_t v37 = 40;
          goto LABEL_45;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_101;
        }
        char v49 = 8 * *(unsigned char *)(a1 + 72);
        goto LABEL_87;
      case 2:
        if (!v31) {
          goto LABEL_71;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x20) == 0)
        {
          uint64_t v36 = PBReaderReadString();
          uint64_t v37 = 48;
LABEL_45:
          char v39 = *(void **)(a1 + v37);
          *(void *)(a1 + v37) = v36;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_101;
        }
        char v49 = 4 * *(unsigned char *)(a1 + 72);
        goto LABEL_87;
      case 3:
        if (!v31) {
          goto LABEL_71;
        }
        if ((*(unsigned char *)(a1 + 72) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_101;
          }
          char v49 = 16 * *(unsigned char *)(a1 + 72);
          goto LABEL_87;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_101;
        }
        uint64_t v55 = objc_alloc_init(GEOPDPlace);
        if (!GEOPDPlaceReadAllFrom((uint64_t)v55, (void *)v3, v9 & 1)) {
          goto LABEL_100;
        }
        PBReaderRecallMark();
        uint64_t v40 = 32;
        goto LABEL_61;
      case 4:
        if (!v31) {
          goto LABEL_71;
        }
        if ((*(unsigned char *)(a1 + 72) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_101;
          }
          char v49 = *(unsigned char *)(a1 + 72) << 6;
          goto LABEL_87;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_101;
        }
        uint64_t v55 = objc_alloc_init(GEOPDAutocompleteEntry);
        if (!GEOPDAutocompleteEntryReadAllFrom((uint64_t)v55, (void *)v3, v9 & 1)) {
          goto LABEL_100;
        }
        PBReaderRecallMark();
        uint64_t v40 = 16;
        goto LABEL_61;
      case 5:
        if (!v31) {
          goto LABEL_71;
        }
        if ((*(unsigned char *)(a1 + 72) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_101;
          }
          char v49 = 32 * *(unsigned char *)(a1 + 72);
LABEL_87:
          v7 += v49 >> 7;
LABEL_88:
          char v15 = v56;
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_89:
          if (!(v15 & 1 | (v7 != 0))) {
            goto LABEL_90;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_101;
        }
        uint64_t v55 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v55, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v40 = 24;
LABEL_61:
          char v39 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v55;
LABEL_62:

          --v7;
          goto LABEL_88;
        }
LABEL_100:

LABEL_101:
        char v50 = 0;
        char v15 = v56;
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_102:
        *(unsigned char *)(a1 + 72) |= 0x10u;
        *(unsigned char *)(a1 + 72) |= 0x20u;
        *(unsigned char *)(a1 + 72) |= 8u;
        *(unsigned char *)(a1 + 72) |= 2u;
        *(unsigned char *)(a1 + 72) |= 4u;
        if (v50)
        {
LABEL_103:
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if (v15) {
            goto LABEL_104;
          }
        }
        else
        {
          unint64_t v3 = 0;
          if (v15)
          {
LABEL_104:
            uint64_t v53 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = 0;
          }
        }
        return v3;
      case 6:
        if (v8)
        {
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0;
          *(unsigned char *)(a1 + 72) |= 1u;
          while (1)
          {
            uint64_t v44 = *v17;
            uint64_t v45 = *(void *)(v3 + v44);
            unint64_t v46 = v45 + 1;
            if (v45 == -1 || v46 > *(void *)(v3 + *v6)) {
              break;
            }
            char v47 = *(unsigned char *)(*(void *)(v3 + *v19) + v45);
            *(void *)(v3 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if ((v47 & 0x80) == 0) {
              goto LABEL_74;
            }
            v41 += 7;
            BOOL v27 = v42++ >= 9;
            if (v27)
            {
              LODWORD(v43) = 0;
              goto LABEL_76;
            }
          }
          *(unsigned char *)(v3 + *v18) = 1;
LABEL_74:
          if (*(unsigned char *)(v3 + *v18)) {
            LODWORD(v43) = 0;
          }
LABEL_76:
          *(_DWORD *)(a1 + 68) = v43;
        }
        else
        {
LABEL_71:
          char v48 = PBReaderSkipValueWithTag();
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
          char v15 = v56;
          if ((v48 & 1) == 0)
          {
LABEL_99:
            char v50 = 0;
            goto LABEL_102;
          }
        }
        goto LABEL_89;
      default:
        int v38 = PBReaderSkipValueWithTag();
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        char v15 = v56;
        if (!v38) {
          goto LABEL_99;
        }
        goto LABEL_89;
    }
  }
}

void sub_189D7231C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D72484(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D725F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D7275C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D73138(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserSearchInputReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPUserSearchInputReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEORPUserSearchInputReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEORPUserSearchInputReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPUserSearchInputReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 32) readAll:1];
    [*(id *)(a1 + 16) readAll:1];
    [*(id *)(a1 + 24) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189D73304(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPUserSearchInputReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPUserSearchInputReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D73368(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D73564(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORPUserSearchInputIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  unsigned int v2 = *(unsigned __int8 *)(a1 + 72);
  if ((v2 & 0x70) != 0) {
    return 1;
  }
  if ((v2 & 8) != 0)
  {
    if (GEOPDPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 32))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int8 *)(a1 + 72);
  }
  if ((v2 & 2) != 0)
  {
    if ((GEOPDAutocompleteEntryIsDirty(*(os_unfair_lock_s **)(a1 + 16)) & 1) == 0)
    {
      unsigned int v2 = *(unsigned __int8 *)(a1 + 72);
      return (v2 >> 2) & 1;
    }
    return 1;
  }
  return (v2 >> 2) & 1;
}

os_unfair_lock_s *GEORPUserSearchInputIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEORPUserSearchInputIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189D73A40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEORPVisibleTileKeyDescription(unsigned int *a1)
{
  unsigned int v2 = NSString;
  id v3 = _GEORPVisibleTileKeyDictionaryRepresentation(a1);
  uint64_t v4 = [v2 stringWithFormat:@"GEORPVisibleTileKey<%p> %@", a1, v3];

  return v4;
}

id _GEORPVisibleTileKeyDictionaryRepresentation(unsigned int *a1)
{
  unsigned int v2 = [MEMORY[0x1E4F1CA60] dictionary];
  char v3 = *((unsigned char *)a1 + 12);
  if (v3)
  {
    uint64_t v6 = [NSNumber numberWithUnsignedInt:*a1];
    [v2 setObject:v6 forKey:@"x"];

    char v3 = *((unsigned char *)a1 + 12);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a1[3] & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = [NSNumber numberWithUnsignedInt:a1[1]];
  [v2 setObject:v7 forKey:@"y"];

  if ((a1[3] & 4) != 0)
  {
LABEL_4:
    uint64_t v4 = [NSNumber numberWithUnsignedInt:a1[2]];
    [v2 setObject:v4 forKey:@"z"];
  }
LABEL_5:

  return v2;
}

void _GEORPVisibleTileKeyFromDictionaryRepresentation(void *a1, uint64_t a2)
{
  id v6 = a1;
  char v3 = [v6 objectForKeyedSubscript:@"x"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *(unsigned char *)(a2 + 12) |= 1u;
    *(_DWORD *)a2 = [v3 unsignedIntValue];
  }

  uint64_t v4 = [v6 objectForKeyedSubscript:@"y"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *(unsigned char *)(a2 + 12) |= 2u;
    *(_DWORD *)(a2 + 4) = [v4 unsignedIntValue];
  }

  uint64_t v5 = [v6 objectForKeyedSubscript:@"z"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *(unsigned char *)(a2 + 12) |= 4u;
    *(_DWORD *)(a2 + 8) = [v5 unsignedIntValue];
  }
}

BOOL GEORPVisibleTileKeyReadFrom(uint64_t a1, uint64_t a2)
{
  return GEORPVisibleTileKeyReadAllFrom(a1, a2);
}

BOOL GEORPVisibleTileKeyReadAllFrom(uint64_t a1, uint64_t a2)
{
  char v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (_DWORD *)(a1 + 8);
    id v8 = (_DWORD *)(a1 + 4);
    uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = *v3;
        uint64_t v14 = *(void *)(a2 + v13);
        unint64_t v15 = v14 + 1;
        if (v14 == -1 || v15 > *(void *)(a2 + *v4)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + *v9) + v14);
        *(void *)(a2 + v13) = v15;
        v12 |= (unint64_t)(v16 & 0x7F) << v10;
        if ((v16 & 0x80) == 0) {
          goto LABEL_12;
        }
        v10 += 7;
        if (v11++ >= 9)
        {
          unint64_t v12 = 0;
          int v18 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v18 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v12 = 0;
      }
LABEL_14:
      if (v18 || (v12 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v20 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 12) |= 4u;
        while (1)
        {
          uint64_t v32 = *v3;
          uint64_t v33 = *(void *)(a2 + v32);
          unint64_t v34 = v33 + 1;
          if (v33 == -1 || v34 > *(void *)(a2 + *v4)) {
            break;
          }
          char v35 = *(unsigned char *)(*(void *)(a2 + *v9) + v33);
          *(void *)(a2 + v32) = v34;
          v23 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0)
          {
            unint64_t v29 = v7;
            goto LABEL_48;
          }
          v30 += 7;
          BOOL v28 = v31++ > 8;
          if (v28)
          {
            LODWORD(v23) = 0;
            unint64_t v29 = v7;
            goto LABEL_50;
          }
        }
        unint64_t v29 = v7;
LABEL_47:
        *(unsigned char *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if (v20 == 2) {
        break;
      }
      if (v20 == 1)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            unint64_t v29 = (_DWORD *)a1;
            goto LABEL_47;
          }
          char v27 = *(unsigned char *)(*(void *)(a2 + *v9) + v25);
          *(void *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0) {
            break;
          }
          v21 += 7;
          BOOL v28 = v22++ > 8;
          if (v28)
          {
            LODWORD(v23) = 0;
            unint64_t v29 = (_DWORD *)a1;
            goto LABEL_50;
          }
        }
        unint64_t v29 = (_DWORD *)a1;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_51:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v36 = 0;
    unsigned int v37 = 0;
    uint64_t v23 = 0;
    *(unsigned char *)(a1 + 12) |= 2u;
    while (1)
    {
      uint64_t v38 = *v3;
      uint64_t v39 = *(void *)(a2 + v38);
      unint64_t v40 = v39 + 1;
      if (v39 == -1 || v40 > *(void *)(a2 + *v4))
      {
        unint64_t v29 = v8;
        goto LABEL_47;
      }
      char v41 = *(unsigned char *)(*(void *)(a2 + *v9) + v39);
      *(void *)(a2 + v38) = v40;
      v23 |= (unint64_t)(v41 & 0x7F) << v36;
      if ((v41 & 0x80) == 0) {
        break;
      }
      v36 += 7;
      BOOL v28 = v37++ > 8;
      if (v28)
      {
        LODWORD(v23) = 0;
        unint64_t v29 = v8;
        goto LABEL_50;
      }
    }
    unint64_t v29 = v8;
LABEL_48:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v23) = 0;
    }
LABEL_50:
    *unint64_t v29 = v23;
    goto LABEL_51;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t GEORPVisibleTileKeyWriteTo(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 12);
  if ((v2 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 12) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    result = PBDataWriterWriteUint32Field();
    if ((*(unsigned char *)(v1 + 12) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  result = PBDataWriterWriteUint32Field();
  char v2 = *(unsigned char *)(v1 + 12);
  if ((v2 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v2 & 4) == 0) {
    return result;
  }
LABEL_7:

  return PBDataWriterWriteUint32Field();
}

BOOL GEORPVisibleTileKeyEquals(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t GEORPVisibleTileKeyHash()
{
  return PBHashBytes();
}

BOOL GEORPVisibleTileKeyIsValid(void *a1)
{
  v4[2] = [a1 position];
  v4[3] = [a1 length];
  v4[0] = 0;
  v4[1] = 0;
  BOOL AllFrom = GEORPVisibleTileKeyReadAllFrom((uint64_t)v4, (uint64_t)a1);
  PBReaderRecallMark();
  return AllFrom;
}

BOOL GEORPVisibleTileSetReadAllFrom(uint64_t a1, void *a2)
{
  char v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    id v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        unint64_t v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_52;
          }
          -[GEORPVisibleTileSet _reserveTileKeys:](a1, 1uLL);
          if (!GEORPVisibleTileKeyReadAllFrom(*(void *)(a1 + 8) + 16 * *(void *)(a1 + 16), (uint64_t)v3)) {
            goto LABEL_52;
          }
          PBReaderRecallMark();
          ++*(void *)(a1 + 16);
        }
        else
        {
          if (v18 == 2)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v21 = 0;
            *(unsigned char *)(a1 + 40) |= 1u;
            while (1)
            {
              uint64_t v28 = *v4;
              uint64_t v29 = *(void *)&v3[v28];
              unint64_t v30 = v29 + 1;
              if (v29 == -1 || v30 > *(void *)&v3[*v5]) {
                break;
              }
              char v31 = *(unsigned char *)(*(void *)&v3[*v7] + v29);
              *(void *)&v3[v28] = v30;
              v21 |= (unint64_t)(v31 & 0x7F) << v26;
              if ((v31 & 0x80) == 0) {
                goto LABEL_46;
              }
              v26 += 7;
              BOOL v15 = v27++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_48;
              }
            }
            v3[*v6] = 1;
LABEL_46:
            if (v3[*v6]) {
              LODWORD(v21) = 0;
            }
LABEL_48:
            uint64_t v32 = 32;
          }
          else
          {
            if (v18 != 1)
            {
              if (!PBReaderSkipValueWithTag()) {
                goto LABEL_52;
              }
              continue;
            }
            char v19 = 0;
            unsigned int v20 = 0;
            uint64_t v21 = 0;
            *(unsigned char *)(a1 + 40) |= 2u;
            while (1)
            {
              uint64_t v22 = *v4;
              uint64_t v23 = *(void *)&v3[v22];
              unint64_t v24 = v23 + 1;
              if (v23 == -1 || v24 > *(void *)&v3[*v5]) {
                break;
              }
              char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
              *(void *)&v3[v22] = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0) {
                goto LABEL_42;
              }
              v19 += 7;
              BOOL v15 = v20++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_44;
              }
            }
            v3[*v6] = 1;
LABEL_42:
            if (v3[*v6]) {
              LODWORD(v21) = 0;
            }
LABEL_44:
            uint64_t v32 = 36;
          }
          *(_DWORD *)(a1 + v32) = v21;
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_52:
    BOOL v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189D77F90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPVisibleTileSetReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEORPVisibleTileSetReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D77FF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D786D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPWatchAuxiliaryControlReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  unsigned int v10 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (1)
  {
    unsigned int v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      char v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3) {
      break;
    }
    char v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  char v12 = v7 | (v10 > 1);
  if (v7 & 1 | (v10 > 1) | v8 & 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = a3;
  }
  char v14 = (int *)MEMORY[0x1E4F940E8];
  BOOL v15 = (int *)MEMORY[0x1E4F940C8];
  int v16 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(void *)(v3 + *v14) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v15)) {
      goto LABEL_63;
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = *v14;
      uint64_t v21 = *(void *)(v3 + v20);
      unint64_t v22 = v21 + 1;
      if (v21 == -1 || v22 > *(void *)(v3 + *v6)) {
        break;
      }
      char v23 = *(unsigned char *)(*(void *)(v3 + *v16) + v21);
      *(void *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0) {
        goto LABEL_24;
      }
      v17 += 7;
      if (v18++ >= 9)
      {
        unint64_t v19 = 0;
        int v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v15) = 1;
LABEL_24:
    int v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(unsigned char *)(v3 + *v15)) {
      unint64_t v19 = 0;
    }
LABEL_26:
    if (v25 || (v19 & 7) == 4)
    {
LABEL_63:
      if (v12)
      {
        char v39 = 1;
        goto LABEL_72;
      }
      if (v13)
      {
        while (1)
        {
          int v40 = *v13++;
          char v41 = 1;
          switch(v40)
          {
            case 0:
              goto LABEL_73;
            case 1:
              goto LABEL_69;
            case 2:
              char v41 = 4;
              goto LABEL_69;
            case 3:
              char v41 = 2;
LABEL_69:
              *(unsigned char *)(a1 + 52) |= v41;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_73;
    }
    unint64_t v27 = v19 >> 3;
    BOOL v28 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      uint64_t v29 = v13;
      do
      {
        int v31 = *v29++;
        int v30 = v31;
        BOOL v28 = v31 != 0;
        if (v31) {
          BOOL v32 = v30 == v27;
        }
        else {
          BOOL v32 = 1;
        }
      }
      while (!v32);
    }
    if (v27 == 3)
    {
      if (!v28) {
        goto LABEL_52;
      }
      if ((*(unsigned char *)(a1 + 52) & 2) == 0)
      {
        uint64_t v33 = PBReaderReadString();
        uint64_t v34 = 24;
LABEL_49:
        char v35 = *(void **)(a1 + v34);
        *(void *)(a1 + v34) = v33;

        --v9;
        goto LABEL_61;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_71;
      }
      char v38 = *(unsigned char *)(a1 + 52) << 6;
LABEL_60:
      v9 += v38 >> 7;
      goto LABEL_61;
    }
    if (v27 != 2)
    {
      if (v27 != 1)
      {
        int v36 = PBReaderSkipValueWithTag();
        BOOL v15 = (int *)MEMORY[0x1E4F940C8];
        if (!v36) {
          goto LABEL_70;
        }
        goto LABEL_62;
      }
      if (v28)
      {
        if ((*(unsigned char *)(a1 + 52) & 1) == 0)
        {
          uint64_t v33 = PBReaderReadString();
          uint64_t v34 = 16;
          goto LABEL_49;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_71;
        }
        v9 -= *(unsigned char *)(a1 + 52) & 1;
LABEL_61:
        BOOL v15 = (int *)MEMORY[0x1E4F940C8];
LABEL_62:
        if (!(v12 & 1 | (v9 != 0))) {
          goto LABEL_63;
        }
        continue;
      }
LABEL_52:
      char v37 = PBReaderSkipValueWithTag();
      BOOL v15 = (int *)MEMORY[0x1E4F940C8];
      if ((v37 & 1) == 0)
      {
LABEL_70:
        char v39 = 0;
        goto LABEL_72;
      }
      goto LABEL_62;
    }
    break;
  }
  if (!v28) {
    goto LABEL_52;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) == 0)
  {
    uint64_t v33 = PBReaderReadString();
    uint64_t v34 = 32;
    goto LABEL_49;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v38 = 32 * *(unsigned char *)(a1 + 52);
    goto LABEL_60;
  }
LABEL_71:
  char v39 = 0;
  BOOL v15 = (int *)MEMORY[0x1E4F940C8];
LABEL_72:
  *(unsigned char *)(a1 + 52) |= 1u;
  *(unsigned char *)(a1 + 52) |= 4u;
  *(unsigned char *)(a1 + 52) |= 2u;
  if (v39)
  {
LABEL_73:
    unint64_t v3 = *(unsigned char *)(v3 + *v15) == 0;
    if ((v12 & 1) == 0) {
      return v3;
    }
    goto LABEL_74;
  }
  unint64_t v3 = 0;
  if (v12)
  {
LABEL_74:
    unsigned int v42 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189D78CA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D78E10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D792D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPWatchAuxiliaryControlReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPWatchAuxiliaryControlReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unsigned int v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEORPWatchAuxiliaryControlReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEORPWatchAuxiliaryControlReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPWatchAuxiliaryControlReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189D79460(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPWatchAuxiliaryControlReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPWatchAuxiliaryControlReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D794C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D79670(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPWatchAuxiliaryControlIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = (*(unsigned char *)(a1 + 52) & 0xF) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189D79958(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D7A380(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAdditionalEnabledMarketsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOAdditionalEnabledMarketsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D7ACFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAdditionalEnabledMarketsIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_27;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_27;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2) {
          goto LABEL_29;
        }
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        BOOL v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_27;
      }
    }
    if (v15 != 2) {
      goto LABEL_29;
    }
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }
LABEL_27:
  BOOL v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

BOOL GEOAdditionalEnabledMarketsIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = (*(unsigned char *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189D7B424(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAdvisoryClientCapabilitiesReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_49;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          goto LABEL_49;
        }
        if ((v10 >> 3) == 2) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 20) |= 2u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5])
            {
              char v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__multipleCardsPerNoticeSupported;
              goto LABEL_41;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v18 += 7;
            BOOL v25 = v19++ > 8;
            if (v25)
            {
              uint64_t v20 = 0;
              char v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__multipleCardsPerNoticeSupported;
              goto LABEL_44;
            }
          }
          char v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__multipleCardsPerNoticeSupported;
LABEL_42:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_44:
          *(unsigned char *)(a1 + *v26) = v20 != 0;
          goto LABEL_45;
        }
        if (!*(void *)(a1 + 8))
        {
          id v33 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          uint64_t v34 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v33;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_50;
        }
LABEL_45:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_49;
        }
      }
      char v27 = 0;
      unsigned int v28 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        uint64_t v29 = *v4;
        uint64_t v30 = *(void *)&v3[v29];
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
        *(void *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          char v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__downloadOfflineMapActionSupported;
          goto LABEL_42;
        }
        v27 += 7;
        BOOL v25 = v28++ > 8;
        if (v25)
        {
          uint64_t v20 = 0;
          char v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__downloadOfflineMapActionSupported;
          goto LABEL_44;
        }
      }
      char v26 = &OBJC_IVAR___GEOAdvisoryClientCapabilities__downloadOfflineMapActionSupported;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    BOOL v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    BOOL v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189D7BD8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAdvisoryClientCapabilitiesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOAdvisoryClientCapabilitiesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D7BDF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAdvisoryClientCapabilitiesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_39;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        goto LABEL_39;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_41;
        }
        unsigned int v16 = 0;
        while (1)
        {
          uint64_t v17 = *v2;
          uint64_t v18 = *(void *)&a1[v17];
          unint64_t v19 = v18 + 1;
          if (v18 == -1 || v19 > *(void *)&a1[*v3]) {
            break;
          }
          int v20 = *(char *)(*(void *)&a1[*v5] + v18);
          *(void *)&a1[v17] = v19;
          if (v20 < 0)
          {
            BOOL v21 = v16++ > 8;
            if (!v21) {
              continue;
            }
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        BOOL v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_39;
      }
    }
    if ((v8 & 7) != 0) {
      goto LABEL_41;
    }
    unsigned int v22 = 0;
    while (1)
    {
      uint64_t v23 = *v2;
      uint64_t v24 = *(void *)&a1[v23];
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)&a1[*v3]) {
        goto LABEL_36;
      }
      int v26 = *(char *)(*(void *)&a1[*v5] + v24);
      *(void *)&a1[v23] = v25;
      if (v26 < 0)
      {
        BOOL v21 = v22++ > 8;
        if (!v21) {
          continue;
        }
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  BOOL v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOArtworkCapabilitiesReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_32;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_34:
          *(unsigned char *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_37;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189D7CAC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOArtworkCapabilitiesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOArtworkCapabilitiesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D7CB2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOArtworkCapabilitiesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_33;
        }
        unsigned int v16 = 0;
        while (1)
        {
          uint64_t v17 = *v2;
          uint64_t v18 = *(void *)&a1[v17];
          unint64_t v19 = v18 + 1;
          if (v18 == -1 || v19 > *(void *)&a1[*v3]) {
            break;
          }
          int v20 = *(char *)(*(void *)&a1[*v5] + v18);
          *(void *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8) {
            continue;
          }
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        BOOL v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

BOOL GEOAssetReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v23 = *v4;
            uint64_t v24 = *(void *)&v3[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&v3[*v5]) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)&v3[*v7] + v24);
            *(void *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0) {
              goto LABEL_34;
            }
            v20 += 7;
            BOOL v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6]) {
            LODWORD(v22) = 0;
          }
LABEL_36:
          *(_DWORD *)(a1 + 24) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          uint64_t v18 = PBReaderReadString();
          unint64_t v19 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v18;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v27 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v28 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v27;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_39;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_39:
    BOOL v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_189D7DA44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAssetReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOAssetReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D7DAA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAssetIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_37;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8) {
            continue;
          }
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          BOOL v23 = 0;
          goto LABEL_36;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v23;
}

unint64_t GEOBusinessReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 168));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 164);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 160)];
  unsigned int v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 176);
  uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  unsigned int v16 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C6C0), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C6D0), v15)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C6A0), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C6B0), v15))))+ ((v13 >> 2) & 1);
  while (2)
  {
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v20 = v16 > 0xB;
        char v21 = v20 & ~(_BYTE)v12 | v10;
        unsigned __int8 v22 = v20 | v12;
        char v73 = v21;
        char v74 = v22 | v21;
        if ((v22 | v9)) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = a3;
        }
        uint64_t v24 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
        char v75 = (v23 == 0) | v22;
        BOOL v76 = v22;
        char v26 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v16;
LABEL_7:
        uint64_t v17 = v10;
LABEL_8:
        uint64_t v18 = v11;
        uint64_t v19 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        uint64_t v12 = v19;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v24) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v25)) {
      goto LABEL_163;
    }
    char v27 = 0;
    unsigned int v28 = 0;
    unint64_t v29 = 0;
    while (1)
    {
      uint64_t v30 = *v24;
      uint64_t v31 = *(void *)(v3 + v30);
      unint64_t v32 = v31 + 1;
      if (v31 == -1 || v32 > *(void *)(v3 + *v7)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(v3 + *v26) + v31);
      *(void *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0) {
        goto LABEL_25;
      }
      v27 += 7;
      BOOL v34 = v28++ >= 9;
      if (v34)
      {
        unint64_t v29 = 0;
        int v35 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v25) = 1;
LABEL_25:
    int v35 = *(unsigned __int8 *)(v3 + *v25);
    if (*(unsigned char *)(v3 + *v25)) {
      unint64_t v29 = 0;
    }
LABEL_27:
    if (v35 || (v29 & 7) == 4)
    {
LABEL_163:
      int v72 = 1;
      goto LABEL_164;
    }
    unint64_t v37 = v29 >> 3;
    BOOL v38 = v76;
    if ((v75 & 1) == 0)
    {
      char v39 = v23;
      do
      {
        int v41 = *v39++;
        int v40 = v41;
        BOOL v38 = v41 != 0;
        if (v41) {
          BOOL v42 = v40 == v37;
        }
        else {
          BOOL v42 = 1;
        }
      }
      while (!v42);
    }
    if ((int)v37 <= 99)
    {
      switch((int)v37)
      {
        case 1:
          if ((v9 & 1) == 0) {
            goto LABEL_138;
          }
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          *(_DWORD *)(a1 + 176) |= 1u;
          while (2)
          {
            uint64_t v46 = *v24;
            uint64_t v47 = *(void *)(v3 + v46);
            unint64_t v48 = v47 + 1;
            if (v47 == -1 || v48 > *(void *)(v3 + *v7))
            {
              *(unsigned char *)(v3 + *v25) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(v3 + *v26) + v47);
              *(void *)(v3 + v46) = v48;
              v45 |= (unint64_t)(v49 & 0x7F) << v43;
              if (v49 < 0)
              {
                v43 += 7;
                BOOL v34 = v44++ >= 9;
                if (v34)
                {
                  uint64_t v45 = 0;
                  goto LABEL_143;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(v3 + *v25)) {
            uint64_t v45 = 0;
          }
LABEL_143:
          *(void *)(a1 + 24) = v45;
          goto LABEL_162;
        case 3:
          if (!v38) {
            goto LABEL_138;
          }
          if ((*(unsigned char *)(a1 + 177) & 4) == 0)
          {
            uint64_t v51 = PBReaderReadString();
            uint64_t v52 = 88;
            goto LABEL_84;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_198;
          }
          int v66 = (int)(*(_DWORD *)(a1 + 176) << 21) >> 31;
          goto LABEL_160;
        case 5:
          if (!v38) {
            goto LABEL_138;
          }
          if ((*(unsigned char *)(a1 + 177) & 0x10) == 0)
          {
            uint64_t v51 = PBReaderReadString();
            uint64_t v52 = 104;
            goto LABEL_84;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_198;
          }
          int v66 = (int)(*(_DWORD *)(a1 + 176) << 19) >> 31;
          goto LABEL_160;
        case 7:
          if (!v38) {
            goto LABEL_138;
          }
          if ((*(unsigned char *)(a1 + 178) & 4) == 0)
          {
            uint64_t v51 = PBReaderReadString();
            uint64_t v52 = 152;
            goto LABEL_84;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_198;
          }
          int v66 = (int)(*(_DWORD *)(a1 + 176) << 13) >> 31;
          goto LABEL_160;
        case 8:
          if (!v38) {
            goto LABEL_138;
          }
          if ((*(unsigned char *)(a1 + 176) & 8) == 0)
          {
            uint64_t v51 = PBReaderReadString();
            uint64_t v52 = 32;
            goto LABEL_84;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_198;
          }
          int v66 = (int)(*(_DWORD *)(a1 + 176) << 28) >> 31;
          goto LABEL_160;
        case 10:
          if ((v9 & 1) == 0) {
            goto LABEL_138;
          }
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v55 = 0;
          *(_DWORD *)(a1 + 176) |= 2u;
          while (2)
          {
            uint64_t v56 = *v24;
            uint64_t v57 = *(void *)(v3 + v56);
            unint64_t v58 = v57 + 1;
            if (v57 == -1 || v58 > *(void *)(v3 + *v7))
            {
              *(unsigned char *)(v3 + *v25) = 1;
            }
            else
            {
              char v59 = *(unsigned char *)(*(void *)(v3 + *v26) + v57);
              *(void *)(v3 + v56) = v58;
              v55 |= (unint64_t)(v59 & 0x7F) << v53;
              if (v59 < 0)
              {
                v53 += 7;
                BOOL v34 = v54++ >= 9;
                if (v34)
                {
                  uint64_t v55 = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(v3 + *v25)) {
            uint64_t v55 = 0;
          }
LABEL_147:
          *(unsigned char *)(a1 + 172) = v55 != 0;
          goto LABEL_162;
        case 11:
          if (!v38 || (*(unsigned char *)(a1 + 177) & 0x80) != 0) {
            goto LABEL_136;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_198;
          }
          char v50 = objc_alloc_init(GEORating);
          if (!GEORatingReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1)) {
            goto LABEL_197;
          }
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsRating:](a1, v50);
          goto LABEL_129;
        case 12:
          if (!v38) {
            goto LABEL_138;
          }
          if ((*(unsigned char *)(a1 + 177) & 2) == 0)
          {
            uint64_t v51 = PBReaderReadString();
            uint64_t v52 = 80;
LABEL_84:
            char v60 = *(void **)(a1 + v52);
            *(void *)(a1 + v52) = v51;
            goto LABEL_85;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_198;
          }
          int v66 = (int)(*(_DWORD *)(a1 + 176) << 22) >> 31;
          goto LABEL_160;
        case 13:
          if (!v38 || (*(unsigned char *)(a1 + 176) & 0x40) != 0) {
            goto LABEL_136;
          }
          PBReaderReadString();
          char v50 = (GEORating *)objc_claimAutoreleasedReturnValue();
          if (v50) {
            -[GEOBusiness _addNoFlagsCategory:](a1, v50);
          }
          goto LABEL_129;
        case 14:
          if (!v38 || (*(unsigned char *)(a1 + 177) & 0x20) != 0) {
            goto LABEL_136;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_198;
          }
          char v50 = objc_alloc_init(GEOPhoto);
          if (!GEOPhotoReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1)) {
            goto LABEL_197;
          }
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsPhoto:](a1, v50);
          goto LABEL_129;
        case 15:
          if (!v38 || (*(unsigned char *)(a1 + 176) & 0x10) != 0) {
            goto LABEL_136;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_198;
          }
          char v50 = objc_alloc_init(GEOAttributeKeyValue);
          if (!GEOAttributeKeyValueReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1)) {
            goto LABEL_197;
          }
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsAttributeKeyValue:](a1, v50);
          goto LABEL_129;
        case 16:
          if (!v38 || (*(unsigned char *)(a1 + 177) & 8) != 0) {
            goto LABEL_136;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_198;
          }
          char v50 = objc_alloc_init(GEOHours);
          if (!GEOHoursReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1)) {
            goto LABEL_197;
          }
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsOpenHours:](a1, v50);
          goto LABEL_129;
        case 17:
          if (!v38) {
            goto LABEL_138;
          }
          if ((*(unsigned char *)(a1 + 176) & 0x80) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_198;
            }
            int v66 = (int)(*(_DWORD *)(a1 + 176) << 24) >> 31;
LABEL_160:
            v8 += v66;
          }
          else
          {
            if ((PBReaderPlaceMark() & 1) == 0) {
              goto LABEL_198;
            }
            char v50 = objc_alloc_init(GEOLatLng);
            if (!GEOLatLngReadAllFrom((uint64_t)v50, (void *)v3)) {
              goto LABEL_197;
            }
            PBReaderRecallMark();
            char v60 = *(void **)(a1 + 64);
            *(void *)(a1 + 64) = v50;
LABEL_85:

            --v8;
          }
          break;
        case 19:
          if (!v38 || (*(unsigned char *)(a1 + 177) & 1) != 0) {
            goto LABEL_136;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_198;
          }
          char v50 = objc_alloc_init(GEOCategory);
          if (!GEOCategoryReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1)) {
            goto LABEL_197;
          }
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsLocalizedCategories:](a1, v50);
          goto LABEL_129;
        case 20:
          if (!v38 || (*(unsigned char *)(a1 + 176) & 0x20) != 0) {
            goto LABEL_136;
          }
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_198;
          }
          char v50 = objc_alloc_init(GEOSearchAttribution);
          if (!GEOSearchAttributionReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1)) {
            goto LABEL_197;
          }
          PBReaderRecallMark();
          -[GEOBusiness _addNoFlagsAttribution:](a1, v50);
          goto LABEL_129;
        default:
          goto LABEL_130;
      }
      goto LABEL_161;
    }
    if (v37 == 100) {
      break;
    }
    if (v37 == 101)
    {
      if (!v38 || (*(unsigned char *)(a1 + 178) & 2) != 0) {
        goto LABEL_136;
      }
      PBReaderReadString();
      char v50 = (GEORating *)objc_claimAutoreleasedReturnValue();
      if (v50) {
        -[GEOBusiness _addNoFlagsStarRating:](a1, v50);
      }
LABEL_129:

LABEL_161:
      unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
      unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
      char v26 = (int *)MEMORY[0x1E4F940B8];
      goto LABEL_162;
    }
    if (v37 == 102)
    {
      if (!v38 || (*(unsigned char *)(a1 + 177) & 0x40) != 0) {
        goto LABEL_136;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_198;
      }
      char v50 = objc_alloc_init(GEOPlaceDataAmendment);
      if (!GEOPlaceDataAmendmentReadAllFrom((uint64_t)v50, (void *)v3)) {
        goto LABEL_197;
      }
      PBReaderRecallMark();
      -[GEOBusiness _addNoFlagsPlaceDataAmendment:](a1, v50);
      goto LABEL_129;
    }
LABEL_130:
    if ((v73 & 1) == 0 || (*(unsigned char *)(a1 + 176) & 4) != 0)
    {
LABEL_138:
      char v65 = PBReaderSkipValueWithTag();
      char v26 = (int *)MEMORY[0x1E4F940B8];
      unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
      unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
      if ((v65 & 1) == 0)
      {
LABEL_196:
        int v72 = 0;
        goto LABEL_164;
      }
    }
    else
    {
      if (!*(void *)(a1 + 16))
      {
        id v61 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        __int16 v62 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v61;
      }
      int v63 = PBUnknownFieldAdd();
      unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
      unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
      char v26 = (int *)MEMORY[0x1E4F940B8];
      if (!v63)
      {
        int v72 = 0;
        goto LABEL_165;
      }
    }
LABEL_162:
    if (!(v74 & 1 | (v8 != 0))) {
      goto LABEL_163;
    }
  }
  if (!v38 || (*(unsigned char *)(a1 + 178) & 1) != 0)
  {
LABEL_136:
    char v64 = PBReaderSkipValueWithTag();
    unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
    unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
    char v26 = (int *)MEMORY[0x1E4F940B8];
    if ((v64 & 1) == 0) {
      goto LABEL_196;
    }
    goto LABEL_162;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_198;
  }
  char v50 = objc_alloc_init(GEOSource);
  if (GEOSourceReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
  {
    PBReaderRecallMark();
    -[GEOBusiness _addNoFlagsSource:](a1, v50);
    goto LABEL_129;
  }
LABEL_197:

LABEL_198:
  int v72 = 0;
  unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
LABEL_164:
  if ((v73 & 1) == 0) {
    goto LABEL_166;
  }
LABEL_165:
  *(_DWORD *)(a1 + 176) |= 4u;
LABEL_166:
  if (v76 || (v72 & 1) == 0)
  {
    *(_DWORD *)(a1 + 176) |= 0x400u;
    *(_DWORD *)(a1 + 176) |= 0x1000u;
    *(_DWORD *)(a1 + 176) |= 0x40000u;
    *(_DWORD *)(a1 + 176) |= 8u;
    *(_DWORD *)(a1 + 176) |= 0x200u;
    *(_DWORD *)(a1 + 176) |= 0x8000u;
    *(_DWORD *)(a1 + 176) |= 0x40u;
    *(_DWORD *)(a1 + 176) |= 0x2000u;
    *(_DWORD *)(a1 + 176) |= 0x10u;
    *(_DWORD *)(a1 + 176) |= 0x800u;
    *(_DWORD *)(a1 + 176) |= 0x80u;
    *(_DWORD *)(a1 + 176) |= 0x100u;
    *(_DWORD *)(a1 + 176) |= 0x20u;
    *(_DWORD *)(a1 + 176) |= 0x10000u;
    *(_DWORD *)(a1 + 176) |= 0x20000u;
    *(_DWORD *)(a1 + 176) |= 0x4000u;
    goto LABEL_190;
  }
  if (v23)
  {
    while (1)
    {
      int v68 = *v23++;
      int v67 = v68;
      if (v68 <= 99)
      {
        int v69 = 1024;
        switch(v67)
        {
          case 0:
            goto LABEL_190;
          case 3:
            goto LABEL_189;
          case 5:
            int v69 = 4096;
            goto LABEL_189;
          case 7:
            int v69 = 0x40000;
            goto LABEL_189;
          case 8:
            int v69 = 8;
            goto LABEL_189;
          case 11:
            int v69 = 0x8000;
            goto LABEL_189;
          case 12:
            int v69 = 512;
            goto LABEL_189;
          case 13:
            int v69 = 64;
            goto LABEL_189;
          case 14:
            int v69 = 0x2000;
            goto LABEL_189;
          case 15:
            int v69 = 16;
            goto LABEL_189;
          case 16:
            int v69 = 2048;
            goto LABEL_189;
          case 17:
            int v69 = 128;
            goto LABEL_189;
          case 19:
            int v69 = 256;
            goto LABEL_189;
          case 20:
            int v69 = 32;
            goto LABEL_189;
          default:
            continue;
        }
        break;
      }
      switch(v67)
      {
        case 'd':
          int v69 = 0x10000;
          break;
        case 'e':
          int v69 = 0x20000;
          break;
        case 'f':
          int v69 = 0x4000;
          break;
        default:
          continue;
      }
LABEL_189:
      *(_DWORD *)(a1 + 176) |= v69;
    }
  }
LABEL_190:
  if (v72) {
    unint64_t v3 = *(unsigned char *)(v3 + *v25) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v76)
  {
    v70 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189D7F1FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D7F374(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D7F4B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D7F654(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D7F7CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D7FB90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8013C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D80504(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D808C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D80C24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D811D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8159C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D84410(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOBusinessCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id v2 = a1[16];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v70 objects:v81 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v71;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v71 != v5) {
          objc_enumerationMutation(v2);
        }
        -[GEORating readAll:](*(void *)(*((void *)&v70 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v70 objects:v81 count:16];
    }
    while (v4);
  }

  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id v7 = a1[14];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v66 objects:v80 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v67;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v67 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v66 + 1) + 8 * v11++) readAll:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v66 objects:v80 count:16];
    }
    while (v9);
  }

  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v12 = a1[5];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v62 objects:v79 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v63;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v63 != v15) {
          objc_enumerationMutation(v12);
        }
        -[GEOAttributeKeyValue readAll:](*(void *)(*((void *)&v62 + 1) + 8 * v16++), 1);
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v62 objects:v79 count:16];
    }
    while (v14);
  }

  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v17 = a1[12];
  uint64_t v18 = [v17 countByEnumeratingWithState:&v58 objects:v78 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v59;
    do
    {
      uint64_t v21 = 0;
      do
      {
        if (*(void *)v59 != v20) {
          objc_enumerationMutation(v17);
        }
        -[GEOHours readAll:](*(void *)(*((void *)&v58 + 1) + 8 * v21++), 1);
      }
      while (v19 != v21);
      uint64_t v19 = [v17 countByEnumeratingWithState:&v58 objects:v78 count:16];
    }
    while (v19);
  }

  [a1[8] readAll:1];
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  id v22 = a1[9];
  uint64_t v23 = [v22 countByEnumeratingWithState:&v54 objects:v77 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v55;
    do
    {
      uint64_t v26 = 0;
      do
      {
        if (*(void *)v55 != v25) {
          objc_enumerationMutation(v22);
        }
        [*(id *)(*((void *)&v54 + 1) + 8 * v26++) readAll:1];
      }
      while (v24 != v26);
      uint64_t v24 = [v22 countByEnumeratingWithState:&v54 objects:v77 count:16];
    }
    while (v24);
  }

  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v27 = a1[6];
  uint64_t v28 = [v27 countByEnumeratingWithState:&v50 objects:v76 count:16];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)v51;
    do
    {
      uint64_t v31 = 0;
      do
      {
        if (*(void *)v51 != v30) {
          objc_enumerationMutation(v27);
        }
        [*(id *)(*((void *)&v50 + 1) + 8 * v31++) readAll:1];
      }
      while (v29 != v31);
      uint64_t v29 = [v27 countByEnumeratingWithState:&v50 objects:v76 count:16];
    }
    while (v29);
  }

  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id v32 = a1[17];
  uint64_t v33 = [v32 countByEnumeratingWithState:&v46 objects:v75 count:16];
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)v47;
    do
    {
      uint64_t v36 = 0;
      do
      {
        if (*(void *)v47 != v35) {
          objc_enumerationMutation(v32);
        }
        [*(id *)(*((void *)&v46 + 1) + 8 * v36++) readAll:1];
      }
      while (v34 != v36);
      uint64_t v34 = [v32 countByEnumeratingWithState:&v46 objects:v75 count:16];
    }
    while (v34);
  }

  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v37 = a1[15];
  uint64_t v38 = [v37 countByEnumeratingWithState:&v42 objects:v74 count:16];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = *(void *)v43;
    do
    {
      uint64_t v41 = 0;
      do
      {
        if (*(void *)v43 != v40) {
          objc_enumerationMutation(v37);
        }
        objc_msgSend(*(id *)(*((void *)&v42 + 1) + 8 * v41++), "readAll:", 1, (void)v42);
      }
      while (v39 != v41);
      uint64_t v39 = [v37 countByEnumeratingWithState:&v42 objects:v74 count:16];
    }
    while (v39);
  }
}

unint64_t GEOBusinessReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 164))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOBusinessReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 160) = [v8 position];
  *(_DWORD *)(a1 + 164) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOBusinessReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOBusinessReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOBusinessReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOBusinessCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 168));
  return Specified;
}

void sub_189D84AF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBusinessReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOBusinessReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D84B5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOBusinessIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_295:
    BOOL v126 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v126;
  }
  uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    if (a1[*v4]) {
      goto LABEL_295;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_295;
    }
    unint64_t v17 = v8 >> 3;
    if ((int)(v8 >> 3) <= 99) {
      break;
    }
    switch(v17)
    {
      case 'd':
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOSourceIsValid(a1)) {
          goto LABEL_301;
        }
        break;
      case 'e':
        if (v15 != 2) {
          goto LABEL_301;
        }
LABEL_288:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_301;
        }
        goto LABEL_289;
      case 'f':
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceDataAmendmentIsValid(a1)) {
          goto LABEL_301;
        }
        break;
      default:
        goto LABEL_288;
    }
LABEL_286:
    PBReaderRecallMark();
LABEL_289:
    if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
      goto LABEL_295;
    }
  }
  switch((int)v17)
  {
    case 1:
      if ((v8 & 7) != 0) {
        goto LABEL_301;
      }
      unsigned int v18 = 0;
      while (1)
      {
        uint64_t v19 = *v2;
        uint64_t v20 = *(void *)&a1[v19];
        unint64_t v21 = v20 + 1;
        if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
          goto LABEL_51;
        }
        int v22 = *(char *)(*(void *)&a1[*v5] + v20);
        *(void *)&a1[v19] = v21;
        if (v22 < 0)
        {
          BOOL v23 = v18++ > 8;
          if (!v23) {
            continue;
          }
        }
        goto LABEL_289;
      }
    case 3:
      if (v15 == 2) {
        goto LABEL_288;
      }
      goto LABEL_301;
    case 5:
      if (v15 == 2) {
        goto LABEL_288;
      }
      goto LABEL_301;
    case 7:
      if (v15 == 2) {
        goto LABEL_288;
      }
      goto LABEL_301;
    case 8:
      if (v15 == 2) {
        goto LABEL_288;
      }
      goto LABEL_301;
    case 10:
      if ((v8 & 7) != 0) {
        goto LABEL_301;
      }
      unsigned int v24 = 0;
      while (1)
      {
        uint64_t v25 = *v2;
        uint64_t v26 = *(void *)&a1[v25];
        unint64_t v27 = v26 + 1;
        if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
          break;
        }
        int v28 = *(char *)(*(void *)&a1[*v5] + v26);
        *(void *)&a1[v25] = v27;
        if (v28 < 0)
        {
          BOOL v23 = v24++ > 8;
          if (!v23) {
            continue;
          }
        }
        goto LABEL_289;
      }
LABEL_51:
      a1[*v4] = 1;
      goto LABEL_289;
    case 11:
      if (v15 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_301;
      }
      objc_msgSend(a1, "position", 0, 0);
      [a1 length];
LABEL_55:
      while (2)
      {
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_291;
          }
          char v29 = 0;
          unsigned int v30 = 0;
          unint64_t v31 = 0;
          while (2)
          {
            uint64_t v32 = *v2;
            uint64_t v33 = *(void *)&a1[v32];
            unint64_t v34 = v33 + 1;
            if (v33 == -1 || v34 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)&a1[*v5] + v33);
              *(void *)&a1[v32] = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                BOOL v13 = v30++ >= 9;
                if (v13)
                {
                  unint64_t v31 = 0;
                  uint64_t v36 = *v4;
                  int v37 = a1[v36];
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v36 = *v4;
          int v37 = a1[v36];
          if (a1[v36]) {
            unint64_t v31 = 0;
          }
LABEL_67:
          int v38 = v31 & 7;
          if (v37) {
            BOOL v39 = 1;
          }
          else {
            BOOL v39 = v38 == 4;
          }
          if (v39)
          {
LABEL_291:
            int v124 = a1[*v4];
            PBReaderRecallMark();
            if (v124) {
              goto LABEL_301;
            }
            goto LABEL_286;
          }
          switch((v31 >> 3))
          {
            case 1u:
            case 2u:
              if (v38 != 1) {
                goto LABEL_300;
              }
              uint64_t v40 = *v2;
              unint64_t v41 = *(void *)&a1[v40];
              if (v41 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_169;
              }
              unint64_t v42 = v41 + 8;
              if (v42 > *(void *)&a1[*v3]) {
                goto LABEL_169;
              }
              *(void *)&a1[v40] = v42;
              continue;
            case 3u:
              if ((v31 & 7) != 0) {
                goto LABEL_300;
              }
              unsigned int v43 = 0;
              while (1)
              {
                uint64_t v44 = *v2;
                uint64_t v45 = *(void *)&a1[v44];
                unint64_t v46 = v45 + 1;
                if (v45 == -1 || v46 > *(void *)&a1[*v3]) {
                  goto LABEL_168;
                }
                int v47 = *(char *)(*(void *)&a1[*v5] + v45);
                *(void *)&a1[v44] = v46;
                if (v47 < 0)
                {
                  BOOL v23 = v43++ > 8;
                  if (!v23) {
                    continue;
                  }
                }
                goto LABEL_55;
              }
            case 4u:
              if (v38 == 2) {
                goto LABEL_171;
              }
              goto LABEL_300;
            case 5u:
              if (v38 == 2) {
                goto LABEL_171;
              }
              goto LABEL_300;
            case 6u:
              if (v38 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_300;
              }
              [a1 position];
              [a1 length];
LABEL_91:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_173;
              }
              char v48 = 0;
              unsigned int v49 = 0;
              unint64_t v50 = 0;
              break;
            case 7u:
              if ((v31 & 7) != 0) {
                goto LABEL_300;
              }
              unsigned int v78 = 0;
              while (1)
              {
                uint64_t v79 = *v2;
                uint64_t v80 = *(void *)&a1[v79];
                unint64_t v81 = v80 + 1;
                if (v80 == -1 || v81 > *(void *)&a1[*v3]) {
                  break;
                }
                int v82 = *(char *)(*(void *)&a1[*v5] + v80);
                *(void *)&a1[v79] = v81;
                if (v82 < 0)
                {
                  BOOL v23 = v78++ > 8;
                  if (!v23) {
                    continue;
                  }
                }
                goto LABEL_55;
              }
LABEL_168:
              uint64_t v36 = *v4;
LABEL_169:
              a1[v36] = 1;
              continue;
            case 8u:
              if (v38 == 2) {
                goto LABEL_171;
              }
              goto LABEL_300;
            default:
LABEL_171:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_300;
              }
              continue;
          }
          break;
        }
        while (1)
        {
          uint64_t v51 = *v2;
          uint64_t v52 = *(void *)&a1[v51];
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)&a1[*v3]) {
            break;
          }
          char v54 = *(unsigned char *)(*(void *)&a1[*v5] + v52);
          *(void *)&a1[v51] = v53;
          v50 |= (unint64_t)(v54 & 0x7F) << v48;
          if ((v54 & 0x80) == 0) {
            goto LABEL_101;
          }
          v48 += 7;
          BOOL v13 = v49++ >= 9;
          if (v13)
          {
            unint64_t v50 = 0;
            uint64_t v55 = *v4;
            int v56 = a1[v55];
            goto LABEL_103;
          }
        }
        a1[*v4] = 1;
LABEL_101:
        uint64_t v55 = *v4;
        int v56 = a1[v55];
        if (a1[v55]) {
          unint64_t v50 = 0;
        }
LABEL_103:
        int v57 = v50 & 7;
        if (v56) {
          BOOL v58 = 1;
        }
        else {
          BOOL v58 = v57 == 4;
        }
        if (v58)
        {
LABEL_173:
          int v83 = a1[*v4];
          PBReaderRecallMark();
          if (!v83)
          {
            PBReaderRecallMark();
            continue;
          }
        }
        else
        {
          switch((v50 >> 3))
          {
            case 1u:
              if (v57 != 2) {
                goto LABEL_299;
              }
              goto LABEL_146;
            case 2u:
            case 3u:
              if (v57 != 1) {
                goto LABEL_299;
              }
              uint64_t v59 = *v2;
              unint64_t v60 = *(void *)&a1[v59];
              if (v60 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_159;
              }
              unint64_t v61 = v60 + 8;
              if (v61 > *(void *)&a1[*v3]) {
                goto LABEL_159;
              }
              *(void *)&a1[v59] = v61;
              goto LABEL_91;
            case 4u:
              if (v57 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_299;
              }
              [a1 position];
              [a1 length];
              break;
            case 5u:
              if (v57 == 2) {
                goto LABEL_146;
              }
              goto LABEL_299;
            case 6u:
              if (v57 == 2) {
                goto LABEL_146;
              }
              goto LABEL_299;
            case 7u:
              if ((v50 & 7) != 0) {
                goto LABEL_299;
              }
              unsigned int v72 = 0;
              while (1)
              {
                uint64_t v73 = *v2;
                uint64_t v74 = *(void *)&a1[v73];
                unint64_t v75 = v74 + 1;
                if (v74 == -1 || v75 > *(void *)&a1[*v3]) {
                  break;
                }
                int v76 = *(char *)(*(void *)&a1[*v5] + v74);
                *(void *)&a1[v73] = v75;
                if (v76 < 0)
                {
                  BOOL v23 = v72++ > 8;
                  if (!v23) {
                    continue;
                  }
                }
                goto LABEL_91;
              }
              uint64_t v55 = *v4;
LABEL_159:
              a1[v55] = 1;
              goto LABEL_91;
            default:
LABEL_146:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_299;
              }
              goto LABEL_91;
          }
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v62 = 0;
            unsigned int v63 = 0;
            unint64_t v64 = 0;
            while (1)
            {
              uint64_t v65 = *v2;
              uint64_t v66 = *(void *)&a1[v65];
              unint64_t v67 = v66 + 1;
              if (v66 == -1 || v67 > *(void *)&a1[*v3]) {
                break;
              }
              char v68 = *(unsigned char *)(*(void *)&a1[*v5] + v66);
              *(void *)&a1[v65] = v67;
              v64 |= (unint64_t)(v68 & 0x7F) << v62;
              if ((v68 & 0x80) == 0) {
                goto LABEL_127;
              }
              v62 += 7;
              BOOL v13 = v63++ >= 9;
              if (v13)
              {
                unint64_t v64 = 0;
                int v69 = a1[*v4];
                goto LABEL_129;
              }
            }
            a1[*v4] = 1;
LABEL_127:
            int v69 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v64 = 0;
            }
LABEL_129:
            int v70 = v64 & 7;
            if (v69 || v70 == 4) {
              break;
            }
            if ((v64 >> 3) == 2)
            {
              if (v70 == 2 && PBReaderPlaceMark() && GEOPhotoIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
LABEL_298:
              PBReaderRecallMark();
              goto LABEL_299;
            }
            if ((v64 >> 3) == 1 && v70 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_298;
            }
          }
          int v77 = a1[*v4];
          PBReaderRecallMark();
          if (!v77)
          {
            PBReaderRecallMark();
            goto LABEL_91;
          }
LABEL_299:
          PBReaderRecallMark();
        }
        break;
      }
LABEL_300:
      PBReaderRecallMark();
LABEL_301:
      PBReaderRecallMark();
      return 0;
    case 12:
      if (v15 == 2) {
        goto LABEL_288;
      }
      goto LABEL_301;
    case 13:
      if (v15 == 2) {
        goto LABEL_288;
      }
      goto LABEL_301;
    case 14:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOPhotoIsValid(a1)) {
        goto LABEL_301;
      }
      goto LABEL_286;
    case 15:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDSearchStringStringPairIsValid(a1)) {
        goto LABEL_301;
      }
      goto LABEL_286;
    case 16:
      if (v15 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_301;
      }
      [a1 position];
      [a1 length];
LABEL_190:
      while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
      {
        char v84 = 0;
        unsigned int v85 = 0;
        unint64_t v86 = 0;
        while (2)
        {
          uint64_t v87 = *v2;
          uint64_t v88 = *(void *)&a1[v87];
          unint64_t v89 = v88 + 1;
          if (v88 == -1 || v89 > *(void *)&a1[*v3])
          {
            a1[*v4] = 1;
          }
          else
          {
            char v90 = *(unsigned char *)(*(void *)&a1[*v5] + v88);
            *(void *)&a1[v87] = v89;
            v86 |= (unint64_t)(v90 & 0x7F) << v84;
            if (v90 < 0)
            {
              v84 += 7;
              BOOL v13 = v85++ >= 9;
              if (v13)
              {
                unint64_t v86 = 0;
                int v91 = a1[*v4];
                goto LABEL_202;
              }
              continue;
            }
          }
          break;
        }
        int v91 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v86 = 0;
        }
LABEL_202:
        int v92 = v86 & 7;
        if (v91) {
          BOOL v93 = 1;
        }
        else {
          BOOL v93 = v92 == 4;
        }
        if (!v93)
        {
          if ((v86 >> 3) != 2)
          {
            if ((v86 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_300;
              }
              continue;
            }
            if (v92 == 2)
            {
              if (!PBReaderPlaceMark()) {
                goto LABEL_300;
              }
LABEL_260:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
              {
                unsigned int v119 = a1[*v4];
                if (a1[*v4]) {
                  break;
                }
                while (1)
                {
                  uint64_t v120 = *v2;
                  uint64_t v121 = *(void *)&a1[v120];
                  unint64_t v122 = v121 + 1;
                  if (v121 == -1 || v122 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v123 = *(char *)(*(void *)&a1[*v5] + v121);
                  *(void *)&a1[v120] = v122;
                  if (v123 < 0)
                  {
                    BOOL v13 = v119++ >= 9;
                    if (!v13) {
                      continue;
                    }
                  }
                  goto LABEL_260;
                }
                a1[*v4] = 1;
              }
LABEL_269:
              PBReaderRecallMark();
              continue;
            }
            if ((v86 & 7) == 0)
            {
              do
              {
                uint64_t v94 = *v2;
                uint64_t v95 = *(void *)&a1[v94];
                unint64_t v96 = v95 + 1;
                if (v95 == -1 || v96 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_190;
                }
                int v97 = *(char *)(*(void *)&a1[*v5] + v95);
                *(void *)&a1[v94] = v96;
                if ((v97 & 0x80000000) == 0) {
                  break;
                }
                unsigned int v98 = v92++;
              }
              while (v98 <= 8);
              continue;
            }
            goto LABEL_300;
          }
          if (v92 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_300;
          }
          [a1 position];
          [a1 length];
          while (1)
          {
LABEL_218:
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_257;
            }
            char v99 = 0;
            unsigned int v100 = 0;
            unint64_t v101 = 0;
            while (1)
            {
              uint64_t v102 = *v2;
              uint64_t v103 = *(void *)&a1[v102];
              unint64_t v104 = v103 + 1;
              if (v103 == -1 || v104 > *(void *)&a1[*v3]) {
                break;
              }
              char v105 = *(unsigned char *)(*(void *)&a1[*v5] + v103);
              *(void *)&a1[v102] = v104;
              v101 |= (unint64_t)(v105 & 0x7F) << v99;
              if ((v105 & 0x80) == 0) {
                goto LABEL_228;
              }
              v99 += 7;
              BOOL v13 = v100++ >= 9;
              if (v13)
              {
                unint64_t v101 = 0;
                int v106 = a1[*v4];
                goto LABEL_230;
              }
            }
            a1[*v4] = 1;
LABEL_228:
            int v106 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v101 = 0;
            }
LABEL_230:
            if (v106 || (v101 & 7) == 4)
            {
LABEL_257:
              int v118 = a1[*v4];
              PBReaderRecallMark();
              if (v118) {
                goto LABEL_300;
              }
              goto LABEL_269;
            }
            if ((v101 >> 3) == 2) {
              break;
            }
            if ((v101 >> 3) == 1)
            {
              if ((v101 & 7) != 0) {
                goto LABEL_296;
              }
              unsigned int v108 = 0;
              while (1)
              {
                uint64_t v109 = *v2;
                uint64_t v110 = *(void *)&a1[v109];
                unint64_t v111 = v110 + 1;
                if (v110 == -1 || v111 > *(void *)&a1[*v3]) {
                  break;
                }
                int v112 = *(char *)(*(void *)&a1[*v5] + v110);
                *(void *)&a1[v109] = v111;
                if (v112 < 0)
                {
                  BOOL v23 = v108++ > 8;
                  if (!v23) {
                    continue;
                  }
                }
                goto LABEL_218;
              }
LABEL_252:
              a1[*v4] = 1;
              continue;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
LABEL_296:
              PBReaderRecallMark();
              goto LABEL_300;
            }
          }
          if ((v101 & 7) != 0) {
            goto LABEL_296;
          }
          unsigned int v113 = 0;
          while (1)
          {
            uint64_t v114 = *v2;
            uint64_t v115 = *(void *)&a1[v114];
            unint64_t v116 = v115 + 1;
            if (v115 == -1 || v116 > *(void *)&a1[*v3]) {
              goto LABEL_252;
            }
            int v117 = *(char *)(*(void *)&a1[*v5] + v115);
            *(void *)&a1[v114] = v116;
            if (v117 < 0)
            {
              BOOL v23 = v113++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_218;
          }
        }
        break;
      }
      int v125 = a1[*v4];
      PBReaderRecallMark();
      if (v125) {
        goto LABEL_301;
      }
      goto LABEL_286;
    case 17:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
        goto LABEL_301;
      }
      goto LABEL_286;
    case 19:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOCategoryIsValid(a1)) {
        goto LABEL_301;
      }
      goto LABEL_286;
    case 20:
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOSearchAttributionIsValid(a1)) {
        goto LABEL_301;
      }
      goto LABEL_286;
    default:
      goto LABEL_288;
  }
}

BOOL GEOPhotoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_39;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_39;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3) {
        break;
      }
      if (v17 != 2)
      {
        if (v17 == 1)
        {
          if ((v8 & 7) != 0) {
            goto LABEL_41;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              break;
            }
            int v22 = *(char *)(*(void *)&a1[*v5] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0 && v18++ <= 8) {
              continue;
            }
            goto LABEL_38;
          }
          a1[*v4] = 1;
          goto LABEL_38;
        }
        goto LABEL_35;
      }
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOPhotoInfoIsValid(a1))
      {
LABEL_41:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_38:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_39;
      }
    }
    if (v15 != 2) {
      goto LABEL_41;
    }
LABEL_35:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
LABEL_39:
  BOOL v24 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v24;
}

BOOL GEOCategoryIsValid(char *a1)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  v39[0] = 0;
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    BOOL v36 = 0;
  }
  else
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          uint64_t v17 = 0;
          char v18 = 1;
          while (1)
          {
            char v19 = v18;
            int v20 = *((_DWORD *)v39 + v17);
            if (!v20) {
              break;
            }
            if (v20 != 1)
            {
              char v18 = 0;
              uint64_t v17 = 1;
              if (v19) {
                continue;
              }
            }
            goto LABEL_60;
          }
          *((_DWORD *)v39 + v17) = 1;
          if (v15 != 2) {
            goto LABEL_60;
          }
          goto LABEL_42;
        case 2u:
          uint64_t v21 = 0;
          char v22 = 1;
          while (1)
          {
            char v23 = v22;
            int v24 = *((_DWORD *)v39 + v21);
            if (!v24) {
              break;
            }
            if (v24 != 2)
            {
              char v22 = 0;
              uint64_t v21 = 1;
              if (v23) {
                continue;
              }
            }
            goto LABEL_60;
          }
          *((_DWORD *)v39 + v21) = 2;
          if (v15)
          {
LABEL_60:
            PBReaderRecallMark();
            return 0;
          }
          unsigned int v31 = 0;
          while (1)
          {
            uint64_t v32 = *v2;
            uint64_t v33 = *(void *)&a1[v32];
            unint64_t v34 = v33 + 1;
            if (v33 == -1 || v34 > *(void *)&a1[*v3]) {
              break;
            }
            int v35 = *(char *)(*(void *)&a1[*v5] + v33);
            *(void *)&a1[v32] = v34;
            if (v35 < 0)
            {
              BOOL v30 = v31++ > 8;
              if (!v30) {
                continue;
              }
            }
            goto LABEL_53;
          }
LABEL_52:
          a1[*v4] = 1;
LABEL_53:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_54;
          }
          break;
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_60;
          }
          unsigned int v25 = 0;
          while (1)
          {
            uint64_t v26 = *v2;
            uint64_t v27 = *(void *)&a1[v26];
            unint64_t v28 = v27 + 1;
            if (v27 == -1 || v28 > *(void *)&a1[*v3]) {
              goto LABEL_52;
            }
            int v29 = *(char *)(*(void *)&a1[*v5] + v27);
            *(void *)&a1[v26] = v28;
            if (v29 < 0)
            {
              BOOL v30 = v25++ > 8;
              if (!v30) {
                continue;
              }
            }
            goto LABEL_53;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedNameIsValid(a1)) {
            goto LABEL_60;
          }
          PBReaderRecallMark();
          goto LABEL_53;
        default:
LABEL_42:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_60;
          }
          goto LABEL_53;
      }
    }
LABEL_54:
    BOOL v36 = HIDWORD(v39[0]) != 0;
  }
  if (a1[*v4]) {
    BOOL v37 = 0;
  }
  else {
    BOOL v37 = v36;
  }
  PBReaderRecallMark();
  return v37;
}

BOOL GEOSearchAttributionIsValid(char *a1)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  v35[0] = 0;
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_54;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4)
      {
LABEL_54:
        BOOL v32 = HIDWORD(v35[0]) != 0;
        goto LABEL_48;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 1) {
        break;
      }
      if (v17 == 3)
      {
        if (v15 != 2) {
          goto LABEL_52;
        }
LABEL_43:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_52;
        }
        goto LABEL_44;
      }
      if (v17 != 2) {
        goto LABEL_43;
      }
      uint64_t v18 = 0;
      char v19 = 1;
      while (1)
      {
        char v20 = v19;
        int v21 = *((_DWORD *)v35 + v18);
        if (!v21) {
          break;
        }
        if (v21 != 2)
        {
          char v19 = 0;
          uint64_t v18 = 1;
          if (v20) {
            continue;
          }
        }
        goto LABEL_52;
      }
      *((_DWORD *)v35 + v18) = 2;
      if (v15) {
        goto LABEL_52;
      }
      unsigned int v26 = 0;
      while (1)
      {
        uint64_t v27 = *v2;
        uint64_t v28 = *(void *)&a1[v27];
        unint64_t v29 = v28 + 1;
        if (v28 == -1 || v29 > *(void *)&a1[*v3]) {
          break;
        }
        int v30 = *(char *)(*(void *)&a1[*v5] + v28);
        *(void *)&a1[v27] = v29;
        if (v30 < 0 && v26++ <= 8) {
          continue;
        }
        goto LABEL_44;
      }
      a1[*v4] = 1;
LABEL_44:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_54;
      }
    }
    uint64_t v22 = 0;
    char v23 = 1;
    while (1)
    {
      char v24 = v23;
      int v25 = *((_DWORD *)v35 + v22);
      if (!v25) {
        break;
      }
      if (v25 != 1)
      {
        char v23 = 0;
        uint64_t v22 = 1;
        if (v24) {
          continue;
        }
      }
      goto LABEL_52;
    }
    *((_DWORD *)v35 + v22) = 1;
    if (v15 != 2)
    {
LABEL_52:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_43;
  }
  BOOL v32 = 0;
LABEL_48:
  if (a1[*v4]) {
    BOOL v33 = 0;
  }
  else {
    BOOL v33 = v32;
  }
  PBReaderRecallMark();
  return v33;
}

BOOL GEOSourceIsValid(char *a1)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  v29[0] = 0;
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_39;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4)
      {
LABEL_39:
        BOOL v26 = HIDWORD(v29[0]) != 0;
        goto LABEL_41;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 1)
      {
        uint64_t v22 = 0;
        char v23 = 1;
        while (1)
        {
          char v24 = v23;
          int v25 = *((_DWORD *)v29 + v22);
          if (!v25) {
            break;
          }
          if (v25 != 1)
          {
            char v23 = 0;
            uint64_t v22 = 1;
            if (v24) {
              continue;
            }
          }
          goto LABEL_45;
        }
        *((_DWORD *)v29 + v22) = 1;
        if (v15 != 2)
        {
LABEL_45:
          PBReaderRecallMark();
          return 0;
        }
      }
      else if (v17 == 3)
      {
        if (v15 != 2) {
          goto LABEL_45;
        }
      }
      else if (v17 == 2)
      {
        uint64_t v18 = 0;
        char v19 = 1;
        while (1)
        {
          char v20 = v19;
          int v21 = *((_DWORD *)v29 + v18);
          if (!v21) {
            break;
          }
          if (v21 != 2)
          {
            char v19 = 0;
            uint64_t v18 = 1;
            if (v20) {
              continue;
            }
          }
          goto LABEL_45;
        }
        *((_DWORD *)v29 + v18) = 2;
        if (v15 != 2) {
          goto LABEL_45;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_45;
      }
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_39;
      }
    }
  }
  BOOL v26 = 0;
LABEL_41:
  if (a1[*v4]) {
    BOOL v27 = 0;
  }
  else {
    BOOL v27 = v26;
  }
  PBReaderRecallMark();
  return v27;
}

BOOL GEOPlaceDataAmendmentIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_33;
        }
        unsigned int v16 = 0;
        while (1)
        {
          uint64_t v17 = *v2;
          uint64_t v18 = *(void *)&a1[v17];
          unint64_t v19 = v18 + 1;
          if (v18 == -1 || v19 > *(void *)&a1[*v3]) {
            break;
          }
          int v20 = *(char *)(*(void *)&a1[*v5] + v18);
          *(void *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8) {
            continue;
          }
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        BOOL v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

void sub_189D8702C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOBusinessIsDirty(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 168));
  int v2 = *(_DWORD *)(a1 + 176);
  if ((v2 & 0xFFFF8) == 0)
  {
    if ((v2 & 0x2000) != 0)
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      id v4 = *(id *)(a1 + 112);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v50 objects:v59 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v51;
LABEL_6:
        uint64_t v8 = 0;
        while (1)
        {
          if (*(void *)v51 != v7) {
            objc_enumerationMutation(v4);
          }
          if (GEOPhotoIsDirty(*(void *)(*((void *)&v50 + 1) + 8 * v8))) {
            goto LABEL_65;
          }
          if (v6 == ++v8)
          {
            uint64_t v6 = [v4 countByEnumeratingWithState:&v50 objects:v59 count:16];
            if (v6) {
              goto LABEL_6;
            }
            break;
          }
        }
      }

      int v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x10) != 0)
    {
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      id v4 = *(id *)(a1 + 40);
      uint64_t v9 = [v4 countByEnumeratingWithState:&v46 objects:v58 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v47;
LABEL_16:
        uint64_t v12 = 0;
        while (1)
        {
          if (*(void *)v47 != v11) {
            objc_enumerationMutation(v4);
          }
          if (GEOAttributeKeyValueIsDirty(*(void *)(*((void *)&v46 + 1) + 8 * v12))) {
            goto LABEL_65;
          }
          if (v10 == ++v12)
          {
            uint64_t v10 = [v4 countByEnumeratingWithState:&v46 objects:v58 count:16];
            if (v10) {
              goto LABEL_16;
            }
            break;
          }
        }
      }

      int v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x800) != 0)
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v4 = *(id *)(a1 + 96);
      uint64_t v13 = [v4 countByEnumeratingWithState:&v42 objects:v57 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v43;
LABEL_26:
        uint64_t v16 = 0;
        while (1)
        {
          if (*(void *)v43 != v15) {
            objc_enumerationMutation(v4);
          }
          uint64_t v17 = *(void *)(*((void *)&v42 + 1) + 8 * v16);
          if (v17)
          {
            os_unfair_lock_lock_with_options();
            os_unfair_lock_assert_owner((const os_unfair_lock *)(v17 + 64));
            int v18 = *(unsigned char *)(v17 + 68) & 0xE;
            os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 64));
            if (v18) {
              goto LABEL_65;
            }
          }
          if (v14 == ++v16)
          {
            uint64_t v14 = [v4 countByEnumeratingWithState:&v42 objects:v57 count:16];
            if (v14) {
              goto LABEL_26;
            }
            break;
          }
        }
      }

      int v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x100) != 0)
    {
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      id v4 = *(id *)(a1 + 72);
      uint64_t v19 = [v4 countByEnumeratingWithState:&v38 objects:v56 count:16];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)v39;
LABEL_37:
        uint64_t v22 = 0;
        while (1)
        {
          if (*(void *)v39 != v21) {
            objc_enumerationMutation(v4);
          }
          if (GEOCategoryIsDirty(*(os_unfair_lock_s **)(*((void *)&v38 + 1) + 8 * v22))) {
            goto LABEL_65;
          }
          if (v20 == ++v22)
          {
            uint64_t v20 = [v4 countByEnumeratingWithState:&v38 objects:v56 count:16];
            if (v20) {
              goto LABEL_37;
            }
            break;
          }
        }
      }

      int v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x20) != 0)
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v4 = *(id *)(a1 + 48);
      uint64_t v23 = [v4 countByEnumeratingWithState:&v34 objects:v55 count:16];
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)v35;
LABEL_47:
        uint64_t v26 = 0;
        while (1)
        {
          if (*(void *)v35 != v25) {
            objc_enumerationMutation(v4);
          }
          if (GEOSearchAttributionIsDirty(*(void *)(*((void *)&v34 + 1) + 8 * v26))) {
            goto LABEL_65;
          }
          if (v24 == ++v26)
          {
            uint64_t v24 = [v4 countByEnumeratingWithState:&v34 objects:v55 count:16];
            if (v24) {
              goto LABEL_47;
            }
            break;
          }
        }
      }

      int v2 = *(_DWORD *)(a1 + 176);
    }
    if ((v2 & 0x10000) == 0) {
      return 0;
    }
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v4 = *(id *)(a1 + 136);
    uint64_t v3 = [v4 countByEnumeratingWithState:&v30 objects:v54 count:16];
    if (!v3)
    {
LABEL_66:

      return v3;
    }
    uint64_t v27 = *(void *)v31;
LABEL_58:
    uint64_t v28 = 0;
    while (1)
    {
      if (*(void *)v31 != v27) {
        objc_enumerationMutation(v4);
      }
      if (GEOSourceIsDirty(*(void *)(*((void *)&v30 + 1) + 8 * v28))) {
        break;
      }
      if (v3 == ++v28)
      {
        uint64_t v3 = [v4 countByEnumeratingWithState:&v30 objects:v54 count:16];
        if (v3) {
          goto LABEL_58;
        }
        goto LABEL_66;
      }
    }
LABEL_65:
    uint64_t v3 = 1;
    goto LABEL_66;
  }
  return 1;
}

os_unfair_lock_s *GEOBusinessIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOBusinessIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 42);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189D88790(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D891BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBusinessOptionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 60) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 != 0;
        int v15 = v14 & ~v10 | v7;
        int v16 = v14 | v10;
        if (((v14 | v10) | v8)) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = a3;
        }
        int v18 = (int *)MEMORY[0x1E4F940E8];
        BOOL v19 = v9 != 0;
        int v20 = 1;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_97;
        }
        char v70 = v14 & ~(_BYTE)v10 | v7;
        int v71 = v19 | v16 | v15;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (!*(unsigned char *)(v3 + *v21))
  {
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v18;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_24;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_24:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_26:
    if (v31 || (v25 & 7) == 4) {
      break;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v16;
    if (!((v17 == 0) | v16 & 1))
    {
      long long v35 = v17;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34 || (*(unsigned char *)(a1 + 60) & 0x20) != 0) {
          goto LABEL_78;
        }
        if (PBReaderPlaceMark())
        {
          long long v39 = objc_alloc_init(GEOPhotoOptions);
          if (GEOPhotoOptionsReadAllFrom((uint64_t)v39, (void *)v3))
          {
            PBReaderRecallMark();
            -[GEOBusinessOptions _addNoFlagsPhotoOptions:](a1, v39);
            goto LABEL_53;
          }
        }
        int v20 = 0;
        goto LABEL_96;
      case 2:
        if (!v34 || (*(unsigned char *)(a1 + 60) & 0x10) != 0) {
          goto LABEL_78;
        }
        PBReaderReadString();
        long long v39 = (GEOPhotoOptions *)objc_claimAutoreleasedReturnValue();
        if (v39) {
          -[GEOBusinessOptions _addNoFlagsAttributeKey:](a1, v39);
        }
LABEL_53:

        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_93;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_78;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v45 = *v18;
          uint64_t v46 = *(void *)(v3 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(v3 + *v22) + v46);
            *(void *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              BOOL v30 = v43++ >= 9;
              if (v30)
              {
                uint64_t v44 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v44 = 0;
        }
LABEL_83:
        BOOL v63 = v44 != 0;
        uint64_t v64 = 56;
        goto LABEL_92;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_78;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(unsigned char *)(a1 + 60) |= 1u;
        while (2)
        {
          uint64_t v52 = *v18;
          uint64_t v53 = *(void *)(v3 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v22) + v53);
            *(void *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v30 = v50++ >= 9;
              if (v30)
              {
                LODWORD(v51) = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v51) = 0;
        }
LABEL_87:
        *(_DWORD *)(a1 + 52) = v51;
        goto LABEL_93;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_78;
        }
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v58 = 0;
        *(unsigned char *)(a1 + 60) |= 4u;
        while (2)
        {
          uint64_t v59 = *v18;
          uint64_t v60 = *(void *)(v3 + v59);
          unint64_t v61 = v60 + 1;
          if (v60 == -1 || v61 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(v3 + *v22) + v60);
            *(void *)(v3 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              BOOL v30 = v57++ >= 9;
              if (v30)
              {
                uint64_t v58 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v58 = 0;
        }
LABEL_91:
        BOOL v63 = v58 != 0;
        uint64_t v64 = 57;
LABEL_92:
        *(unsigned char *)(a1 + v64) = v63;
        goto LABEL_93;
      default:
        if ((v70 & 1) == 0 || (*(unsigned char *)(a1 + 60) & 8) != 0)
        {
LABEL_78:
          int v20 = PBReaderSkipValueWithTag();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v20 & v71 & 1) == 0) {
            goto LABEL_96;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            long long v41 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v40;
          }
          int v20 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v20) {
            goto LABEL_98;
          }
LABEL_93:
          if ((v71 & 1) == 0) {
            goto LABEL_95;
          }
        }
        if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6)) {
          goto LABEL_95;
        }
        break;
    }
  }
LABEL_95:
  int v20 = 1;
LABEL_96:
  LOBYTE(v15) = v70;
LABEL_97:
  if (v15) {
LABEL_98:
  }
    *(unsigned char *)(a1 + 60) |= 8u;
  if (!(v16 & 1 | ((v20 & 1) == 0)))
  {
    if (!v17) {
      goto LABEL_109;
    }
    while (1)
    {
      int v66 = *v17++;
      int v65 = v66;
      if (v66 == 1) {
        break;
      }
      if (v65 == 2)
      {
        char v67 = 16;
LABEL_108:
        *(unsigned char *)(a1 + 60) |= v67;
      }
      else if (!v65)
      {
        goto LABEL_109;
      }
    }
    char v67 = 32;
    goto LABEL_108;
  }
  *(unsigned char *)(a1 + 60) |= 0x20u;
  *(unsigned char *)(a1 + 60) |= 0x10u;
LABEL_109:
  if (v20)
  {
    unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
    if ((v16 & 1) == 0) {
      return v3;
    }
    goto LABEL_113;
  }
  unint64_t v3 = 0;
  if (v16)
  {
LABEL_113:
    char v68 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189D89CCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8AB04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOBusinessOptionsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5++), "readAll:", 1, (void)v6);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEOBusinessOptionsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOBusinessOptionsReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOBusinessOptionsReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOBusinessOptionsReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOBusinessOptionsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOBusinessOptionsCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189D8AD98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBusinessOptionsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOBusinessOptionsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D8ADFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOBusinessOptionsIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPhotoOptionsIsValid(a1)) {
            goto LABEL_54;
          }
          PBReaderRecallMark();
          continue;
        case 2u:
          if (v15 == 2) {
            goto LABEL_24;
          }
          goto LABEL_54;
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_54;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_50;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_51;
          }
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_54;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_50;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_51;
          }
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_54;
          }
          unsigned int v28 = 0;
          break;
        default:
LABEL_24:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_54:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v29 = *v2;
        uint64_t v30 = *(void *)&a1[v29];
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
          break;
        }
        int v32 = *(char *)(*(void *)&a1[*v5] + v30);
        *(void *)&a1[v29] = v31;
        if (v32 < 0)
        {
          BOOL v22 = v28++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_51;
      }
LABEL_50:
      a1[*v4] = 1;
LABEL_51:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v33 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v33;
}

uint64_t GEOPhotoOptionsIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = 0;
    char v6 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_63;
      }
      char v7 = 0;
      unsigned int v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *v2;
        uint64_t v11 = *(void *)&a1[v10];
        unint64_t v12 = v11 + 1;
        if (v11 == -1 || v12 > *(void *)&a1[*v3]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&a1[*v6] + v11);
        *(void *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v7 += 7;
        BOOL v14 = v8++ >= 9;
        if (v14)
        {
          unint64_t v9 = 0;
          int v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v15 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v9 = 0;
      }
LABEL_14:
      int v16 = v9 & 7;
      if (v15 || v16 == 4) {
        goto LABEL_63;
      }
      unint64_t v18 = v9 >> 3;
      if ((v9 >> 3) == 3)
      {
        if (v16 != 2)
        {
          if ((v9 & 7) != 0) {
            goto LABEL_71;
          }
          while (1)
          {
            uint64_t v25 = *v2;
            uint64_t v26 = *(void *)&a1[v25];
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
              break;
            }
            int v28 = *(char *)(*(void *)&a1[*v6] + v26);
            *(void *)&a1[v25] = v27;
            if (v28 < 0)
            {
              unsigned int v29 = v16++;
              if (v29 <= 8) {
                continue;
              }
            }
            goto LABEL_60;
          }
LABEL_47:
          a1[*v4] = 1;
          goto LABEL_60;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_71;
        }
LABEL_50:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
        {
          unsigned int v35 = a1[*v4];
          if (a1[*v4]) {
            break;
          }
          while (1)
          {
            uint64_t v36 = *v2;
            uint64_t v37 = *(void *)&a1[v36];
            unint64_t v38 = v37 + 1;
            if (v37 == -1 || v38 > *(void *)&a1[*v3]) {
              break;
            }
            int v39 = *(char *)(*(void *)&a1[*v6] + v37);
            *(void *)&a1[v36] = v38;
            if (v39 < 0)
            {
              BOOL v14 = v35++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_50;
          }
          a1[*v4] = 1;
        }
        PBReaderRecallMark();
      }
      else
      {
        if (v18 == 2)
        {
          if ((v9 & 7) != 0) {
            goto LABEL_71;
          }
          unsigned int v30 = 0;
          while (1)
          {
            uint64_t v31 = *v2;
            uint64_t v32 = *(void *)&a1[v31];
            unint64_t v33 = v32 + 1;
            if (v32 == -1 || v33 > *(void *)&a1[*v3]) {
              goto LABEL_47;
            }
            int v34 = *(char *)(*(void *)&a1[*v6] + v32);
            *(void *)&a1[v31] = v33;
            if (v34 < 0)
            {
              BOOL v24 = v30++ > 8;
              if (!v24) {
                continue;
              }
            }
            goto LABEL_60;
          }
        }
        if (v18 == 1)
        {
          if (v5 || (v9 & 7) != 0)
          {
LABEL_71:
            PBReaderRecallMark();
            return 0;
          }
          unsigned int v19 = 0;
          while (1)
          {
            uint64_t v20 = *v2;
            uint64_t v21 = *(void *)&a1[v20];
            unint64_t v22 = v21 + 1;
            if (v21 == -1 || v22 > *(void *)&a1[*v3]) {
              break;
            }
            int v23 = *(char *)(*(void *)&a1[*v6] + v21);
            *(void *)&a1[v20] = v22;
            int v5 = 1;
            if (v23 < 0)
            {
              BOOL v24 = v19++ > 8;
              if (!v24) {
                continue;
              }
            }
            goto LABEL_60;
          }
          int v5 = 1;
          a1[*v4] = 1;
        }
        else if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
          goto LABEL_71;
        }
      }
LABEL_60:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_63;
      }
    }
  }
  int v5 = 0;
LABEL_63:
  if (a1[*v4]) {
    BOOL v40 = 1;
  }
  else {
    BOOL v40 = v5 == 0;
  }
  uint64_t v41 = !v40;
  PBReaderRecallMark();
  return v41;
}

void sub_189D8B7A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOBusinessOptionsIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = (*(unsigned char *)(a1 + 60) & 0x70) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189D8BD50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8C264(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCategoryReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 64) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        uint64_t v13 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v8;
        unsigned __int8 v18 = v16 | v11;
        char v67 = v17;
        char v68 = v9;
        char v69 = v18 | v17;
        if ((v18 | v9)) {
          unsigned int v19 = 0;
        }
        else {
          unsigned int v19 = a3;
        }
        char v70 = (v19 == 0) | v18;
        BOOL v71 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
LABEL_10:
        ++v10;
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_83;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_83:
      int v65 = 1;
      goto LABEL_84;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v71;
    if ((v70 & 1) == 0)
    {
      unsigned int v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 64) & 4) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          BOOL v40 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v39;

          --v10;
          goto LABEL_81;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_103;
        }
        v10 += *(unsigned __int8 *)(a1 + 64) << 29 >> 31;
        goto LABEL_81;
      case 2:
        if ((v68 & 1) == 0) {
          goto LABEL_69;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        while (2)
        {
          uint64_t v47 = *v20;
          uint64_t v48 = *(void *)(v3 + v47);
          unint64_t v49 = v48 + 1;
          if (v48 == -1 || v49 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(v3 + *v22) + v48);
            *(void *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              BOOL v30 = v45++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v46) = 0;
        }
LABEL_74:
        *(_DWORD *)(a1 + 60) = v46;
        goto LABEL_82;
      case 3:
        if ((v68 & 1) == 0) {
          goto LABEL_69;
        }
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v53 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v54 = *v20;
          uint64_t v55 = *(void *)(v3 + v54);
          unint64_t v56 = v55 + 1;
          if (v55 == -1 || v56 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(v3 + *v22) + v55);
            *(void *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              BOOL v30 = v52++ >= 9;
              if (v30)
              {
                uint64_t v53 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v53 = 0;
        }
LABEL_78:
        *(void *)(a1 + 32) = v53;
        goto LABEL_82;
      case 4:
        if (!v34 || (*(unsigned char *)(a1 + 64) & 8) != 0) {
          goto LABEL_69;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_103;
        }
        uint64_t v58 = objc_alloc_init(GEOLocalizedName);
        if (GEOLocalizedNameReadAllFrom((uint64_t)v58, (void *)v3, v7 & 1))
        {
          PBReaderRecallMark();
          -[GEOCategory _addNoFlagsLocalizedNames:](a1, v58);

LABEL_81:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_82:
          if (!(v69 & 1 | (v10 != 0))) {
            goto LABEL_83;
          }
          continue;
        }

LABEL_103:
        int v65 = 0;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_84:
        int v66 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        if (v67) {
LABEL_85:
        }
          *(unsigned char *)(a1 + v66[414]) |= 2u;
        if (v71 || (v65 & 1) == 0)
        {
          *(unsigned char *)(a1 + v66[414]) |= 4u;
          *(unsigned char *)(a1 + v66[414]) |= 8u;
          goto LABEL_96;
        }
        if (v19)
        {
          while (2)
          {
            while (1)
            {
              int v61 = *v19++;
              int v60 = v61;
              if (v61 == 1) {
                break;
              }
              if (v60 == 4)
              {
                char v62 = 8;
                goto LABEL_95;
              }
              if (!v60) {
                goto LABEL_96;
              }
            }
            char v62 = 4;
LABEL_95:
            *(unsigned char *)(a1 + v66[414]) |= v62;
            continue;
          }
        }
LABEL_96:
        if (v65) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v71)
        {
          BOOL v63 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v67 & 1) == 0 || (*(unsigned char *)(a1 + 64) & 2) != 0)
        {
LABEL_69:
          char v59 = PBReaderSkipValueWithTag();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v59 & 1) == 0)
          {
            int v65 = 0;
            goto LABEL_84;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v43)
          {
            int v65 = 0;
            int v66 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
            goto LABEL_85;
          }
        }
        goto LABEL_82;
    }
  }
}

void sub_189D8CC70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8D710(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOCategoryCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 40);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5++), "readAll:", 1, (void)v6);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEOCategoryReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOCategoryReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOCategoryReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOCategoryReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOCategoryReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOCategoryCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189D8D9A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCategoryReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOCategoryReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D8DA08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedNameIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_47;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_41;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_44;
          }
        case 2u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        case 3u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        case 4u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_47;
          }
          unsigned int v23 = 0;
          break;
        case 6u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        default:
LABEL_43:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_47:
          BOOL v28 = 0;
          goto LABEL_46;
      }
      while (1)
      {
        uint64_t v24 = *v2;
        uint64_t v25 = *(void *)&a1[v24];
        unint64_t v26 = v25 + 1;
        if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
          break;
        }
        int v27 = *(char *)(*(void *)&a1[*v5] + v25);
        *(void *)&a1[v24] = v26;
        if (v27 < 0)
        {
          BOOL v22 = v23++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_44;
      }
LABEL_41:
      a1[*v4] = 1;
LABEL_44:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v28 = a1[*v4] == 0;
LABEL_46:
  PBReaderRecallMark();
  return v28;
}

void sub_189D8DF34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOCategoryIsDirty(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(unsigned char *)(a1 + 64) & 0x1C) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 64) & 8) == 0) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v3 = *(id *)(a1 + 40);
  uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v3);
        }
        if (GEOLocalizedNameIsDirty(*(void *)(*((void *)&v7 + 1) + 8 * i)))
        {
          uint64_t v2 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOCategoryIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOCategoryIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189D8E4B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8E888(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8EB7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8EEE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8F024(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D8F164(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D90340(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D90670(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D90A04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D90DD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D90FD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D91224(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D913A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D91C44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D91D84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D91EC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D931E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOClientCapabilitiesCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  [*(id *)(a1 + 168) readAll:1];
  [*(id *)(a1 + 104) readAll:1];
  [*(id *)(a1 + 96) readAll:1];
  [*(id *)(a1 + 208) readAll:1];
  [*(id *)(a1 + 192) readAll:1];
  [*(id *)(a1 + 224) readAll:1];
  uint64_t v2 = *(void **)(a1 + 128);

  return [v2 readAll:1];
}

unint64_t GEOClientCapabilitiesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOClientCapabilitiesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D9786C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientCapabilitiesIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2) {
            goto LABEL_500;
          }
          goto LABEL_443;
        case 2u:
          if (v15 == 2) {
            goto LABEL_443;
          }
          goto LABEL_500;
        case 3u:
          if (v15 == 2) {
            goto LABEL_443;
          }
          goto LABEL_500;
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 6u:
          if (v15 == 2) {
            goto LABEL_443;
          }
          goto LABEL_500;
        case 7u:
          if (v15 == 2) {
            goto LABEL_443;
          }
          goto LABEL_500;
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v22 = v28++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 9u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v33 = 0;
          while (1)
          {
            uint64_t v34 = *v2;
            uint64_t v35 = *(void *)&a1[v34];
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v37 = *(char *)(*(void *)&a1[*v5] + v35);
            *(void *)&a1[v34] = v36;
            if (v37 < 0)
            {
              BOOL v22 = v33++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0xAu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v38 = 0;
          while (1)
          {
            uint64_t v39 = *v2;
            uint64_t v40 = *(void *)&a1[v39];
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v42 = *(char *)(*(void *)&a1[*v5] + v40);
            *(void *)&a1[v39] = v41;
            if (v42 < 0)
            {
              BOOL v22 = v38++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0xBu:
          if (v15 == 2) {
            goto LABEL_443;
          }
          goto LABEL_500;
        case 0xCu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v43 = 0;
          while (1)
          {
            uint64_t v44 = *v2;
            uint64_t v45 = *(void *)&a1[v44];
            unint64_t v46 = v45 + 1;
            if (v45 == -1 || v46 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v47 = *(char *)(*(void *)&a1[*v5] + v45);
            *(void *)&a1[v44] = v46;
            if (v47 < 0)
            {
              BOOL v22 = v43++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0xDu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v48 = 0;
          while (1)
          {
            uint64_t v49 = *v2;
            uint64_t v50 = *(void *)&a1[v49];
            unint64_t v51 = v50 + 1;
            if (v50 == -1 || v51 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v52 = *(char *)(*(void *)&a1[*v5] + v50);
            *(void *)&a1[v49] = v51;
            if (v52 < 0)
            {
              BOOL v22 = v48++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0xEu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v53 = 0;
          while (1)
          {
            uint64_t v54 = *v2;
            uint64_t v55 = *(void *)&a1[v54];
            unint64_t v56 = v55 + 1;
            if (v55 == -1 || v56 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v57 = *(char *)(*(void *)&a1[*v5] + v55);
            *(void *)&a1[v54] = v56;
            if (v57 < 0)
            {
              BOOL v22 = v53++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x10u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringClientCapabilitiesIsValid(a1)) {
            goto LABEL_500;
          }
          goto LABEL_456;
        case 0x11u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v58 = 0;
          while (1)
          {
            uint64_t v59 = *v2;
            uint64_t v60 = *(void *)&a1[v59];
            unint64_t v61 = v60 + 1;
            if (v60 == -1 || v61 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v62 = *(char *)(*(void *)&a1[*v5] + v60);
            *(void *)&a1[v59] = v61;
            if (v62 < 0)
            {
              BOOL v22 = v58++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x12u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v63 = 0;
          while (1)
          {
            uint64_t v64 = *v2;
            uint64_t v65 = *(void *)&a1[v64];
            unint64_t v66 = v65 + 1;
            if (v65 == -1 || v66 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v67 = *(char *)(*(void *)&a1[*v5] + v65);
            *(void *)&a1[v64] = v66;
            if (v67 < 0)
            {
              BOOL v22 = v63++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x13u:
          if (v15 == 2) {
            goto LABEL_443;
          }
          goto LABEL_500;
        case 0x14u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v68 = 0;
          while (1)
          {
            uint64_t v69 = *v2;
            uint64_t v70 = *(void *)&a1[v69];
            unint64_t v71 = v70 + 1;
            if (v70 == -1 || v71 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v72 = *(char *)(*(void *)&a1[*v5] + v70);
            *(void *)&a1[v69] = v71;
            if (v72 < 0)
            {
              BOOL v22 = v68++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x15u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v73 = 0;
          while (1)
          {
            uint64_t v74 = *v2;
            uint64_t v75 = *(void *)&a1[v74];
            unint64_t v76 = v75 + 1;
            if (v75 == -1 || v76 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v77 = *(char *)(*(void *)&a1[*v5] + v75);
            *(void *)&a1[v74] = v76;
            if (v77 < 0)
            {
              BOOL v22 = v73++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x16u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v78 = 0;
          while (1)
          {
            uint64_t v79 = *v2;
            uint64_t v80 = *(void *)&a1[v79];
            unint64_t v81 = v80 + 1;
            if (v80 == -1 || v81 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v82 = *(char *)(*(void *)&a1[*v5] + v80);
            *(void *)&a1[v79] = v81;
            if (v82 < 0)
            {
              BOOL v22 = v78++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x17u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v83 = 0;
          while (1)
          {
            uint64_t v84 = *v2;
            uint64_t v85 = *(void *)&a1[v84];
            unint64_t v86 = v85 + 1;
            if (v85 == -1 || v86 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v87 = *(char *)(*(void *)&a1[*v5] + v85);
            *(void *)&a1[v84] = v86;
            if (v87 < 0)
            {
              BOOL v22 = v83++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x18u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOAbAssignInfoIsValid(a1)) {
            goto LABEL_500;
          }
          goto LABEL_456;
        case 0x19u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalTimeIsValid(a1)) {
            goto LABEL_500;
          }
          goto LABEL_456;
        case 0x1Au:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v88 = 0;
          while (1)
          {
            uint64_t v89 = *v2;
            uint64_t v90 = *(void *)&a1[v89];
            unint64_t v91 = v90 + 1;
            if (v90 == -1 || v91 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v92 = *(char *)(*(void *)&a1[*v5] + v90);
            *(void *)&a1[v89] = v91;
            if (v92 < 0)
            {
              BOOL v22 = v88++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x1Bu:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_500;
            }
            while (1)
            {
              uint64_t v93 = *v2;
              uint64_t v94 = *(void *)&a1[v93];
              unint64_t v95 = v94 + 1;
              if (v94 == -1 || v95 > *(void *)&a1[*v3]) {
                goto LABEL_465;
              }
              int v96 = *(char *)(*(void *)&a1[*v5] + v94);
              *(void *)&a1[v93] = v95;
              if (v96 < 0)
              {
                unsigned int v97 = v15++;
                if (v97 <= 8) {
                  continue;
                }
              }
              goto LABEL_466;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_500;
          }
LABEL_469:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v268 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v269 = *v2;
              uint64_t v270 = *(void *)&a1[v269];
              unint64_t v271 = v270 + 1;
              if (v270 == -1 || v271 > *(void *)&a1[*v3]) {
                break;
              }
              int v272 = *(char *)(*(void *)&a1[*v5] + v270);
              *(void *)&a1[v269] = v271;
              if (v272 < 0)
              {
                BOOL v13 = v268++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_469;
            }
            a1[*v4] = 1;
          }
          goto LABEL_456;
        case 0x1Cu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v98 = 0;
          while (1)
          {
            uint64_t v99 = *v2;
            uint64_t v100 = *(void *)&a1[v99];
            unint64_t v101 = v100 + 1;
            if (v100 == -1 || v101 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v102 = *(char *)(*(void *)&a1[*v5] + v100);
            *(void *)&a1[v99] = v101;
            if (v102 < 0)
            {
              BOOL v22 = v98++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x1Du:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v103 = 0;
          while (1)
          {
            uint64_t v104 = *v2;
            uint64_t v105 = *(void *)&a1[v104];
            unint64_t v106 = v105 + 1;
            if (v105 == -1 || v106 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v107 = *(char *)(*(void *)&a1[*v5] + v105);
            *(void *)&a1[v104] = v106;
            if (v107 < 0)
            {
              BOOL v22 = v103++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x1Eu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v108 = 0;
          while (1)
          {
            uint64_t v109 = *v2;
            uint64_t v110 = *(void *)&a1[v109];
            unint64_t v111 = v110 + 1;
            if (v110 == -1 || v111 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v112 = *(char *)(*(void *)&a1[*v5] + v110);
            *(void *)&a1[v109] = v111;
            if (v112 < 0)
            {
              BOOL v22 = v108++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x1Fu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizationCapabilitiesIsValid(a1)) {
            goto LABEL_500;
          }
          goto LABEL_456;
        case 0x20u:
          if (v15 == 2) {
            goto LABEL_443;
          }
          goto LABEL_500;
        case 0x21u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v113 = 0;
          while (1)
          {
            uint64_t v114 = *v2;
            uint64_t v115 = *(void *)&a1[v114];
            unint64_t v116 = v115 + 1;
            if (v115 == -1 || v116 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v117 = *(char *)(*(void *)&a1[*v5] + v115);
            *(void *)&a1[v114] = v116;
            if (v117 < 0)
            {
              BOOL v22 = v113++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x22u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v118 = 0;
          while (1)
          {
            uint64_t v119 = *v2;
            uint64_t v120 = *(void *)&a1[v119];
            unint64_t v121 = v120 + 1;
            if (v120 == -1 || v121 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v122 = *(char *)(*(void *)&a1[*v5] + v120);
            *(void *)&a1[v119] = v121;
            if (v122 < 0)
            {
              BOOL v22 = v118++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x23u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v123 = 0;
          while (1)
          {
            uint64_t v124 = *v2;
            uint64_t v125 = *(void *)&a1[v124];
            unint64_t v126 = v125 + 1;
            if (v125 == -1 || v126 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v127 = *(char *)(*(void *)&a1[*v5] + v125);
            *(void *)&a1[v124] = v126;
            if (v127 < 0)
            {
              BOOL v22 = v123++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x24u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v128 = 0;
          while (1)
          {
            uint64_t v129 = *v2;
            uint64_t v130 = *(void *)&a1[v129];
            unint64_t v131 = v130 + 1;
            if (v130 == -1 || v131 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v132 = *(char *)(*(void *)&a1[*v5] + v130);
            *(void *)&a1[v129] = v131;
            if (v132 < 0)
            {
              BOOL v22 = v128++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x25u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v133 = 0;
          while (1)
          {
            uint64_t v134 = *v2;
            uint64_t v135 = *(void *)&a1[v134];
            unint64_t v136 = v135 + 1;
            if (v135 == -1 || v136 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v137 = *(char *)(*(void *)&a1[*v5] + v135);
            *(void *)&a1[v134] = v136;
            if (v137 < 0)
            {
              BOOL v22 = v133++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x26u:
          if (v15 == 2) {
            goto LABEL_443;
          }
          goto LABEL_500;
        case 0x27u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v138 = 0;
          while (1)
          {
            uint64_t v139 = *v2;
            uint64_t v140 = *(void *)&a1[v139];
            unint64_t v141 = v140 + 1;
            if (v140 == -1 || v141 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v142 = *(char *)(*(void *)&a1[*v5] + v140);
            *(void *)&a1[v139] = v141;
            if (v142 < 0)
            {
              BOOL v22 = v138++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x28u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v143 = 0;
          while (1)
          {
            uint64_t v144 = *v2;
            uint64_t v145 = *(void *)&a1[v144];
            unint64_t v146 = v145 + 1;
            if (v145 == -1 || v146 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v147 = *(char *)(*(void *)&a1[*v5] + v145);
            *(void *)&a1[v144] = v146;
            if (v147 < 0)
            {
              BOOL v22 = v143++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x29u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOAdvisoryClientCapabilitiesIsValid(a1)) {
            goto LABEL_500;
          }
          goto LABEL_456;
        case 0x2Au:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v148 = 0;
          while (1)
          {
            uint64_t v149 = *v2;
            uint64_t v150 = *(void *)&a1[v149];
            unint64_t v151 = v150 + 1;
            if (v150 == -1 || v151 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v152 = *(char *)(*(void *)&a1[*v5] + v150);
            *(void *)&a1[v149] = v151;
            if (v152 < 0)
            {
              BOOL v22 = v148++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x2Bu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v153 = 0;
          while (1)
          {
            uint64_t v154 = *v2;
            uint64_t v155 = *(void *)&a1[v154];
            unint64_t v156 = v155 + 1;
            if (v155 == -1 || v156 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v157 = *(char *)(*(void *)&a1[*v5] + v155);
            *(void *)&a1[v154] = v156;
            if (v157 < 0)
            {
              BOOL v22 = v153++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x2Cu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v158 = 0;
          while (1)
          {
            uint64_t v159 = *v2;
            uint64_t v160 = *(void *)&a1[v159];
            unint64_t v161 = v160 + 1;
            if (v160 == -1 || v161 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v162 = *(char *)(*(void *)&a1[*v5] + v160);
            *(void *)&a1[v159] = v161;
            if (v162 < 0)
            {
              BOOL v22 = v158++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x2Du:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v163 = 0;
          while (1)
          {
            uint64_t v164 = *v2;
            uint64_t v165 = *(void *)&a1[v164];
            unint64_t v166 = v165 + 1;
            if (v165 == -1 || v166 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v167 = *(char *)(*(void *)&a1[*v5] + v165);
            *(void *)&a1[v164] = v166;
            if (v167 < 0)
            {
              BOOL v22 = v163++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x2Eu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v168 = 0;
          while (1)
          {
            uint64_t v169 = *v2;
            uint64_t v170 = *(void *)&a1[v169];
            unint64_t v171 = v170 + 1;
            if (v170 == -1 || v171 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v172 = *(char *)(*(void *)&a1[*v5] + v170);
            *(void *)&a1[v169] = v171;
            if (v172 < 0)
            {
              BOOL v22 = v168++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x2Fu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v173 = 0;
          while (1)
          {
            uint64_t v174 = *v2;
            uint64_t v175 = *(void *)&a1[v174];
            unint64_t v176 = v175 + 1;
            if (v175 == -1 || v176 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v177 = *(char *)(*(void *)&a1[*v5] + v175);
            *(void *)&a1[v174] = v176;
            if (v177 < 0)
            {
              BOOL v22 = v173++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x30u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v178 = 0;
          while (1)
          {
            uint64_t v179 = *v2;
            uint64_t v180 = *(void *)&a1[v179];
            unint64_t v181 = v180 + 1;
            if (v180 == -1 || v181 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v182 = *(char *)(*(void *)&a1[*v5] + v180);
            *(void *)&a1[v179] = v181;
            if (v182 < 0)
            {
              BOOL v22 = v178++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x31u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v183 = 0;
          while (1)
          {
            uint64_t v184 = *v2;
            uint64_t v185 = *(void *)&a1[v184];
            unint64_t v186 = v185 + 1;
            if (v185 == -1 || v186 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v187 = *(char *)(*(void *)&a1[*v5] + v185);
            *(void *)&a1[v184] = v186;
            if (v187 < 0)
            {
              BOOL v22 = v183++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x32u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v188 = 0;
          while (1)
          {
            uint64_t v189 = *v2;
            uint64_t v190 = *(void *)&a1[v189];
            unint64_t v191 = v190 + 1;
            if (v190 == -1 || v191 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v192 = *(char *)(*(void *)&a1[*v5] + v190);
            *(void *)&a1[v189] = v191;
            if (v192 < 0)
            {
              BOOL v22 = v188++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x33u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v193 = 0;
          while (1)
          {
            uint64_t v194 = *v2;
            uint64_t v195 = *(void *)&a1[v194];
            unint64_t v196 = v195 + 1;
            if (v195 == -1 || v196 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v197 = *(char *)(*(void *)&a1[*v5] + v195);
            *(void *)&a1[v194] = v196;
            if (v197 < 0)
            {
              BOOL v22 = v193++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x34u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_500;
            }
            while (1)
            {
              uint64_t v198 = *v2;
              uint64_t v199 = *(void *)&a1[v198];
              unint64_t v200 = v199 + 1;
              if (v199 == -1 || v200 > *(void *)&a1[*v3]) {
                goto LABEL_465;
              }
              int v201 = *(char *)(*(void *)&a1[*v5] + v199);
              *(void *)&a1[v198] = v200;
              if (v201 < 0)
              {
                unsigned int v202 = v15++;
                if (v202 <= 8) {
                  continue;
                }
              }
              goto LABEL_466;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_500;
          }
LABEL_479:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v273 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v274 = *v2;
              uint64_t v275 = *(void *)&a1[v274];
              unint64_t v276 = v275 + 1;
              if (v275 == -1 || v276 > *(void *)&a1[*v3]) {
                break;
              }
              int v277 = *(char *)(*(void *)&a1[*v5] + v275);
              *(void *)&a1[v274] = v276;
              if (v277 < 0)
              {
                BOOL v13 = v273++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_479;
            }
            a1[*v4] = 1;
          }
          goto LABEL_456;
        case 0x35u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v203 = 0;
          while (1)
          {
            uint64_t v204 = *v2;
            uint64_t v205 = *(void *)&a1[v204];
            unint64_t v206 = v205 + 1;
            if (v205 == -1 || v206 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v207 = *(char *)(*(void *)&a1[*v5] + v205);
            *(void *)&a1[v204] = v206;
            if (v207 < 0)
            {
              BOOL v22 = v203++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x36u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWalkingSupportedFeaturesIsValid(a1)) {
            goto LABEL_500;
          }
          goto LABEL_456;
        case 0x37u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v208 = 0;
          while (1)
          {
            uint64_t v209 = *v2;
            uint64_t v210 = *(void *)&a1[v209];
            unint64_t v211 = v210 + 1;
            if (v210 == -1 || v211 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v212 = *(char *)(*(void *)&a1[*v5] + v210);
            *(void *)&a1[v209] = v211;
            if (v212 < 0)
            {
              BOOL v22 = v208++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x38u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v213 = 0;
          while (1)
          {
            uint64_t v214 = *v2;
            uint64_t v215 = *(void *)&a1[v214];
            unint64_t v216 = v215 + 1;
            if (v215 == -1 || v216 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v217 = *(char *)(*(void *)&a1[*v5] + v215);
            *(void *)&a1[v214] = v216;
            if (v217 < 0)
            {
              BOOL v22 = v213++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x39u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v218 = 0;
          while (1)
          {
            uint64_t v219 = *v2;
            uint64_t v220 = *(void *)&a1[v219];
            unint64_t v221 = v220 + 1;
            if (v220 == -1 || v221 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v222 = *(char *)(*(void *)&a1[*v5] + v220);
            *(void *)&a1[v219] = v221;
            if (v222 < 0)
            {
              BOOL v22 = v218++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x3Au:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v223 = 0;
          while (1)
          {
            uint64_t v224 = *v2;
            uint64_t v225 = *(void *)&a1[v224];
            unint64_t v226 = v225 + 1;
            if (v225 == -1 || v226 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v227 = *(char *)(*(void *)&a1[*v5] + v225);
            *(void *)&a1[v224] = v226;
            if (v227 < 0)
            {
              BOOL v22 = v223++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x3Bu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v228 = 0;
          while (1)
          {
            uint64_t v229 = *v2;
            uint64_t v230 = *(void *)&a1[v229];
            unint64_t v231 = v230 + 1;
            if (v230 == -1 || v231 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v232 = *(char *)(*(void *)&a1[*v5] + v230);
            *(void *)&a1[v229] = v231;
            if (v232 < 0)
            {
              BOOL v22 = v228++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x3Cu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v233 = 0;
          while (1)
          {
            uint64_t v234 = *v2;
            uint64_t v235 = *(void *)&a1[v234];
            unint64_t v236 = v235 + 1;
            if (v235 == -1 || v236 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v237 = *(char *)(*(void *)&a1[*v5] + v235);
            *(void *)&a1[v234] = v236;
            if (v237 < 0)
            {
              BOOL v22 = v233++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x3Du:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v238 = 0;
          while (1)
          {
            uint64_t v239 = *v2;
            uint64_t v240 = *(void *)&a1[v239];
            unint64_t v241 = v240 + 1;
            if (v240 == -1 || v241 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v242 = *(char *)(*(void *)&a1[*v5] + v240);
            *(void *)&a1[v239] = v241;
            if (v242 < 0)
            {
              BOOL v22 = v238++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x3Eu:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v243 = 0;
          while (1)
          {
            uint64_t v244 = *v2;
            uint64_t v245 = *(void *)&a1[v244];
            unint64_t v246 = v245 + 1;
            if (v245 == -1 || v246 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v247 = *(char *)(*(void *)&a1[*v5] + v245);
            *(void *)&a1[v244] = v246;
            if (v247 < 0)
            {
              BOOL v22 = v243++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x3Fu:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_500:
              PBReaderRecallMark();
              return 0;
            }
LABEL_489:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v278 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v279 = *v2;
                uint64_t v280 = *(void *)&a1[v279];
                unint64_t v281 = v280 + 1;
                if (v280 == -1 || v281 > *(void *)&a1[*v3]) {
                  break;
                }
                int v282 = *(char *)(*(void *)&a1[*v5] + v280);
                *(void *)&a1[v279] = v281;
                if (v282 < 0)
                {
                  BOOL v13 = v278++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_489;
              }
              a1[*v4] = 1;
            }
LABEL_456:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0) {
              goto LABEL_500;
            }
            while (1)
            {
              uint64_t v248 = *v2;
              uint64_t v249 = *(void *)&a1[v248];
              unint64_t v250 = v249 + 1;
              if (v249 == -1 || v250 > *(void *)&a1[*v3]) {
                break;
              }
              int v251 = *(char *)(*(void *)&a1[*v5] + v249);
              *(void *)&a1[v248] = v250;
              if (v251 < 0)
              {
                unsigned int v252 = v15++;
                if (v252 <= 8) {
                  continue;
                }
              }
              goto LABEL_466;
            }
LABEL_465:
            a1[*v4] = 1;
          }
LABEL_466:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_498;
          }
          break;
        case 0x40u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v253 = 0;
          while (1)
          {
            uint64_t v254 = *v2;
            uint64_t v255 = *(void *)&a1[v254];
            unint64_t v256 = v255 + 1;
            if (v255 == -1 || v256 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v257 = *(char *)(*(void *)&a1[*v5] + v255);
            *(void *)&a1[v254] = v256;
            if (v257 < 0)
            {
              BOOL v22 = v253++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x41u:
          if (v15 == 2) {
            goto LABEL_443;
          }
          goto LABEL_500;
        case 0x42u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v258 = 0;
          while (1)
          {
            uint64_t v259 = *v2;
            uint64_t v260 = *(void *)&a1[v259];
            unint64_t v261 = v260 + 1;
            if (v260 == -1 || v261 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v262 = *(char *)(*(void *)&a1[*v5] + v260);
            *(void *)&a1[v259] = v261;
            if (v262 < 0)
            {
              BOOL v22 = v258++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        case 0x43u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOArtworkCapabilitiesIsValid(a1)) {
            goto LABEL_456;
          }
          goto LABEL_500;
        case 0x64u:
          if ((v8 & 7) != 0) {
            goto LABEL_500;
          }
          unsigned int v263 = 0;
          while (1)
          {
            uint64_t v264 = *v2;
            uint64_t v265 = *(void *)&a1[v264];
            unint64_t v266 = v265 + 1;
            if (v265 == -1 || v266 > *(void *)&a1[*v3]) {
              goto LABEL_465;
            }
            int v267 = *(char *)(*(void *)&a1[*v5] + v265);
            *(void *)&a1[v264] = v266;
            if (v267 < 0)
            {
              BOOL v22 = v263++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_466;
          }
        default:
LABEL_443:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_500;
          }
          goto LABEL_466;
      }
    }
  }
LABEL_498:
  BOOL v283 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v283;
}

BOOL GEOFormattedStringClientCapabilitiesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_48;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        goto LABEL_48;
      }
      unint64_t v16 = v8 >> 3;
      if ((v8 >> 3) == 3) {
        break;
      }
      if (v16 == 2)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_50;
        }
        unsigned int v28 = 0;
        while (1)
        {
          uint64_t v29 = *v2;
          uint64_t v30 = *(void *)&a1[v29];
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
            goto LABEL_45;
          }
          int v32 = *(char *)(*(void *)&a1[*v5] + v30);
          *(void *)&a1[v29] = v31;
          if (v32 < 0)
          {
            BOOL v22 = v28++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_47;
        }
      }
      if (v16 == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_50;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0)
          {
            BOOL v22 = v17++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_47;
        }
LABEL_45:
        a1[*v4] = 1;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_50:
        BOOL v33 = 0;
        goto LABEL_49;
      }
LABEL_47:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_48;
      }
    }
    if ((v8 & 7) != 0) {
      goto LABEL_50;
    }
    unsigned int v23 = 0;
    while (1)
    {
      uint64_t v24 = *v2;
      uint64_t v25 = *(void *)&a1[v24];
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
        goto LABEL_45;
      }
      int v27 = *(char *)(*(void *)&a1[*v5] + v25);
      *(void *)&a1[v24] = v26;
      if (v27 < 0)
      {
        BOOL v22 = v23++ > 8;
        if (!v22) {
          continue;
        }
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  BOOL v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

BOOL GEOWalkingSupportedFeaturesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_33;
        }
        unsigned int v16 = 0;
        while (1)
        {
          uint64_t v17 = *v2;
          uint64_t v18 = *(void *)&a1[v17];
          unint64_t v19 = v18 + 1;
          if (v18 == -1 || v19 > *(void *)&a1[*v3]) {
            break;
          }
          int v20 = *(char *)(*(void *)&a1[*v5] + v18);
          *(void *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8) {
            continue;
          }
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        BOOL v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

BOOL GEOClientCapabilitiesIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 240));
  BOOL v2 = (*(unsigned char *)(a1 + 320) & 0x1F | ((unint64_t)*(unsigned __int16 *)(a1 + 318) << 48)) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 240));
  return v2;
}

void sub_189D9C224(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOFormattedStringClientCapabilitiesReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_59;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          goto LABEL_59;
        }
        unint64_t v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 20) |= 2u;
          while (1)
          {
            uint64_t v30 = *v4;
            uint64_t v31 = *(void *)&v3[v30];
            unint64_t v32 = v31 + 1;
            if (v31 == -1 || v32 > *(void *)&v3[*v5]) {
              break;
            }
            char v33 = *(unsigned char *)(*(void *)&v3[*v7] + v31);
            *(void *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              int v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__styleSupported;
              goto LABEL_51;
            }
            v28 += 7;
            BOOL v26 = v29++ > 8;
            if (v26)
            {
              uint64_t v21 = 0;
              int v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__styleSupported;
              goto LABEL_53;
            }
          }
          int v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__styleSupported;
LABEL_50:
          v3[*v6] = 1;
          goto LABEL_51;
        }
        if (v18 == 2) {
          break;
        }
        if (v18 == 1)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v22 = *v4;
            uint64_t v23 = *(void *)&v3[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&v3[*v5])
            {
              int v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__concatenatingFormatStringsSupported;
              goto LABEL_50;
            }
            char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
            *(void *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v19 += 7;
            BOOL v26 = v20++ > 8;
            if (v26)
            {
              uint64_t v21 = 0;
              int v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__concatenatingFormatStringsSupported;
              goto LABEL_53;
            }
          }
          int v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__concatenatingFormatStringsSupported;
          goto LABEL_51;
        }
        if (!*(void *)(a1 + 8))
        {
          id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          unint64_t v41 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v40;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_60;
        }
LABEL_54:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_59;
        }
      }
      char v34 = 0;
      unsigned int v35 = 0;
      uint64_t v21 = 0;
      *(unsigned char *)(a1 + 20) |= 4u;
      while (1)
      {
        uint64_t v36 = *v4;
        uint64_t v37 = *(void *)&v3[v36];
        unint64_t v38 = v37 + 1;
        if (v37 == -1 || v38 > *(void *)&v3[*v5])
        {
          int v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__timestampFormatPatternSupported;
          goto LABEL_50;
        }
        char v39 = *(unsigned char *)(*(void *)&v3[*v7] + v37);
        *(void *)&v3[v36] = v38;
        v21 |= (unint64_t)(v39 & 0x7F) << v34;
        if ((v39 & 0x80) == 0) {
          break;
        }
        v34 += 7;
        BOOL v26 = v35++ > 8;
        if (v26)
        {
          uint64_t v21 = 0;
          int v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__timestampFormatPatternSupported;
          goto LABEL_53;
        }
      }
      int v27 = &OBJC_IVAR___GEOFormattedStringClientCapabilities__timestampFormatPatternSupported;
LABEL_51:
      if (v3[*v6]) {
        uint64_t v21 = 0;
      }
LABEL_53:
      *(unsigned char *)(a1 + *v27) = v21 != 0;
      goto LABEL_54;
    }
LABEL_59:
    BOOL v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_60:
    BOOL v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_189D9CD34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOFormattedStringClientCapabilitiesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOFormattedStringClientCapabilitiesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189D9CD98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOHighlightReadAllFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (_DWORD *)(a1 + 8);
    char v8 = (_DWORD *)(a1 + 4);
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = *v3;
        uint64_t v14 = *(void *)(a2 + v13);
        unint64_t v15 = v14 + 1;
        if (v14 == -1 || v15 > *(void *)(a2 + *v4)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + *v9) + v14);
        *(void *)(a2 + v13) = v15;
        v12 |= (unint64_t)(v16 & 0x7F) << v10;
        if ((v16 & 0x80) == 0) {
          goto LABEL_12;
        }
        v10 += 7;
        if (v11++ >= 9)
        {
          unint64_t v12 = 0;
          int v18 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v18 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v12 = 0;
      }
LABEL_14:
      if (v18 || (v12 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v20 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v32 = *v3;
          uint64_t v33 = *(void *)(a2 + v32);
          unint64_t v34 = v33 + 1;
          if (v33 == -1 || v34 > *(void *)(a2 + *v4)) {
            break;
          }
          char v35 = *(unsigned char *)(*(void *)(a2 + *v9) + v33);
          *(void *)(a2 + v32) = v34;
          v23 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0)
          {
            unsigned int v29 = (_DWORD *)a1;
            goto LABEL_48;
          }
          v30 += 7;
          BOOL v28 = v31++ > 8;
          if (v28)
          {
            LODWORD(v23) = 0;
            unsigned int v29 = (_DWORD *)a1;
            goto LABEL_50;
          }
        }
        unsigned int v29 = (_DWORD *)a1;
LABEL_47:
        *(unsigned char *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if (v20 == 2) {
        break;
      }
      if (v20 == 1)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 12) |= 2u;
        while (1)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            unsigned int v29 = v8;
            goto LABEL_47;
          }
          char v27 = *(unsigned char *)(*(void *)(a2 + *v9) + v25);
          *(void *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0) {
            break;
          }
          v21 += 7;
          BOOL v28 = v22++ > 8;
          if (v28)
          {
            LODWORD(v23) = 0;
            unsigned int v29 = v8;
            goto LABEL_50;
          }
        }
        unsigned int v29 = v8;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_51:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v36 = 0;
    unsigned int v37 = 0;
    uint64_t v23 = 0;
    *(unsigned char *)(a1 + 12) |= 4u;
    while (1)
    {
      uint64_t v38 = *v3;
      uint64_t v39 = *(void *)(a2 + v38);
      unint64_t v40 = v39 + 1;
      if (v39 == -1 || v40 > *(void *)(a2 + *v4))
      {
        unsigned int v29 = v7;
        goto LABEL_47;
      }
      char v41 = *(unsigned char *)(*(void *)(a2 + *v9) + v39);
      *(void *)(a2 + v38) = v40;
      v23 |= (unint64_t)(v41 & 0x7F) << v36;
      if ((v41 & 0x80) == 0) {
        break;
      }
      v36 += 7;
      BOOL v28 = v37++ > 8;
      if (v28)
      {
        LODWORD(v23) = 0;
        unsigned int v29 = v7;
        goto LABEL_50;
      }
    }
    unsigned int v29 = v7;
LABEL_48:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v23) = 0;
    }
LABEL_50:
    *unsigned int v29 = v23;
    goto LABEL_51;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

unint64_t GEOHoursReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1)
      + (*(unsigned char *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 != 0;
        int v15 = v14 & ~v10 | v7;
        int v62 = v14 | v10;
        char v16 = (int *)MEMORY[0x1E4F940E8];
        if (((v14 | v10) | v8)) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = a3;
        }
        int v18 = 1;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_81;
        }
        char v60 = v15;
        int v61 = (v9 != 0) | v62 | v15;
        char v19 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(unsigned char *)(v3 + *v19)) {
      goto LABEL_79;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v16;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    int v30 = v23 & 7;
    if (v29 || v30 == 4)
    {
LABEL_79:
      int v18 = 1;
      goto LABEL_80;
    }
    unint64_t v32 = v23 >> 3;
    BOOL v33 = v62;
    if (!((v17 == 0) | v62 & 1))
    {
      unint64_t v34 = v17;
      do
      {
        int v36 = *v34++;
        int v35 = v36;
        BOOL v33 = v36 != 0;
        if (v36) {
          BOOL v37 = v35 == v32;
        }
        else {
          BOOL v37 = 1;
        }
      }
      while (!v37);
    }
    if (v32 == 2) {
      break;
    }
    if (v32 == 1)
    {
      if (v33 && (*(unsigned char *)(a1 + 68) & 2) == 0)
      {
        if (v30 == 2)
        {
          int v18 = PBReaderPlaceMark();
          if (!v18) {
            goto LABEL_80;
          }
          while (*(void *)(v3 + *v16) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v19))
          {
            char v38 = 0;
            unsigned int v39 = 0;
            uint64_t v40 = 0;
            while (1)
            {
              uint64_t v41 = *v16;
              uint64_t v42 = *(void *)(v3 + v41);
              unint64_t v43 = v42 + 1;
              if (v42 == -1 || v43 > *(void *)(v3 + *v6)) {
                break;
              }
              char v44 = *(unsigned char *)(*(void *)(v3 + *v20) + v42);
              *(void *)(v3 + v41) = v43;
              v40 |= (unint64_t)(v44 & 0x7F) << v38;
              if (v44 < 0)
              {
                v38 += 7;
                BOOL v28 = v39++ >= 9;
                if (!v28) {
                  continue;
                }
              }
              goto LABEL_53;
            }
            *(unsigned char *)(v3 + *v19) = 1;
LABEL_53:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          while (1)
          {
            uint64_t v51 = *v16;
            uint64_t v52 = *(void *)(v3 + v51);
            unint64_t v53 = v52 + 1;
            if (v52 == -1 || v53 > *(void *)(v3 + *v6)) {
              break;
            }
            char v54 = *(unsigned char *)(*(void *)(v3 + *v20) + v52);
            *(void *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              BOOL v28 = v49++ >= 9;
              if (!v28) {
                continue;
              }
            }
            goto LABEL_76;
          }
          *(unsigned char *)(v3 + *v19) = 1;
LABEL_76:
          PBRepeatedInt32Add();
        }
LABEL_77:
        if ((v61 & 1) == 0) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
    }
    else if ((v60 & 1) != 0 && (*(unsigned char *)(a1 + 68) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        int v47 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v46;
      }
      int v18 = PBUnknownFieldAdd();
      if (!v18) {
        goto LABEL_82;
      }
      goto LABEL_77;
    }
LABEL_65:
    int v18 = PBReaderSkipValueWithTag();
    if ((v18 & v61 & 1) == 0) {
      goto LABEL_80;
    }
LABEL_78:
    if (*(void *)(v3 + *v16) >= *(void *)(v3 + *v6)) {
      goto LABEL_79;
    }
  }
  if (!v33 || (*(unsigned char *)(a1 + 68) & 4) != 0) {
    goto LABEL_65;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_100;
  }
  uint64_t v45 = objc_alloc_init(GEOTimeRange);
  if (GEOTimeRangeReadAllFrom((uint64_t)v45, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOHours _addNoFlagsTimeRange:](a1, v45);

    goto LABEL_77;
  }

LABEL_100:
  int v18 = 0;
LABEL_80:
  LOBYTE(v15) = v60;
LABEL_81:
  if (v15) {
LABEL_82:
  }
    *(unsigned char *)(a1 + 68) |= 1u;
  if (v62 & 1 | ((v18 & 1) == 0))
  {
    *(unsigned char *)(a1 + 68) |= 2u;
    *(unsigned char *)(a1 + 68) |= 4u;
    goto LABEL_93;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        int v56 = *v17++;
        int v55 = v56;
        if (v56 == 1) {
          break;
        }
        if (v55 == 2)
        {
          char v57 = 4;
          goto LABEL_92;
        }
        if (!v55) {
          goto LABEL_93;
        }
      }
      char v57 = 2;
LABEL_92:
      *(unsigned char *)(a1 + 68) |= v57;
      continue;
    }
  }
LABEL_93:
  if (v18) {
    unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v62)
  {
    unsigned int v58 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189D9DD4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D9E354(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOHoursCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v1 = *(id *)(a1 + 48);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v6;
    while (1)
    {
      if (*(void *)v6 != v4) {
        objc_enumerationMutation(v1);
      }
      if (!--v3)
      {
        uint64_t v3 = [v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
        if (!v3) {
          break;
        }
      }
    }
  }
}

unint64_t GEOHoursReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOHoursReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOHoursReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOHoursReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOHoursReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOHoursCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189D9E6A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D9E900(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D9EB40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOIndexQueryNodeReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  long long v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = ((*(unsigned __int8 *)(a1 + 64) >> 3) & 1)
      + (*(unsigned char *)(a1 + 64) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 2) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 1;
        char v18 = v17 & ~(_BYTE)v12 | v8;
        unsigned __int8 v19 = v17 | v12;
        char v62 = v18;
        char v63 = v19 | v18;
        if ((v19 | v9)) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = a3;
        }
        char v64 = (v20 == 0) | v19;
        BOOL v65 = v19;
        char v21 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v22 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v10;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_78;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_78:
      int v60 = 1;
      goto LABEL_79;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v65;
    if ((v64 & 1) == 0)
    {
      int v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v9 & 1) == 0) {
          goto LABEL_65;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        while (1)
        {
          uint64_t v43 = *v21;
          uint64_t v44 = *(void *)(v3 + v43);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(v3 + *v7)) {
            break;
          }
          char v46 = *(unsigned char *)(*(void *)(v3 + *v23) + v44);
          *(void *)(v3 + v43) = v45;
          v42 |= (unint64_t)(v46 & 0x7F) << v40;
          if ((v46 & 0x80) == 0) {
            goto LABEL_68;
          }
          v40 += 7;
          BOOL v31 = v41++ >= 9;
          if (v31)
          {
            LODWORD(v42) = 0;
            goto LABEL_70;
          }
        }
        *(unsigned char *)(v3 + *v22) = 1;
LABEL_68:
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v42) = 0;
        }
LABEL_70:
        *(_DWORD *)(a1 + 60) = v42;
        goto LABEL_77;
      case 4:
        if (!v35) {
          goto LABEL_65;
        }
        if ((*(unsigned char *)(a1 + 64) & 2) == 0)
        {
          uint64_t v50 = PBReaderReadString();
          uint64_t v51 = 24;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_95;
        }
        char v55 = *(unsigned char *)(a1 + 64) << 6;
        goto LABEL_75;
      case 5:
        if (!v35) {
          goto LABEL_65;
        }
        if ((*(unsigned char *)(a1 + 64) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_95;
          }
          char v55 = 16 * *(unsigned char *)(a1 + 64);
LABEL_75:
          v10 += v55 >> 7;
        }
        else
        {
          uint64_t v50 = PBReaderReadString();
          uint64_t v51 = 40;
LABEL_59:
          uint64_t v52 = *(void **)(a1 + v51);
          *(void *)(a1 + v51) = v50;

          --v10;
        }
        goto LABEL_76;
      case 6:
        if (!v35 || (*(unsigned char *)(a1 + 64) & 4) != 0) {
          goto LABEL_65;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_95;
        }
        unint64_t v53 = objc_alloc_init(GEOIndexQueryNode);
        if (GEOIndexQueryNodeReadAllFrom())
        {
          PBReaderRecallMark();
          -[GEOIndexQueryNode _addNoFlagsOperands:](a1, v53);

LABEL_76:
          unsigned int v22 = (int *)MEMORY[0x1E4F940C8];
          long long v7 = (int *)MEMORY[0x1E4F940E0];
LABEL_77:
          if (!(v63 & 1 | (v10 != 0))) {
            goto LABEL_78;
          }
          continue;
        }

LABEL_95:
        int v60 = 0;
        unsigned int v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_79:
        int v61 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        if (v62) {
LABEL_80:
        }
          *(unsigned char *)(a1 + v61[505]) |= 1u;
        if (v65 || (v60 & 1) == 0)
        {
          *(unsigned char *)(a1 + v61[505]) |= 2u;
          *(unsigned char *)(a1 + v61[505]) |= 8u;
          *(unsigned char *)(a1 + v61[505]) |= 4u;
        }
        else if (v20)
        {
          while (1)
          {
            int v56 = *v20++;
            char v57 = 2;
            switch(v56)
            {
              case 0:
                goto LABEL_88;
              case 4:
                goto LABEL_87;
              case 5:
                char v57 = 8;
                goto LABEL_87;
              case 6:
                char v57 = 4;
LABEL_87:
                *(unsigned char *)(a1 + v61[505]) |= v57;
                break;
              default:
                continue;
            }
          }
        }
LABEL_88:
        if (v60) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v65)
        {
          unsigned int v58 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v62 & 1) == 0 || (*(unsigned char *)(a1 + 64))
        {
LABEL_65:
          char v54 = PBReaderSkipValueWithTag();
          long long v7 = (int *)MEMORY[0x1E4F940E0];
          unsigned int v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v54 & 1) == 0)
          {
            int v60 = 0;
            goto LABEL_79;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v47 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v48 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v47;
          }
          int v49 = PBUnknownFieldAdd();
          unsigned int v22 = (int *)MEMORY[0x1E4F940C8];
          long long v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v49)
          {
            int v60 = 0;
            int v61 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
            goto LABEL_80;
          }
        }
        goto LABEL_77;
    }
  }
}

void sub_189D9F630(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D9FB94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189D9FC88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOIndexQueryNodeCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        -[GEOIndexQueryNode readAll:](*(void *)(*((void *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEOIndexQueryNodeReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOIndexQueryNodeReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOIndexQueryNodeReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOIndexQueryNodeReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOIndexQueryNodeReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOIndexQueryNodeCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189DA0338(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOIndexQueryNodeIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = 0;
    long long v6 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_41;
      }
      char v7 = 0;
      unsigned int v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *v2;
        uint64_t v11 = *(void *)&a1[v10];
        unint64_t v12 = v11 + 1;
        if (v11 == -1 || v12 > *(void *)&a1[*v3]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&a1[*v6] + v11);
        *(void *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v7 += 7;
        if (v8++ >= 9)
        {
          unint64_t v9 = 0;
          int v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v15 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v9 = 0;
      }
LABEL_14:
      int v16 = v9 & 7;
      if (v15 || v16 == 4) {
        goto LABEL_41;
      }
      switch((v9 >> 3))
      {
        case 1u:
          if (v5 || (v9 & 7) != 0) {
            goto LABEL_48;
          }
          unsigned int v18 = 0;
          do
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3])
            {
              int v5 = 1;
              a1[*v4] = 1;
              goto LABEL_38;
            }
            int v22 = *(char *)(*(void *)&a1[*v6] + v20);
            *(void *)&a1[v19] = v21;
            int v5 = 1;
            if ((v22 & 0x80000000) == 0) {
              break;
            }
          }
          while (v18++ <= 8);
          goto LABEL_38;
        case 4u:
          if (v16 == 2) {
            goto LABEL_31;
          }
          goto LABEL_48;
        case 5u:
          if (v16 == 2) {
            goto LABEL_31;
          }
          goto LABEL_48;
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOIndexQueryNodeIsValid(a1)) {
            goto LABEL_48;
          }
          PBReaderRecallMark();
          goto LABEL_38;
        default:
LABEL_31:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_48:
            PBReaderRecallMark();
            return 0;
          }
LABEL_38:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_41;
          }
          break;
      }
    }
  }
  int v5 = 0;
LABEL_41:
  if (a1[*v4]) {
    BOOL v24 = 1;
  }
  else {
    BOOL v24 = v5 == 0;
  }
  uint64_t v25 = !v24;
  PBReaderRecallMark();
  return v25;
}

void sub_189DA0848(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOIndexQueryNodeIsDirty(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(unsigned char *)(a1 + 64) & 0x1E) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 64) & 4) == 0) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v3 = *(id *)(a1 + 32);
  uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v3);
        }
        if (GEOIndexQueryNodeIsDirty(*(void *)(*((void *)&v7 + 1) + 8 * i)))
        {
          uint64_t v2 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOIndexQueryNodeIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOIndexQueryNodeIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189DA0C5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedDisambiguationLabelReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v51 = v15 | v8;
        if ((v16 | v9)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        BOOL v54 = v16;
        char v52 = v16 | v15 | v8;
        char v53 = (v17 == 0) | v16;
        unsigned int v18 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_59;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_59:
      int v50 = 1;
      goto LABEL_60;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v54;
    if ((v53 & 1) == 0)
    {
      BOOL v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (!v32) {
        goto LABEL_51;
      }
      if ((*(unsigned char *)(a1 + 52) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_78;
        }
        char v44 = *(unsigned char *)(a1 + 52) << 6;
        goto LABEL_57;
      }
      uint64_t v37 = PBReaderReadString();
      uint64_t v38 = 24;
      goto LABEL_44;
    }
    if (v51 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_51:
      char v43 = PBReaderSkipValueWithTag();
      uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
      if ((v43 & 1) == 0)
      {
        int v50 = 0;
        goto LABEL_60;
      }
      goto LABEL_58;
    }
    if (!*(void *)(a1 + 16))
    {
      id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      unsigned int v41 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v40;
    }
    int v42 = PBUnknownFieldAdd();
    uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    if (!v42)
    {
      int v50 = 0;
      goto LABEL_61;
    }
LABEL_58:
    if (!(v52 & 1 | (v10 != 0))) {
      goto LABEL_59;
    }
  }
  if (!v32) {
    goto LABEL_51;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) == 0)
  {
    uint64_t v37 = PBReaderReadString();
    uint64_t v38 = 32;
LABEL_44:
    BOOL v39 = *(void **)(a1 + v38);
    *(void *)(a1 + v38) = v37;

    uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    --v10;
    goto LABEL_58;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v44 = 32 * *(unsigned char *)(a1 + 52);
LABEL_57:
    v10 += v44 >> 7;
    uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_58;
  }
LABEL_78:
  int v50 = 0;
  uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_60:
  if ((v51 & 1) == 0) {
    goto LABEL_62;
  }
LABEL_61:
  *(unsigned char *)(a1 + 52) |= 1u;
LABEL_62:
  if (v54 || (v50 & 1) == 0)
  {
    *(unsigned char *)(a1 + 52) |= 2u;
    *(unsigned char *)(a1 + 52) |= 4u;
    goto LABEL_72;
  }
  if (v17)
  {
    while (1)
    {
      int v47 = *v17++;
      int v46 = v47;
      if (v47 == 1) {
        break;
      }
      if (v46 == 2)
      {
        char v45 = 4;
LABEL_68:
        *(unsigned char *)(a1 + 52) |= v45;
      }
      else if (!v46)
      {
        goto LABEL_72;
      }
    }
    char v45 = 2;
    goto LABEL_68;
  }
LABEL_72:
  if (v50) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v54)
  {
    char v48 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189DA1884(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA1964(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedDisambiguationLabelReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOLocalizedDisambiguationLabelReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOLocalizedDisambiguationLabelReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOLocalizedDisambiguationLabelReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOLocalizedDisambiguationLabelReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189DA1BD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA1D70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA1EE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA2268(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedNameReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFAFFFBFFFDFFFCLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 76) & 4) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 2;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v65 = v15;
        char v66 = v16 | v15;
        if ((v16 | v8)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        char v67 = (v17 == 0) | v16;
        BOOL v68 = v16;
        unsigned int v18 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_94;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_94:
      int v63 = 1;
      goto LABEL_95;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v68;
    if ((v67 & 1) == 0)
    {
      BOOL v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_73;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + 76) |= 2u;
        while (1)
        {
          uint64_t v40 = *v18;
          uint64_t v41 = *(void *)(v3 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(v3 + *v6)) {
            break;
          }
          char v43 = *(unsigned char *)(*(void *)(v3 + *v20) + v41);
          *(void *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0) {
            goto LABEL_76;
          }
          v37 += 7;
          BOOL v28 = v38++ >= 9;
          if (v28)
          {
            uint64_t v39 = 0;
            goto LABEL_78;
          }
        }
        *(unsigned char *)(v3 + *v19) = 1;
LABEL_76:
        if (*(unsigned char *)(v3 + *v19)) {
          uint64_t v39 = 0;
        }
LABEL_78:
        *(unsigned char *)(a1 + 72) = v39 != 0;
        goto LABEL_93;
      case 2:
        if (!v32) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 76) & 8) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 24;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_112;
        }
        char v58 = 16 * *(unsigned char *)(a1 + 76);
        goto LABEL_91;
      case 3:
        if (!v32) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x10) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 32;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_112;
        }
        char v58 = 8 * *(unsigned char *)(a1 + 76);
        goto LABEL_91;
      case 4:
        if (!v32) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x20) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 40;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_112;
        }
        char v58 = 4 * *(unsigned char *)(a1 + 76);
        goto LABEL_91;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_73;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(unsigned char *)(a1 + 76) |= 1u;
        while (2)
        {
          uint64_t v52 = *v18;
          uint64_t v53 = *(void *)(v3 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v20) + v53);
            *(void *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v28 = v50++ >= 9;
              if (v28)
              {
                LODWORD(v51) = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v51) = 0;
        }
LABEL_82:
        *(_DWORD *)(a1 + 68) = v51;
        goto LABEL_93;
      case 6:
        if (!v32) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x40) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 48;
LABEL_72:
          int v56 = *(void **)(a1 + v48);
          *(void *)(a1 + v48) = v47;

          --v9;
LABEL_92:
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_93:
          if (!(v66 & 1 | (v9 != 0))) {
            goto LABEL_94;
          }
          continue;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v58 = 2 * *(unsigned char *)(a1 + 76);
LABEL_91:
          v9 += v58 >> 7;
          goto LABEL_92;
        }
LABEL_112:
        int v63 = 0;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_95:
        char v64 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        if (v65) {
LABEL_96:
        }
          *(unsigned char *)(a1 + v64[523]) |= 4u;
        if (v68 || (v63 & 1) == 0)
        {
          *(unsigned char *)(a1 + v64[523]) |= 8u;
          *(unsigned char *)(a1 + v64[523]) |= 0x10u;
          *(unsigned char *)(a1 + v64[523]) |= 0x20u;
          *(unsigned char *)(a1 + v64[523]) |= 0x40u;
        }
        else if (v17)
        {
          while (1)
          {
            int v60 = *v17++;
            char v59 = 8;
            switch(v60)
            {
              case 0:
                goto LABEL_106;
              case 2:
                goto LABEL_104;
              case 3:
                char v59 = 16;
                goto LABEL_104;
              case 4:
                char v59 = 32;
                goto LABEL_104;
              case 6:
                char v59 = 64;
LABEL_104:
                *(unsigned char *)(a1 + v64[523]) |= v59;
                break;
              default:
                continue;
            }
          }
        }
LABEL_106:
        if (v63) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v68)
        {
          int v61 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v65 & 1) == 0 || (*(unsigned char *)(a1 + 76) & 4) != 0)
        {
LABEL_73:
          char v57 = PBReaderSkipValueWithTag();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v57 & 1) == 0)
          {
            int v63 = 0;
            goto LABEL_95;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v46)
          {
            int v63 = 0;
            char v64 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
            goto LABEL_96;
          }
        }
        goto LABEL_93;
    }
  }
}

void sub_189DA2B74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA2CE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA2E90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA3638(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedNameReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOLocalizedNameReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOLocalizedNameReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOLocalizedNameReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOLocalizedNameReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189DA37C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedNameReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOLocalizedNameReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DA382C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA3A60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedNameIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  BOOL v2 = *(unsigned __int8 *)(a1 + 76) > 7u;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189DA3E54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA4278(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMatchedTokenReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 72) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 | v7;
        char v16 = v14 & ~(_BYTE)v7 | v8;
        BOOL v17 = (int *)MEMORY[0x1E4F940E8];
        if (((v14 | v7) | v9)) {
          unsigned int v18 = 0;
        }
        else {
          unsigned int v18 = a3;
        }
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_94;
        }
        char v71 = v16;
        char v73 = v15 | v16;
        char v74 = (v18 == 0) | v15;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        char v72 = v14 | v7;
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(unsigned char *)(v3 + *v19)) {
      goto LABEL_92;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v17;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    int v30 = v23 & 7;
    if (v29 || v30 == 4)
    {
LABEL_92:
      LODWORD(v13) = 1;
      goto LABEL_93;
    }
    unint64_t v32 = v23 >> 3;
    BOOL v33 = v15;
    if ((v74 & 1) == 0)
    {
      int v34 = v18;
      do
      {
        int v36 = *v34++;
        int v35 = v36;
        BOOL v33 = v36 != 0;
        if (v36) {
          BOOL v37 = v35 == v32;
        }
        else {
          BOOL v37 = 1;
        }
      }
      while (!v37);
    }
    if (v32 == 3)
    {
      if (v33 && (*(unsigned char *)(a1 + 72) & 4) == 0)
      {
        if (v30 == 2)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_113;
          }
          uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
          while (*(void *)(v3 + *v17) < *(void *)(v3 + *v6))
          {
            if (*(unsigned char *)(v3 + *v19)) {
              break;
            }
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            while (1)
            {
              uint64_t v43 = *v17;
              uint64_t v44 = *(void *)(v3 + v43);
              unint64_t v45 = v44 + 1;
              if (v44 == -1 || v45 > *(void *)(v3 + *v6)) {
                break;
              }
              char v46 = *(unsigned char *)(*(void *)(v3 + *v20) + v44);
              *(void *)(v3 + v43) = v45;
              v42 |= (unint64_t)(v46 & 0x7F) << v40;
              if (v46 < 0)
              {
                v40 += 7;
                BOOL v28 = v41++ >= 9;
                if (!v28) {
                  continue;
                }
              }
              goto LABEL_56;
            }
            *(unsigned char *)(v3 + *v19) = 1;
LABEL_56:
            PBRepeatedUInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v61 = 0;
          uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v62 = *v17;
            uint64_t v63 = *(void *)(v3 + v62);
            unint64_t v64 = v63 + 1;
            if (v63 == -1 || v64 > *(void *)(v3 + *v6)) {
              break;
            }
            char v65 = *(unsigned char *)(*(void *)(v3 + *v20) + v63);
            *(void *)(v3 + v62) = v64;
            v61 |= (unint64_t)(v65 & 0x7F) << v59;
            if (v65 < 0)
            {
              v59 += 7;
              BOOL v28 = v60++ >= 9;
              if (!v28) {
                continue;
              }
            }
            goto LABEL_90;
          }
          *(unsigned char *)(v3 + *v19) = 1;
LABEL_90:
          PBRepeatedUInt64Add();
        }
        goto LABEL_91;
      }
      goto LABEL_72;
    }
    if (v32 == 2)
    {
      if (v9)
      {
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        *(unsigned char *)(a1 + 72) |= 1u;
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        while (1)
        {
          uint64_t v50 = *v17;
          uint64_t v51 = *(void *)(v3 + v50);
          unint64_t v52 = v51 + 1;
          if (v51 == -1 || v52 > *(void *)(v3 + *v6)) {
            break;
          }
          char v53 = *(unsigned char *)(*(void *)(v3 + *v20) + v51);
          *(void *)(v3 + v50) = v52;
          v49 |= (unint64_t)(v53 & 0x7F) << v47;
          if ((v53 & 0x80) == 0) {
            goto LABEL_77;
          }
          v47 += 7;
          BOOL v28 = v48++ >= 9;
          if (v28)
          {
            LODWORD(v49) = 0;
            goto LABEL_79;
          }
        }
        *(unsigned char *)(v3 + *v19) = 1;
LABEL_77:
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v49) = 0;
        }
LABEL_79:
        *(_DWORD *)(a1 + 68) = v49;
        goto LABEL_73;
      }
      goto LABEL_72;
    }
    if (v32 == 1) {
      break;
    }
    if ((v71 & 1) != 0 && (*(unsigned char *)(a1 + 72) & 2) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v54 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        char v55 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v54;
      }
      int v56 = PBUnknownFieldAdd();
      char v15 = v72;
      uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
      if (!v56)
      {
        LODWORD(v13) = 0;
LABEL_95:
        *(unsigned char *)(a1 + 72) |= 2u;
        goto LABEL_96;
      }
      goto LABEL_73;
    }
LABEL_72:
    char v57 = PBReaderSkipValueWithTag();
    char v15 = v72;
    uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
    if ((v57 & 1) == 0)
    {
      LODWORD(v13) = 0;
      goto LABEL_93;
    }
LABEL_73:
    if (!(v73 & 1 | (v10 != 0)) || *(void *)(v3 + *v17) >= *(void *)(v3 + *v6)) {
      goto LABEL_92;
    }
  }
  if (!v33) {
    goto LABEL_72;
  }
  if ((*(unsigned char *)(a1 + 72) & 8) == 0)
  {
    uint64_t v38 = PBReaderReadString();
    uint64_t v39 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v38;

    --v10;
    char v15 = v72;
    uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
    goto LABEL_73;
  }
  char v58 = PBReaderSkipValueWithTag();
  uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
  if (v58)
  {
    v10 += *(unsigned __int8 *)(a1 + 72) << 28 >> 31;
LABEL_91:
    char v15 = v72;
    goto LABEL_73;
  }
LABEL_113:
  LODWORD(v13) = 0;
  char v15 = v72;
LABEL_93:
  char v16 = v71;
LABEL_94:
  if (v16) {
    goto LABEL_95;
  }
LABEL_96:
  if (v15 & 1 | ((v13 & 1) == 0))
  {
    *(unsigned char *)(a1 + 72) |= 8u;
    *(unsigned char *)(a1 + 72) |= 4u;
    goto LABEL_106;
  }
  if (v18)
  {
    while (2)
    {
      while (1)
      {
        int v67 = *v18++;
        int v66 = v67;
        if (v67 == 1) {
          break;
        }
        if (v66 == 3)
        {
          char v68 = 4;
          goto LABEL_105;
        }
        if (!v66) {
          goto LABEL_106;
        }
      }
      char v68 = 8;
LABEL_105:
      *(unsigned char *)(a1 + 72) |= v68;
      continue;
    }
  }
LABEL_106:
  if (v13)
  {
    unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
    if ((v15 & 1) == 0) {
      return v3;
    }
LABEL_110:
    uint64_t v69 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v3 = 0;
    if (v15) {
      goto LABEL_110;
    }
  }
  return v3;
}

void sub_189DA4CEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA4E48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA57E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMatchedTokenReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMatchedTokenReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOMatchedTokenReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOMatchedTokenReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOMatchedTokenReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189DA5970(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMatchedTokenReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOMatchedTokenReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DA59D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOMatchedTokenIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = 0;
    long long v6 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_56;
      }
      char v7 = 0;
      unsigned int v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *v2;
        uint64_t v11 = *(void *)&a1[v10];
        unint64_t v12 = v11 + 1;
        if (v11 == -1 || v12 > *(void *)&a1[*v3]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&a1[*v6] + v11);
        *(void *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v7 += 7;
        BOOL v14 = v8++ >= 9;
        if (v14)
        {
          unint64_t v9 = 0;
          int v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v15 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v9 = 0;
      }
LABEL_14:
      int v16 = v9 & 7;
      if (v15 || v16 == 4) {
        goto LABEL_56;
      }
      unint64_t v18 = v9 >> 3;
      if ((v9 >> 3) == 3)
      {
        if (v16 != 2)
        {
          if ((v9 & 7) != 0) {
            goto LABEL_64;
          }
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              break;
            }
            int v22 = *(char *)(*(void *)&a1[*v6] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              unsigned int v23 = v16++;
              if (v23 <= 8) {
                continue;
              }
            }
            goto LABEL_53;
          }
LABEL_41:
          a1[*v4] = 1;
          goto LABEL_53;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_64;
        }
LABEL_43:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
        {
          unsigned int v30 = a1[*v4];
          if (a1[*v4]) {
            break;
          }
          while (1)
          {
            uint64_t v31 = *v2;
            uint64_t v32 = *(void *)&a1[v31];
            unint64_t v33 = v32 + 1;
            if (v32 == -1 || v33 > *(void *)&a1[*v3]) {
              break;
            }
            int v34 = *(char *)(*(void *)&a1[*v6] + v32);
            *(void *)&a1[v31] = v33;
            if (v34 < 0)
            {
              BOOL v14 = v30++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_43;
          }
          a1[*v4] = 1;
        }
        PBReaderRecallMark();
      }
      else
      {
        if (v18 == 2)
        {
          if ((v9 & 7) != 0) {
            goto LABEL_64;
          }
          unsigned int v24 = 0;
          while (1)
          {
            uint64_t v25 = *v2;
            uint64_t v26 = *(void *)&a1[v25];
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
              goto LABEL_41;
            }
            int v28 = *(char *)(*(void *)&a1[*v6] + v26);
            *(void *)&a1[v25] = v27;
            if (v28 < 0 && v24++ <= 8) {
              continue;
            }
            goto LABEL_53;
          }
        }
        if (v18 == 1)
        {
          if (v5 || v16 != 2)
          {
LABEL_64:
            PBReaderRecallMark();
            return 0;
          }
          int v5 = 1;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_64;
        }
      }
LABEL_53:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_56;
      }
    }
  }
  int v5 = 0;
LABEL_56:
  if (a1[*v4]) {
    BOOL v35 = 1;
  }
  else {
    BOOL v35 = v5 == 0;
  }
  uint64_t v36 = !v35;
  PBReaderRecallMark();
  return v36;
}

void sub_189DA5EE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMatchedTokenIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  BOOL v2 = (*(unsigned char *)(a1 + 72) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189DA6230(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA6530(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONamedFeatureReadAllFrom(void *a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    int v5 = (int *)MEMORY[0x1E4F940E0];
    long long v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      char v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            uint64_t v16 = *v6;
            int v17 = v3[v16];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        uint64_t v16 = *v6;
        int v17 = v3[v16];
        if (v3[v16]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v17 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          uint64_t v21 = *v4;
          unint64_t v22 = *(void *)&v3[v21];
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)&v3[*v5])
          {
            uint64_t v23 = *(void *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v22 + 8;
          }
          else
          {
            v3[v16] = 1;
            uint64_t v23 = 0;
          }
          a1[3] = v23;
        }
        else if ((v10 >> 3) == 1)
        {
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = (void *)a1[2];
          a1[2] = v19;
        }
        else
        {
          if (!a1[1])
          {
            id v24 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v25 = (void *)a1[1];
            a1[1] = v24;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_33;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_33:
    BOOL v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_189DA6D00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONamedFeatureReadFrom(void *a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEONamedFeatureReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DA6D64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONamedFeatureIsValid(char *a1)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  v32[0] = 0;
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_47;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4)
      {
LABEL_47:
        BOOL v29 = HIDWORD(v32[0]) != 0;
        goto LABEL_41;
      }
      if ((v8 >> 3) == 1) {
        break;
      }
      if ((v8 >> 3) != 2) {
        goto LABEL_36;
      }
      uint64_t v18 = 0;
      char v19 = 1;
      while (1)
      {
        char v20 = v19;
        int v21 = *((_DWORD *)v32 + v18);
        if (!v21) {
          break;
        }
        if (v21 != 2)
        {
          char v19 = 0;
          uint64_t v18 = 1;
          if (v20) {
            continue;
          }
        }
        goto LABEL_45;
      }
      *((_DWORD *)v32 + v18) = 2;
      if (v16 != 1) {
        goto LABEL_45;
      }
      uint64_t v26 = *v2;
      unint64_t v27 = *(void *)&a1[v26];
      if (v27 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v28 = v27 + 8, v28 <= *(void *)&a1[*v3])) {
        *(void *)&a1[v26] = v28;
      }
      else {
        a1[v14] = 1;
      }
LABEL_37:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_47;
      }
    }
    uint64_t v22 = 0;
    char v23 = 1;
    while (1)
    {
      char v24 = v23;
      int v25 = *((_DWORD *)v32 + v22);
      if (!v25) {
        break;
      }
      if (v25 != 1)
      {
        char v23 = 0;
        uint64_t v22 = 1;
        if (v24) {
          continue;
        }
      }
      goto LABEL_45;
    }
    *((_DWORD *)v32 + v22) = 1;
    if (v16 != 2)
    {
LABEL_45:
      PBReaderRecallMark();
      return 0;
    }
LABEL_36:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_37;
  }
  BOOL v29 = 0;
LABEL_41:
  if (a1[*v4]) {
    BOOL v30 = 0;
  }
  else {
    BOOL v30 = v29;
  }
  PBReaderRecallMark();
  return v30;
}

unint64_t GEONamedFieldReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        uint64_t v13 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v8;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v9)) {
          char v19 = 0;
        }
        else {
          char v19 = a3;
        }
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        char v20 = (int *)MEMORY[0x1E4F940E8];
        int v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
LABEL_10:
        ++v10;
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_60;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_60:
      int v51 = 1;
      goto LABEL_61;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_54;
      }
      if ((*(unsigned char *)(a1 + 52) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_80;
        }
        v10 += *(unsigned __int8 *)(a1 + 52) << 30 >> 31;
      }
      else
      {
        uint64_t v39 = PBReaderReadString();
        char v40 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v39;

        --v10;
      }
      goto LABEL_58;
    }
    if (v53 & 1) == 0 || (*(unsigned char *)(a1 + 52)) {
      goto LABEL_54;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      uint64_t v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v44 = PBUnknownFieldAdd();
    int v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v44)
    {
      int v51 = 0;
      unint64_t v52 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
      goto LABEL_62;
    }
LABEL_59:
    if (!(v54 & 1 | (v10 != 0))) {
      goto LABEL_60;
    }
  }
  if (!v34 || (*(unsigned char *)(a1 + 52) & 4) != 0)
  {
LABEL_54:
    char v45 = PBReaderSkipValueWithTag();
    int v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v45 & 1) == 0)
    {
      int v51 = 0;
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_80;
  }
  unsigned int v41 = objc_alloc_init(GEONamedFieldValue);
  if (GEONamedFieldValueReadAllFrom((uint64_t)v41, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    -[GEONamedField _addNoFlagsValues:](a1, v41);

LABEL_58:
    int v21 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_59;
  }

LABEL_80:
  int v51 = 0;
  int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_61:
  unint64_t v52 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
  if ((v53 & 1) == 0) {
    goto LABEL_63;
  }
LABEL_62:
  *(unsigned char *)(a1 + v52[546]) |= 1u;
LABEL_63:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[546]) |= 2u;
    *(unsigned char *)(a1 + v52[546]) |= 4u;
    goto LABEL_73;
  }
  if (v19)
  {
    while (1)
    {
      int v48 = *v19++;
      int v47 = v48;
      if (v48 == 1) {
        break;
      }
      if (v47 == 2)
      {
        char v46 = 4;
LABEL_69:
        *(unsigned char *)(a1 + v52[546]) |= v46;
      }
      else if (!v47)
      {
        goto LABEL_73;
      }
    }
    char v46 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    uint64_t v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189DA7B28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA7FA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DA8090(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEONamedFieldCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        -[GEONamedFieldValue readAll:](*(void *)(*((void *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEONamedFieldReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEONamedFieldReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEONamedFieldReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEONamedFieldReadAllFrom_initialTag;
  }
  unint64_t Specified = GEONamedFieldReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEONamedFieldCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189DA892C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEONamedFieldIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    long long v6 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v7 = 0;
      unsigned int v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *v2;
        uint64_t v11 = *(void *)&a1[v10];
        unint64_t v12 = v11 + 1;
        if (v11 == -1 || v12 > *(void *)&a1[*v3]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&a1[*v6] + v11);
        *(void *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v7 += 7;
        BOOL v14 = v8++ >= 9;
        if (v14)
        {
          unint64_t v9 = 0;
          int v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v15 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v9 = 0;
      }
LABEL_14:
      int v16 = v9 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      if ((v9 >> 3) == 2)
      {
        if (v16 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_87;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_26:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v18 = 0;
          unsigned int v19 = 0;
          unint64_t v20 = 0;
          while (1)
          {
            uint64_t v21 = *v2;
            uint64_t v22 = *(void *)&a1[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&a1[*v3]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&a1[*v6] + v22);
            *(void *)&a1[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_36;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              unint64_t v20 = 0;
              uint64_t v25 = *v4;
              int v26 = a1[v25];
              goto LABEL_38;
            }
          }
          a1[*v4] = 1;
LABEL_36:
          uint64_t v25 = *v4;
          int v26 = a1[v25];
          if (a1[v25]) {
            unint64_t v20 = 0;
          }
LABEL_38:
          int v27 = v20 & 7;
          if (v26 || v27 == 4) {
            break;
          }
          switch((v20 >> 3))
          {
            case 1u:
              if (v27 != 1) {
                goto LABEL_86;
              }
              uint64_t v29 = *v2;
              unint64_t v30 = *(void *)&a1[v29];
              if (v30 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_67;
              }
              unint64_t v31 = v30 + 8;
              if (v31 > *(void *)&a1[*v3]) {
                goto LABEL_67;
              }
              *(void *)&a1[v29] = v31;
              continue;
            case 2u:
              if (v27 == 2) {
                goto LABEL_48;
              }
              goto LABEL_86;
            case 3u:
              if ((v20 & 7) != 0) {
                goto LABEL_86;
              }
              unsigned int v32 = 0;
              while (1)
              {
                uint64_t v33 = *v2;
                uint64_t v34 = *(void *)&a1[v33];
                unint64_t v35 = v34 + 1;
                if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
                  goto LABEL_66;
                }
                int v36 = *(char *)(*(void *)&a1[*v6] + v34);
                *(void *)&a1[v33] = v35;
                if (v36 < 0)
                {
                  BOOL v37 = v32++ > 8;
                  if (!v37) {
                    continue;
                  }
                }
                goto LABEL_26;
              }
            case 4u:
              if ((v20 & 7) != 0) {
                goto LABEL_86;
              }
              unsigned int v38 = 0;
              break;
            case 5u:
              if (v27 != 2 || !PBReaderPlaceMark() || !GEONamedFieldIsValid(a1)) {
                goto LABEL_86;
              }
              PBReaderRecallMark();
              continue;
            default:
LABEL_48:
              if (PBReaderSkipValueWithTag()) {
                continue;
              }
LABEL_86:
              PBReaderRecallMark();
              goto LABEL_87;
          }
          while (1)
          {
            uint64_t v39 = *v2;
            uint64_t v40 = *(void *)&a1[v39];
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
              break;
            }
            int v42 = *(char *)(*(void *)&a1[*v6] + v40);
            *(void *)&a1[v39] = v41;
            if (v42 < 0)
            {
              BOOL v37 = v38++ > 8;
              if (!v37) {
                continue;
              }
            }
            goto LABEL_26;
          }
LABEL_66:
          uint64_t v25 = *v4;
LABEL_67:
          a1[v25] = 1;
        }
        int v43 = a1[*v4];
        PBReaderRecallMark();
        if (v43)
        {
LABEL_87:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        if ((v9 >> 3) == 1)
        {
          if (v5 || v16 != 2) {
            goto LABEL_87;
          }
          int v5 = 1;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_87;
        }
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  if (a1[*v4]) {
    BOOL v44 = 1;
  }
  else {
    BOOL v44 = v5 == 0;
  }
  uint64_t v45 = !v44;
  PBReaderRecallMark();
  return v45;
}

void sub_189DA8FC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEONamedFieldIsDirty(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(unsigned char *)(a1 + 52) & 0xE) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) == 0) {
    return 0;
  }
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1 + 32);
  uint64_t v2 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v3);
        }
        long long v6 = *(os_unfair_lock_s **)(*((void *)&v9 + 1) + 8 * i);
        if (v6)
        {
          os_unfair_lock_lock_with_options();
          char IsDirty = _GEONamedFieldValueIsDirty((uint64_t)v6);
          os_unfair_lock_unlock(v6 + 16);
          if (IsDirty)
          {
            uint64_t v2 = 1;
            goto LABEL_16;
          }
        }
      }
      uint64_t v2 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_16:

  return v2;
}

os_unfair_lock_s *GEONamedFieldIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEONamedFieldIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189DA93E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONamedFieldValueReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  char v7 = v6;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = ((*(unsigned __int8 *)(a1 + 72) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 3) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v11])
    {
      case -4:
        ++v13;
        uint64_t v14 = v8;
        goto LABEL_8;
      case -3:
        char v10 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v8;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 != 0;
        char v18 = v17 & ~(_BYTE)v12 | v9;
        unsigned __int8 v19 = v17 | v12;
        char v72 = v18;
        char v73 = v19 | v18;
        if ((v19 | v10)) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = a3;
        }
        char v74 = (v20 == 0) | v19;
        BOOL v75 = v19;
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v8;
        uint64_t v15 = v9;
LABEL_8:
        uint64_t v16 = v12;
LABEL_10:
        ++v11;
        uint64_t v8 = v14;
        uint64_t v9 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_93;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_93:
      int v70 = 1;
      goto LABEL_94;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v75;
    if ((v74 & 1) == 0)
    {
      int v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v10 & 1) == 0) {
          goto LABEL_74;
        }
        *(unsigned char *)(a1 + 72) |= 1u;
        uint64_t v40 = *v21;
        unint64_t v41 = *(void *)(v3 + v40);
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v42 = *(void *)(*(void *)(v3 + *v23) + v41);
          *(void *)(v3 + v40) = v41 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v42 = 0;
        }
        *(void *)(a1 + 24) = v42;
        goto LABEL_92;
      case 2:
        if (!v35) {
          goto LABEL_74;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x20) == 0)
        {
          uint64_t v46 = PBReaderReadString();
          int v47 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v46;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_113;
        }
        char v64 = 4 * *(unsigned char *)(a1 + 72);
        goto LABEL_88;
      case 3:
        if ((v10 & 1) == 0) {
          goto LABEL_74;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        *(unsigned char *)(a1 + 72) |= 2u;
        while (2)
        {
          uint64_t v51 = *v21;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v23) + v52);
            *(void *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              BOOL v31 = v49++ >= 9;
              if (v31)
              {
                uint64_t v50 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v50 = 0;
        }
LABEL_79:
        *(void *)(a1 + 32) = v50;
        goto LABEL_92;
      case 4:
        if ((v10 & 1) == 0) {
          goto LABEL_74;
        }
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        *(unsigned char *)(a1 + 72) |= 4u;
        while (2)
        {
          uint64_t v58 = *v21;
          uint64_t v59 = *(void *)(v3 + v58);
          unint64_t v60 = v59 + 1;
          if (v59 == -1 || v60 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v61 = *(unsigned char *)(*(void *)(v3 + *v23) + v59);
            *(void *)(v3 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              BOOL v31 = v56++ >= 9;
              if (v31)
              {
                uint64_t v57 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v57 = 0;
        }
LABEL_83:
        *(unsigned char *)(a1 + 68) = v57 != 0;
        goto LABEL_92;
      case 5:
        if (!v35) {
          goto LABEL_74;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_113;
          }
          char v64 = 8 * *(unsigned char *)(a1 + 72);
LABEL_88:
          v11 += v64 >> 7;
          goto LABEL_89;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_113;
        }
        uint64_t v62 = objc_alloc_init(GEONamedField);
        if (GEONamedFieldReadAllFrom())
        {
          PBReaderRecallMark();
          int v47 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v62;
LABEL_73:

          --v11;
LABEL_89:
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          char v7 = (int *)MEMORY[0x1E4F940E0];
LABEL_92:
          if (!(v73 & 1 | (v11 != 0))) {
            goto LABEL_93;
          }
          continue;
        }

LABEL_113:
        int v70 = 0;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_94:
        char v71 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        if (v72) {
LABEL_95:
        }
          *(unsigned char *)(a1 + v71[555]) |= 8u;
        if (v75 || (v70 & 1) == 0)
        {
          *(unsigned char *)(a1 + v71[555]) |= 0x20u;
          *(unsigned char *)(a1 + v71[555]) |= 0x10u;
          goto LABEL_106;
        }
        if (v20)
        {
          while (2)
          {
            while (1)
            {
              int v66 = *v20++;
              int v65 = v66;
              if (v66 == 2) {
                break;
              }
              if (v65 == 5)
              {
                char v67 = 16;
                goto LABEL_105;
              }
              if (!v65) {
                goto LABEL_106;
              }
            }
            char v67 = 32;
LABEL_105:
            *(unsigned char *)(a1 + v71[555]) |= v67;
            continue;
          }
        }
LABEL_106:
        if (v70) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v75)
        {
          char v68 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v72 & 1) == 0 || (*(unsigned char *)(a1 + 72) & 8) != 0)
        {
LABEL_74:
          char v63 = PBReaderSkipValueWithTag();
          char v7 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v63 & 1) == 0)
          {
            int v70 = 0;
            goto LABEL_94;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            BOOL v44 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v43;
          }
          int v45 = PBUnknownFieldAdd();
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          char v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v45)
          {
            int v70 = 0;
            char v71 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
            goto LABEL_95;
          }
        }
        goto LABEL_92;
    }
  }
}

void sub_189DAA400(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DAA4F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONamedFieldValueReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEONamedFieldValueReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)char v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEONamedFieldValueReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEONamedFieldValueReadAllFrom_initialTag;
  }
  unint64_t Specified = GEONamedFieldValueReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    -[GEONamedField readAll:](*(void *)(a1 + 40), 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189DAA77C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DAA980(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEONamedFieldValueIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  if ((*(unsigned char *)(a1 + 72) & 0x60) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 72) & 0x10) == 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 40);

  return GEONamedFieldIsDirty(v3);
}

void sub_189DAABF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPhotoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v58 = v15;
        char v59 = v16 | v15;
        if ((v16 | v8)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        char v18 = (int *)MEMORY[0x1E4F940E8];
        char v60 = (v17 == 0) | v16;
        BOOL v61 = v16;
        unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_72;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_72:
      int v56 = 1;
      goto LABEL_73;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v61;
    if ((v60 & 1) == 0)
    {
      uint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 3)
    {
      if (!v32) {
        goto LABEL_62;
      }
      if ((*(unsigned char *)(a1 + 56) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_92;
        }
        v9 += *(unsigned __int8 *)(a1 + 56) << 28 >> 31;
      }
      else
      {
        uint64_t v44 = PBReaderReadString();
        int v45 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v44;

        --v9;
      }
      goto LABEL_70;
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_62;
      }
      char v37 = 0;
      unsigned int v38 = 0;
      uint64_t v39 = 0;
      *(unsigned char *)(a1 + 56) |= 1u;
      while (1)
      {
        uint64_t v40 = *v18;
        uint64_t v41 = *(void *)(v3 + v40);
        unint64_t v42 = v41 + 1;
        if (v41 == -1 || v42 > *(void *)(v3 + *v6)) {
          break;
        }
        char v43 = *(unsigned char *)(*(void *)(v3 + *v20) + v41);
        *(void *)(v3 + v40) = v42;
        v39 |= (unint64_t)(v43 & 0x7F) << v37;
        if ((v43 & 0x80) == 0) {
          goto LABEL_65;
        }
        v37 += 7;
        BOOL v28 = v38++ >= 9;
        if (v28)
        {
          LODWORD(v39) = 0;
          goto LABEL_67;
        }
      }
      *(unsigned char *)(v3 + *v19) = 1;
LABEL_65:
      if (*(unsigned char *)(v3 + *v19)) {
        LODWORD(v39) = 0;
      }
LABEL_67:
      *(_DWORD *)(a1 + 52) = v39;
    }
    else
    {
      if ((v58 & 1) == 0 || (*(unsigned char *)(a1 + 56) & 2) != 0) {
        goto LABEL_62;
      }
      if (!*(void *)(a1 + 16))
      {
        id v47 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        char v48 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v47;
      }
      int v49 = PBUnknownFieldAdd();
      unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
      if (!v49)
      {
        int v56 = 0;
        uint64_t v57 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        goto LABEL_74;
      }
    }
LABEL_71:
    if (!(v59 & 1 | (v9 != 0))) {
      goto LABEL_72;
    }
  }
  if (!v32 || (*(unsigned char *)(a1 + 56) & 4) != 0)
  {
LABEL_62:
    char v50 = PBReaderSkipValueWithTag();
    unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
    if ((v50 & 1) == 0)
    {
      int v56 = 0;
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_92;
  }
  uint64_t v46 = objc_alloc_init(GEOPhotoInfo);
  if (GEOPhotoInfoReadAllFrom((uint64_t)v46, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOPhoto _addNoFlagsPhotoInfo:](a1, v46);

LABEL_70:
    unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_71;
  }

LABEL_92:
  int v56 = 0;
  unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_73:
  uint64_t v57 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
  if ((v58 & 1) == 0) {
    goto LABEL_75;
  }
LABEL_74:
  *(unsigned char *)(a1 + v57[565]) |= 2u;
LABEL_75:
  if (v61 || (v56 & 1) == 0)
  {
    *(unsigned char *)(a1 + v57[565]) |= 4u;
    *(unsigned char *)(a1 + v57[565]) |= 8u;
    goto LABEL_85;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        int v52 = *v17++;
        int v51 = v52;
        if (v52 == 2) {
          break;
        }
        if (v51 == 3)
        {
          char v53 = 8;
          goto LABEL_84;
        }
        if (!v51) {
          goto LABEL_85;
        }
      }
      char v53 = 4;
LABEL_84:
      *(unsigned char *)(a1 + v57[565]) |= v53;
      continue;
    }
  }
LABEL_85:
  if (v56) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v61)
  {
    char v54 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189DABA04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DAC31C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPhotoCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 24);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5++), "readAll:", 1, (void)v6);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEOPhotoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPhotoReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOPhotoReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOPhotoReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPhotoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPhotoCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189DAC5B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPhotoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOPhotoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DAC614(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoInfoIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          BOOL v23 = 0;
          goto LABEL_36;
        }
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_37;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8) {
            continue;
          }
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v23;
}

void sub_189DACA84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = (*(unsigned char *)(a1 + 56) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189DACEBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DAD258(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoInfoReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          uint64_t v25 = PBReaderReadString();
          unint64_t v26 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v25;
        }
        else if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_34;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6]) {
            LODWORD(v20) = 0;
          }
LABEL_36:
          *(_DWORD *)(a1 + 24) = v20;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v27 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            BOOL v28 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v27;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_39;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_39:
    BOOL v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_189DADEA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOPhotoInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DADF0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoOptionsReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_74;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        int v17 = v10 & 7;
        if (v16 || v17 == 4) {
          goto LABEL_74;
        }
        unint64_t v19 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark()) {
              goto LABEL_75;
            }
            while (*(void *)&v3[*v4] < *(void *)&v3[*v5] && !v3[*v6])
            {
              char v27 = 0;
              unsigned int v28 = 0;
              uint64_t v29 = 0;
              while (1)
              {
                uint64_t v30 = *v4;
                uint64_t v31 = *(void *)&v3[v30];
                unint64_t v32 = v31 + 1;
                if (v31 == -1 || v32 > *(void *)&v3[*v5]) {
                  break;
                }
                char v33 = *(unsigned char *)(*(void *)&v3[*v7] + v31);
                *(void *)&v3[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  BOOL v15 = v28++ >= 9;
                  if (!v15) {
                    continue;
                  }
                }
                goto LABEL_41;
              }
              v3[*v6] = 1;
LABEL_41:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v43 = 0;
            unsigned int v44 = 0;
            uint64_t v45 = 0;
            while (1)
            {
              uint64_t v46 = *v4;
              uint64_t v47 = *(void *)&v3[v46];
              unint64_t v48 = v47 + 1;
              if (v47 == -1 || v48 > *(void *)&v3[*v5]) {
                break;
              }
              char v49 = *(unsigned char *)(*(void *)&v3[*v7] + v47);
              *(void *)&v3[v46] = v48;
              v45 |= (unint64_t)(v49 & 0x7F) << v43;
              if (v49 < 0)
              {
                v43 += 7;
                BOOL v15 = v44++ >= 9;
                if (!v15) {
                  continue;
                }
              }
              goto LABEL_73;
            }
            v3[*v6] = 1;
LABEL_73:
            PBRepeatedInt32Add();
          }
          goto LABEL_62;
        }
        if (v19 == 2) {
          break;
        }
        if (v19 == 1)
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          while (1)
          {
            uint64_t v23 = *v4;
            uint64_t v24 = *(void *)&v3[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&v3[*v5]) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)&v3[*v7] + v24);
            *(void *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0) {
              goto LABEL_54;
            }
            v20 += 7;
            BOOL v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_56;
            }
          }
          v3[*v6] = 1;
LABEL_54:
          if (v3[*v6]) {
            LODWORD(v22) = 0;
          }
LABEL_56:
          uint64_t v42 = 40;
LABEL_61:
          *(_DWORD *)(a1 + v42) = v22;
          goto LABEL_62;
        }
        if (!*(void *)(a1 + 8))
        {
          id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          uint64_t v41 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v40;
        }
        if (!PBUnknownFieldAdd()) {
          goto LABEL_75;
        }
LABEL_62:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_74;
        }
      }
      char v34 = 0;
      unsigned int v35 = 0;
      uint64_t v22 = 0;
      *(unsigned char *)(a1 + 48) |= 1u;
      while (1)
      {
        uint64_t v36 = *v4;
        uint64_t v37 = *(void *)&v3[v36];
        unint64_t v38 = v37 + 1;
        if (v37 == -1 || v38 > *(void *)&v3[*v5]) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)&v3[*v7] + v37);
        *(void *)&v3[v36] = v38;
        v22 |= (unint64_t)(v39 & 0x7F) << v34;
        if ((v39 & 0x80) == 0) {
          goto LABEL_58;
        }
        v34 += 7;
        BOOL v15 = v35++ >= 9;
        if (v15)
        {
          LODWORD(v22) = 0;
          goto LABEL_60;
        }
      }
      v3[*v6] = 1;
LABEL_58:
      if (v3[*v6]) {
        LODWORD(v22) = 0;
      }
LABEL_60:
      uint64_t v42 = 44;
      goto LABEL_61;
    }
LABEL_74:
    BOOL v50 = v3[*v6] == 0;
  }
  else
  {
LABEL_75:
    BOOL v50 = 0;
  }
  objc_sync_exit(v3);

  return v50;
}

void sub_189DAF584(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPhotoOptionsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOPhotoOptionsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DAF5EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 176));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 172);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 168)];
  unsigned int v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = (const float *)(a1 + 200);
  uint32x4_t v14 = (uint32x4_t)vld1q_dup_f32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  unsigned int v16 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C700), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C710), v15)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C6E0), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C6F0), v15))));
  while (2)
  {
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v20 = v16 > 0xB;
        char v21 = v20 & ~(_BYTE)v12 | v10;
        unsigned __int8 v22 = v20 | v12;
        char v111 = v21;
        char v112 = v22 | v21;
        if ((v22 | v9)) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = a3;
        }
        uint64_t v24 = (int *)MEMORY[0x1E4F940E8];
        char v113 = (v23 == 0) | v22;
        BOOL v114 = v22;
        unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
        char v26 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v16;
LABEL_7:
        uint64_t v17 = v10;
LABEL_8:
        uint64_t v18 = v11;
        uint64_t v19 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        uint64_t v12 = v19;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v24) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v25)) {
      goto LABEL_240;
    }
    char v27 = 0;
    unsigned int v28 = 0;
    unint64_t v29 = 0;
    while (1)
    {
      uint64_t v30 = *v24;
      uint64_t v31 = *(void *)(v3 + v30);
      unint64_t v32 = v31 + 1;
      if (v31 == -1 || v32 > *(void *)(v3 + *v7)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(v3 + *v26) + v31);
      *(void *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0) {
        goto LABEL_25;
      }
      v27 += 7;
      BOOL v34 = v28++ >= 9;
      if (v34)
      {
        unint64_t v29 = 0;
        int v35 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v25) = 1;
LABEL_25:
    int v35 = *(unsigned __int8 *)(v3 + *v25);
    if (*(unsigned char *)(v3 + *v25)) {
      unint64_t v29 = 0;
    }
LABEL_27:
    if (v35 || (v29 & 7) == 4)
    {
LABEL_240:
      int v110 = 1;
      goto LABEL_241;
    }
    unint64_t v37 = v29 >> 3;
    BOOL v38 = v114;
    if ((v113 & 1) == 0)
    {
      char v39 = v23;
      do
      {
        int v41 = *v39++;
        int v40 = v41;
        BOOL v38 = v41 != 0;
        if (v41) {
          BOOL v42 = v40 == v37;
        }
        else {
          BOOL v42 = 1;
        }
      }
      while (!v42);
    }
    if ((int)v37 <= 99) {
      break;
    }
    switch(v37)
    {
      case 0x64:
        if (v9)
        {
          char v91 = 0;
          unsigned int v92 = 0;
          uint64_t v45 = 0;
          *(_DWORD *)(a1 + 200) |= 4u;
          while (1)
          {
            uint64_t v93 = *v24;
            uint64_t v94 = *(void *)(v3 + v93);
            unint64_t v95 = v94 + 1;
            if (v94 == -1 || v95 > *(void *)(v3 + *v7)) {
              break;
            }
            char v96 = *(unsigned char *)(*(void *)(v3 + *v26) + v94);
            *(void *)(v3 + v93) = v95;
            v45 |= (unint64_t)(v96 & 0x7F) << v91;
            if ((v96 & 0x80) == 0) {
              goto LABEL_206;
            }
            v91 += 7;
            BOOL v34 = v92++ >= 9;
            if (v34)
            {
              uint64_t v45 = 0;
              goto LABEL_208;
            }
          }
          *(unsigned char *)(v3 + *v25) = 1;
LABEL_206:
          if (*(unsigned char *)(v3 + *v25)) {
            uint64_t v45 = 0;
          }
LABEL_208:
          uint64_t v102 = 80;
LABEL_209:
          *(void *)(a1 + v102) = v45;
          goto LABEL_236;
        }
LABEL_178:
        char v101 = PBReaderSkipValueWithTag();
        char v26 = (int *)MEMORY[0x1E4F940B8];
        unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
        unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
        if ((v101 & 1) == 0)
        {
          int v110 = 0;
          goto LABEL_241;
        }
        goto LABEL_236;
      case 0xCA:
        if (v38)
        {
          if ((*(unsigned char *)(a1 + 202) & 2) == 0)
          {
            uint64_t v97 = PBReaderReadString();
            uint64_t v90 = *(void **)(a1 + 112);
            *(void *)(a1 + 112) = v97;
            goto LABEL_154;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_270;
          }
          int v104 = (int)(*(_DWORD *)(a1 + 200) << 14) >> 31;
LABEL_234:
          v8 += v104;
LABEL_235:
          unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
          char v26 = (int *)MEMORY[0x1E4F940B8];
          goto LABEL_236;
        }
        goto LABEL_178;
      case 0xCE:
        if (v9)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v52 = 0;
          *(_DWORD *)(a1 + 200) |= 0x20u;
          while (1)
          {
            uint64_t v53 = *v24;
            uint64_t v54 = *(void *)(v3 + v53);
            unint64_t v55 = v54 + 1;
            if (v54 == -1 || v55 > *(void *)(v3 + *v7)) {
              break;
            }
            char v56 = *(unsigned char *)(*(void *)(v3 + *v26) + v54);
            *(void *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if ((v56 & 0x80) == 0) {
              goto LABEL_185;
            }
            v50 += 7;
            BOOL v34 = v51++ >= 9;
            if (v34)
            {
              LODWORD(v52) = 0;
              goto LABEL_187;
            }
          }
          *(unsigned char *)(v3 + *v25) = 1;
LABEL_185:
          if (*(unsigned char *)(v3 + *v25)) {
            LODWORD(v52) = 0;
          }
LABEL_187:
          uint64_t v103 = 188;
LABEL_204:
          *(_DWORD *)(a1 + v103) = v52;
          goto LABEL_236;
        }
        goto LABEL_178;
    }
LABEL_172:
    if (v111 & 1) == 0 || (*(unsigned char *)(a1 + 201)) {
      goto LABEL_178;
    }
    if (!*(void *)(a1 + 16))
    {
      id v98 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      uint64_t v99 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v98;
    }
    int v100 = PBUnknownFieldAdd();
    unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
    unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
    char v26 = (int *)MEMORY[0x1E4F940B8];
    if (!v100)
    {
      int v110 = 0;
      goto LABEL_242;
    }
LABEL_236:
    if (!(v112 & 1 | (v8 != 0))) {
      goto LABEL_240;
    }
  }
  switch((int)v37)
  {
    case 1:
      if ((v9 & 1) == 0) {
        goto LABEL_178;
      }
      char v43 = 0;
      unsigned int v44 = 0;
      uint64_t v45 = 0;
      *(_DWORD *)(a1 + 200) |= 1u;
      while (2)
      {
        uint64_t v46 = *v24;
        uint64_t v47 = *(void *)(v3 + v46);
        unint64_t v48 = v47 + 1;
        if (v47 == -1 || v48 > *(void *)(v3 + *v7))
        {
          *(unsigned char *)(v3 + *v25) = 1;
        }
        else
        {
          char v49 = *(unsigned char *)(*(void *)(v3 + *v26) + v47);
          *(void *)(v3 + v46) = v48;
          v45 |= (unint64_t)(v49 & 0x7F) << v43;
          if (v49 < 0)
          {
            v43 += 7;
            BOOL v34 = v44++ >= 9;
            if (v34)
            {
              uint64_t v45 = 0;
              goto LABEL_183;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(v3 + *v25)) {
        uint64_t v45 = 0;
      }
LABEL_183:
      uint64_t v102 = 24;
      goto LABEL_209;
    case 3:
      if ((v9 & 1) == 0) {
        goto LABEL_178;
      }
      char v57 = 0;
      unsigned int v58 = 0;
      uint64_t v52 = 0;
      *(_DWORD *)(a1 + 200) |= 0x40u;
      while (2)
      {
        uint64_t v59 = *v24;
        uint64_t v60 = *(void *)(v3 + v59);
        unint64_t v61 = v60 + 1;
        if (v60 == -1 || v61 > *(void *)(v3 + *v7))
        {
          *(unsigned char *)(v3 + *v25) = 1;
        }
        else
        {
          char v62 = *(unsigned char *)(*(void *)(v3 + *v26) + v60);
          *(void *)(v3 + v59) = v61;
          v52 |= (unint64_t)(v62 & 0x7F) << v57;
          if (v62 < 0)
          {
            v57 += 7;
            BOOL v34 = v58++ >= 9;
            if (v34)
            {
              LODWORD(v52) = 0;
              goto LABEL_191;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(v3 + *v25)) {
        LODWORD(v52) = 0;
      }
LABEL_191:
      uint64_t v103 = 192;
      goto LABEL_204;
    case 4:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 201) & 0x80) == 0)
      {
        uint64_t v63 = PBReaderReadString();
        uint64_t v64 = 96;
        goto LABEL_133;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_270;
      }
      int v104 = (int)(*(_DWORD *)(a1 + 200) << 16) >> 31;
      goto LABEL_234;
    case 5:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 201) & 0x40) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_270;
        }
        int v104 = (int)(*(_DWORD *)(a1 + 200) << 17) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEOMapRegion);
      if (!GEOMapRegionReadAllFrom((uint64_t)v65, (void *)v3)) {
        goto LABEL_269;
      }
      PBReaderRecallMark();
      uint64_t v66 = 88;
      goto LABEL_153;
    case 6:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 201) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_270;
        }
        int v104 = (int)(*(_DWORD *)(a1 + 200) << 22) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEOAddress);
      if (!GEOAddressReadAllFrom((uint64_t)v65, (void *)v3, v11 & 1)) {
        goto LABEL_269;
      }
      PBReaderRecallMark();
      uint64_t v66 = 32;
      goto LABEL_153;
    case 7:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 202) & 4) == 0)
      {
        uint64_t v63 = PBReaderReadString();
        uint64_t v64 = 120;
        goto LABEL_133;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_270;
      }
      int v104 = (int)(*(_DWORD *)(a1 + 200) << 13) >> 31;
      goto LABEL_234;
    case 8:
      if (!v38) {
        goto LABEL_178;
      }
      if (*(unsigned char *)(a1 + 202))
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_270;
        }
        int v104 = (int)(*(_DWORD *)(a1 + 200) << 15) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEOAddress);
      if (!GEOAddressReadAllFrom((uint64_t)v65, (void *)v3, v11 & 1)) {
        goto LABEL_269;
      }
      PBReaderRecallMark();
      uint64_t v66 = 104;
      goto LABEL_153;
    case 9:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 201) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_270;
        }
        int v104 = (int)(*(_DWORD *)(a1 + 200) << 20) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEOLatLng);
      if (!GEOLatLngReadAllFrom((uint64_t)v65, (void *)v3)) {
        goto LABEL_269;
      }
      PBReaderRecallMark();
      uint64_t v66 = 56;
      goto LABEL_153;
    case 10:
      if (!v38 || (*(unsigned char *)(a1 + 201) & 4) != 0) {
        goto LABEL_178;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEOBusiness);
      if (!GEOBusinessReadAllFrom((uint64_t)v65, (void *)v3, v11 & 1)) {
        goto LABEL_269;
      }
      PBReaderRecallMark();
      -[GEOPlace _addNoFlagsBusiness:](a1, v65);
      goto LABEL_160;
    case 11:
      if ((v9 & 1) == 0) {
        goto LABEL_178;
      }
      char v67 = 0;
      unsigned int v68 = 0;
      uint64_t v52 = 0;
      *(_DWORD *)(a1 + 200) |= 8u;
      while (2)
      {
        uint64_t v69 = *v24;
        uint64_t v70 = *(void *)(v3 + v69);
        unint64_t v71 = v70 + 1;
        if (v70 == -1 || v71 > *(void *)(v3 + *v7))
        {
          *(unsigned char *)(v3 + *v25) = 1;
        }
        else
        {
          char v72 = *(unsigned char *)(*(void *)(v3 + *v26) + v70);
          *(void *)(v3 + v69) = v71;
          v52 |= (unint64_t)(v72 & 0x7F) << v67;
          if (v72 < 0)
          {
            v67 += 7;
            BOOL v34 = v68++ >= 9;
            if (v34)
            {
              LODWORD(v52) = 0;
              goto LABEL_195;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(v3 + *v25)) {
        LODWORD(v52) = 0;
      }
LABEL_195:
      uint64_t v103 = 180;
      goto LABEL_204;
    case 12:
      if (!v38 || (*(unsigned char *)(a1 + 201) & 0x20) != 0) {
        goto LABEL_178;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEOLatLng);
      if (!GEOLatLngReadAllFrom((uint64_t)v65, (void *)v3)) {
        goto LABEL_269;
      }
      PBReaderRecallMark();
      -[GEOPlace _addNoFlagsEntryPoint:](a1, v65);
      goto LABEL_160;
    case 13:
      if ((v9 & 1) == 0) {
        goto LABEL_178;
      }
      char v73 = 0;
      unsigned int v74 = 0;
      uint64_t v75 = 0;
      *(_DWORD *)(a1 + 200) |= 0x80u;
      while (2)
      {
        uint64_t v76 = *v24;
        uint64_t v77 = *(void *)(v3 + v76);
        unint64_t v78 = v77 + 1;
        if (v77 == -1 || v78 > *(void *)(v3 + *v7))
        {
          *(unsigned char *)(v3 + *v25) = 1;
        }
        else
        {
          char v79 = *(unsigned char *)(*(void *)(v3 + *v26) + v77);
          *(void *)(v3 + v76) = v78;
          v75 |= (unint64_t)(v79 & 0x7F) << v73;
          if (v79 < 0)
          {
            v73 += 7;
            BOOL v34 = v74++ >= 9;
            if (v34)
            {
              uint64_t v75 = 0;
              goto LABEL_199;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(v3 + *v25)) {
        uint64_t v75 = 0;
      }
LABEL_199:
      *(unsigned char *)(a1 + 196) = v75 != 0;
      goto LABEL_236;
    case 14:
      if ((v9 & 1) == 0) {
        goto LABEL_178;
      }
      char v80 = 0;
      unsigned int v81 = 0;
      uint64_t v52 = 0;
      *(_DWORD *)(a1 + 200) |= 0x10u;
      while (2)
      {
        uint64_t v82 = *v24;
        uint64_t v83 = *(void *)(v3 + v82);
        unint64_t v84 = v83 + 1;
        if (v83 == -1 || v84 > *(void *)(v3 + *v7))
        {
          *(unsigned char *)(v3 + *v25) = 1;
        }
        else
        {
          char v85 = *(unsigned char *)(*(void *)(v3 + *v26) + v83);
          *(void *)(v3 + v82) = v84;
          v52 |= (unint64_t)(v85 & 0x7F) << v80;
          if (v85 < 0)
          {
            v80 += 7;
            BOOL v34 = v81++ >= 9;
            if (v34)
            {
              LODWORD(v52) = 0;
              goto LABEL_203;
            }
            continue;
          }
        }
        break;
      }
      if (*(unsigned char *)(v3 + *v25)) {
        LODWORD(v52) = 0;
      }
LABEL_203:
      uint64_t v103 = 184;
      goto LABEL_204;
    case 15:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 202) & 0x20) == 0)
      {
        uint64_t v63 = PBReaderReadString();
        uint64_t v64 = 144;
        goto LABEL_133;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_270;
      }
      int v104 = (int)(*(_DWORD *)(a1 + 200) << 10) >> 31;
      goto LABEL_234;
    case 16:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 202) & 0x10) == 0)
      {
        uint64_t v63 = PBReaderReadString();
        uint64_t v64 = 136;
LABEL_133:
        unint64_t v86 = *(void **)(a1 + v64);
        *(void *)(a1 + v64) = v63;

        char v26 = (int *)MEMORY[0x1E4F940B8];
        unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
        unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
        --v8;
        goto LABEL_236;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_270;
      }
      int v104 = (int)(*(_DWORD *)(a1 + 200) << 11) >> 31;
      goto LABEL_234;
    case 17:
      if ((v9 & 1) == 0) {
        goto LABEL_178;
      }
      *(_DWORD *)(a1 + 200) |= 2u;
      uint64_t v87 = *v24;
      unint64_t v88 = *(void *)(v3 + v87);
      if (v88 <= 0xFFFFFFFFFFFFFFF7 && v88 + 8 <= *(void *)(v3 + *v7))
      {
        uint64_t v89 = *(void *)(*(void *)(v3 + *v26) + v88);
        *(void *)(v3 + v87) = v88 + 8;
      }
      else
      {
        *(unsigned char *)(v3 + *v25) = 1;
        uint64_t v89 = 0;
      }
      *(void *)(a1 + 40) = v89;
      goto LABEL_236;
    case 18:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 202) & 0x40) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_270;
        }
        int v104 = (int)(*(_DWORD *)(a1 + 200) << 9) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEOStructuredAddress);
      if (!GEOStructuredAddressReadAllFrom(v65, (void *)v3)) {
        goto LABEL_269;
      }
      PBReaderRecallMark();
      uint64_t v66 = 152;
      goto LABEL_153;
    case 19:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 202) & 0x80) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_270;
        }
        int v104 = (int)(*(_DWORD *)(a1 + 200) << 8) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEOTimezone);
      if (!GEOTimezoneReadAllFrom((uint64_t)v65, (void *)v3)) {
        goto LABEL_269;
      }
      PBReaderRecallMark();
      uint64_t v66 = 160;
      goto LABEL_153;
    case 20:
      if (!v38) {
        goto LABEL_178;
      }
      if ((*(unsigned char *)(a1 + 201) & 0x10) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_270;
        }
        int v104 = (int)(*(_DWORD *)(a1 + 200) << 19) >> 31;
        goto LABEL_234;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEOMapRegion);
      if (GEOMapRegionReadAllFrom((uint64_t)v65, (void *)v3))
      {
        PBReaderRecallMark();
        uint64_t v66 = 64;
LABEL_153:
        uint64_t v90 = *(void **)(a1 + v66);
        *(void *)(a1 + v66) = v65;
LABEL_154:

        --v8;
        goto LABEL_235;
      }
LABEL_269:

LABEL_270:
      int v110 = 0;
      unint64_t v25 = (int *)MEMORY[0x1E4F940C8];
LABEL_241:
      if (v111) {
LABEL_242:
      }
        *(_DWORD *)(a1 + 200) |= 0x100u;
      if (v114 || (v110 & 1) == 0)
      {
        *(_DWORD *)(a1 + 200) |= 0x8000u;
        *(_DWORD *)(a1 + 200) |= 0x4000u;
        *(_DWORD *)(a1 + 200) |= 0x200u;
        *(_DWORD *)(a1 + 200) |= 0x40000u;
        *(_DWORD *)(a1 + 200) |= 0x10000u;
        *(_DWORD *)(a1 + 200) |= 0x800u;
        *(_DWORD *)(a1 + 200) |= 0x400u;
        *(_DWORD *)(a1 + 200) |= 0x2000u;
        *(_DWORD *)(a1 + 200) |= 0x200000u;
        *(_DWORD *)(a1 + 200) |= 0x100000u;
        *(_DWORD *)(a1 + 200) |= 0x400000u;
        *(_DWORD *)(a1 + 200) |= 0x800000u;
        *(_DWORD *)(a1 + 200) |= 0x1000u;
        *(_DWORD *)(a1 + 200) |= 0x80000u;
        *(_DWORD *)(a1 + 200) |= 0x20000u;
      }
      else if (v23)
      {
        while (1)
        {
          int v106 = *v23++;
          int v105 = v106;
          int v107 = 0x8000;
          switch(v106)
          {
            case 0:
              goto LABEL_263;
            case 1:
            case 2:
            case 3:
            case 11:
            case 13:
            case 14:
            case 17:
              continue;
            case 4:
              goto LABEL_262;
            case 5:
              int v107 = 0x4000;
              goto LABEL_262;
            case 6:
              int v107 = 512;
              goto LABEL_262;
            case 7:
              int v107 = 0x40000;
              goto LABEL_262;
            case 8:
              int v107 = 0x10000;
              goto LABEL_262;
            case 9:
              int v107 = 2048;
              goto LABEL_262;
            case 10:
              int v107 = 1024;
              goto LABEL_262;
            case 12:
              int v107 = 0x2000;
              goto LABEL_262;
            case 15:
              int v107 = 0x200000;
              goto LABEL_262;
            case 16:
              int v107 = 0x100000;
              goto LABEL_262;
            case 18:
              int v107 = 0x400000;
              goto LABEL_262;
            case 19:
              int v107 = 0x800000;
              goto LABEL_262;
            case 20:
              int v107 = 4096;
              goto LABEL_262;
            case 21:
              int v107 = 0x80000;
              goto LABEL_262;
            default:
              if (v105 != 202) {
                continue;
              }
              int v107 = 0x20000;
LABEL_262:
              *(_DWORD *)(a1 + 200) |= v107;
              break;
          }
        }
      }
LABEL_263:
      if (v110) {
        unint64_t v3 = *(unsigned char *)(v3 + *v25) == 0;
      }
      else {
        unint64_t v3 = 0;
      }
      if (v114)
      {
        unsigned int v108 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;
      }
      return v3;
    case 21:
      if (!v38 || (*(unsigned char *)(a1 + 202) & 8) != 0) {
        goto LABEL_178;
      }
      if ((PBReaderPlaceMark() & 1) == 0) {
        goto LABEL_270;
      }
      int v65 = objc_alloc_init(GEORoadAccessPoint);
      if (!GEORoadAccessPointReadAllFrom((uint64_t)v65, (void *)v3)) {
        goto LABEL_269;
      }
      PBReaderRecallMark();
      -[GEOPlace _addNoFlagsRoadAccessPoints:](a1, v65);
LABEL_160:

      goto LABEL_235;
    default:
      goto LABEL_172;
  }
}

void sub_189DB1824(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB1994(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB21F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB2480(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB25F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPlaceCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  [a1[11] readAll:1];
  [a1[4] readAll:1];
  [a1[13] readAll:1];
  [a1[7] readAll:1];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v2 = a1[6];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v26;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v25 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v25 objects:v31 count:16];
    }
    while (v4);
  }

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v7 = a1[9];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v21 objects:v30 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v21 + 1) + 8 * v11++) readAll:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v21 objects:v30 count:16];
    }
    while (v9);
  }

  [a1[8] readAll:1];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v12 = a1[16];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v17 objects:v29 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v18;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v18 != v15) {
          objc_enumerationMutation(v12);
        }
        objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * v16++), "readAll:", 1, (void)v17);
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v17 objects:v29 count:16];
    }
    while (v14);
  }
}

unint64_t GEOPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 172))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPlaceReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 176));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 168) = [v8 position];
  *(_DWORD *)(a1 + 172) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPlaceReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPlaceReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPlaceCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 176));
  return Specified;
}

void sub_189DB4C10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOPlaceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DB4C74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_124;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        goto LABEL_124;
      }
      unint64_t v18 = v8 >> 3;
      if ((int)(v8 >> 3) <= 99) {
        break;
      }
      switch(v18)
      {
        case 0x64:
          if ((v8 & 7) != 0) {
            goto LABEL_126;
          }
          unsigned int v53 = 0;
          while (1)
          {
            uint64_t v54 = *v2;
            uint64_t v55 = *(void *)&a1[v54];
            unint64_t v56 = v55 + 1;
            if (v55 == -1 || v56 > *(void *)&a1[*v3]) {
              goto LABEL_119;
            }
            int v57 = *(char *)(*(void *)&a1[*v5] + v55);
            *(void *)&a1[v54] = v56;
            if (v57 < 0)
            {
              BOOL v24 = v53++ > 8;
              if (!v24) {
                continue;
              }
            }
            goto LABEL_123;
          }
        case 0xCA:
          if (v16 != 2) {
            goto LABEL_126;
          }
          break;
        case 0xCE:
          if ((v8 & 7) != 0) {
            goto LABEL_126;
          }
          unsigned int v19 = 0;
          while (1)
          {
            uint64_t v20 = *v2;
            uint64_t v21 = *(void *)&a1[v20];
            unint64_t v22 = v21 + 1;
            if (v21 == -1 || v22 > *(void *)&a1[*v3]) {
              goto LABEL_119;
            }
            int v23 = *(char *)(*(void *)&a1[*v5] + v21);
            *(void *)&a1[v20] = v22;
            if (v23 < 0)
            {
              BOOL v24 = v19++ > 8;
              if (!v24) {
                continue;
              }
            }
            goto LABEL_123;
          }
      }
LABEL_122:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_126:
        PBReaderRecallMark();
        return 0;
      }
LABEL_123:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_124;
      }
    }
    switch((int)v18)
    {
      case 1:
        if ((v8 & 7) != 0) {
          goto LABEL_126;
        }
        unsigned int v25 = 0;
        while (1)
        {
          uint64_t v26 = *v2;
          uint64_t v27 = *(void *)&a1[v26];
          unint64_t v28 = v27 + 1;
          if (v27 == -1 || v28 > *(void *)&a1[*v3]) {
            goto LABEL_119;
          }
          int v29 = *(char *)(*(void *)&a1[*v5] + v27);
          *(void *)&a1[v26] = v28;
          if (v29 < 0)
          {
            BOOL v24 = v25++ > 8;
            if (!v24) {
              continue;
            }
          }
          goto LABEL_123;
        }
      case 3:
        if ((v8 & 7) != 0) {
          goto LABEL_126;
        }
        unsigned int v30 = 0;
        while (1)
        {
          uint64_t v31 = *v2;
          uint64_t v32 = *(void *)&a1[v31];
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)&a1[*v3]) {
            goto LABEL_119;
          }
          int v34 = *(char *)(*(void *)&a1[*v5] + v32);
          *(void *)&a1[v31] = v33;
          if (v34 < 0)
          {
            BOOL v24 = v30++ > 8;
            if (!v24) {
              continue;
            }
          }
          goto LABEL_123;
        }
      case 4:
        if (v16 == 2) {
          goto LABEL_122;
        }
        goto LABEL_126;
      case 5:
      case 20:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
          goto LABEL_126;
        }
        goto LABEL_110;
      case 6:
      case 8:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOAddressIsValid(a1)) {
          goto LABEL_126;
        }
        goto LABEL_110;
      case 7:
        if (v16 == 2) {
          goto LABEL_122;
        }
        goto LABEL_126;
      case 9:
      case 12:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
          goto LABEL_126;
        }
        goto LABEL_110;
      case 10:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOBusinessIsValid(a1)) {
          goto LABEL_126;
        }
        goto LABEL_110;
      case 11:
        if ((v8 & 7) != 0) {
          goto LABEL_126;
        }
        unsigned int v35 = 0;
        while (1)
        {
          uint64_t v36 = *v2;
          uint64_t v37 = *(void *)&a1[v36];
          unint64_t v38 = v37 + 1;
          if (v37 == -1 || v38 > *(void *)&a1[*v3]) {
            goto LABEL_119;
          }
          int v39 = *(char *)(*(void *)&a1[*v5] + v37);
          *(void *)&a1[v36] = v38;
          if (v39 < 0)
          {
            BOOL v24 = v35++ > 8;
            if (!v24) {
              continue;
            }
          }
          goto LABEL_123;
        }
      case 13:
        if ((v8 & 7) != 0) {
          goto LABEL_126;
        }
        unsigned int v40 = 0;
        while (1)
        {
          uint64_t v41 = *v2;
          uint64_t v42 = *(void *)&a1[v41];
          unint64_t v43 = v42 + 1;
          if (v42 == -1 || v43 > *(void *)&a1[*v3]) {
            goto LABEL_119;
          }
          int v44 = *(char *)(*(void *)&a1[*v5] + v42);
          *(void *)&a1[v41] = v43;
          if (v44 < 0)
          {
            BOOL v24 = v40++ > 8;
            if (!v24) {
              continue;
            }
          }
          goto LABEL_123;
        }
      case 14:
        if ((v8 & 7) != 0) {
          goto LABEL_126;
        }
        unsigned int v45 = 0;
        break;
      case 15:
        if (v16 == 2) {
          goto LABEL_122;
        }
        goto LABEL_126;
      case 16:
        if (v16 == 2) {
          goto LABEL_122;
        }
        goto LABEL_126;
      case 17:
        if (v16 != 1) {
          goto LABEL_126;
        }
        uint64_t v50 = *v2;
        unint64_t v51 = *(void *)&a1[v50];
        if (v51 > 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_120;
        }
        unint64_t v52 = v51 + 8;
        if (v52 > *(void *)&a1[*v3]) {
          goto LABEL_120;
        }
        *(void *)&a1[v50] = v52;
        goto LABEL_123;
      case 18:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOStructuredAddressIsValid(a1)) {
          goto LABEL_126;
        }
        goto LABEL_110;
      case 19:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOTimezoneIsValid(a1)) {
          goto LABEL_126;
        }
        goto LABEL_110;
      case 21:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEORoadAccessPointIsValid(a1)) {
          goto LABEL_126;
        }
LABEL_110:
        PBReaderRecallMark();
        goto LABEL_123;
      default:
        goto LABEL_122;
    }
    while (1)
    {
      uint64_t v46 = *v2;
      uint64_t v47 = *(void *)&a1[v46];
      unint64_t v48 = v47 + 1;
      if (v47 == -1 || v48 > *(void *)&a1[*v3]) {
        break;
      }
      int v49 = *(char *)(*(void *)&a1[*v5] + v47);
      *(void *)&a1[v46] = v48;
      if (v49 < 0)
      {
        BOOL v24 = v45++ > 8;
        if (!v24) {
          continue;
        }
      }
      goto LABEL_123;
    }
LABEL_119:
    uint64_t v14 = *v4;
LABEL_120:
    a1[v14] = 1;
    goto LABEL_123;
  }
LABEL_124:
  BOOL v58 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v58;
}

void sub_189DB585C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceIsDirty(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 176));
  int v2 = *(_DWORD *)(a1 + 200);
  if ((v2 & 0x100C000) != 0) {
    return 1;
  }
  if ((v2 & 0x200) != 0)
  {
    if (GEOAddressIsDirty(*(void *)(a1 + 32))) {
      return 1;
    }
    int v2 = *(_DWORD *)(a1 + 200);
  }
  if ((v2 & 0x40000) != 0) {
    return 1;
  }
  if ((v2 & 0x10000) == 0) {
    goto LABEL_11;
  }
  if (GEOAddressIsDirty(*(void *)(a1 + 104))) {
    return 1;
  }
  int v2 = *(_DWORD *)(a1 + 200);
LABEL_11:
  if ((v2 & 0xFA3C00) != 0) {
    return 1;
  }
  if ((v2 & 0x400) == 0) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v5 = *(id *)(a1 + 48);
  uint64_t v3 = [v5 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v5);
        }
        if (GEOBusinessIsDirty(*(os_unfair_lock_s **)(*((void *)&v8 + 1) + 8 * i)))
        {
          uint64_t v3 = 1;
          goto LABEL_24;
        }
      }
      uint64_t v3 = [v5 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_24:

  return v3;
}

os_unfair_lock_s *GEOPlaceIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOPlaceIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 44);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189DB6E8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB7270(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceDataAmendmentReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_32;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_34:
          *(unsigned char *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_37;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189DB7B18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceDataAmendmentReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOPlaceDataAmendmentReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DB7B7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB80A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 124);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 120)];
  unsigned int v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = (const float *)(a1 + 144);
  uint32x4_t v14 = (uint32x4_t)vld1q_dup_f32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  unsigned int v16 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C720), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C730), v15)), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63C740), v15)));
  while (2)
  {
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v20 = v16 > 7;
        char v21 = v20 & ~(_BYTE)v12 | v10;
        unsigned __int8 v22 = v20 | v12;
        char v87 = v21;
        char v88 = v22 | v21;
        if ((v22 | v9)) {
          unint64_t v23 = 0;
        }
        else {
          unint64_t v23 = a3;
        }
        char v89 = (v23 == 0) | v22;
        BOOL v90 = v22;
        char v24 = (int *)MEMORY[0x1E4F940E8];
        id v25 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v26 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v16;
LABEL_7:
        uint64_t v17 = v10;
LABEL_8:
        uint64_t v18 = v11;
        uint64_t v19 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        uint64_t v12 = v19;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v24) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v25)) {
      goto LABEL_166;
    }
    char v27 = 0;
    unsigned int v28 = 0;
    unint64_t v29 = 0;
    while (1)
    {
      uint64_t v30 = *v24;
      uint64_t v31 = *(void *)(v3 + v30);
      unint64_t v32 = v31 + 1;
      if (v31 == -1 || v32 > *(void *)(v3 + *v7)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(v3 + *v26) + v31);
      *(void *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0) {
        goto LABEL_25;
      }
      v27 += 7;
      BOOL v34 = v28++ >= 9;
      if (v34)
      {
        unint64_t v29 = 0;
        int v35 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v25) = 1;
LABEL_25:
    int v35 = *(unsigned __int8 *)(v3 + *v25);
    if (*(unsigned char *)(v3 + *v25)) {
      unint64_t v29 = 0;
    }
LABEL_27:
    if (v35 || (v29 & 7) == 4)
    {
LABEL_166:
      int v86 = 1;
      goto LABEL_167;
    }
    unint64_t v37 = v29 >> 3;
    BOOL v38 = v90;
    if ((v89 & 1) == 0)
    {
      int v39 = v23;
      do
      {
        int v41 = *v39++;
        int v40 = v41;
        BOOL v38 = v41 != 0;
        if (v41) {
          BOOL v42 = v40 == v37;
        }
        else {
          BOOL v42 = 1;
        }
      }
      while (!v42);
    }
    switch((int)v37)
    {
      case 'd':
        if (!v38) {
          goto LABEL_134;
        }
        if ((*(unsigned char *)(a1 + 145) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_193;
          }
          int v80 = (int)(*(_DWORD *)(a1 + 144) << 17) >> 31;
          goto LABEL_163;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_193;
        }
        unint64_t v43 = objc_alloc_init(GEOAddress);
        if (!GEOAddressReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_192;
        }
        PBReaderRecallMark();
        uint64_t v44 = 104;
        goto LABEL_92;
      case 'e':
        if (!v38) {
          goto LABEL_134;
        }
        if ((*(unsigned char *)(a1 + 145) & 8) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 80;
LABEL_77:
          uint64_t v60 = *(void **)(a1 + v46);
          *(void *)(a1 + v46) = v45;
          goto LABEL_93;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_193;
        }
        int v80 = (int)(*(_DWORD *)(a1 + 144) << 20) >> 31;
        goto LABEL_163;
      case 'f':
        if (!v38 || (*(unsigned char *)(a1 + 145) & 0x80) != 0) {
          goto LABEL_126;
        }
        PBReaderReadString();
        unint64_t v43 = (GEOAddress *)objc_claimAutoreleasedReturnValue();
        if (v43) {
          -[GEOPlaceResult _addNoFlagsUnmatchedString:](a1, v43);
        }
        goto LABEL_125;
      case 'g':
        if (!v38 || (*(unsigned char *)(a1 + 145) & 1) != 0) {
          goto LABEL_126;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_193;
        }
        unint64_t v43 = objc_alloc_init(GEONamedFeature);
        if (!GEONamedFeatureReadAllFrom(v43, (void *)v3)) {
          goto LABEL_192;
        }
        PBReaderRecallMark();
        -[GEOPlaceResult _addNoFlagsNamedFeature:](a1, v43);
        goto LABEL_125;
      case 'h':
        if (!v38) {
          goto LABEL_134;
        }
        if ((*(unsigned char *)(a1 + 145) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_193;
          }
          int v80 = (int)(*(_DWORD *)(a1 + 144) << 19) >> 31;
LABEL_163:
          v8 += v80;
        }
        else
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_193;
          }
          unint64_t v43 = objc_alloc_init(GEOPlaceSearchRequest);
          if (!GEOPlaceSearchRequestReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
            goto LABEL_192;
          }
          PBReaderRecallMark();
          uint64_t v44 = 88;
LABEL_92:
          uint64_t v60 = *(void **)(a1 + v44);
          *(void *)(a1 + v44) = v43;
LABEL_93:

          --v8;
        }
        goto LABEL_164;
      case 'i':
        if (!v38 || (*(unsigned char *)(a1 + 144) & 0x80) != 0) {
          goto LABEL_126;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_193;
        }
        unint64_t v43 = objc_alloc_init(GEOMatchedToken);
        if (!GEOMatchedTokenReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_192;
        }
        PBReaderRecallMark();
        -[GEOPlaceResult _addNoFlagsMatchedToken:](a1, v43);
        goto LABEL_125;
      case 'j':
        if ((v9 & 1) == 0) {
          goto LABEL_134;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v63 = 0;
        *(_DWORD *)(a1 + 144) |= 1u;
        while (2)
        {
          uint64_t v64 = *v24;
          uint64_t v65 = *(void *)(v3 + v64);
          unint64_t v66 = v65 + 1;
          if (v65 == -1 || v66 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(v3 + *v26) + v65);
            *(void *)(v3 + v64) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if (v67 < 0)
            {
              v61 += 7;
              BOOL v34 = v62++ >= 9;
              if (v34)
              {
                uint64_t v63 = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          uint64_t v63 = 0;
        }
LABEL_151:
        *(void *)(a1 + 40) = v63;
        goto LABEL_165;
      case 'k':
        if (v9)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v49 = 0;
          *(_DWORD *)(a1 + 144) |= 2u;
          while (1)
          {
            uint64_t v70 = *v24;
            uint64_t v71 = *(void *)(v3 + v70);
            unint64_t v72 = v71 + 1;
            if (v71 == -1 || v72 > *(void *)(v3 + *v7)) {
              break;
            }
            char v73 = *(unsigned char *)(*(void *)(v3 + *v26) + v71);
            *(void *)(v3 + v70) = v72;
            v49 |= (unint64_t)(v73 & 0x7F) << v68;
            if ((v73 & 0x80) == 0) {
              goto LABEL_153;
            }
            v68 += 7;
            BOOL v34 = v69++ >= 9;
            if (v34)
            {
              LODWORD(v49) = 0;
              goto LABEL_155;
            }
          }
          *(unsigned char *)(v3 + *v25) = 1;
LABEL_153:
          if (*(unsigned char *)(v3 + *v25)) {
            LODWORD(v49) = 0;
          }
LABEL_155:
          uint64_t v79 = 132;
LABEL_156:
          *(_DWORD *)(a1 + v79) = v49;
        }
        else
        {
LABEL_134:
          char v78 = PBReaderSkipValueWithTag();
          uint64_t v26 = (int *)MEMORY[0x1E4F940B8];
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
          id v25 = (int *)MEMORY[0x1E4F940C8];
          if ((v78 & 1) == 0)
          {
LABEL_191:
            int v86 = 0;
            goto LABEL_167;
          }
        }
        goto LABEL_165;
      case 'l':
        if (!v38 || (*(unsigned char *)(a1 + 144) & 0x40) != 0) {
          goto LABEL_126;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_193;
        }
        unint64_t v43 = objc_alloc_init(GEOLocalizedDisambiguationLabel);
        if (!GEOLocalizedDisambiguationLabelReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
          goto LABEL_192;
        }
        PBReaderRecallMark();
        -[GEOPlaceResult _addNoFlagsDisambiguationLabel:](a1, v43);
        goto LABEL_125;
      case 'm':
        if (!v38 || (*(unsigned char *)(a1 + 145) & 2) != 0)
        {
LABEL_126:
          char v74 = PBReaderSkipValueWithTag();
          id v25 = (int *)MEMORY[0x1E4F940C8];
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v26 = (int *)MEMORY[0x1E4F940B8];
          if ((v74 & 1) == 0) {
            goto LABEL_191;
          }
          goto LABEL_165;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_193;
        }
        unint64_t v43 = objc_alloc_init(GEONamedField);
        if (GEONamedFieldReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          -[GEOPlaceResult _addNoFlagsNamedField:](a1, v43);
LABEL_125:

LABEL_164:
          id v25 = (int *)MEMORY[0x1E4F940C8];
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v26 = (int *)MEMORY[0x1E4F940B8];
LABEL_165:
          if (!(v88 & 1 | (v8 != 0))) {
            goto LABEL_166;
          }
          continue;
        }
LABEL_192:

LABEL_193:
        int v86 = 0;
        id v25 = (int *)MEMORY[0x1E4F940C8];
LABEL_167:
        if (v87) {
LABEL_168:
        }
          *(_DWORD *)(a1 + 144) |= 0x10u;
        if (v90 || (v86 & 1) == 0)
        {
          *(_DWORD *)(a1 + 144) |= 0x400u;
          *(_DWORD *)(a1 + 144) |= 0x20u;
          *(_DWORD *)(a1 + 144) |= 0x2000u;
          *(_DWORD *)(a1 + 144) |= 0x4000u;
          *(_DWORD *)(a1 + 144) |= 0x800u;
          *(_DWORD *)(a1 + 144) |= 0x8000u;
          *(_DWORD *)(a1 + 144) |= 0x100u;
          *(_DWORD *)(a1 + 144) |= 0x1000u;
          *(_DWORD *)(a1 + 144) |= 0x80u;
          *(_DWORD *)(a1 + 144) |= 0x40u;
          *(_DWORD *)(a1 + 144) |= 0x200u;
        }
        else if (v23)
        {
          while (2)
          {
            int v81 = *v23++;
            int v82 = v81 - 100;
            switch(v81)
            {
              case 'd':
                int v83 = 0x4000;
                goto LABEL_184;
              case 'e':
                int v83 = 2048;
                goto LABEL_184;
              case 'f':
                int v83 = 0x8000;
                goto LABEL_184;
              case 'g':
                int v83 = 256;
                goto LABEL_184;
              case 'h':
                int v83 = 4096;
                goto LABEL_184;
              case 'i':
                int v83 = 128;
                goto LABEL_184;
              case 'j':
              case 'k':
                continue;
              case 'l':
                int v83 = 64;
                goto LABEL_184;
              case 'm':
                int v83 = 512;
LABEL_184:
                *(_DWORD *)(a1 + 144) |= v83;
                continue;
              default:
                int v83 = 1024;
                switch(v82)
                {
                  case 0:
                    goto LABEL_185;
                  case 1:
                    goto LABEL_184;
                  case 3:
                    int v83 = 32;
                    goto LABEL_184;
                  case 4:
                    int v83 = 0x2000;
                    goto LABEL_184;
                  default:
                    continue;
                }
                goto LABEL_185;
            }
          }
        }
LABEL_185:
        if (v86) {
          unint64_t v3 = *(unsigned char *)(v3 + *v25) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v90)
        {
          unint64_t v84 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        switch((int)v37)
        {
          case 1:
            if (!v38) {
              goto LABEL_134;
            }
            if ((*(unsigned char *)(a1 + 145) & 4) != 0)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_193;
              }
              int v80 = (int)(*(_DWORD *)(a1 + 144) << 21) >> 31;
              goto LABEL_163;
            }
            if ((PBReaderPlaceMark() & 1) == 0) {
              goto LABEL_193;
            }
            unint64_t v43 = objc_alloc_init(GEOPlace);
            if (!GEOPlaceReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
              goto LABEL_192;
            }
            PBReaderRecallMark();
            uint64_t v44 = 72;
            break;
          case 3:
            if (!v38 || (*(unsigned char *)(a1 + 144) & 0x20) != 0) {
              goto LABEL_126;
            }
            if ((PBReaderPlaceMark() & 1) == 0) {
              goto LABEL_193;
            }
            unint64_t v43 = objc_alloc_init(GEOPlace);
            if (!GEOPlaceReadAllFrom((uint64_t)v43, (void *)v3, v11 & 1)) {
              goto LABEL_192;
            }
            PBReaderRecallMark();
            -[GEOPlaceResult _addNoFlagsAdditionalPlace:](a1, v43);
            goto LABEL_125;
          case 4:
            if (!v38) {
              goto LABEL_134;
            }
            if ((*(unsigned char *)(a1 + 145) & 0x20) == 0)
            {
              uint64_t v45 = PBReaderReadString();
              uint64_t v46 = 96;
              goto LABEL_77;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_193;
            }
            int v80 = (int)(*(_DWORD *)(a1 + 144) << 18) >> 31;
            goto LABEL_163;
          case 5:
            if ((v9 & 1) == 0) {
              goto LABEL_134;
            }
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            *(_DWORD *)(a1 + 144) |= 8u;
            while (2)
            {
              uint64_t v50 = *v24;
              uint64_t v51 = *(void *)(v3 + v50);
              unint64_t v52 = v51 + 1;
              if (v51 == -1 || v52 > *(void *)(v3 + *v7))
              {
                *(unsigned char *)(v3 + *v25) = 1;
              }
              else
              {
                char v53 = *(unsigned char *)(*(void *)(v3 + *v26) + v51);
                *(void *)(v3 + v50) = v52;
                v49 |= (unint64_t)(v53 & 0x7F) << v47;
                if (v53 < 0)
                {
                  v47 += 7;
                  BOOL v34 = v48++ >= 9;
                  if (v34)
                  {
                    LODWORD(v49) = 0;
                    goto LABEL_139;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v25)) {
              LODWORD(v49) = 0;
            }
LABEL_139:
            uint64_t v79 = 140;
            goto LABEL_156;
          case 6:
            if ((v9 & 1) == 0) {
              goto LABEL_134;
            }
            char v54 = 0;
            unsigned int v55 = 0;
            uint64_t v49 = 0;
            *(_DWORD *)(a1 + 144) |= 4u;
            while (2)
            {
              uint64_t v56 = *v24;
              uint64_t v57 = *(void *)(v3 + v56);
              unint64_t v58 = v57 + 1;
              if (v57 == -1 || v58 > *(void *)(v3 + *v7))
              {
                *(unsigned char *)(v3 + *v25) = 1;
              }
              else
              {
                char v59 = *(unsigned char *)(*(void *)(v3 + *v26) + v57);
                *(void *)(v3 + v56) = v58;
                v49 |= (unint64_t)(v59 & 0x7F) << v54;
                if (v59 < 0)
                {
                  v54 += 7;
                  BOOL v34 = v55++ >= 9;
                  if (v34)
                  {
                    LODWORD(v49) = 0;
                    goto LABEL_143;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v25)) {
              LODWORD(v49) = 0;
            }
LABEL_143:
            uint64_t v79 = 136;
            goto LABEL_156;
          default:
            if ((v87 & 1) == 0 || (*(unsigned char *)(a1 + 144) & 0x10) != 0) {
              goto LABEL_134;
            }
            if (!*(void *)(a1 + 16))
            {
              id v75 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              uint64_t v76 = *(void **)(a1 + 16);
              *(void *)(a1 + 16) = v75;
            }
            int v77 = PBUnknownFieldAdd();
            id v25 = (int *)MEMORY[0x1E4F940C8];
            unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
            uint64_t v26 = (int *)MEMORY[0x1E4F940B8];
            if (v77) {
              goto LABEL_165;
            }
            int v86 = 0;
            goto LABEL_168;
        }
        goto LABEL_92;
    }
  }
}

void sub_189DB9028(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB93F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB9668(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB97DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB9950(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DB9D1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DBA0E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DBA258(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DBA848(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DBAC14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DBC744(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPlaceResultCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  [a1[9] readAll:1];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v2 = a1[3];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v43 objects:v51 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v44;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v44 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v43 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v43 objects:v51 count:16];
    }
    while (v4);
  }

  [a1[13] readAll:1];
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v7 = a1[7];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v39 objects:v50 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v40;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v40 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v39 + 1) + 8 * v11++) readAll:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v39 objects:v50 count:16];
    }
    while (v9);
  }

  [a1[11] readAll:1];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v12 = a1[6];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v35 objects:v49 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v36;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v36 != v15) {
          objc_enumerationMutation(v12);
        }
        [*(id *)(*((void *)&v35 + 1) + 8 * v16++) readAll:1];
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v35 objects:v49 count:16];
    }
    while (v14);
  }

  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v17 = a1[4];
  uint64_t v18 = [v17 countByEnumeratingWithState:&v31 objects:v48 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v32;
    do
    {
      uint64_t v21 = 0;
      do
      {
        if (*(void *)v32 != v20) {
          objc_enumerationMutation(v17);
        }
        -[GEOLocalizedDisambiguationLabel readAll:](*(void *)(*((void *)&v31 + 1) + 8 * v21++), 1);
      }
      while (v19 != v21);
      uint64_t v19 = [v17 countByEnumeratingWithState:&v31 objects:v48 count:16];
    }
    while (v19);
  }

  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v22 = a1[8];
  uint64_t v23 = [v22 countByEnumeratingWithState:&v27 objects:v47 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v28;
    do
    {
      uint64_t v26 = 0;
      do
      {
        if (*(void *)v28 != v25) {
          objc_enumerationMutation(v22);
        }
        -[GEONamedField readAll:](*(void *)(*((void *)&v27 + 1) + 8 * v26++), 1);
      }
      while (v24 != v26);
      uint64_t v24 = [v22 countByEnumeratingWithState:&v27 objects:v47 count:16];
    }
    while (v24);
  }
}

unint64_t GEOPlaceResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 124))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPlaceResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = [v8 position];
  *(_DWORD *)(a1 + 124) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPlaceResultReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPlaceResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPlaceResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPlaceResultCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_189DBCC74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceResultReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOPlaceResultReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DBCCD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPlaceResultIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = 0;
LABEL_122:
    if (a1[*v4]) {
      BOOL v50 = 1;
    }
    else {
      BOOL v50 = v5 == 0;
    }
    uint64_t v51 = !v50;
    PBReaderRecallMark();
    return v51;
  }
  int v5 = 0;
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
LABEL_3:
  if (a1[*v4]) {
    goto LABEL_122;
  }
  char v7 = 0;
  unsigned int v8 = 0;
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *v2;
    uint64_t v11 = *(void *)&a1[v10];
    unint64_t v12 = v11 + 1;
    if (v11 == -1 || v12 > *(void *)&a1[*v3]) {
      break;
    }
    char v13 = *(unsigned char *)(*(void *)&a1[*v6] + v11);
    *(void *)&a1[v10] = v12;
    v9 |= (unint64_t)(v13 & 0x7F) << v7;
    if ((v13 & 0x80) == 0) {
      goto LABEL_12;
    }
    v7 += 7;
    BOOL v14 = v8++ >= 9;
    if (v14)
    {
      unint64_t v9 = 0;
      int v15 = a1[*v4];
      goto LABEL_14;
    }
  }
  a1[*v4] = 1;
LABEL_12:
  int v15 = a1[*v4];
  if (a1[*v4]) {
    unint64_t v9 = 0;
  }
LABEL_14:
  int v16 = v9 & 7;
  if (v15 || v16 == 4) {
    goto LABEL_122;
  }
  switch((v9 >> 3))
  {
    case 'd':
      if (v16 != 2 || !PBReaderPlaceMark() || !GEOAddressIsValid(a1)) {
        goto LABEL_130;
      }
      goto LABEL_115;
    case 'e':
      if (v16 == 2) {
        goto LABEL_118;
      }
      goto LABEL_130;
    case 'f':
      if (v16 != 2) {
        goto LABEL_130;
      }
LABEL_118:
      if (PBReaderSkipValueWithTag()) {
        goto LABEL_119;
      }
      goto LABEL_130;
    case 'g':
      if (v16 != 2 || !PBReaderPlaceMark() || !GEONamedFeatureIsValid(a1)) {
        goto LABEL_130;
      }
      goto LABEL_115;
    case 'h':
      if (v16 != 2 || !PBReaderPlaceMark() || !GEOPlaceSearchRequestIsValid(a1)) {
        goto LABEL_130;
      }
      goto LABEL_115;
    case 'i':
      if (v16 != 2 || !PBReaderPlaceMark() || !GEOMatchedTokenIsValid(a1)) {
        goto LABEL_130;
      }
      goto LABEL_115;
    case 'j':
      if ((v9 & 7) != 0) {
        goto LABEL_130;
      }
      unsigned int v29 = 0;
      while (1)
      {
        uint64_t v30 = *v2;
        uint64_t v31 = *(void *)&a1[v30];
        unint64_t v32 = v31 + 1;
        if (v31 == -1 || v32 > *(void *)&a1[*v3]) {
          goto LABEL_83;
        }
        int v33 = *(char *)(*(void *)&a1[*v6] + v31);
        *(void *)&a1[v30] = v32;
        if (v33 < 0)
        {
          BOOL v23 = v29++ > 8;
          if (!v23) {
            continue;
          }
        }
        goto LABEL_119;
      }
    case 'k':
      if ((v9 & 7) != 0) {
        goto LABEL_130;
      }
      unsigned int v34 = 0;
      while (1)
      {
        uint64_t v35 = *v2;
        uint64_t v36 = *(void *)&a1[v35];
        unint64_t v37 = v36 + 1;
        if (v36 == -1 || v37 > *(void *)&a1[*v3]) {
          goto LABEL_83;
        }
        int v38 = *(char *)(*(void *)&a1[*v6] + v36);
        *(void *)&a1[v35] = v37;
        if (v38 < 0)
        {
          BOOL v23 = v34++ > 8;
          if (!v23) {
            continue;
          }
        }
        goto LABEL_119;
      }
    case 'l':
      if (v16 != 2 || !PBReaderPlaceMark()) {
        goto LABEL_130;
      }
      objc_msgSend(a1, "position", 0, 0);
      [a1 length];
      break;
    case 'm':
      if (v16 == 2 && PBReaderPlaceMark() && GEONamedFieldIsValid(a1)) {
        goto LABEL_115;
      }
      goto LABEL_130;
    default:
      switch((v9 >> 3))
      {
        case 1u:
          if (v5 || v16 != 2 || !PBReaderPlaceMark() || !GEOPlaceIsValid(a1)) {
            goto LABEL_130;
          }
          PBReaderRecallMark();
          int v5 = 1;
          goto LABEL_119;
        case 3u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPlaceIsValid(a1)) {
            goto LABEL_130;
          }
          goto LABEL_115;
        case 4u:
          if (v16 == 2) {
            goto LABEL_118;
          }
          goto LABEL_130;
        case 5u:
          if ((v9 & 7) != 0) {
            goto LABEL_130;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              goto LABEL_83;
            }
            int v22 = *(char *)(*(void *)&a1[*v6] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              BOOL v23 = v18++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_119;
          }
        case 6u:
          if ((v9 & 7) != 0) {
            goto LABEL_130;
          }
          unsigned int v24 = 0;
          break;
        default:
          goto LABEL_118;
      }
      while (1)
      {
        uint64_t v25 = *v2;
        uint64_t v26 = *(void *)&a1[v25];
        unint64_t v27 = v26 + 1;
        if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
          break;
        }
        int v28 = *(char *)(*(void *)&a1[*v6] + v26);
        *(void *)&a1[v25] = v27;
        if (v28 < 0)
        {
          BOOL v23 = v24++ > 8;
          if (!v23) {
            continue;
          }
        }
        goto LABEL_119;
      }
LABEL_83:
      a1[*v4] = 1;
      goto LABEL_119;
  }
  do
  {
LABEL_87:
    if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
      goto LABEL_116;
    }
    char v39 = 0;
    unsigned int v40 = 0;
    unint64_t v41 = 0;
    while (1)
    {
      uint64_t v42 = *v2;
      uint64_t v43 = *(void *)&a1[v42];
      unint64_t v44 = v43 + 1;
      if (v43 == -1 || v44 > *(void *)&a1[*v3]) {
        break;
      }
      char v45 = *(unsigned char *)(*(void *)&a1[*v6] + v43);
      *(void *)&a1[v42] = v44;
      v41 |= (unint64_t)(v45 & 0x7F) << v39;
      if ((v45 & 0x80) == 0) {
        goto LABEL_97;
      }
      v39 += 7;
      BOOL v14 = v40++ >= 9;
      if (v14)
      {
        unint64_t v41 = 0;
        int v46 = a1[*v4];
        goto LABEL_99;
      }
    }
    a1[*v4] = 1;
LABEL_97:
    int v46 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v41 = 0;
    }
LABEL_99:
    int v47 = v41 & 7;
    if (v46 || v47 == 4)
    {
LABEL_116:
      int v49 = a1[*v4];
      PBReaderRecallMark();
      if (v49) {
        goto LABEL_130;
      }
LABEL_115:
      PBReaderRecallMark();
LABEL_119:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_122;
      }
      goto LABEL_3;
    }
    if ((v41 >> 3) == 2)
    {
      if (v47 != 2) {
        break;
      }
LABEL_108:
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        break;
      }
      goto LABEL_87;
    }
    if ((v41 >> 3) == 1)
    {
      if (v47 != 2) {
        break;
      }
      goto LABEL_108;
    }
  }
  while (PBReaderSkipValueWithTag());
  PBReaderRecallMark();
LABEL_130:
  PBReaderRecallMark();
  return 0;
}

BOOL GEOPlaceSearchRequestIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 2u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_498;
            }
            while (1)
            {
              uint64_t v21 = *v2;
              uint64_t v22 = *(void *)&a1[v21];
              unint64_t v23 = v22 + 1;
              if (v22 == -1 || v23 > *(void *)&a1[*v3]) {
                goto LABEL_455;
              }
              int v24 = *(char *)(*(void *)&a1[*v5] + v22);
              *(void *)&a1[v21] = v23;
              if (v24 < 0)
              {
                unsigned int v25 = v16++;
                if (v25 <= 8) {
                  continue;
                }
              }
              goto LABEL_461;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_498;
          }
LABEL_466:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v248 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v249 = *v2;
              uint64_t v250 = *(void *)&a1[v249];
              unint64_t v251 = v250 + 1;
              if (v250 == -1 || v251 > *(void *)&a1[*v3]) {
                break;
              }
              int v252 = *(char *)(*(void *)&a1[*v5] + v250);
              *(void *)&a1[v249] = v251;
              if (v252 < 0)
              {
                BOOL v13 = v248++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_466;
            }
            a1[*v4] = 1;
          }
          goto LABEL_438;
        case 3u:
        case 0x6Cu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOAddressIsValid(a1)) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 4u:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOLocationIsValid(a1) & 1) == 0) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 5u:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 7u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_498;
            }
            while (1)
            {
              uint64_t v26 = *v2;
              uint64_t v27 = *(void *)&a1[v26];
              unint64_t v28 = v27 + 1;
              if (v27 == -1 || v28 > *(void *)&a1[*v3]) {
                goto LABEL_455;
              }
              int v29 = *(char *)(*(void *)&a1[*v5] + v27);
              *(void *)&a1[v26] = v28;
              if (v29 < 0)
              {
                unsigned int v30 = v16++;
                if (v30 <= 8) {
                  continue;
                }
              }
              goto LABEL_461;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_498;
          }
LABEL_476:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v253 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v254 = *v2;
              uint64_t v255 = *(void *)&a1[v254];
              unint64_t v256 = v255 + 1;
              if (v255 == -1 || v256 > *(void *)&a1[*v3]) {
                break;
              }
              int v257 = *(char *)(*(void *)&a1[*v5] + v255);
              *(void *)&a1[v254] = v256;
              if (v257 < 0)
              {
                BOOL v13 = v253++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_476;
            }
            a1[*v4] = 1;
          }
          goto LABEL_438;
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v31 = 0;
          while (1)
          {
            uint64_t v32 = *v2;
            uint64_t v33 = *(void *)&a1[v32];
            unint64_t v34 = v33 + 1;
            if (v33 == -1 || v34 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v35 = *(char *)(*(void *)&a1[*v5] + v33);
            *(void *)&a1[v32] = v34;
            if (v35 < 0)
            {
              BOOL v36 = v31++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 9u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v37 = 0;
          while (1)
          {
            uint64_t v38 = *v2;
            uint64_t v39 = *(void *)&a1[v38];
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v41 = *(char *)(*(void *)&a1[*v5] + v39);
            *(void *)&a1[v38] = v40;
            if (v41 < 0)
            {
              BOOL v36 = v37++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0xCu:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOSessionIDIsValid(a1) & 1) == 0) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 0xDu:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v42 = 0;
          while (1)
          {
            uint64_t v43 = *v2;
            uint64_t v44 = *(void *)&a1[v43];
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v46 = *(char *)(*(void *)&a1[*v5] + v44);
            *(void *)&a1[v43] = v45;
            if (v46 < 0)
            {
              BOOL v36 = v42++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0xEu:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v47 = 0;
          while (1)
          {
            uint64_t v48 = *v2;
            uint64_t v49 = *(void *)&a1[v48];
            unint64_t v50 = v49 + 1;
            if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v51 = *(char *)(*(void *)&a1[*v5] + v49);
            *(void *)&a1[v48] = v50;
            if (v51 < 0)
            {
              BOOL v36 = v47++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0xFu:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v52 = 0;
          while (1)
          {
            uint64_t v53 = *v2;
            uint64_t v54 = *(void *)&a1[v53];
            unint64_t v55 = v54 + 1;
            if (v54 == -1 || v55 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v56 = *(char *)(*(void *)&a1[*v5] + v54);
            *(void *)&a1[v53] = v55;
            if (v56 < 0)
            {
              BOOL v36 = v52++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x10u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v57 = 0;
          while (1)
          {
            uint64_t v58 = *v2;
            uint64_t v59 = *(void *)&a1[v58];
            unint64_t v60 = v59 + 1;
            if (v59 == -1 || v60 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v61 = *(char *)(*(void *)&a1[*v5] + v59);
            *(void *)&a1[v58] = v60;
            if (v61 < 0)
            {
              BOOL v36 = v57++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x11u:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x12u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v62 = 0;
          while (1)
          {
            uint64_t v63 = *v2;
            uint64_t v64 = *(void *)&a1[v63];
            unint64_t v65 = v64 + 1;
            if (v64 == -1 || v65 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v66 = *(char *)(*(void *)&a1[*v5] + v64);
            *(void *)&a1[v63] = v65;
            if (v66 < 0)
            {
              BOOL v36 = v62++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x13u:
        case 0x24u:
        case 0x25u:
          if (v16 != 1) {
            goto LABEL_498;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_456;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_456;
          }
          *(void *)&a1[v18] = v20;
          goto LABEL_461;
        case 0x14u:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x15u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v67 = 0;
          while (1)
          {
            uint64_t v68 = *v2;
            uint64_t v69 = *(void *)&a1[v68];
            unint64_t v70 = v69 + 1;
            if (v69 == -1 || v70 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v71 = *(char *)(*(void *)&a1[*v5] + v69);
            *(void *)&a1[v68] = v70;
            if (v71 < 0)
            {
              BOOL v36 = v67++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x16u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOBusinessOptionsIsValid(a1)) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 0x17u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v72 = 0;
          while (1)
          {
            uint64_t v73 = *v2;
            uint64_t v74 = *(void *)&a1[v73];
            unint64_t v75 = v74 + 1;
            if (v74 == -1 || v75 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v76 = *(char *)(*(void *)&a1[*v5] + v74);
            *(void *)&a1[v73] = v75;
            if (v76 < 0)
            {
              BOOL v36 = v72++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x18u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v77 = 0;
          while (1)
          {
            uint64_t v78 = *v2;
            uint64_t v79 = *(void *)&a1[v78];
            unint64_t v80 = v79 + 1;
            if (v79 == -1 || v80 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v81 = *(char *)(*(void *)&a1[*v5] + v79);
            *(void *)&a1[v78] = v80;
            if (v81 < 0)
            {
              BOOL v36 = v77++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x19u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v82 = 0;
          while (1)
          {
            uint64_t v83 = *v2;
            uint64_t v84 = *(void *)&a1[v83];
            unint64_t v85 = v84 + 1;
            if (v84 == -1 || v85 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v86 = *(char *)(*(void *)&a1[*v5] + v84);
            *(void *)&a1[v83] = v85;
            if (v86 < 0)
            {
              BOOL v36 = v82++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x1Bu:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x1Cu:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x1Du:
        case 0x72u:
        case 0x78u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 0x1Eu:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x1Fu:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x20u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v87 = 0;
          while (1)
          {
            uint64_t v88 = *v2;
            uint64_t v89 = *(void *)&a1[v88];
            unint64_t v90 = v89 + 1;
            if (v89 == -1 || v90 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v91 = *(char *)(*(void *)&a1[*v5] + v89);
            *(void *)&a1[v88] = v90;
            if (v91 < 0)
            {
              BOOL v36 = v87++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x21u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v92 = 0;
          while (1)
          {
            uint64_t v93 = *v2;
            uint64_t v94 = *(void *)&a1[v93];
            unint64_t v95 = v94 + 1;
            if (v94 == -1 || v95 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v96 = *(char *)(*(void *)&a1[*v5] + v94);
            *(void *)&a1[v93] = v95;
            if (v96 < 0)
            {
              BOOL v36 = v92++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x22u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v97 = 0;
          while (1)
          {
            uint64_t v98 = *v2;
            uint64_t v99 = *(void *)&a1[v98];
            unint64_t v100 = v99 + 1;
            if (v99 == -1 || v100 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v101 = *(char *)(*(void *)&a1[*v5] + v99);
            *(void *)&a1[v98] = v100;
            if (v101 < 0)
            {
              BOOL v36 = v97++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x27u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v102 = 0;
          while (1)
          {
            uint64_t v103 = *v2;
            uint64_t v104 = *(void *)&a1[v103];
            unint64_t v105 = v104 + 1;
            if (v104 == -1 || v105 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v106 = *(char *)(*(void *)&a1[*v5] + v104);
            *(void *)&a1[v103] = v105;
            if (v106 < 0)
            {
              BOOL v36 = v102++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x2Au:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x2Bu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOClientCapabilitiesIsValid(a1)) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 0x2Cu:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v107 = 0;
          while (1)
          {
            uint64_t v108 = *v2;
            uint64_t v109 = *(void *)&a1[v108];
            unint64_t v110 = v109 + 1;
            if (v109 == -1 || v110 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v111 = *(char *)(*(void *)&a1[*v5] + v109);
            *(void *)&a1[v108] = v110;
            if (v111 < 0)
            {
              BOOL v36 = v107++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x2Du:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v112 = 0;
          while (1)
          {
            uint64_t v113 = *v2;
            uint64_t v114 = *(void *)&a1[v113];
            unint64_t v115 = v114 + 1;
            if (v114 == -1 || v115 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v116 = *(char *)(*(void *)&a1[*v5] + v114);
            *(void *)&a1[v113] = v115;
            if (v116 < 0)
            {
              BOOL v36 = v112++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x2Eu:
          if (v16 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_498;
          }
          objc_msgSend(a1, "position", 0, 0);
          [a1 length];
LABEL_224:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v117 = 0;
            unsigned int v118 = 0;
            unint64_t v119 = 0;
            while (2)
            {
              uint64_t v120 = *v2;
              uint64_t v121 = *(void *)&a1[v120];
              unint64_t v122 = v121 + 1;
              if (v121 == -1 || v122 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v123 = *(unsigned char *)(*(void *)&a1[*v5] + v121);
                *(void *)&a1[v120] = v122;
                v119 |= (unint64_t)(v123 & 0x7F) << v117;
                if (v123 < 0)
                {
                  v117 += 7;
                  BOOL v13 = v118++ >= 9;
                  if (v13)
                  {
                    unint64_t v119 = 0;
                    int v124 = a1[*v4];
                    goto LABEL_236;
                  }
                  continue;
                }
              }
              break;
            }
            int v124 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v119 = 0;
            }
LABEL_236:
            int v125 = v119 & 7;
            if (v124) {
              BOOL v126 = 1;
            }
            else {
              BOOL v126 = v125 == 4;
            }
            if (!v126)
            {
              switch((v119 >> 3))
              {
                case 1u:
                  if ((v119 & 7) != 0) {
                    goto LABEL_497;
                  }
                  unsigned int v127 = 0;
                  while (1)
                  {
                    uint64_t v128 = *v2;
                    uint64_t v129 = *(void *)&a1[v128];
                    unint64_t v130 = v129 + 1;
                    if (v129 == -1 || v130 > *(void *)&a1[*v3]) {
                      goto LABEL_279;
                    }
                    int v131 = *(char *)(*(void *)&a1[*v5] + v129);
                    *(void *)&a1[v128] = v130;
                    if (v131 < 0)
                    {
                      BOOL v36 = v127++ > 8;
                      if (!v36) {
                        continue;
                      }
                    }
                    goto LABEL_224;
                  }
                case 2u:
                  if ((v119 & 7) != 0) {
                    goto LABEL_497;
                  }
                  unsigned int v132 = 0;
                  while (1)
                  {
                    uint64_t v133 = *v2;
                    uint64_t v134 = *(void *)&a1[v133];
                    unint64_t v135 = v134 + 1;
                    if (v134 == -1 || v135 > *(void *)&a1[*v3]) {
                      goto LABEL_279;
                    }
                    int v136 = *(char *)(*(void *)&a1[*v5] + v134);
                    *(void *)&a1[v133] = v135;
                    if (v136 < 0)
                    {
                      BOOL v36 = v132++ > 8;
                      if (!v36) {
                        continue;
                      }
                    }
                    goto LABEL_224;
                  }
                case 3u:
                  if (v125 == 2) {
                    goto LABEL_269;
                  }
                  goto LABEL_497;
                case 4u:
                  if (v125 == 2) {
                    goto LABEL_269;
                  }
                  goto LABEL_497;
                case 5u:
                  if ((v119 & 7) != 0) {
                    goto LABEL_497;
                  }
                  unsigned int v137 = 0;
                  while (1)
                  {
                    uint64_t v138 = *v2;
                    uint64_t v139 = *(void *)&a1[v138];
                    unint64_t v140 = v139 + 1;
                    if (v139 == -1 || v140 > *(void *)&a1[*v3]) {
                      goto LABEL_279;
                    }
                    int v141 = *(char *)(*(void *)&a1[*v5] + v139);
                    *(void *)&a1[v138] = v140;
                    if (v141 < 0)
                    {
                      BOOL v36 = v137++ > 8;
                      if (!v36) {
                        continue;
                      }
                    }
                    goto LABEL_224;
                  }
                case 7u:
                  if ((v119 & 7) != 0) {
                    goto LABEL_497;
                  }
                  unsigned int v142 = 0;
                  do
                  {
                    uint64_t v143 = *v2;
                    uint64_t v144 = *(void *)&a1[v143];
                    unint64_t v145 = v144 + 1;
                    if (v144 == -1 || v145 > *(void *)&a1[*v3])
                    {
LABEL_279:
                      a1[*v4] = 1;
                      goto LABEL_224;
                    }
                    int v146 = *(char *)(*(void *)&a1[*v5] + v144);
                    *(void *)&a1[v143] = v145;
                    if ((v146 & 0x80000000) == 0) {
                      break;
                    }
                    BOOL v36 = v142++ > 8;
                  }
                  while (!v36);
                  break;
                default:
LABEL_269:
                  if (PBReaderSkipValueWithTag()) {
                    continue;
                  }
LABEL_497:
                  PBReaderRecallMark();
                  goto LABEL_498;
              }
              continue;
            }
            break;
          }
          int v247 = a1[*v4];
          PBReaderRecallMark();
          if (!v247) {
            goto LABEL_438;
          }
          goto LABEL_498;
        case 0x2Fu:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v147 = 0;
          while (1)
          {
            uint64_t v148 = *v2;
            uint64_t v149 = *(void *)&a1[v148];
            unint64_t v150 = v149 + 1;
            if (v149 == -1 || v150 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v151 = *(char *)(*(void *)&a1[*v5] + v149);
            *(void *)&a1[v148] = v150;
            if (v151 < 0)
            {
              BOOL v36 = v147++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x30u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v152 = 0;
          while (1)
          {
            uint64_t v153 = *v2;
            uint64_t v154 = *(void *)&a1[v153];
            unint64_t v155 = v154 + 1;
            if (v154 == -1 || v155 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v156 = *(char *)(*(void *)&a1[*v5] + v154);
            *(void *)&a1[v153] = v155;
            if (v156 < 0)
            {
              BOOL v36 = v152++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x31u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v157 = 0;
          while (1)
          {
            uint64_t v158 = *v2;
            uint64_t v159 = *(void *)&a1[v158];
            unint64_t v160 = v159 + 1;
            if (v159 == -1 || v160 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v161 = *(char *)(*(void *)&a1[*v5] + v159);
            *(void *)&a1[v158] = v160;
            if (v161 < 0)
            {
              BOOL v36 = v157++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x32u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v162 = 0;
          while (1)
          {
            uint64_t v163 = *v2;
            uint64_t v164 = *(void *)&a1[v163];
            unint64_t v165 = v164 + 1;
            if (v164 == -1 || v165 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v166 = *(char *)(*(void *)&a1[*v5] + v164);
            *(void *)&a1[v163] = v165;
            if (v166 < 0)
            {
              BOOL v36 = v162++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x34u:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x35u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v167 = 0;
          while (1)
          {
            uint64_t v168 = *v2;
            uint64_t v169 = *(void *)&a1[v168];
            unint64_t v170 = v169 + 1;
            if (v169 == -1 || v170 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v171 = *(char *)(*(void *)&a1[*v5] + v169);
            *(void *)&a1[v168] = v170;
            if (v171 < 0)
            {
              BOOL v36 = v167++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x64u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v172 = 0;
          while (1)
          {
            uint64_t v173 = *v2;
            uint64_t v174 = *(void *)&a1[v173];
            unint64_t v175 = v174 + 1;
            if (v174 == -1 || v175 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v176 = *(char *)(*(void *)&a1[*v5] + v174);
            *(void *)&a1[v173] = v175;
            if (v176 < 0)
            {
              BOOL v36 = v172++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x65u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v177 = 0;
          while (1)
          {
            uint64_t v178 = *v2;
            uint64_t v179 = *(void *)&a1[v178];
            unint64_t v180 = v179 + 1;
            if (v179 == -1 || v180 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v181 = *(char *)(*(void *)&a1[*v5] + v179);
            *(void *)&a1[v178] = v180;
            if (v181 < 0)
            {
              BOOL v36 = v177++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x66u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v182 = 0;
          while (1)
          {
            uint64_t v183 = *v2;
            uint64_t v184 = *(void *)&a1[v183];
            unint64_t v185 = v184 + 1;
            if (v184 == -1 || v185 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v186 = *(char *)(*(void *)&a1[*v5] + v184);
            *(void *)&a1[v183] = v185;
            if (v186 < 0)
            {
              BOOL v36 = v182++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x67u:
        case 0x6Au:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSearchSubstringIsValid(a1)) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 0x68u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v187 = 0;
          while (1)
          {
            uint64_t v188 = *v2;
            uint64_t v189 = *(void *)&a1[v188];
            unint64_t v190 = v189 + 1;
            if (v189 == -1 || v190 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v191 = *(char *)(*(void *)&a1[*v5] + v189);
            *(void *)&a1[v188] = v190;
            if (v191 < 0)
            {
              BOOL v36 = v187++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x69u:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x6Bu:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v192 = 0;
          while (1)
          {
            uint64_t v193 = *v2;
            uint64_t v194 = *(void *)&a1[v193];
            unint64_t v195 = v194 + 1;
            if (v194 == -1 || v195 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v196 = *(char *)(*(void *)&a1[*v5] + v194);
            *(void *)&a1[v193] = v195;
            if (v196 < 0)
            {
              BOOL v36 = v192++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x6Du:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v197 = 0;
          while (1)
          {
            uint64_t v198 = *v2;
            uint64_t v199 = *(void *)&a1[v198];
            unint64_t v200 = v199 + 1;
            if (v199 == -1 || v200 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v201 = *(char *)(*(void *)&a1[*v5] + v199);
            *(void *)&a1[v198] = v200;
            if (v201 < 0)
            {
              BOOL v36 = v197++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x6Eu:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOIndexQueryNodeIsValid(a1) & 1) == 0) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 0x6Fu:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v202 = 0;
          while (1)
          {
            uint64_t v203 = *v2;
            uint64_t v204 = *(void *)&a1[v203];
            unint64_t v205 = v204 + 1;
            if (v204 == -1 || v205 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v206 = *(char *)(*(void *)&a1[*v5] + v204);
            *(void *)&a1[v203] = v205;
            if (v206 < 0)
            {
              BOOL v36 = v202++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x70u:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOGeoServiceTagIsValid(a1) & 1) == 0) {
            goto LABEL_498;
          }
          goto LABEL_438;
        case 0x71u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v207 = 0;
          while (1)
          {
            uint64_t v208 = *v2;
            uint64_t v209 = *(void *)&a1[v208];
            unint64_t v210 = v209 + 1;
            if (v209 == -1 || v210 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v211 = *(char *)(*(void *)&a1[*v5] + v209);
            *(void *)&a1[v208] = v210;
            if (v211 < 0)
            {
              BOOL v36 = v207++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x73u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v212 = 0;
          while (1)
          {
            uint64_t v213 = *v2;
            uint64_t v214 = *(void *)&a1[v213];
            unint64_t v215 = v214 + 1;
            if (v214 == -1 || v215 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v216 = *(char *)(*(void *)&a1[*v5] + v214);
            *(void *)&a1[v213] = v215;
            if (v216 < 0)
            {
              BOOL v36 = v212++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x75u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v217 = 0;
          while (1)
          {
            uint64_t v218 = *v2;
            uint64_t v219 = *(void *)&a1[v218];
            unint64_t v220 = v219 + 1;
            if (v219 == -1 || v220 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v221 = *(char *)(*(void *)&a1[*v5] + v219);
            *(void *)&a1[v218] = v220;
            if (v221 < 0)
            {
              BOOL v36 = v217++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x76u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v222 = 0;
          while (1)
          {
            uint64_t v223 = *v2;
            uint64_t v224 = *(void *)&a1[v223];
            unint64_t v225 = v224 + 1;
            if (v224 == -1 || v225 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v226 = *(char *)(*(void *)&a1[*v5] + v224);
            *(void *)&a1[v223] = v225;
            if (v226 < 0)
            {
              BOOL v36 = v222++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x77u:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_498:
              PBReaderRecallMark();
              return 0;
            }
LABEL_486:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v258 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v259 = *v2;
                uint64_t v260 = *(void *)&a1[v259];
                unint64_t v261 = v260 + 1;
                if (v260 == -1 || v261 > *(void *)&a1[*v3]) {
                  break;
                }
                int v262 = *(char *)(*(void *)&a1[*v5] + v260);
                *(void *)&a1[v259] = v261;
                if (v262 < 0)
                {
                  BOOL v13 = v258++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_486;
              }
              a1[*v4] = 1;
            }
LABEL_438:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0) {
              goto LABEL_498;
            }
            while (1)
            {
              uint64_t v227 = *v2;
              uint64_t v228 = *(void *)&a1[v227];
              unint64_t v229 = v228 + 1;
              if (v228 == -1 || v229 > *(void *)&a1[*v3]) {
                break;
              }
              int v230 = *(char *)(*(void *)&a1[*v5] + v228);
              *(void *)&a1[v227] = v229;
              if (v230 < 0)
              {
                unsigned int v231 = v16++;
                if (v231 <= 8) {
                  continue;
                }
              }
              goto LABEL_461;
            }
LABEL_455:
            uint64_t v14 = *v4;
LABEL_456:
            a1[v14] = 1;
          }
LABEL_461:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_495;
          }
          break;
        case 0x79u:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v232 = 0;
          while (1)
          {
            uint64_t v233 = *v2;
            uint64_t v234 = *(void *)&a1[v233];
            unint64_t v235 = v234 + 1;
            if (v234 == -1 || v235 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v236 = *(char *)(*(void *)&a1[*v5] + v234);
            *(void *)&a1[v233] = v235;
            if (v236 < 0)
            {
              BOOL v36 = v232++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x7Au:
          if (v16 == 2 && PBReaderPlaceMark() && GEOAdditionalEnabledMarketsIsValid(a1)) {
            goto LABEL_438;
          }
          goto LABEL_498;
        case 0x7Bu:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v237 = 0;
          while (1)
          {
            uint64_t v238 = *v2;
            uint64_t v239 = *(void *)&a1[v238];
            unint64_t v240 = v239 + 1;
            if (v239 == -1 || v240 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v241 = *(char *)(*(void *)&a1[*v5] + v239);
            *(void *)&a1[v238] = v240;
            if (v241 < 0)
            {
              BOOL v36 = v237++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x7Cu:
          if ((v8 & 7) != 0) {
            goto LABEL_498;
          }
          unsigned int v242 = 0;
          while (1)
          {
            uint64_t v243 = *v2;
            uint64_t v244 = *(void *)&a1[v243];
            unint64_t v245 = v244 + 1;
            if (v244 == -1 || v245 > *(void *)&a1[*v3]) {
              goto LABEL_455;
            }
            int v246 = *(char *)(*(void *)&a1[*v5] + v244);
            *(void *)&a1[v243] = v245;
            if (v246 < 0)
            {
              BOOL v36 = v242++ > 8;
              if (!v36) {
                continue;
              }
            }
            goto LABEL_461;
          }
        case 0x7Du:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        case 0x7Eu:
          if (v16 == 2) {
            goto LABEL_460;
          }
          goto LABEL_498;
        default:
LABEL_460:
          if (PBReaderSkipValueWithTag()) {
            goto LABEL_461;
          }
          goto LABEL_498;
      }
    }
  }
LABEL_495:
  BOOL v263 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v263;
}

void sub_189DBF14C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceResultIsDirty(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  int v2 = *(_DWORD *)(a1 + 144);
  if ((v2 & 0x10000) != 0) {
    return 1;
  }
  if ((v2 & 0x400) != 0)
  {
    if (GEOPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 72))) {
      return 1;
    }
    int v2 = *(_DWORD *)(a1 + 144);
  }
  if ((v2 & 0x2020) == 0)
  {
    if ((v2 & 0x4000) != 0)
    {
      if (GEOAddressIsDirty(*(void *)(a1 + 104))) {
        return 1;
      }
      int v2 = *(_DWORD *)(a1 + 144);
    }
    if ((v2 & 0x8900) == 0)
    {
      if ((v2 & 0x1000) == 0) {
        goto LABEL_13;
      }
      if ((GEOPlaceSearchRequestIsDirty(*(os_unfair_lock_s **)(a1 + 88)) & 1) == 0)
      {
        int v2 = *(_DWORD *)(a1 + 144);
LABEL_13:
        if ((v2 & 0x2C0) != 0) {
          return 1;
        }
        if ((v2 & 0x20) != 0)
        {
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          id v5 = *(id *)(a1 + 24);
          uint64_t v6 = [v5 countByEnumeratingWithState:&v34 objects:v41 count:16];
          if (v6)
          {
            uint64_t v7 = v6;
            uint64_t v8 = *(void *)v35;
LABEL_19:
            uint64_t v9 = 0;
            while (1)
            {
              if (*(void *)v35 != v8) {
                objc_enumerationMutation(v5);
              }
              if (GEOPlaceIsDirty(*(os_unfair_lock_s **)(*((void *)&v34 + 1) + 8 * v9))) {
                goto LABEL_58;
              }
              if (v7 == ++v9)
              {
                uint64_t v7 = [v5 countByEnumeratingWithState:&v34 objects:v41 count:16];
                if (v7) {
                  goto LABEL_19;
                }
                break;
              }
            }
          }

          int v2 = *(_DWORD *)(a1 + 144);
        }
        if ((v2 & 0x80) != 0)
        {
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          id v5 = *(id *)(a1 + 48);
          uint64_t v10 = [v5 countByEnumeratingWithState:&v30 objects:v40 count:16];
          if (v10)
          {
            uint64_t v11 = v10;
            uint64_t v12 = *(void *)v31;
LABEL_29:
            uint64_t v13 = 0;
            while (1)
            {
              if (*(void *)v31 != v12) {
                objc_enumerationMutation(v5);
              }
              if (GEOMatchedTokenIsDirty(*(void *)(*((void *)&v30 + 1) + 8 * v13))) {
                goto LABEL_58;
              }
              if (v11 == ++v13)
              {
                uint64_t v11 = [v5 countByEnumeratingWithState:&v30 objects:v40 count:16];
                if (v11) {
                  goto LABEL_29;
                }
                break;
              }
            }
          }

          int v2 = *(_DWORD *)(a1 + 144);
        }
        if ((v2 & 0x40) != 0)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          id v5 = *(id *)(a1 + 32);
          uint64_t v14 = [v5 countByEnumeratingWithState:&v26 objects:v39 count:16];
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = *(void *)v27;
LABEL_39:
            uint64_t v17 = 0;
            while (1)
            {
              if (*(void *)v27 != v16) {
                objc_enumerationMutation(v5);
              }
              uint64_t v18 = *(void *)(*((void *)&v26 + 1) + 8 * v17);
              if (v18)
              {
                os_unfair_lock_lock_with_options();
                os_unfair_lock_assert_owner((const os_unfair_lock *)(v18 + 48));
                int v19 = *(unsigned char *)(v18 + 52) & 0xE;
                os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 48));
                if (v19) {
                  goto LABEL_58;
                }
              }
              if (v15 == ++v17)
              {
                uint64_t v15 = [v5 countByEnumeratingWithState:&v26 objects:v39 count:16];
                if (v15) {
                  goto LABEL_39;
                }
                break;
              }
            }
          }

          int v2 = *(_DWORD *)(a1 + 144);
        }
        if ((v2 & 0x200) == 0) {
          return 0;
        }
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        id v5 = *(id *)(a1 + 64);
        uint64_t v3 = [v5 countByEnumeratingWithState:&v22 objects:v38 count:16];
        if (!v3)
        {
LABEL_59:

          return v3;
        }
        uint64_t v20 = *(void *)v23;
LABEL_51:
        uint64_t v21 = 0;
        while (1)
        {
          if (*(void *)v23 != v20) {
            objc_enumerationMutation(v5);
          }
          if (GEONamedFieldIsDirty(*(os_unfair_lock_s **)(*((void *)&v22 + 1) + 8 * v21))) {
            break;
          }
          if (v3 == ++v21)
          {
            uint64_t v3 = [v5 countByEnumeratingWithState:&v22 objects:v38 count:16];
            if (v3) {
              goto LABEL_51;
            }
            goto LABEL_59;
          }
        }
LABEL_58:
        uint64_t v3 = 1;
        goto LABEL_59;
      }
    }
  }
  return 1;
}

os_unfair_lock_s *GEOPlaceResultIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOPlaceResultIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 32);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEOPlaceResultClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  if (a3
    && [a1 hasRevgeoRequestTemplate]
    && ([a1 revgeoRequestTemplate],
        id v5 = objc_claimAutoreleasedReturnValue(),
        unsigned int v6 = GEOPlaceSearchRequestHasSensitiveFields(v5),
        v5,
        v6))
  {
    uint64_t v7 = [a1 revgeoRequestTemplate];
    id v9 = (id)[v7 copy];

    uint64_t v8 = [v9 location];
    [v8 clearSensitiveFields:a2];

    [a1 setRevgeoRequestTemplate:v9];
  }
  else
  {
    id v9 = [a1 revgeoRequestTemplate];
    [v9 clearSensitiveFields:a2];
  }
}

void *GEOPlaceResultHasSensitiveFields(void *result)
{
  if (result)
  {
    id v1 = [result revgeoRequestTemplate];
    int v2 = GEOPlaceSearchRequestHasSensitiveFields(v1);

    return v2;
  }
  return result;
}

void *GEOPlaceSearchRequestHasSensitiveFields(void *result)
{
  if (result)
  {
    id v1 = [result location];
    uint64_t HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void GEOPlaceSearchRequestClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  if (a3
    && [a1 hasLocation]
    && ([a1 location],
        id v5 = objc_claimAutoreleasedReturnValue(),
        int HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v5),
        v5,
        HasSensitiveFields))
  {
    uint64_t v7 = [a1 location];
    uint64_t v8 = (_DWORD *)[v7 copy];

    GEOLocationClearSensitiveFields(v8);
    [a1 setLocation:v8];
  }
  else
  {
    uint64_t v8 = [a1 location];
    [v8 clearSensitiveFields:a2];
  }
}

void sub_189DC03E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC0E84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC15DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceSearchRequestReadSpecified(uint64_t a1, char *a2, int *a3)
{
  if (!a2) {
    return 0;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 376));
  *(void *)&a2[*MEMORY[0x1E4F940E0]] = *(unsigned int *)(a1 + 372);
  [a2 seekToOffset:*(unsigned int *)(a1 + 368)];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int32x2_t v10 = (int32x2_t)*(unsigned __int8 *)(a1 + 452);
  *((int32x2_t *)&v11 + 1) = v10;
  *(void *)&long long v11 = *(void *)(a1 + 444);
  int32x2_t v12 = (int32x2_t)(v11 >> 46);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v13 = (int32x2_t)(v11 >> 49);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v14 = v13;
  int32x2_t v15 = (int32x2_t)(v11 >> 48);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v16 = (int32x2_t)(v11 >> 57);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v401 = (int32x2_t)(v11 >> 42);
  int32x2_t v403 = v16;
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v17 = (int32x2_t)(v11 >> 45);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v398 = (int32x2_t)(v11 >> 52);
  int32x2_t v399 = v17;
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v18 = (int32x2_t)(v11 >> 41);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v19 = (int32x2_t)(v11 >> 58);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v20 = (int32x2_t)(v11 >> 59);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v21 = (int32x2_t)(v11 >> 54);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v22 = (int32x2_t)(v11 >> 47);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v23 = (int32x2_t)(v11 >> 50);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v24 = (int32x2_t)(v11 >> 53);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v25 = (int32x2_t)(v11 >> 60);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v26 = (int32x2_t)(v11 >> 61);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v27 = (int32x2_t)(v11 >> 56);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v28 = (int32x2_t)(v11 >> 62);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v29 = (int32x2_t)(v11 >> 43);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v30 = (int32x2_t)(v11 >> 55);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v31 = (int32x2_t)(v11 >> 44);
  *((int32x2_t *)&v11 + 1) = v10;
  int32x2_t v32 = v20;
  char v33 = 0;
  int32x2_t v34 = v22;
  long long v35 = (int *)MEMORY[0x1E4F940E0];
  *(int32x2_t *)v36.i8 = vzip1_s32(v21, v32);
  v36.u64[1] = (unint64_t)vzip1_s32(v23, v34);
  *(int32x2_t *)v37.i8 = vzip1_s32(v19, v18);
  v37.u64[1] = (unint64_t)vzip1_s32(v398, (int32x2_t)(*(void *)&v10 >> 6));
  *(int32x2_t *)v38.i8 = vzip1_s32(v399, v401);
  v38.u64[1] = (unint64_t)vzip1_s32(v403, (int32x2_t)(*(void *)&v10 >> 1));
  *(int32x2_t *)v39.i8 = vzip1_s32(v12, (int32x2_t)(*(void *)&v10 >> 4));
  v39.u64[1] = (unint64_t)vzip1_s32(v15, v14);
  int32x2_t v40 = v30;
  int v41 = a2;
  v42.i64[0] = 0x100000001;
  v42.i64[1] = 0x100000001;
  *(int32x2_t *)v43.i8 = vzip1_s32((int32x2_t)(*(void *)&v10 >> 3), v27);
  v43.u64[1] = (unint64_t)vzip1_s32(v10, v28);
  *(int32x2_t *)v44.i8 = vzip1_s32(v26, v25);
  v44.u64[1] = (unint64_t)vzip1_s32(v24, (int32x2_t)(*(void *)&v10 >> 2));
  *(int32x2_t *)v45.i8 = vzip1_s32(v40, v29);
  v45.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v11 >> 63), v31);
  unsigned int v46 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v38, v42), (int32x4_t)vandq_s8(v39, v42)), vaddq_s32((int32x4_t)vandq_s8(v37, v42), (int32x4_t)vandq_s8(v36, v42))), vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v43, v42), (int32x4_t)vandq_s8(v44, v42)), (int32x4_t)vandq_s8(v45, v42))))+ (((unint64_t)v11 >> 51) & 1)+ (((unsigned __int32)v10.i32[0] >> 5) & 1)+ (((unint64_t)v11 >> 40) & 1);
  while (2)
  {
    uint64_t v47 = 1;
    uint64_t v48 = 1;
    uint64_t v49 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v46;
        goto LABEL_8;
      case -3:
        char v33 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v48 = v8;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v50 = v46 > 0x17;
        char v51 = v50 & ~(_BYTE)v9 | v7;
        char v52 = v50 | v9;
        char v404 = v33;
        if (((v50 | v9) | v33)) {
          uint64_t v53 = 0;
        }
        else {
          uint64_t v53 = a3;
        }
        uint64_t v54 = (int *)MEMORY[0x1E4F940E8];
        int v55 = 1;
        int v56 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)&v41[*MEMORY[0x1E4F940E8]] >= *(void *)&v41[*MEMORY[0x1E4F940E0]]) {
          goto LABEL_765;
        }
        char v400 = v52 | v51;
        unsigned int v57 = (int *)MEMORY[0x1E4F940B8];
        char v402 = v50 & ~(_BYTE)v9 | v7;
        break;
      default:
        ++v46;
LABEL_7:
        uint64_t v47 = v7;
LABEL_8:
        uint64_t v48 = v8;
        uint64_t v49 = v9;
LABEL_10:
        ++v6;
        uint64_t v7 = v47;
        uint64_t v8 = v48;
        uint64_t v9 = v49;
        continue;
    }
    break;
  }
  while (2)
  {
    if (v41[*v56]) {
      goto LABEL_762;
    }
    char v58 = 0;
    unsigned int v59 = 0;
    unint64_t v60 = 0;
    while (1)
    {
      uint64_t v61 = *v54;
      uint64_t v62 = *(void *)&v41[v61];
      unint64_t v63 = v62 + 1;
      if (v62 == -1 || v63 > *(void *)&v41[*v35]) {
        break;
      }
      char v64 = *(unsigned char *)(*(void *)&v41[*v57] + v62);
      *(void *)&v41[v61] = v63;
      v60 |= (unint64_t)(v64 & 0x7F) << v58;
      if ((v64 & 0x80) == 0) {
        goto LABEL_25;
      }
      v58 += 7;
      BOOL v65 = v59++ >= 9;
      if (v65)
      {
        unint64_t v60 = 0;
        int v66 = v41[*v56];
        goto LABEL_27;
      }
    }
    v41[*v56] = 1;
LABEL_25:
    int v66 = v41[*v56];
    if (v41[*v56]) {
      unint64_t v60 = 0;
    }
LABEL_27:
    int v67 = v60 & 7;
    if (v66 || v67 == 4)
    {
LABEL_762:
      int v55 = 1;
      if ((v51 & 1) == 0) {
        goto LABEL_767;
      }
      goto LABEL_766;
    }
    unint64_t v69 = v60 >> 3;
    BOOL v70 = v52;
    if (!((v53 == 0) | v52 & 1))
    {
      int v71 = v53;
      do
      {
        int v73 = *v71++;
        int v72 = v73;
        BOOL v70 = v73 != 0;
        if (v73) {
          BOOL v74 = v72 == v69;
        }
        else {
          BOOL v74 = 1;
        }
      }
      while (!v74);
    }
    switch((int)v69)
    {
      case 2:
        if (!v70 || (*(void *)(a1 + 444) & 0x40000000000) != 0) {
          goto LABEL_527;
        }
        if (v67 != 2)
        {
          char v366 = 0;
          unsigned int v367 = 0;
          uint64_t v368 = 0;
          while (1)
          {
            uint64_t v369 = *v54;
            uint64_t v370 = *(void *)&v41[v369];
            unint64_t v371 = v370 + 1;
            if (v370 == -1 || v371 > *(void *)&v41[*v35]) {
              break;
            }
            char v372 = *(unsigned char *)(*(void *)&v41[*v57] + v370);
            *(void *)&v41[v369] = v371;
            v368 |= (unint64_t)(v372 & 0x7F) << v366;
            if (v372 < 0)
            {
              v366 += 7;
              BOOL v65 = v367++ >= 9;
              if (!v65) {
                continue;
              }
            }
            goto LABEL_760;
          }
          v41[*v56] = 1;
LABEL_760:
          PBRepeatedUInt64Add();
          goto LABEL_725;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_812;
        }
        while (1)
        {
          unint64_t v75 = (int *)MEMORY[0x1E4F940E0];
          if (*(void *)&v41[*v54] >= *(void *)&v41[*MEMORY[0x1E4F940E0]] || v41[*v56]) {
            goto LABEL_529;
          }
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v78 = 0;
          uint64_t v79 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v80 = *v54;
            uint64_t v81 = *(void *)&v41[v80];
            unint64_t v82 = v81 + 1;
            if (v81 == -1 || v82 > *(void *)&v41[*v75]) {
              break;
            }
            char v83 = *(unsigned char *)(*(void *)&v41[*v79] + v81);
            *(void *)&v41[v80] = v82;
            v78 |= (unint64_t)(v83 & 0x7F) << v76;
            if (v83 < 0)
            {
              v76 += 7;
              BOOL v65 = v77++ >= 9;
              if (!v65) {
                continue;
              }
            }
            goto LABEL_53;
          }
          v41[*v56] = 1;
LABEL_53:
          PBRepeatedUInt64Add();
        }
      case 3:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x200000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 18) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOAddress);
        if (!GEOAddressReadAllFrom((uint64_t)v84, v41, v8 & 1)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 120;
        goto LABEL_480;
      case 4:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x200000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 6) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v84, v41, v8 & 1)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 232;
        goto LABEL_480;
      case 5:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(unsigned char *)(a1 + 452) & 2) == 0)
        {
          uint64_t v86 = PBReaderReadString();
          uint64_t v87 = 296;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        LOBYTE(v365) = *(unsigned char *)(a1 + 452) << 6;
        goto LABEL_723;
      case 6:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x400000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = (32 * *(void *)(a1 + 444)) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v84, v41)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 240;
        goto LABEL_480;
      case 7:
        if (!v70 || (*(void *)(a1 + 444) & 0x20000000000) != 0) {
          goto LABEL_527;
        }
        if (v67 != 2)
        {
          char v373 = 0;
          unsigned int v374 = 0;
          uint64_t v375 = 0;
          while (1)
          {
            uint64_t v376 = *v54;
            uint64_t v377 = *(void *)&v41[v376];
            unint64_t v378 = v377 + 1;
            if (v377 == -1 || v378 > *(void *)&v41[*v35]) {
              goto LABEL_757;
            }
            char v379 = *(unsigned char *)(*(void *)&v41[*v57] + v377);
            *(void *)&v41[v376] = v378;
            v375 |= (unint64_t)(v379 & 0x7F) << v373;
            if (v379 < 0)
            {
              v373 += 7;
              BOOL v65 = v374++ >= 9;
              if (!v65) {
                continue;
              }
            }
            goto LABEL_758;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_812;
        }
        while (1)
        {
          uint64_t v88 = (int *)MEMORY[0x1E4F940E0];
          if (*(void *)&v41[*v54] >= *(void *)&v41[*MEMORY[0x1E4F940E0]] || v41[*v56]) {
            goto LABEL_529;
          }
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v91 = 0;
          unsigned int v92 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v93 = *v54;
            uint64_t v94 = *(void *)&v41[v93];
            unint64_t v95 = v94 + 1;
            if (v94 == -1 || v95 > *(void *)&v41[*v88]) {
              break;
            }
            char v96 = *(unsigned char *)(*(void *)&v41[*v92] + v94);
            *(void *)&v41[v93] = v95;
            v91 |= (unint64_t)(v96 & 0x7F) << v89;
            if (v96 < 0)
            {
              v89 += 7;
              BOOL v65 = v90++ >= 9;
              if (!v65) {
                continue;
              }
            }
            goto LABEL_86;
          }
          v41[*v56] = 1;
LABEL_86:
          PBRepeatedInt32Add();
        }
      case 8:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v97 = 0;
        unsigned int v98 = 0;
        uint64_t v99 = 0;
        *(void *)(a1 + 444) |= 0x1000000uLL;
        while (2)
        {
          uint64_t v100 = *v54;
          uint64_t v101 = *(void *)&v41[v100];
          unint64_t v102 = v101 + 1;
          if (v101 == -1 || v102 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v103 = *(unsigned char *)(*(void *)&v41[*v57] + v101);
            *(void *)&v41[v100] = v102;
            v99 |= (unint64_t)(v103 & 0x7F) << v97;
            if (v103 < 0)
            {
              v97 += 7;
              BOOL v65 = v98++ >= 9;
              if (v65)
              {
                uint64_t v99 = 0;
                goto LABEL_533;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v99 = 0;
        }
LABEL_533:
        BOOL v361 = v99 != 0;
        uint64_t v362 = 428;
        goto LABEL_676;
      case 9:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v104 = 0;
        unsigned int v105 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x800uLL;
        while (2)
        {
          uint64_t v107 = *v54;
          uint64_t v108 = *(void *)&v41[v107];
          unint64_t v109 = v108 + 1;
          if (v108 == -1 || v109 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v110 = *(unsigned char *)(*(void *)&v41[*v57] + v108);
            *(void *)&v41[v107] = v109;
            v106 |= (unint64_t)(v110 & 0x7F) << v104;
            if (v110 < 0)
            {
              v104 += 7;
              BOOL v65 = v105++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_537;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_537:
        uint64_t v363 = 400;
        goto LABEL_671;
      case 12:
        if ((v404 & 1) == 0) {
          goto LABEL_525;
        }
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((void *)(a1 + 96), (uint64_t)v41) & 1) == 0) {
          goto LABEL_812;
        }
        PBReaderRecallMark();
        *(void *)(a1 + 444) |= 1uLL;
        goto LABEL_725;
      case 13:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v111 = 0;
        unsigned int v112 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x40uLL;
        while (2)
        {
          uint64_t v113 = *v54;
          uint64_t v114 = *(void *)&v41[v113];
          unint64_t v115 = v114 + 1;
          if (v114 == -1 || v115 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v116 = *(unsigned char *)(*(void *)&v41[*v57] + v114);
            *(void *)&v41[v113] = v115;
            v106 |= (unint64_t)(v116 & 0x7F) << v111;
            if (v116 < 0)
            {
              v111 += 7;
              BOOL v65 = v112++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_541;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_541:
        uint64_t v363 = 380;
        goto LABEL_671;
      case 14:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v117 = 0;
        unsigned int v118 = 0;
        uint64_t v119 = 0;
        *(void *)(a1 + 444) |= 0x40000uLL;
        while (2)
        {
          uint64_t v120 = *v54;
          uint64_t v121 = *(void *)&v41[v120];
          unint64_t v122 = v121 + 1;
          if (v121 == -1 || v122 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v123 = *(unsigned char *)(*(void *)&v41[*v57] + v121);
            *(void *)&v41[v120] = v122;
            v119 |= (unint64_t)(v123 & 0x7F) << v117;
            if (v123 < 0)
            {
              v117 += 7;
              BOOL v65 = v118++ >= 9;
              if (v65)
              {
                uint64_t v119 = 0;
                goto LABEL_545;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v119 = 0;
        }
LABEL_545:
        BOOL v361 = v119 != 0;
        uint64_t v362 = 422;
        goto LABEL_676;
      case 15:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v124 = 0;
        unsigned int v125 = 0;
        uint64_t v126 = 0;
        *(void *)(a1 + 444) |= 0x20000uLL;
        while (2)
        {
          uint64_t v127 = *v54;
          uint64_t v128 = *(void *)&v41[v127];
          unint64_t v129 = v128 + 1;
          if (v128 == -1 || v129 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v130 = *(unsigned char *)(*(void *)&v41[*v57] + v128);
            *(void *)&v41[v127] = v129;
            v126 |= (unint64_t)(v130 & 0x7F) << v124;
            if (v130 < 0)
            {
              v124 += 7;
              BOOL v65 = v125++ >= 9;
              if (v65)
              {
                uint64_t v126 = 0;
                goto LABEL_549;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v126 = 0;
        }
LABEL_549:
        BOOL v361 = v126 != 0;
        uint64_t v362 = 421;
        goto LABEL_676;
      case 16:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v131 = 0;
        unsigned int v132 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x400uLL;
        while (2)
        {
          uint64_t v133 = *v54;
          uint64_t v134 = *(void *)&v41[v133];
          unint64_t v135 = v134 + 1;
          if (v134 == -1 || v135 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v136 = *(unsigned char *)(*(void *)&v41[*v57] + v134);
            *(void *)&v41[v133] = v135;
            v106 |= (unint64_t)(v136 & 0x7F) << v131;
            if (v136 < 0)
            {
              v131 += 7;
              BOOL v65 = v132++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_553;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_553:
        uint64_t v363 = 396;
        goto LABEL_671;
      case 17:
        if (!v70 || (*(void *)(a1 + 444) & 0x10000000000000) != 0) {
          goto LABEL_525;
        }
        PBReaderReadString();
        uint64_t v84 = (GEOAddress *)objc_claimAutoreleasedReturnValue();
        if (v84) {
          -[GEOPlaceSearchRequest _addNoFlagsFilterByBusinessCategory:](a1, v84);
        }
        goto LABEL_409;
      case 18:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v137 = 0;
        unsigned int v138 = 0;
        uint64_t v139 = 0;
        *(void *)(a1 + 444) |= 0x1000000000uLL;
        while (2)
        {
          uint64_t v140 = *v54;
          uint64_t v141 = *(void *)&v41[v140];
          unint64_t v142 = v141 + 1;
          if (v141 == -1 || v142 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v143 = *(unsigned char *)(*(void *)&v41[*v57] + v141);
            *(void *)&v41[v140] = v142;
            v139 |= (unint64_t)(v143 & 0x7F) << v137;
            if (v143 < 0)
            {
              v137 += 7;
              BOOL v65 = v138++ >= 9;
              if (v65)
              {
                uint64_t v139 = 0;
                goto LABEL_557;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v139 = 0;
        }
LABEL_557:
        BOOL v361 = v139 != 0;
        uint64_t v362 = 440;
        goto LABEL_676;
      case 19:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        *(void *)(a1 + 444) |= 0x20uLL;
        uint64_t v144 = *v54;
        unint64_t v145 = *(void *)&v41[v144];
        if (v145 <= 0xFFFFFFFFFFFFFFF7 && v145 + 8 <= *(void *)&v41[*v35])
        {
          uint64_t v146 = *(void *)(*(void *)&v41[*v57] + v145);
          *(void *)&v41[v144] = v145 + 8;
        }
        else
        {
          v41[*v56] = 1;
          uint64_t v146 = 0;
        }
        uint64_t v380 = 344;
        goto LABEL_749;
      case 20:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(unsigned char *)(a1 + 452) & 0x40) == 0)
        {
          uint64_t v86 = PBReaderReadData();
          uint64_t v87 = 360;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        LOBYTE(v365) = 2 * *(unsigned char *)(a1 + 452);
        goto LABEL_723;
      case 21:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v147 = 0;
        unsigned int v148 = 0;
        uint64_t v149 = 0;
        *(void *)(a1 + 444) |= 0x80000uLL;
        while (2)
        {
          uint64_t v150 = *v54;
          uint64_t v151 = *(void *)&v41[v150];
          unint64_t v152 = v151 + 1;
          if (v151 == -1 || v152 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v153 = *(unsigned char *)(*(void *)&v41[*v57] + v151);
            *(void *)&v41[v150] = v152;
            v149 |= (unint64_t)(v153 & 0x7F) << v147;
            if (v153 < 0)
            {
              v147 += 7;
              BOOL v65 = v148++ >= 9;
              if (v65)
              {
                uint64_t v149 = 0;
                goto LABEL_561;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v149 = 0;
        }
LABEL_561:
        BOOL v361 = v149 != 0;
        uint64_t v362 = 423;
        goto LABEL_676;
      case 22:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x400000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 17) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOBusinessOptions);
        if (!GEOBusinessOptionsReadAllFrom((uint64_t)v84, v41, v8 & 1)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 128;
        goto LABEL_480;
      case 23:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v154 = 0;
        unsigned int v155 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x100uLL;
        while (2)
        {
          uint64_t v156 = *v54;
          uint64_t v157 = *(void *)&v41[v156];
          unint64_t v158 = v157 + 1;
          if (v157 == -1 || v158 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v159 = *(unsigned char *)(*(void *)&v41[*v57] + v157);
            *(void *)&v41[v156] = v158;
            v106 |= (unint64_t)(v159 & 0x7F) << v154;
            if (v159 < 0)
            {
              v154 += 7;
              BOOL v65 = v155++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_565;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_565:
        uint64_t v363 = 388;
        goto LABEL_671;
      case 24:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v160 = 0;
        unsigned int v161 = 0;
        uint64_t v162 = 0;
        *(void *)(a1 + 444) |= 0x20000000uLL;
        while (2)
        {
          uint64_t v163 = *v54;
          uint64_t v164 = *(void *)&v41[v163];
          unint64_t v165 = v164 + 1;
          if (v164 == -1 || v165 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v166 = *(unsigned char *)(*(void *)&v41[*v57] + v164);
            *(void *)&v41[v163] = v165;
            v162 |= (unint64_t)(v166 & 0x7F) << v160;
            if (v166 < 0)
            {
              v160 += 7;
              BOOL v65 = v161++ >= 9;
              if (v65)
              {
                uint64_t v162 = 0;
                goto LABEL_569;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v162 = 0;
        }
LABEL_569:
        BOOL v361 = v162 != 0;
        uint64_t v362 = 433;
        goto LABEL_676;
      case 25:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v167 = 0;
        unsigned int v168 = 0;
        uint64_t v169 = 0;
        *(void *)(a1 + 444) |= 0x4000000000uLL;
        while (2)
        {
          uint64_t v170 = *v54;
          uint64_t v171 = *(void *)&v41[v170];
          unint64_t v172 = v171 + 1;
          if (v171 == -1 || v172 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v173 = *(unsigned char *)(*(void *)&v41[*v57] + v171);
            *(void *)&v41[v170] = v172;
            v169 |= (unint64_t)(v173 & 0x7F) << v167;
            if (v173 < 0)
            {
              v167 += 7;
              BOOL v65 = v168++ >= 9;
              if (v65)
              {
                uint64_t v169 = 0;
                goto LABEL_573;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v169 = 0;
        }
LABEL_573:
        BOOL v361 = v169 != 0;
        uint64_t v362 = 442;
        goto LABEL_676;
      case 27:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(unsigned char *)(a1 + 452) & 0x10) == 0)
        {
          uint64_t v86 = PBReaderReadString();
          uint64_t v87 = 320;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        LOBYTE(v365) = 8 * *(unsigned char *)(a1 + 452);
        goto LABEL_723;
      case 28:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x1000000000000) == 0)
        {
          uint64_t v86 = PBReaderReadString();
          uint64_t v87 = 144;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 15) >> 56;
        goto LABEL_724;
      case 29:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x2000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 14) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v84, v41)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 152;
        goto LABEL_480;
      case 30:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x40000000000000) == 0)
        {
          uint64_t v86 = PBReaderReadString();
          uint64_t v87 = 200;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 9) >> 56;
        goto LABEL_724;
      case 31:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x800000000000000) == 0)
        {
          uint64_t v86 = PBReaderReadString();
          uint64_t v87 = 248;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v365 = (16 * *(void *)(a1 + 444)) >> 56;
        goto LABEL_724;
      case 32:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v174 = 0;
        unsigned int v175 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x4000uLL;
        while (2)
        {
          uint64_t v176 = *v54;
          uint64_t v177 = *(void *)&v41[v176];
          unint64_t v178 = v177 + 1;
          if (v177 == -1 || v178 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v179 = *(unsigned char *)(*(void *)&v41[*v57] + v177);
            *(void *)&v41[v176] = v178;
            v106 |= (unint64_t)(v179 & 0x7F) << v174;
            if (v179 < 0)
            {
              v174 += 7;
              BOOL v65 = v175++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_577;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_577:
        uint64_t v363 = 412;
        goto LABEL_671;
      case 33:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v180 = 0;
        unsigned int v181 = 0;
        uint64_t v182 = 0;
        *(void *)(a1 + 444) |= 0x8000000000uLL;
        while (2)
        {
          uint64_t v183 = *v54;
          uint64_t v184 = *(void *)&v41[v183];
          unint64_t v185 = v184 + 1;
          if (v184 == -1 || v185 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v186 = *(unsigned char *)(*(void *)&v41[*v57] + v184);
            *(void *)&v41[v183] = v185;
            v182 |= (unint64_t)(v186 & 0x7F) << v180;
            if (v186 < 0)
            {
              v180 += 7;
              BOOL v65 = v181++ >= 9;
              if (v65)
              {
                uint64_t v182 = 0;
                goto LABEL_581;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v182 = 0;
        }
LABEL_581:
        BOOL v361 = v182 != 0;
        uint64_t v362 = 443;
        goto LABEL_676;
      case 34:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v187 = 0;
        unsigned int v188 = 0;
        uint64_t v189 = 0;
        *(void *)(a1 + 444) |= 0x400000000uLL;
        while (2)
        {
          uint64_t v190 = *v54;
          uint64_t v191 = *(void *)&v41[v190];
          unint64_t v192 = v191 + 1;
          if (v191 == -1 || v192 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v193 = *(unsigned char *)(*(void *)&v41[*v57] + v191);
            *(void *)&v41[v190] = v192;
            v189 |= (unint64_t)(v193 & 0x7F) << v187;
            if (v193 < 0)
            {
              v187 += 7;
              BOOL v65 = v188++ >= 9;
              if (v65)
              {
                uint64_t v189 = 0;
                goto LABEL_585;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v189 = 0;
        }
LABEL_585:
        BOOL v361 = v189 != 0;
        uint64_t v362 = 438;
        goto LABEL_676;
      case 36:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        *(void *)(a1 + 444) |= 8uLL;
        uint64_t v194 = *v54;
        unint64_t v195 = *(void *)&v41[v194];
        if (v195 <= 0xFFFFFFFFFFFFFFF7 && v195 + 8 <= *(void *)&v41[*v35])
        {
          uint64_t v146 = *(void *)(*(void *)&v41[*v57] + v195);
          *(void *)&v41[v194] = v195 + 8;
        }
        else
        {
          v41[*v56] = 1;
          uint64_t v146 = 0;
        }
        uint64_t v380 = 328;
        goto LABEL_749;
      case 37:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        *(void *)(a1 + 444) |= 0x10uLL;
        uint64_t v196 = *v54;
        unint64_t v197 = *(void *)&v41[v196];
        if (v197 <= 0xFFFFFFFFFFFFFFF7 && v197 + 8 <= *(void *)&v41[*v35])
        {
          uint64_t v146 = *(void *)(*(void *)&v41[*v57] + v197);
          *(void *)&v41[v196] = v197 + 8;
        }
        else
        {
          v41[*v56] = 1;
          uint64_t v146 = 0;
        }
        uint64_t v380 = 336;
LABEL_749:
        *(void *)(a1 + v380) = v146;
        goto LABEL_726;
      case 39:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v198 = 0;
        unsigned int v199 = 0;
        uint64_t v200 = 0;
        *(void *)(a1 + 444) |= 0x8000000uLL;
        while (2)
        {
          uint64_t v201 = *v54;
          uint64_t v202 = *(void *)&v41[v201];
          unint64_t v203 = v202 + 1;
          if (v202 == -1 || v203 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v204 = *(unsigned char *)(*(void *)&v41[*v57] + v202);
            *(void *)&v41[v201] = v203;
            v200 |= (unint64_t)(v204 & 0x7F) << v198;
            if (v204 < 0)
            {
              v198 += 7;
              BOOL v65 = v199++ >= 9;
              if (v65)
              {
                uint64_t v200 = 0;
                goto LABEL_589;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v200 = 0;
        }
LABEL_589:
        BOOL v361 = v200 != 0;
        uint64_t v362 = 431;
        goto LABEL_676;
      case 42:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x4000000000000) == 0)
        {
          uint64_t v86 = PBReaderReadString();
          uint64_t v87 = 160;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 13) >> 56;
        goto LABEL_724;
      case 43:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x800000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = *(char *)(a1 + 449);
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOClientCapabilities);
        if (!GEOClientCapabilitiesReadAllFrom((uint64_t)v84, v41, v8 & 1)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 136;
        goto LABEL_480;
      case 44:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v205 = 0;
        unsigned int v206 = 0;
        uint64_t v207 = 0;
        *(void *)(a1 + 444) |= 0x80000000uLL;
        while (2)
        {
          uint64_t v208 = *v54;
          uint64_t v209 = *(void *)&v41[v208];
          unint64_t v210 = v209 + 1;
          if (v209 == -1 || v210 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v211 = *(unsigned char *)(*(void *)&v41[*v57] + v209);
            *(void *)&v41[v208] = v210;
            v207 |= (unint64_t)(v211 & 0x7F) << v205;
            if (v211 < 0)
            {
              v205 += 7;
              BOOL v65 = v206++ >= 9;
              if (v65)
              {
                uint64_t v207 = 0;
                goto LABEL_593;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v207 = 0;
        }
LABEL_593:
        BOOL v361 = v207 != 0;
        uint64_t v362 = 435;
        goto LABEL_676;
      case 45:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v212 = 0;
        unsigned int v213 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x8000uLL;
        while (2)
        {
          uint64_t v214 = *v54;
          uint64_t v215 = *(void *)&v41[v214];
          unint64_t v216 = v215 + 1;
          if (v215 == -1 || v216 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v217 = *(unsigned char *)(*(void *)&v41[*v57] + v215);
            *(void *)&v41[v214] = v216;
            v106 |= (unint64_t)(v217 & 0x7F) << v212;
            if (v217 < 0)
            {
              v212 += 7;
              BOOL v65 = v213++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_597;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_597:
        uint64_t v363 = 416;
        goto LABEL_671;
      case 46:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(unsigned char *)(a1 + 452) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          LOBYTE(v365) = 16 * *(unsigned char *)(a1 + 452);
LABEL_723:
          uint64_t v365 = (char)v365;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOSuggestionsOptions);
        if (!GEOSuggestionsOptionsReadAllFrom((uint64_t)v84, v41, v8 & 1)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 312;
        goto LABEL_480;
      case 47:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v218 = 0;
        unsigned int v219 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x1000uLL;
        while (2)
        {
          uint64_t v220 = *v54;
          uint64_t v221 = *(void *)&v41[v220];
          unint64_t v222 = v221 + 1;
          if (v221 == -1 || v222 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v223 = *(unsigned char *)(*(void *)&v41[*v57] + v221);
            *(void *)&v41[v220] = v222;
            v106 |= (unint64_t)(v223 & 0x7F) << v218;
            if (v223 < 0)
            {
              v218 += 7;
              BOOL v65 = v219++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_601;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_601:
        uint64_t v363 = 404;
        goto LABEL_671;
      case 48:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v224 = 0;
        unsigned int v225 = 0;
        uint64_t v226 = 0;
        *(void *)(a1 + 444) |= 0x800000000uLL;
        while (2)
        {
          uint64_t v227 = *v54;
          uint64_t v228 = *(void *)&v41[v227];
          unint64_t v229 = v228 + 1;
          if (v228 == -1 || v229 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v230 = *(unsigned char *)(*(void *)&v41[*v57] + v228);
            *(void *)&v41[v227] = v229;
            v226 |= (unint64_t)(v230 & 0x7F) << v224;
            if (v230 < 0)
            {
              v224 += 7;
              BOOL v65 = v225++ >= 9;
              if (v65)
              {
                uint64_t v226 = 0;
                goto LABEL_605;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v226 = 0;
        }
LABEL_605:
        BOOL v361 = v226 != 0;
        uint64_t v362 = 439;
        goto LABEL_676;
      case 49:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v231 = 0;
        unsigned int v232 = 0;
        uint64_t v233 = 0;
        *(void *)(a1 + 444) |= 0x40000000uLL;
        while (2)
        {
          uint64_t v234 = *v54;
          uint64_t v235 = *(void *)&v41[v234];
          unint64_t v236 = v235 + 1;
          if (v235 == -1 || v236 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v237 = *(unsigned char *)(*(void *)&v41[*v57] + v235);
            *(void *)&v41[v234] = v236;
            v233 |= (unint64_t)(v237 & 0x7F) << v231;
            if (v237 < 0)
            {
              v231 += 7;
              BOOL v65 = v232++ >= 9;
              if (v65)
              {
                uint64_t v233 = 0;
                goto LABEL_609;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v233 = 0;
        }
LABEL_609:
        BOOL v361 = v233 != 0;
        uint64_t v362 = 434;
        goto LABEL_676;
      case 50:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v238 = 0;
        unsigned int v239 = 0;
        uint64_t v240 = 0;
        *(void *)(a1 + 444) |= 0x4000000uLL;
        while (2)
        {
          uint64_t v241 = *v54;
          uint64_t v242 = *(void *)&v41[v241];
          unint64_t v243 = v242 + 1;
          if (v242 == -1 || v243 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v244 = *(unsigned char *)(*(void *)&v41[*v57] + v242);
            *(void *)&v41[v241] = v243;
            v240 |= (unint64_t)(v244 & 0x7F) << v238;
            if (v244 < 0)
            {
              v238 += 7;
              BOOL v65 = v239++ >= 9;
              if (v65)
              {
                uint64_t v240 = 0;
                goto LABEL_613;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v240 = 0;
        }
LABEL_613:
        BOOL v361 = v240 != 0;
        uint64_t v362 = 430;
        goto LABEL_676;
      case 52:
        if (!v70 || (*(void *)(a1 + 444) & 0x100000000000000) != 0) {
          goto LABEL_525;
        }
        PBReaderReadString();
        uint64_t v84 = (GEOAddress *)objc_claimAutoreleasedReturnValue();
        if (v84) {
          -[GEOPlaceSearchRequest _addNoFlagsLimitToCountryCodeIso2:](a1, v84);
        }
        goto LABEL_409;
      case 53:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v245 = 0;
        unsigned int v246 = 0;
        uint64_t v247 = 0;
        *(void *)(a1 + 444) |= 0x200000000uLL;
        while (2)
        {
          uint64_t v248 = *v54;
          uint64_t v249 = *(void *)&v41[v248];
          unint64_t v250 = v249 + 1;
          if (v249 == -1 || v250 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v251 = *(unsigned char *)(*(void *)&v41[*v57] + v249);
            *(void *)&v41[v248] = v250;
            v247 |= (unint64_t)(v251 & 0x7F) << v245;
            if (v251 < 0)
            {
              v245 += 7;
              BOOL v65 = v246++ >= 9;
              if (v65)
              {
                uint64_t v247 = 0;
                goto LABEL_617;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v247 = 0;
        }
LABEL_617:
        BOOL v361 = v247 != 0;
        uint64_t v362 = 437;
        goto LABEL_676;
      case 100:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v252 = 0;
        unsigned int v253 = 0;
        uint64_t v254 = 0;
        *(void *)(a1 + 444) |= 2uLL;
        while (2)
        {
          uint64_t v255 = *v54;
          uint64_t v256 = *(void *)&v41[v255];
          unint64_t v257 = v256 + 1;
          if (v256 == -1 || v257 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v258 = *(unsigned char *)(*(void *)&v41[*v57] + v256);
            *(void *)&v41[v255] = v257;
            v254 |= (unint64_t)(v258 & 0x7F) << v252;
            if (v258 < 0)
            {
              v252 += 7;
              BOOL v65 = v253++ >= 9;
              if (v65)
              {
                uint64_t v254 = 0;
                goto LABEL_621;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v254 = 0;
        }
LABEL_621:
        uint64_t v364 = 184;
        goto LABEL_650;
      case 101:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v259 = 0;
        unsigned int v260 = 0;
        uint64_t v261 = 0;
        *(void *)(a1 + 444) |= 0x2000000uLL;
        while (2)
        {
          uint64_t v262 = *v54;
          uint64_t v263 = *(void *)&v41[v262];
          unint64_t v264 = v263 + 1;
          if (v263 == -1 || v264 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v265 = *(unsigned char *)(*(void *)&v41[*v57] + v263);
            *(void *)&v41[v262] = v264;
            v261 |= (unint64_t)(v265 & 0x7F) << v259;
            if (v265 < 0)
            {
              v259 += 7;
              BOOL v65 = v260++ >= 9;
              if (v65)
              {
                uint64_t v261 = 0;
                goto LABEL_625;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v261 = 0;
        }
LABEL_625:
        BOOL v361 = v261 != 0;
        uint64_t v362 = 429;
        goto LABEL_676;
      case 102:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v266 = 0;
        unsigned int v267 = 0;
        uint64_t v268 = 0;
        *(void *)(a1 + 444) |= 0x10000uLL;
        while (2)
        {
          uint64_t v269 = *v54;
          uint64_t v270 = *(void *)&v41[v269];
          unint64_t v271 = v270 + 1;
          if (v270 == -1 || v271 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v272 = *(unsigned char *)(*(void *)&v41[*v57] + v270);
            *(void *)&v41[v269] = v271;
            v268 |= (unint64_t)(v272 & 0x7F) << v266;
            if (v272 < 0)
            {
              v266 += 7;
              BOOL v65 = v267++ >= 9;
              if (v65)
              {
                uint64_t v268 = 0;
                goto LABEL_629;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v268 = 0;
        }
LABEL_629:
        BOOL v361 = v268 != 0;
        uint64_t v362 = 420;
        goto LABEL_676;
      case 103:
        if (!v70 || (*(unsigned char *)(a1 + 452) & 1) != 0) {
          goto LABEL_525;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOSearchSubstring);
        if (!GEOSearchSubstringReadAllFrom(v84, v41)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        -[GEOPlaceSearchRequest _addNoFlagsSearchSubstring:](a1, v84);
        goto LABEL_409;
      case 104:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v273 = 0;
        unsigned int v274 = 0;
        uint64_t v275 = 0;
        *(void *)(a1 + 444) |= 0x200000uLL;
        while (2)
        {
          uint64_t v276 = *v54;
          uint64_t v277 = *(void *)&v41[v276];
          unint64_t v278 = v277 + 1;
          if (v277 == -1 || v278 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v279 = *(unsigned char *)(*(void *)&v41[*v57] + v277);
            *(void *)&v41[v276] = v278;
            v275 |= (unint64_t)(v279 & 0x7F) << v273;
            if (v279 < 0)
            {
              v273 += 7;
              BOOL v65 = v274++ >= 9;
              if (v65)
              {
                uint64_t v275 = 0;
                goto LABEL_633;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v275 = 0;
        }
LABEL_633:
        BOOL v361 = v275 != 0;
        uint64_t v362 = 425;
        goto LABEL_676;
      case 105:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x4000000000000000) == 0)
        {
          uint64_t v86 = PBReaderReadString();
          uint64_t v87 = 272;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v365 = (2 * *(void *)(a1 + 444)) >> 56;
        goto LABEL_724;
      case 106:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x2000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = (4 * *(void *)(a1 + 444)) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOSearchSubstring);
        if (!GEOSearchSubstringReadAllFrom(v84, v41)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 264;
        goto LABEL_480;
      case 107:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v280 = 0;
        unsigned int v281 = 0;
        uint64_t v282 = 0;
        *(void *)(a1 + 444) |= 0x10000000uLL;
        while (2)
        {
          uint64_t v283 = *v54;
          uint64_t v284 = *(void *)&v41[v283];
          unint64_t v285 = v284 + 1;
          if (v284 == -1 || v285 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v286 = *(unsigned char *)(*(void *)&v41[*v57] + v284);
            *(void *)&v41[v283] = v285;
            v282 |= (unint64_t)(v286 & 0x7F) << v280;
            if (v286 < 0)
            {
              v280 += 7;
              BOOL v65 = v281++ >= 9;
              if (v65)
              {
                uint64_t v282 = 0;
                goto LABEL_637;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v282 = 0;
        }
LABEL_637:
        BOOL v361 = v282 != 0;
        uint64_t v362 = 432;
        goto LABEL_676;
      case 108:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x1000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = (8 * *(void *)(a1 + 444)) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOAddress);
        if (!GEOAddressReadAllFrom((uint64_t)v84, v41, v8 & 1)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 256;
        goto LABEL_480;
      case 109:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v287 = 0;
        unsigned int v288 = 0;
        uint64_t v289 = 0;
        *(void *)(a1 + 444) |= 0x100000000uLL;
        while (2)
        {
          uint64_t v290 = *v54;
          uint64_t v291 = *(void *)&v41[v290];
          unint64_t v292 = v291 + 1;
          if (v291 == -1 || v292 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v293 = *(unsigned char *)(*(void *)&v41[*v57] + v291);
            *(void *)&v41[v290] = v292;
            v289 |= (unint64_t)(v293 & 0x7F) << v287;
            if (v293 < 0)
            {
              v287 += 7;
              BOOL v65 = v288++ >= 9;
              if (v65)
              {
                uint64_t v289 = 0;
                goto LABEL_641;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v289 = 0;
        }
LABEL_641:
        BOOL v361 = v289 != 0;
        uint64_t v362 = 436;
        goto LABEL_676;
      case 110:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x20000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 10) >> 56;
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOIndexQueryNode);
        if (!GEOIndexQueryNodeReadAllFrom((uint64_t)v84, v41, v8 & 1)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 192;
        goto LABEL_480;
      case 111:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v294 = 0;
        unsigned int v295 = 0;
        uint64_t v296 = 0;
        *(void *)(a1 + 444) |= 0x100000uLL;
        while (2)
        {
          uint64_t v297 = *v54;
          uint64_t v298 = *(void *)&v41[v297];
          unint64_t v299 = v298 + 1;
          if (v298 == -1 || v299 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v300 = *(unsigned char *)(*(void *)&v41[*v57] + v298);
            *(void *)&v41[v297] = v299;
            v296 |= (unint64_t)(v300 & 0x7F) << v294;
            if (v300 < 0)
            {
              v294 += 7;
              BOOL v65 = v295++ >= 9;
              if (v65)
              {
                uint64_t v296 = 0;
                goto LABEL_645;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v296 = 0;
        }
LABEL_645:
        BOOL v361 = v296 != 0;
        uint64_t v362 = 424;
        goto LABEL_676;
      case 112:
        if (!v70 || (*(unsigned char *)(a1 + 452) & 4) != 0)
        {
LABEL_525:
          char v359 = PBReaderSkipValueWithTag();
          long long v35 = (int *)MEMORY[0x1E4F940E0];
          if ((v359 & 1) == 0) {
            goto LABEL_812;
          }
          goto LABEL_726;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOGeoServiceTag);
        if (!GEOGeoServiceTagReadAllFrom((uint64_t)v84, v41)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        -[GEOPlaceSearchRequest _addNoFlagsServiceTag:](a1, v84);
LABEL_409:

        goto LABEL_725;
      case 113:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v301 = 0;
        unsigned int v302 = 0;
        uint64_t v254 = 0;
        *(void *)(a1 + 444) |= 4uLL;
        while (2)
        {
          uint64_t v303 = *v54;
          uint64_t v304 = *(void *)&v41[v303];
          unint64_t v305 = v304 + 1;
          if (v304 == -1 || v305 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v306 = *(unsigned char *)(*(void *)&v41[*v57] + v304);
            *(void *)&v41[v303] = v305;
            v254 |= (unint64_t)(v306 & 0x7F) << v301;
            if (v306 < 0)
            {
              v301 += 7;
              BOOL v65 = v302++ >= 9;
              if (v65)
              {
                uint64_t v254 = 0;
                goto LABEL_649;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v254 = 0;
        }
LABEL_649:
        uint64_t v364 = 208;
LABEL_650:
        *(void *)(a1 + v364) = v254;
        goto LABEL_726;
      case 114:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x80000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = *(char *)(a1 + 450);
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v84, v41)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 216;
        goto LABEL_480;
      case 115:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v307 = 0;
        unsigned int v308 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x80uLL;
        while (2)
        {
          uint64_t v309 = *v54;
          uint64_t v310 = *(void *)&v41[v309];
          unint64_t v311 = v310 + 1;
          if (v310 == -1 || v311 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v312 = *(unsigned char *)(*(void *)&v41[*v57] + v310);
            *(void *)&v41[v309] = v311;
            v106 |= (unint64_t)(v312 & 0x7F) << v307;
            if (v312 < 0)
            {
              v307 += 7;
              BOOL v65 = v308++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_654;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_654:
        uint64_t v363 = 384;
        goto LABEL_671;
      case 117:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v313 = 0;
        unsigned int v314 = 0;
        uint64_t v315 = 0;
        *(void *)(a1 + 444) |= 0x400000uLL;
        while (2)
        {
          uint64_t v316 = *v54;
          uint64_t v317 = *(void *)&v41[v316];
          unint64_t v318 = v317 + 1;
          if (v317 == -1 || v318 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v319 = *(unsigned char *)(*(void *)&v41[*v57] + v317);
            *(void *)&v41[v316] = v318;
            v315 |= (unint64_t)(v319 & 0x7F) << v313;
            if (v319 < 0)
            {
              v313 += 7;
              BOOL v65 = v314++ >= 9;
              if (v65)
              {
                uint64_t v315 = 0;
                goto LABEL_658;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v315 = 0;
        }
LABEL_658:
        BOOL v361 = v315 != 0;
        uint64_t v362 = 426;
        goto LABEL_676;
      case 118:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v320 = 0;
        unsigned int v321 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x2000uLL;
        while (2)
        {
          uint64_t v322 = *v54;
          uint64_t v323 = *(void *)&v41[v322];
          unint64_t v324 = v323 + 1;
          if (v323 == -1 || v324 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v325 = *(unsigned char *)(*(void *)&v41[*v57] + v323);
            *(void *)&v41[v322] = v324;
            v106 |= (unint64_t)(v325 & 0x7F) << v320;
            if (v325 < 0)
            {
              v320 += 7;
              BOOL v65 = v321++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_662;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_662:
        uint64_t v363 = 408;
        goto LABEL_671;
      case 119:
        if (!v70 || (*(void *)(a1 + 444) & 0x80000000000) != 0) {
          goto LABEL_527;
        }
        if (v67 != 2)
        {
          char v381 = 0;
          unsigned int v382 = 0;
          uint64_t v383 = 0;
          while (1)
          {
            uint64_t v384 = *v54;
            uint64_t v385 = *(void *)&v41[v384];
            unint64_t v386 = v385 + 1;
            if (v385 == -1 || v386 > *(void *)&v41[*v35]) {
              break;
            }
            char v387 = *(unsigned char *)(*(void *)&v41[*v57] + v385);
            *(void *)&v41[v384] = v386;
            v383 |= (unint64_t)(v387 & 0x7F) << v381;
            if (v387 < 0)
            {
              v381 += 7;
              BOOL v65 = v382++ >= 9;
              if (!v65) {
                continue;
              }
            }
            goto LABEL_758;
          }
LABEL_757:
          v41[*v56] = 1;
LABEL_758:
          PBRepeatedInt32Add();
          goto LABEL_725;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_812;
        }
        while (1)
        {
          v326 = (int *)MEMORY[0x1E4F940E0];
          if (*(void *)&v41[*v54] >= *(void *)&v41[*MEMORY[0x1E4F940E0]] || v41[*v56]) {
            break;
          }
          char v327 = 0;
          unsigned int v328 = 0;
          uint64_t v329 = 0;
          v330 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v331 = *v54;
            uint64_t v332 = *(void *)&v41[v331];
            unint64_t v333 = v332 + 1;
            if (v332 == -1 || v333 > *(void *)&v41[*v326]) {
              break;
            }
            char v334 = *(unsigned char *)(*(void *)&v41[*v330] + v332);
            *(void *)&v41[v331] = v333;
            v329 |= (unint64_t)(v334 & 0x7F) << v327;
            if (v334 < 0)
            {
              v327 += 7;
              BOOL v65 = v328++ >= 9;
              if (!v65) {
                continue;
              }
            }
            goto LABEL_461;
          }
          v41[*v56] = 1;
LABEL_461:
          PBRepeatedInt32Add();
        }
LABEL_529:
        PBReaderRecallMark();
        long long v35 = (int *)MEMORY[0x1E4F940E0];
        goto LABEL_726;
      case 120:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x8000000000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = *(char *)(a1 + 451);
          goto LABEL_724;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v84, v41)) {
          goto LABEL_811;
        }
        PBReaderRecallMark();
        uint64_t v85 = 280;
        goto LABEL_480;
      case 121:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v335 = 0;
        unsigned int v336 = 0;
        uint64_t v337 = 0;
        *(void *)(a1 + 444) |= 0x800000uLL;
        while (2)
        {
          uint64_t v338 = *v54;
          uint64_t v339 = *(void *)&v41[v338];
          unint64_t v340 = v339 + 1;
          if (v339 == -1 || v340 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v341 = *(unsigned char *)(*(void *)&v41[*v57] + v339);
            *(void *)&v41[v338] = v340;
            v337 |= (unint64_t)(v341 & 0x7F) << v335;
            if (v341 < 0)
            {
              v335 += 7;
              BOOL v65 = v336++ >= 9;
              if (v65)
              {
                uint64_t v337 = 0;
                goto LABEL_666;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v337 = 0;
        }
LABEL_666:
        BOOL v361 = v337 != 0;
        uint64_t v362 = 427;
        goto LABEL_676;
      case 122:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x100000000000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_812;
          }
          uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 19) >> 56;
LABEL_724:
          v6 += v365 >> 7;
LABEL_725:
          long long v35 = (int *)MEMORY[0x1E4F940E0];
LABEL_726:
          if (!(v400 & 1 | (v6 != 0)))
          {
            int v55 = 1;
            char v51 = v402;
LABEL_765:
            if ((v51 & 1) == 0) {
              goto LABEL_767;
            }
LABEL_766:
            *(void *)(a1 + 444) |= 0x10000000000uLL;
            goto LABEL_767;
          }
          char v51 = v402;
          unsigned int v57 = (int *)MEMORY[0x1E4F940B8];
          if (*(void *)&v41[*v54] >= *(void *)&v41[*v35]) {
            goto LABEL_762;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v84 = objc_alloc_init(GEOAdditionalEnabledMarkets);
        if (GEOAdditionalEnabledMarketsReadAllFrom((uint64_t)v84, v41, v8 & 1))
        {
          PBReaderRecallMark();
          uint64_t v85 = 112;
LABEL_480:
          v342 = *(void **)(a1 + v85);
          *(void *)(a1 + v85) = v84;
LABEL_504:

          --v6;
          goto LABEL_725;
        }
LABEL_811:

LABEL_812:
        int v55 = 0;
        if (v402) {
          goto LABEL_766;
        }
LABEL_767:
        if (v52 & 1 | ((v55 & 1) == 0))
        {
          char v389 = *(unsigned char *)(a1 + 452) | 0x7F;
          *(void *)(a1 + 444) |= 0xFFFFFE0000000000;
          *(unsigned char *)(a1 + 452) = v389;
        }
        else if (v53)
        {
          while (2)
          {
            while (1)
            {
              int v391 = *v53++;
              int v390 = v391;
              if (v391 <= 51) {
                break;
              }
              int v394 = v390 - 103;
              switch(v394)
              {
                case 0:
                  unint64_t v393 = 0;
                  char v392 = 1;
                  goto LABEL_804;
                case 1:
                case 4:
                case 6:
                case 8:
                case 10:
                case 12:
                case 13:
                case 14:
                case 15:
                case 18:
                case 20:
                case 21:
                  continue;
                case 2:
                  char v392 = 0;
                  unint64_t v393 = 0x4000000000000000;
                  goto LABEL_804;
                case 3:
                  char v392 = 0;
                  unint64_t v393 = 0x2000000000000000;
                  goto LABEL_804;
                case 5:
                  char v392 = 0;
                  unint64_t v393 = 0x1000000000000000;
                  goto LABEL_804;
                case 7:
                  char v392 = 0;
                  unint64_t v393 = 0x20000000000000;
                  goto LABEL_804;
                case 9:
                  unint64_t v393 = 0;
                  char v392 = 4;
                  goto LABEL_804;
                case 11:
                  char v392 = 0;
                  unint64_t v393 = 0x80000000000000;
                  goto LABEL_804;
                case 16:
                  char v392 = 0;
                  unint64_t v393 = 0x80000000000;
                  goto LABEL_804;
                case 17:
                  char v392 = 0;
                  unint64_t v393 = 0x8000000000000000;
                  goto LABEL_804;
                case 19:
                  char v392 = 0;
                  unint64_t v393 = 0x100000000000;
                  goto LABEL_804;
                case 22:
                  char v392 = 0;
                  unint64_t v393 = 0x8000000000000;
                  goto LABEL_804;
                case 23:
                  unint64_t v393 = 0;
                  char v392 = 32;
                  goto LABEL_804;
                default:
                  if (v394 != 52) {
                    continue;
                  }
                  char v392 = 0;
                  unint64_t v393 = 0x100000000000000;
LABEL_804:
                  char v395 = *(unsigned char *)(a1 + 452) | v392;
                  *(void *)(a1 + 444) |= v393;
                  *(unsigned char *)(a1 + 452) = v395;
                  break;
              }
            }
            char v392 = 0;
            unint64_t v393 = 0x40000000000;
            switch(v390)
            {
              case 0:
                break;
              case 1:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 18:
              case 19:
              case 21:
                continue;
              case 2:
                goto LABEL_804;
              case 3:
                char v392 = 0;
                unint64_t v393 = 0x200000000000;
                goto LABEL_804;
              case 4:
                char v392 = 0;
                unint64_t v393 = 0x200000000000000;
                goto LABEL_804;
              case 5:
                unint64_t v393 = 0;
                char v392 = 2;
                goto LABEL_804;
              case 6:
                char v392 = 0;
                unint64_t v393 = 0x400000000000000;
                goto LABEL_804;
              case 7:
                char v392 = 0;
                unint64_t v393 = 0x20000000000;
                goto LABEL_804;
              case 17:
                char v392 = 0;
                unint64_t v393 = 0x10000000000000;
                goto LABEL_804;
              case 20:
                unint64_t v393 = 0;
                char v392 = 64;
                goto LABEL_804;
              case 22:
                char v392 = 0;
                unint64_t v393 = 0x400000000000;
                goto LABEL_804;
              default:
                switch(v390)
                {
                  case 27:
                    unint64_t v393 = 0;
                    char v392 = 16;
                    goto LABEL_804;
                  case 28:
                    char v392 = 0;
                    unint64_t v393 = 0x1000000000000;
                    goto LABEL_804;
                  case 29:
                    char v392 = 0;
                    unint64_t v393 = 0x2000000000000;
                    goto LABEL_804;
                  case 30:
                    char v392 = 0;
                    unint64_t v393 = 0x40000000000000;
                    goto LABEL_804;
                  case 31:
                    char v392 = 0;
                    unint64_t v393 = 0x800000000000000;
                    goto LABEL_804;
                  case 42:
                    char v392 = 0;
                    unint64_t v393 = 0x4000000000000;
                    goto LABEL_804;
                  case 43:
                    char v392 = 0;
                    unint64_t v393 = 0x800000000000;
                    goto LABEL_804;
                  case 46:
                    unint64_t v393 = 0;
                    char v392 = 8;
                    goto LABEL_804;
                  default:
                    continue;
                }
                continue;
            }
            break;
          }
        }
        if (v55)
        {
          BOOL v388 = v41[*v56] == 0;
          if ((v52 & 1) == 0) {
            return v388;
          }
LABEL_809:
          v396 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          BOOL v388 = 0;
          if (v52) {
            goto LABEL_809;
          }
        }
        return v388;
      case 123:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v343 = 0;
        unsigned int v344 = 0;
        uint64_t v106 = 0;
        *(void *)(a1 + 444) |= 0x200uLL;
        while (2)
        {
          uint64_t v345 = *v54;
          uint64_t v346 = *(void *)&v41[v345];
          unint64_t v347 = v346 + 1;
          if (v346 == -1 || v347 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v348 = *(unsigned char *)(*(void *)&v41[*v57] + v346);
            *(void *)&v41[v345] = v347;
            v106 |= (unint64_t)(v348 & 0x7F) << v343;
            if (v348 < 0)
            {
              v343 += 7;
              BOOL v65 = v344++ >= 9;
              if (v65)
              {
                LODWORD(v106) = 0;
                goto LABEL_670;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          LODWORD(v106) = 0;
        }
LABEL_670:
        uint64_t v363 = 392;
LABEL_671:
        *(_DWORD *)(a1 + v363) = v106;
        goto LABEL_726;
      case 124:
        if ((v404 & 1) == 0) {
          goto LABEL_527;
        }
        char v349 = 0;
        unsigned int v350 = 0;
        uint64_t v351 = 0;
        *(void *)(a1 + 444) |= 0x2000000000uLL;
        while (2)
        {
          uint64_t v352 = *v54;
          uint64_t v353 = *(void *)&v41[v352];
          unint64_t v354 = v353 + 1;
          if (v353 == -1 || v354 > *(void *)&v41[*v35])
          {
            v41[*v56] = 1;
          }
          else
          {
            char v355 = *(unsigned char *)(*(void *)&v41[*v57] + v353);
            *(void *)&v41[v352] = v354;
            v351 |= (unint64_t)(v355 & 0x7F) << v349;
            if (v355 < 0)
            {
              v349 += 7;
              BOOL v65 = v350++ >= 9;
              if (v65)
              {
                uint64_t v351 = 0;
                goto LABEL_675;
              }
              continue;
            }
          }
          break;
        }
        if (v41[*v56]) {
          uint64_t v351 = 0;
        }
LABEL_675:
        BOOL v361 = v351 != 0;
        uint64_t v362 = 441;
LABEL_676:
        *(unsigned char *)(a1 + v362) = v361;
        goto LABEL_726;
      case 125:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(void *)(a1 + 444) & 0x8000000000000) == 0)
        {
          uint64_t v86 = PBReaderReadString();
          uint64_t v87 = 168;
          goto LABEL_503;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        uint64_t v365 = (uint64_t)(*(void *)(a1 + 444) << 12) >> 56;
        goto LABEL_724;
      case 126:
        if (!v70) {
          goto LABEL_527;
        }
        if ((*(unsigned char *)(a1 + 452) & 0x20) == 0)
        {
          uint64_t v86 = PBReaderReadString();
          uint64_t v87 = 352;
LABEL_503:
          v342 = *(void **)(a1 + v87);
          *(void *)(a1 + v87) = v86;
          goto LABEL_504;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_812;
        }
        LOBYTE(v365) = 4 * *(unsigned char *)(a1 + 452);
        goto LABEL_723;
      default:
        if ((v51 & 1) == 0 || (*(void *)(a1 + 444) & 0x10000000000) != 0)
        {
LABEL_527:
          char v360 = PBReaderSkipValueWithTag();
          long long v35 = (int *)MEMORY[0x1E4F940E0];
          if ((v360 & 1) == 0) {
            goto LABEL_812;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v356 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            v357 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v356;
          }
          int v358 = PBUnknownFieldAdd();
          long long v35 = (int *)MEMORY[0x1E4F940E0];
          if (!v358)
          {
            int v55 = 0;
            goto LABEL_766;
          }
        }
        goto LABEL_726;
    }
  }
}

void sub_189DC52E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC5458(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC55D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC5744(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC58BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC69A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC6E98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC7094(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC73C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC7530(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC76A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC7820(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC7998(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC7E70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC7FE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC8434(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC9008(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC9618(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC9A74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC9BEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC9DF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DC9FFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DCA208(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DCA664(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DCAEAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DCB2D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DCB4D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DCB8E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DCBA64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DD07F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceSearchRequestCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 120) readAll:1];
  [*(id *)(a1 + 232) readAll:1];
  [*(id *)(a1 + 240) readAll:1];
  [*(id *)(a1 + 128) readAll:1];
  [*(id *)(a1 + 152) readAll:1];
  [*(id *)(a1 + 136) readAll:1];
  -[GEOSuggestionsOptions readAll:](*(void *)(a1 + 312), 1);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(a1 + 288);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v17 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }
    while (v4);
  }

  [*(id *)(a1 + 264) readAll:1];
  [*(id *)(a1 + 256) readAll:1];
  -[GEOIndexQueryNode readAll:](*(void *)(a1 + 192), 1);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = *(id *)(a1 + 304);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v11++), "readAll:", 1, (void)v13);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }
    while (v9);
  }

  [*(id *)(a1 + 216) readAll:1];
  [*(id *)(a1 + 280) readAll:1];
  return [*(id *)(a1 + 112) readAll:1];
}

BOOL GEOPlaceSearchRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 372))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPlaceSearchRequestReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 376));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 368) = [v8 position];
  *(_DWORD *)(a1 + 372) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPlaceSearchRequestReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPlaceSearchRequestReadAllFrom_initialTag;
  }
  BOOL Specified = GEOPlaceSearchRequestReadSpecified(a1, (char *)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPlaceSearchRequestCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 376));
  return Specified;
}

void sub_189DD0C00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceSearchRequestReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOPlaceSearchRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DD0C64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchSubstringIsValid(char *a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  [a1 position];
  [a1 length];
  BOOL v2 = 0;
  int v40 = 0;
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v39 = 0;
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v5])
    {
      char v7 = 0;
      unsigned int v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *v3;
        uint64_t v11 = *(void *)&a1[v10];
        unint64_t v12 = v11 + 1;
        if (v11 == -1 || v12 > *(void *)&a1[*v4]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&a1[*v6] + v11);
        *(void *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v7 += 7;
        if (v8++ >= 9)
        {
          unint64_t v9 = 0;
          int v15 = a1[*v5];
          goto LABEL_14;
        }
      }
      a1[*v5] = 1;
LABEL_12:
      int v15 = a1[*v5];
      if (a1[*v5]) {
        unint64_t v9 = 0;
      }
LABEL_14:
      int v16 = v9 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v9 >> 3))
      {
        case 1u:
          uint64_t v18 = v39;
          if (v39)
          {
            if (v39 == 1) {
              goto LABEL_74;
            }
            if (HIDWORD(v39))
            {
              if (HIDWORD(v39) == 1 || v40) {
                goto LABEL_74;
              }
              uint64_t v18 = 2;
            }
            else
            {
              uint64_t v18 = 1;
            }
          }
          *((_DWORD *)&v39 + v18) = 1;
          if (v16) {
            goto LABEL_74;
          }
          unsigned int v21 = 0;
          while (1)
          {
            uint64_t v22 = *v3;
            uint64_t v23 = *(void *)&a1[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&a1[*v4]) {
              goto LABEL_67;
            }
            int v25 = *(char *)(*(void *)&a1[*v6] + v23);
            *(void *)&a1[v22] = v24;
            if (v25 < 0)
            {
              BOOL v26 = v21++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_68;
          }
        case 2u:
          uint64_t v19 = v39;
          if (!v39) {
            goto LABEL_50;
          }
          if (v39 == 2) {
            goto LABEL_74;
          }
          if (HIDWORD(v39))
          {
            if (HIDWORD(v39) == 2 || v40) {
              goto LABEL_74;
            }
            uint64_t v19 = 2;
          }
          else
          {
            uint64_t v19 = 1;
          }
LABEL_50:
          *((_DWORD *)&v39 + v19) = 2;
          if (v16) {
            goto LABEL_74;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v3;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v4]) {
              goto LABEL_67;
            }
            int v31 = *(char *)(*(void *)&a1[*v6] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v26 = v27++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_68;
          }
        case 3u:
          uint64_t v20 = v39;
          if (!v39) {
            goto LABEL_59;
          }
          if (v39 == 3) {
            goto LABEL_74;
          }
          if (HIDWORD(v39))
          {
            if (HIDWORD(v39) == 3 || v40)
            {
LABEL_74:
              BOOL v37 = 0;
              goto LABEL_73;
            }
            uint64_t v20 = 2;
          }
          else
          {
            uint64_t v20 = 1;
          }
LABEL_59:
          *((_DWORD *)&v39 + v20) = 3;
          if (v16) {
            goto LABEL_74;
          }
          unsigned int v32 = 0;
          while (1)
          {
            uint64_t v33 = *v3;
            uint64_t v34 = *(void *)&a1[v33];
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)&a1[*v4]) {
              break;
            }
            int v36 = *(char *)(*(void *)&a1[*v6] + v34);
            *(void *)&a1[v33] = v35;
            if (v36 < 0)
            {
              BOOL v26 = v32++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_68;
          }
LABEL_67:
          a1[*v5] = 1;
LABEL_68:
          if (*(void *)&a1[*v3] >= *(void *)&a1[*v4]) {
            goto LABEL_69;
          }
          break;
        case 4u:
          if (v16 == 2) {
            goto LABEL_38;
          }
          goto LABEL_74;
        default:
LABEL_38:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_74;
          }
          goto LABEL_68;
      }
    }
LABEL_69:
    BOOL v2 = v40 != 0;
  }
  if (a1[*v5]) {
    BOOL v37 = 0;
  }
  else {
    BOOL v37 = v2;
  }
LABEL_73:
  PBReaderRecallMark();
  return v37;
}

void sub_189DD1D34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceSearchRequestIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 376));
  unint64_t v2 = *(unsigned __int8 *)(a1 + 452);
  uint64_t v3 = *(void *)(a1 + 444);
  if (v3 & 0x40000000000 | v2 & 0x80) {
    return 1;
  }
  if ((v3 & 0x200000000000) != 0)
  {
    if (GEOAddressIsDirty(*(void *)(a1 + 120))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 444);
    unint64_t v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if ((v3 & 0x200000000000000) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 232))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 444);
    unint64_t v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if (v3 & 0x410020000000000 | v2 & 0x42) {
    return 1;
  }
  if ((v3 & 0x400000000000) != 0)
  {
    if (GEOBusinessOptionsIsDirty(*(void *)(a1 + 128))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 444);
    unint64_t v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if (v3 & 0x847000000000000 | v2 & 0x10) {
    return 1;
  }
  if ((v3 & 0x800000000000) != 0)
  {
    if (GEOClientCapabilitiesIsDirty(*(void *)(a1 + 136))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 444);
    unint64_t v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if ((v2 & 8) != 0)
  {
    if (GEOSuggestionsOptionsIsDirty(*(void *)(a1 + 312))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 444);
    unint64_t v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if (v3 & 0x6100000000000000 | v2 & 1) {
    return 1;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    if (GEOAddressIsDirty(*(void *)(a1 + 256))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 444);
    unint64_t v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if ((v3 & 0x20000000000000) != 0)
  {
    if (GEOIndexQueryNodeIsDirty(*(os_unfair_lock_s **)(a1 + 192))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 444);
    unint64_t v2 = *(unsigned __int8 *)(a1 + 452);
  }
  if (v3 & 0x8080080000000000 | v2 & 4) {
    return 1;
  }
  if ((v3 & 0x100000000000) == 0) {
    goto LABEL_31;
  }
  if (GEOAdditionalEnabledMarketsIsDirty(*(void *)(a1 + 112))) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 444);
  unint64_t v2 = *(unsigned __int8 *)(a1 + 452);
LABEL_31:
  if ((v3 & 0x8000000000000) != 0) {
    return 1;
  }
  return (v2 >> 5) & 1;
}

os_unfair_lock_s *GEOPlaceSearchRequestIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOPlaceSearchRequestIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 94);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189DD3A38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DD6140(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DD6AF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceSearchResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 84);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 80)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 104)), (uint16x4_t)0xFFF7FFF8FFF9FFFCLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 104) >> 5) & 1)+ ((*(_WORD *)(a1 + 104) >> 6) & 1)+ ((*(_WORD *)(a1 + 104) >> 3) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 3;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v80 = v17;
        char v81 = v18 | v17;
        if ((v18 | v8)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v82 = (v19 == 0) | v18;
        BOOL v83 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_128;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_128:
      int v78 = 1;
      goto LABEL_129;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v83;
    if ((v82 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_102;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        while (2)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
            *(void *)(v3 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              BOOL v30 = v40++ >= 9;
              if (v30)
              {
                LODWORD(v41) = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_107:
        uint64_t v71 = 96;
        goto LABEL_116;
      case 2:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x80) != 0) {
          goto LABEL_102;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_150;
        }
        char v52 = objc_alloc_init(GEOPlaceResult);
        if (!GEOPlaceResultReadAllFrom((uint64_t)v52, (void *)v3, v10 & 1)) {
          goto LABEL_149;
        }
        PBReaderRecallMark();
        -[GEOPlaceSearchResponse _addNoFlagsPlaceResult:](a1, v52);
        goto LABEL_79;
      case 3:
        if (!v34) {
          goto LABEL_102;
        }
        if ((*(_WORD *)(a1 + 104) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_150;
          }
          __int16 v72 = *(_WORD *)(a1 + 104) << 11;
LABEL_123:
          v7 += v72 >> 15;
        }
        else
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_150;
          }
          char v52 = objc_alloc_init(GEOMapRegion);
          if (!GEOMapRegionReadAllFrom((uint64_t)v52, (void *)v3)) {
            goto LABEL_149;
          }
          PBReaderRecallMark();
          uint64_t v53 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v52;

          --v7;
        }
        goto LABEL_124;
      case 4:
      case 5:
      case 6:
      case 8:
LABEL_80:
        if ((v80 & 1) == 0 || (*(_WORD *)(a1 + 104) & 8) != 0) {
          goto LABEL_102;
        }
        if (!*(void *)(a1 + 16))
        {
          id v56 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          unsigned int v57 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v56;
        }
        int v58 = PBUnknownFieldAdd();
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        if (v58) {
          goto LABEL_127;
        }
        int v78 = 0;
        uint64_t v79 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        goto LABEL_131;
      case 7:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x100) != 0) {
          goto LABEL_102;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_150;
        }
        char v52 = objc_alloc_init(GEOSuggestionEntryList);
        if (!GEOSuggestionEntryListReadAllFrom((uint64_t)v52, (void *)v3, v10 & 1)) {
          goto LABEL_149;
        }
        PBReaderRecallMark();
        -[GEOPlaceSearchResponse _addNoFlagsSuggestionEntryLists:](a1, v52);
        goto LABEL_79;
      case 9:
        if (!v34) {
          goto LABEL_102;
        }
        if ((*(_WORD *)(a1 + 104) & 0x200) == 0)
        {
          uint64_t v54 = PBReaderReadData();
          uint64_t v55 = 64;
          goto LABEL_93;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_150;
        }
        __int16 v72 = *(_WORD *)(a1 + 104) << 6;
        goto LABEL_123;
      case 10:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x20) != 0)
        {
LABEL_102:
          char v70 = PBReaderSkipValueWithTag();
          uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          if (v70) {
            goto LABEL_127;
          }
          int v78 = 0;
LABEL_129:
          uint64_t v79 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          goto LABEL_130;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_150;
        }
        char v52 = objc_alloc_init(GEONamedFeature);
        if (GEONamedFeatureReadAllFrom(v52, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOPlaceSearchResponse _addNoFlagsNamedFeatures:](a1, v52);
LABEL_79:

LABEL_124:
          unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
LABEL_127:
          if (!(v81 & 1 | (v7 != 0))) {
            goto LABEL_128;
          }
          continue;
        }
LABEL_149:

LABEL_150:
        int v78 = 0;
        uint64_t v79 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_130:
        if (v80) {
LABEL_131:
        }
          *(_WORD *)(a1 + v79[403]) |= 8u;
        if (v83 || (v78 & 1) == 0)
        {
          *(_WORD *)(a1 + v79[403]) |= 0x80u;
          *(_WORD *)(a1 + v79[403]) |= 0x10u;
          *(_WORD *)(a1 + v79[403]) |= 0x100u;
          *(_WORD *)(a1 + v79[403]) |= 0x200u;
          *(_WORD *)(a1 + v79[403]) |= 0x20u;
          *(_WORD *)(a1 + v79[403]) |= 0x40u;
        }
        else if (v19)
        {
          while (1)
          {
            int v74 = *v19++;
            int v73 = v74;
            __int16 v75 = 128;
            switch(v74)
            {
              case 0:
                goto LABEL_143;
              case 1:
              case 4:
              case 5:
              case 6:
              case 8:
                continue;
              case 2:
                goto LABEL_142;
              case 3:
                __int16 v75 = 16;
                goto LABEL_142;
              case 7:
                __int16 v75 = 256;
                goto LABEL_142;
              case 9:
                __int16 v75 = 512;
                goto LABEL_142;
              case 10:
                __int16 v75 = 32;
                goto LABEL_142;
              default:
                if (v73 != 103) {
                  continue;
                }
                __int16 v75 = 64;
LABEL_142:
                *(_WORD *)(a1 + v79[403]) |= v75;
                break;
            }
          }
        }
LABEL_143:
        if (v78) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v83)
        {
          char v76 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        switch((int)v33)
        {
          case 'd':
            if ((v8 & 1) == 0) {
              goto LABEL_102;
            }
            char v46 = 0;
            unsigned int v47 = 0;
            uint64_t v41 = 0;
            *(_WORD *)(a1 + 104) |= 2u;
            while (2)
            {
              uint64_t v48 = *v20;
              uint64_t v49 = *(void *)(v3 + v48);
              unint64_t v50 = v49 + 1;
              if (v49 == -1 || v50 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v21) = 1;
              }
              else
              {
                char v51 = *(unsigned char *)(*(void *)(v3 + *v22) + v49);
                *(void *)(v3 + v48) = v50;
                v41 |= (unint64_t)(v51 & 0x7F) << v46;
                if (v51 < 0)
                {
                  v46 += 7;
                  BOOL v30 = v47++ >= 9;
                  if (v30)
                  {
                    LODWORD(v41) = 0;
                    goto LABEL_115;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v21)) {
              LODWORD(v41) = 0;
            }
LABEL_115:
            uint64_t v71 = 92;
LABEL_116:
            *(_DWORD *)(a1 + v71) = v41;
            goto LABEL_127;
          case 'e':
            if ((v8 & 1) == 0) {
              goto LABEL_102;
            }
            *(_WORD *)(a1 + 104) |= 1u;
            uint64_t v59 = *v20;
            unint64_t v60 = *(void *)(v3 + v59);
            if (v60 <= 0xFFFFFFFFFFFFFFF7 && v60 + 8 <= *(void *)(v3 + *v6))
            {
              uint64_t v61 = *(void *)(*(void *)(v3 + *v22) + v60);
              *(void *)(v3 + v59) = v60 + 8;
            }
            else
            {
              *(unsigned char *)(v3 + *v21) = 1;
              uint64_t v61 = 0;
            }
            *(void *)(a1 + 72) = v61;
            goto LABEL_127;
          case 'g':
            if (!v34) {
              goto LABEL_102;
            }
            if ((*(_WORD *)(a1 + 104) & 0x40) == 0)
            {
              uint64_t v54 = PBReaderReadString();
              uint64_t v55 = 40;
LABEL_93:
              uint64_t v62 = *(void **)(a1 + v55);
              *(void *)(a1 + v55) = v54;

              uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
              unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
              --v7;
              goto LABEL_127;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_150;
            }
            __int16 v72 = *(_WORD *)(a1 + 104) << 9;
            break;
          case 'h':
            if ((v8 & 1) == 0) {
              goto LABEL_102;
            }
            char v63 = 0;
            unsigned int v64 = 0;
            uint64_t v65 = 0;
            *(_WORD *)(a1 + 104) |= 4u;
            while (2)
            {
              uint64_t v66 = *v20;
              uint64_t v67 = *(void *)(v3 + v66);
              unint64_t v68 = v67 + 1;
              if (v67 == -1 || v68 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v21) = 1;
              }
              else
              {
                char v69 = *(unsigned char *)(*(void *)(v3 + *v22) + v67);
                *(void *)(v3 + v66) = v68;
                v65 |= (unint64_t)(v69 & 0x7F) << v63;
                if (v69 < 0)
                {
                  v63 += 7;
                  BOOL v30 = v64++ >= 9;
                  if (v30)
                  {
                    uint64_t v65 = 0;
                    goto LABEL_120;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v21)) {
              uint64_t v65 = 0;
            }
LABEL_120:
            *(unsigned char *)(a1 + 100) = v65 != 0;
            goto LABEL_127;
          default:
            goto LABEL_80;
        }
        goto LABEL_123;
    }
  }
}

void sub_189DD79C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DD7B34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DD7EF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DD805C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DD8660(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DDA4C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DDA5A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPlaceSearchResponseCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v2 = a1[6];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v26;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v25 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v25 objects:v31 count:16];
    }
    while (v4);
  }

  [a1[3] readAll:1];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v7 = a1[7];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v21 objects:v30 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        -[GEOSuggestionEntryList readAll:](*(void *)(*((void *)&v21 + 1) + 8 * v11++), 1);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v21 objects:v30 count:16];
    }
    while (v9);
  }

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v12 = a1[4];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v17 objects:v29 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v18;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v18 != v15) {
          objc_enumerationMutation(v12);
        }
        objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * v16++), "readAll:", 1, (void)v17);
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v17 objects:v29 count:16];
    }
    while (v14);
  }
}

unint64_t GEOPlaceSearchResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 84))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPlaceSearchResponseReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = [v8 position];
  *(_DWORD *)(a1 + 84) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPlaceSearchResponseReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPlaceSearchResponseReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPlaceSearchResponseReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPlaceSearchResponseCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_189DDA97C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceSearchResponseReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOPlaceSearchResponseReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DDA9E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPlaceSearchResponseIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = 0;
    uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_159;
      }
      char v7 = 0;
      unsigned int v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *v2;
        uint64_t v11 = *(void *)&a1[v10];
        unint64_t v12 = v11 + 1;
        if (v11 == -1 || v12 > *(void *)&a1[*v3]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&a1[*v6] + v11);
        *(void *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v7 += 7;
        BOOL v14 = v8++ >= 9;
        if (v14)
        {
          unint64_t v9 = 0;
          uint64_t v15 = *v4;
          int v16 = a1[v15];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v15 = *v4;
      int v16 = a1[v15];
      if (a1[v15]) {
        unint64_t v9 = 0;
      }
LABEL_14:
      int v17 = v9 & 7;
      if (v16 || v17 == 4) {
        goto LABEL_159;
      }
      switch((v9 >> 3))
      {
        case 1u:
          if (v5 || (v9 & 7) != 0) {
            goto LABEL_168;
          }
          unsigned int v19 = 0;
          while (1)
          {
            uint64_t v20 = *v2;
            uint64_t v21 = *(void *)&a1[v20];
            unint64_t v22 = v21 + 1;
            if (v21 == -1 || v22 > *(void *)&a1[*v3]) {
              break;
            }
            int v23 = *(char *)(*(void *)&a1[*v6] + v21);
            *(void *)&a1[v20] = v22;
            int v5 = 1;
            if (v23 < 0)
            {
              BOOL v24 = v19++ > 8;
              if (!v24) {
                continue;
              }
            }
            goto LABEL_155;
          }
          int v5 = 1;
          a1[*v4] = 1;
          goto LABEL_155;
        case 2u:
          if (v17 != 2) {
            goto LABEL_168;
          }
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          if (!PBReaderPlaceMark() || !GEOPlaceResultIsValid(a1)) {
            goto LABEL_168;
          }
          goto LABEL_154;
        case 3u:
          if (v17 != 2) {
            goto LABEL_168;
          }
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
            goto LABEL_168;
          }
          goto LABEL_154;
        case 4u:
        case 5u:
        case 6u:
        case 8u:
          goto LABEL_141;
        case 7u:
          if (v17 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_168;
          }
          objc_msgSend(a1, "position", 0, 0);
          [a1 length];
LABEL_48:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v30 = 0;
            unsigned int v31 = 0;
            unint64_t v32 = 0;
            while (2)
            {
              uint64_t v33 = *v2;
              uint64_t v34 = *(void *)&a1[v33];
              unint64_t v35 = v34 + 1;
              if (v34 == -1 || v35 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v36 = *(unsigned char *)(*(void *)&a1[*v6] + v34);
                *(void *)&a1[v33] = v35;
                v32 |= (unint64_t)(v36 & 0x7F) << v30;
                if (v36 < 0)
                {
                  v30 += 7;
                  BOOL v14 = v31++ >= 9;
                  if (v14)
                  {
                    unint64_t v32 = 0;
                    int v37 = a1[*v4];
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            int v37 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v32 = 0;
            }
LABEL_60:
            int v38 = v32 & 7;
            if (v37) {
              BOOL v39 = 1;
            }
            else {
              BOOL v39 = v38 == 4;
            }
            if (!v39)
            {
              switch((v32 >> 3))
              {
                case 1u:
                  if (v38 != 2 || !PBReaderPlaceMark()) {
                    goto LABEL_167;
                  }
                  [a1 position];
                  [a1 length];
                  while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                  {
                    char v40 = 0;
                    unsigned int v41 = 0;
                    unint64_t v42 = 0;
                    while (1)
                    {
                      uint64_t v43 = *v2;
                      uint64_t v44 = *(void *)&a1[v43];
                      unint64_t v45 = v44 + 1;
                      if (v44 == -1 || v45 > *(void *)&a1[*v3]) {
                        break;
                      }
                      char v46 = *(unsigned char *)(*(void *)&a1[*v6] + v44);
                      *(void *)&a1[v43] = v45;
                      v42 |= (unint64_t)(v46 & 0x7F) << v40;
                      if ((v46 & 0x80) == 0) {
                        goto LABEL_78;
                      }
                      v40 += 7;
                      BOOL v14 = v41++ >= 9;
                      if (v14)
                      {
                        unint64_t v42 = 0;
                        int v47 = a1[*v4];
                        goto LABEL_80;
                      }
                    }
                    a1[*v4] = 1;
LABEL_78:
                    int v47 = a1[*v4];
                    if (a1[*v4]) {
                      unint64_t v42 = 0;
                    }
LABEL_80:
                    int v48 = v42 & 7;
                    if (v47) {
                      BOOL v49 = 1;
                    }
                    else {
                      BOOL v49 = v48 == 4;
                    }
                    if (!v49)
                    {
                      switch((v42 >> 3))
                      {
                        case 1u:
                          if (v48 != 2) {
                            goto LABEL_166;
                          }
                          goto LABEL_102;
                        case 2u:
                          if (v48 == 2)
                          {
                            if (PBReaderPlaceMark())
                            {
                              uint64_t v75 = [a1 position];
                              uint64_t v76 = [a1 length];
                              v74[0] = 0;
                              v74[1] = 0;
                              BOOL AllFrom = GEOHighlightReadAllFrom((uint64_t)v74, (uint64_t)a1);
                              PBReaderRecallMark();
                              if (AllFrom) {
                                goto LABEL_107;
                              }
                            }
                          }
                          goto LABEL_166;
                        case 3u:
                          if (v48 == 2) {
                            goto LABEL_102;
                          }
                          goto LABEL_166;
                        case 4u:
                          if (v48 != 2) {
                            goto LABEL_166;
                          }
                          uint64_t v75 = 0;
                          uint64_t v76 = 0;
                          if (!PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
                            goto LABEL_166;
                          }
                          goto LABEL_107;
                        case 5u:
                          if (v48 == 2) {
                            goto LABEL_102;
                          }
                          goto LABEL_166;
                        case 6u:
                          if (v48 == 2) {
                            goto LABEL_102;
                          }
                          goto LABEL_166;
                        case 7u:
                          if (v48 == 2) {
                            goto LABEL_102;
                          }
                          goto LABEL_166;
                        case 9u:
                          if (v48 != 2) {
                            goto LABEL_166;
                          }
                          uint64_t v75 = 0;
                          uint64_t v76 = 0;
                          if (!PBReaderPlaceMark() || !GEONamedFeatureIsValid(a1)) {
                            goto LABEL_166;
                          }
LABEL_107:
                          PBReaderRecallMark();
                          continue;
                        default:
LABEL_102:
                          if (PBReaderSkipValueWithTag()) {
                            continue;
                          }
LABEL_166:
                          PBReaderRecallMark();
                          break;
                      }
                      goto LABEL_167;
                    }
                    break;
                  }
                  int v61 = a1[*v4];
                  PBReaderRecallMark();
                  if (v61) {
                    goto LABEL_167;
                  }
                  PBReaderRecallMark();
                  continue;
                case 2u:
                  if (v38 == 2) {
                    goto LABEL_109;
                  }
                  goto LABEL_167;
                case 3u:
                  if ((v32 & 7) != 0) {
                    goto LABEL_167;
                  }
                  unsigned int v51 = 0;
                  while (1)
                  {
                    uint64_t v52 = *v2;
                    uint64_t v53 = *(void *)&a1[v52];
                    unint64_t v54 = v53 + 1;
                    if (v53 == -1 || v54 > *(void *)&a1[*v3]) {
                      goto LABEL_127;
                    }
                    int v55 = *(char *)(*(void *)&a1[*v6] + v53);
                    *(void *)&a1[v52] = v54;
                    if (v55 < 0)
                    {
                      BOOL v24 = v51++ > 8;
                      if (!v24) {
                        continue;
                      }
                    }
                    goto LABEL_48;
                  }
                case 4u:
                  if ((v32 & 7) != 0) {
                    goto LABEL_167;
                  }
                  unsigned int v56 = 0;
                  do
                  {
                    uint64_t v57 = *v2;
                    uint64_t v58 = *(void *)&a1[v57];
                    unint64_t v59 = v58 + 1;
                    if (v58 == -1 || v59 > *(void *)&a1[*v3])
                    {
LABEL_127:
                      a1[*v4] = 1;
                      goto LABEL_48;
                    }
                    int v60 = *(char *)(*(void *)&a1[*v6] + v58);
                    *(void *)&a1[v57] = v59;
                    if ((v60 & 0x80000000) == 0) {
                      break;
                    }
                    BOOL v24 = v56++ > 8;
                  }
                  while (!v24);
                  break;
                default:
LABEL_109:
                  if (PBReaderSkipValueWithTag()) {
                    continue;
                  }
LABEL_167:
                  PBReaderRecallMark();
                  goto LABEL_168;
              }
              continue;
            }
            break;
          }
          int v70 = a1[*v4];
          PBReaderRecallMark();
          if (v70)
          {
LABEL_168:
            PBReaderRecallMark();
            return 0;
          }
LABEL_154:
          PBReaderRecallMark();
LABEL_155:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_159;
          }
          break;
        case 9u:
          if (v17 != 2) {
            goto LABEL_168;
          }
LABEL_141:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_168;
          }
          goto LABEL_155;
        case 0xAu:
          if (v17 == 2)
          {
            uint64_t v75 = 0;
            uint64_t v76 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEONamedFeatureIsValid(a1)) {
                goto LABEL_154;
              }
            }
          }
          goto LABEL_168;
        default:
          switch((v9 >> 3))
          {
            case 'd':
              if ((v9 & 7) != 0) {
                goto LABEL_168;
              }
              unsigned int v25 = 0;
              while (1)
              {
                uint64_t v26 = *v2;
                uint64_t v27 = *(void *)&a1[v26];
                unint64_t v28 = v27 + 1;
                if (v27 == -1 || v28 > *(void *)&a1[*v3]) {
                  goto LABEL_151;
                }
                int v29 = *(char *)(*(void *)&a1[*v6] + v27);
                *(void *)&a1[v26] = v28;
                if (v29 < 0)
                {
                  BOOL v24 = v25++ > 8;
                  if (!v24) {
                    continue;
                  }
                }
                goto LABEL_155;
              }
            case 'e':
              if (v17 != 1) {
                goto LABEL_168;
              }
              uint64_t v62 = *v2;
              unint64_t v63 = *(void *)&a1[v62];
              if (v63 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_152;
              }
              unint64_t v64 = v63 + 8;
              if (v64 > *(void *)&a1[*v3]) {
                goto LABEL_152;
              }
              *(void *)&a1[v62] = v64;
              goto LABEL_155;
            case 'g':
              if (v17 == 2) {
                goto LABEL_141;
              }
              goto LABEL_168;
            case 'h':
              if ((v9 & 7) != 0) {
                goto LABEL_168;
              }
              unsigned int v65 = 0;
              break;
            default:
              goto LABEL_141;
          }
          while (1)
          {
            uint64_t v66 = *v2;
            uint64_t v67 = *(void *)&a1[v66];
            unint64_t v68 = v67 + 1;
            if (v67 == -1 || v68 > *(void *)&a1[*v3]) {
              break;
            }
            int v69 = *(char *)(*(void *)&a1[*v6] + v67);
            *(void *)&a1[v66] = v68;
            if (v69 < 0)
            {
              BOOL v24 = v65++ > 8;
              if (!v24) {
                continue;
              }
            }
            goto LABEL_155;
          }
LABEL_151:
          uint64_t v15 = *v4;
LABEL_152:
          a1[v15] = 1;
          goto LABEL_155;
      }
    }
  }
  int v5 = 0;
LABEL_159:
  if (a1[*v4]) {
    BOOL v71 = 1;
  }
  else {
    BOOL v71 = v5 == 0;
  }
  uint64_t v72 = !v71;
  PBReaderRecallMark();
  return v72;
}

void sub_189DDB718(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPlaceSearchResponseIsDirty(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  if ((*(_WORD *)(a1 + 104) & 0x7F0) != 0) {
    return 1;
  }
  if ((*(_WORD *)(a1 + 104) & 0x100) == 0) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v3 = *(id *)(a1 + 56);
  uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v3);
        }
        if (GEOSuggestionEntryListIsDirty(*(void *)(*((void *)&v7 + 1) + 8 * i)))
        {
          uint64_t v2 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOPlaceSearchResponseIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOPlaceSearchResponseIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 22);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEOPlaceSearchResponseClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  -[GEOPlaceSearchResponse _readPlaceResults](a1);
  unint64_t result = [*(id *)(a1 + 48) count];
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      long long v8 = [*(id *)(a1 + 48) objectAtIndexedSubscript:i];
      long long v9 = v8;
      if (a3 && GEOPlaceResultHasSensitiveFields(v8))
      {
        long long v10 = (void *)[v9 copy];
        uint64_t v11 = [v10 revgeoRequestTemplate];
        [v11 clearSensitiveFields:a2];

        [*(id *)(a1 + 48) replaceObjectAtIndex:i withObject:v10];
      }
      else
      {
        [v9 clearSensitiveFields:a2];
      }

      unint64_t result = [*(id *)(a1 + 48) count];
    }
  }
  return result;
}

uint64_t GEOPlaceSearchResponseHasSensitiveFields(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = objc_msgSend(a1, "placeResults", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        if (GEOPlaceResultHasSensitiveFields(*(void **)(*((void *)&v8 + 1) + 8 * v5)))
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:

  return v6;
}

void sub_189DDC480(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DDCC24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORatingReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 76);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 72)];
  long long v7 = v6;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 92)), (uint16x4_t)0xFFF9FFF8FFFAFFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 92) >> 4) & 1));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 2;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v75 = v18;
        char v76 = v19 | v18;
        if ((v19 | v8)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        char v77 = (v20 == 0) | v19;
        BOOL v78 = v19;
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        int v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v9;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (*(void *)(v3 + *v21) < *(void *)(v3 + *v7) && !*(unsigned char *)(v3 + *v22))
  {
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4) {
      break;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v78;
    if ((v77 & 1) == 0)
    {
      char v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_84;
        }
        *(_WORD *)(a1 + 92) |= 2u;
        uint64_t v40 = *v21;
        unint64_t v41 = *(void *)(v3 + v40);
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v42 = *(void *)(*(void *)(v3 + *v23) + v41);
          *(void *)(v3 + v40) = v41 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v42 = 0;
        }
        uint64_t v68 = 64;
        goto LABEL_107;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_84;
        }
        *(_WORD *)(a1 + 92) |= 1u;
        uint64_t v46 = *v21;
        unint64_t v47 = *(void *)(v3 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v42 = *(void *)(*(void *)(v3 + *v23) + v47);
          *(void *)(v3 + v46) = v47 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v42 = 0;
        }
        uint64_t v68 = 32;
LABEL_107:
        *(void *)(a1 + v68) = v42;
        goto LABEL_108;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_84;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        *(_WORD *)(a1 + 92) |= 4u;
        while (2)
        {
          uint64_t v51 = *v21;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v23) + v52);
            *(void *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              BOOL v31 = v49++ >= 9;
              if (v31)
              {
                LODWORD(v50) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v50) = 0;
        }
LABEL_89:
        uint64_t v66 = 84;
        goto LABEL_94;
      case 4:
        if (!v35) {
          goto LABEL_84;
        }
        if ((*(_WORD *)(a1 + 92) & 0x40) == 0)
        {
          uint64_t v55 = PBReaderReadString();
          uint64_t v56 = 40;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_128;
        }
        __int16 v67 = *(_WORD *)(a1 + 92) << 9;
        goto LABEL_101;
      case 5:
        if (!v35) {
          goto LABEL_84;
        }
        if ((*(_WORD *)(a1 + 92) & 0x20) == 0)
        {
          uint64_t v55 = PBReaderReadString();
          uint64_t v56 = 24;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_128;
        }
        __int16 v67 = *(_WORD *)(a1 + 92) << 10;
        goto LABEL_101;
      case 6:
        if (!v35 || (*(_WORD *)(a1 + 92) & 0x100) != 0) {
          goto LABEL_84;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_128;
        }
        uint64_t v57 = objc_alloc_init(GEOReview);
        if (GEOReviewReadAllFrom((uint64_t)v57, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          -[GEORating _addNoFlagsReview:](a1, v57);

LABEL_102:
          unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          long long v7 = (int *)MEMORY[0x1E4F940E0];
          goto LABEL_108;
        }

LABEL_128:
        int v73 = 0;
        int v74 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_111:
        if (v75) {
LABEL_112:
        }
          *(_WORD *)(a1 + v74[408]) |= 0x10u;
        if (v78 || (v73 & 1) == 0)
        {
          *(_WORD *)(a1 + v74[408]) |= 0x40u;
          *(_WORD *)(a1 + v74[408]) |= 0x20u;
          *(_WORD *)(a1 + v74[408]) |= 0x100u;
          *(_WORD *)(a1 + v74[408]) |= 0x80u;
        }
        else if (v20)
        {
          while (1)
          {
            int v69 = *v20++;
            __int16 v70 = 64;
            switch(v69)
            {
              case 0:
                goto LABEL_121;
              case 4:
                goto LABEL_120;
              case 5:
                __int16 v70 = 32;
                goto LABEL_120;
              case 6:
                __int16 v70 = 256;
                goto LABEL_120;
              case 8:
                __int16 v70 = 128;
LABEL_120:
                *(_WORD *)(a1 + v74[408]) |= v70;
                break;
              default:
                continue;
            }
          }
        }
LABEL_121:
        if (v73) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v78)
        {
          BOOL v71 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_84;
        }
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v50 = 0;
        *(_WORD *)(a1 + 92) |= 8u;
        while (2)
        {
          uint64_t v60 = *v21;
          uint64_t v61 = *(void *)(v3 + v60);
          unint64_t v62 = v61 + 1;
          if (v61 == -1 || v62 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(v3 + *v23) + v61);
            *(void *)(v3 + v60) = v62;
            v50 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              BOOL v31 = v59++ >= 9;
              if (v31)
              {
                LODWORD(v50) = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v50) = 0;
        }
LABEL_93:
        uint64_t v66 = 88;
LABEL_94:
        *(_DWORD *)(a1 + v66) = v50;
        goto LABEL_108;
      case 8:
        if (!v35) {
          goto LABEL_84;
        }
        if ((*(_WORD *)(a1 + 92) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_128;
          }
          __int16 v67 = *(_WORD *)(a1 + 92) << 8;
LABEL_101:
          v9 += v67 >> 15;
        }
        else
        {
          uint64_t v55 = PBReaderReadString();
          uint64_t v56 = 48;
LABEL_83:
          unint64_t v64 = *(void **)(a1 + v56);
          *(void *)(a1 + v56) = v55;

          --v9;
        }
        goto LABEL_102;
      default:
        if ((v75 & 1) == 0 || (*(_WORD *)(a1 + 92) & 0x10) != 0)
        {
LABEL_84:
          char v65 = PBReaderSkipValueWithTag();
          long long v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v65 & 1) == 0)
          {
            int v73 = 0;
LABEL_110:
            int v74 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_111;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v44 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v43;
          }
          int v45 = PBUnknownFieldAdd();
          unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          long long v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v45)
          {
            int v73 = 0;
            int v74 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_112;
          }
        }
LABEL_108:
        if (!(v76 & 1 | (v9 != 0))) {
          goto LABEL_109;
        }
        break;
    }
  }
LABEL_109:
  int v73 = 1;
  goto LABEL_110;
}

void sub_189DDDC80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DDE364(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DDE45C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEORatingCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 56);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        -[GEOReview readAll:](*(void *)(*((void *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEORatingReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 76))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORatingReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = [v8 position];
  *(_DWORD *)(a1 + 76) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEORatingReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEORatingReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORatingReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEORatingCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_189DDE7CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DDEAD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DDEE0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOReviewReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 76);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 72)];
  long long v7 = v6;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 88)), (uint16x4_t)0xFFFCFFF9FFFAFFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 88) >> 3) & 1));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 2;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v68 = v18;
        char v69 = v19 | v18;
        if ((v19 | v8)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        char v70 = (v20 == 0) | v19;
        BOOL v71 = v19;
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        int v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v9;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_99;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_99:
      int v66 = 1;
      goto LABEL_100;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v71;
    if ((v70 & 1) == 0)
    {
      char v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35) {
          goto LABEL_77;
        }
        if ((*(_WORD *)(a1 + 88) & 0x40) == 0)
        {
          uint64_t v40 = PBReaderReadString();
          uint64_t v41 = 56;
          goto LABEL_67;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_117;
        }
        __int16 v60 = *(_WORD *)(a1 + 88) << 9;
        goto LABEL_91;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_77;
        }
        *(_WORD *)(a1 + 88) |= 2u;
        uint64_t v45 = *v21;
        unint64_t v46 = *(void *)(v3 + v45);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v47 = *(void *)(*(void *)(v3 + *v23) + v46);
          *(void *)(v3 + v45) = v46 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v47 = 0;
        }
        uint64_t v61 = 48;
        goto LABEL_97;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_77;
        }
        *(_WORD *)(a1 + 88) |= 1u;
        uint64_t v48 = *v21;
        unint64_t v49 = *(void *)(v3 + v48);
        if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v47 = *(void *)(*(void *)(v3 + *v23) + v49);
          *(void *)(v3 + v48) = v49 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v47 = 0;
        }
        uint64_t v61 = 32;
LABEL_97:
        *(void *)(a1 + v61) = v47;
        goto LABEL_98;
      case 4:
        if (!v35) {
          goto LABEL_77;
        }
        if ((*(_WORD *)(a1 + 88) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_117;
          }
          __int16 v60 = *(_WORD *)(a1 + 88) << 10;
LABEL_91:
          v9 += v60 >> 15;
          goto LABEL_92;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_117;
        }
        uint64_t v50 = objc_alloc_init(GEOUser);
        if (GEOUserReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          uint64_t v51 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v50;
LABEL_68:

          --v9;
LABEL_92:
          unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          long long v7 = (int *)MEMORY[0x1E4F940E0];
LABEL_98:
          if (!(v69 & 1 | (v9 != 0))) {
            goto LABEL_99;
          }
          continue;
        }

LABEL_117:
        int v66 = 0;
        unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_100:
        __int16 v67 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        if (v68) {
LABEL_101:
        }
          *(_WORD *)(a1 + v67[730]) |= 8u;
        if (v71 || (v66 & 1) == 0)
        {
          *(_WORD *)(a1 + v67[730]) |= 0x40u;
          *(_WORD *)(a1 + v67[730]) |= 0x20u;
          *(_WORD *)(a1 + v67[730]) |= 0x80u;
          *(_WORD *)(a1 + v67[730]) |= 0x10u;
        }
        else if (v20)
        {
          while (1)
          {
            int v62 = *v20++;
            __int16 v63 = 64;
            switch(v62)
            {
              case 0:
                goto LABEL_110;
              case 1:
                goto LABEL_109;
              case 4:
                __int16 v63 = 32;
                goto LABEL_109;
              case 5:
                __int16 v63 = 128;
                goto LABEL_109;
              case 6:
                __int16 v63 = 16;
LABEL_109:
                *(_WORD *)(a1 + v67[730]) |= v63;
                break;
              default:
                continue;
            }
          }
        }
LABEL_110:
        if (v66) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v71)
        {
          unint64_t v64 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 5:
        if (!v35) {
          goto LABEL_77;
        }
        if ((*(_WORD *)(a1 + 88) & 0x80) == 0)
        {
          uint64_t v40 = PBReaderReadString();
          uint64_t v41 = 64;
          goto LABEL_67;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_117;
        }
        __int16 v60 = *(_WORD *)(a1 + 88) << 8;
        goto LABEL_91;
      case 6:
        if (!v35) {
          goto LABEL_77;
        }
        if ((*(_WORD *)(a1 + 88) & 0x10) == 0)
        {
          uint64_t v40 = PBReaderReadString();
          uint64_t v41 = 24;
LABEL_67:
          uint64_t v51 = *(void **)(a1 + v41);
          *(void *)(a1 + v41) = v40;
          goto LABEL_68;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_117;
        }
        __int16 v60 = *(_WORD *)(a1 + 88) << 11;
        goto LABEL_91;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_77;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(_WORD *)(a1 + 88) |= 4u;
        while (2)
        {
          uint64_t v55 = *v21;
          uint64_t v56 = *(void *)(v3 + v55);
          unint64_t v57 = v56 + 1;
          if (v56 == -1 || v57 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(v3 + *v23) + v56);
            *(void *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              BOOL v31 = v53++ >= 9;
              if (v31)
              {
                uint64_t v54 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          uint64_t v54 = 0;
        }
LABEL_82:
        *(unsigned char *)(a1 + 84) = v54 != 0;
        goto LABEL_98;
      default:
        if ((v68 & 1) == 0 || (*(_WORD *)(a1 + 88) & 8) != 0)
        {
LABEL_77:
          char v59 = PBReaderSkipValueWithTag();
          long long v7 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v59 & 1) == 0)
          {
            int v66 = 0;
            goto LABEL_100;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            id v43 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v42;
          }
          int v44 = PBUnknownFieldAdd();
          unint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          long long v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v44)
          {
            int v66 = 0;
            __int16 v67 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
            goto LABEL_101;
          }
        }
        goto LABEL_98;
    }
  }
}

void sub_189DE00D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE01D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOReviewReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 76))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOReviewReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = [v8 position];
  *(_DWORD *)(a1 + 76) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOReviewReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOReviewReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOReviewReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    -[GEOUser readAll:](*(void *)(a1 + 40), 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_189DE045C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE070C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE0940(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchAttributionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1)
      + (*(unsigned char *)(a1 + 56) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v58 = v15 | v8;
        char v59 = v16 | v15 | v8;
        if ((v16 | v9)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        char v60 = (v17 == 0) | v16;
        BOOL v61 = v16;
        char v18 = (int *)MEMORY[0x1E4F940E8];
        unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_71;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_71:
      int v56 = 1;
      goto LABEL_72;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v61;
    if ((v60 & 1) == 0)
    {
      uint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 3)
    {
      if (!v32 || (*(unsigned char *)(a1 + 56) & 2) != 0)
      {
LABEL_61:
        char v50 = PBReaderSkipValueWithTag();
        unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
        if ((v50 & 1) == 0)
        {
          int v56 = 0;
          goto LABEL_72;
        }
        goto LABEL_70;
      }
      BOOL v39 = PBReaderReadString();
      if (v39) {
        -[GEOSearchAttribution _addNoFlagsAttributionURLs:](a1, v39);
      }

      goto LABEL_69;
    }
    if (v31 == 2)
    {
      if ((v9 & 1) == 0) {
        goto LABEL_61;
      }
      char v40 = 0;
      unsigned int v41 = 0;
      uint64_t v42 = 0;
      while (1)
      {
        uint64_t v43 = *v18;
        uint64_t v44 = *(void *)(v3 + v43);
        unint64_t v45 = v44 + 1;
        if (v44 == -1 || v45 > *(void *)(v3 + *v6)) {
          break;
        }
        char v46 = *(unsigned char *)(*(void *)(v3 + *v20) + v44);
        *(void *)(v3 + v43) = v45;
        v42 |= (unint64_t)(v46 & 0x7F) << v40;
        if ((v46 & 0x80) == 0) {
          goto LABEL_64;
        }
        v40 += 7;
        BOOL v28 = v41++ >= 9;
        if (v28)
        {
          LODWORD(v42) = 0;
          goto LABEL_66;
        }
      }
      *(unsigned char *)(v3 + *v19) = 1;
LABEL_64:
      if (*(unsigned char *)(v3 + *v19)) {
        LODWORD(v42) = 0;
      }
LABEL_66:
      *(_DWORD *)(a1 + 52) = v42;
      goto LABEL_70;
    }
    if (v31 == 1) {
      break;
    }
    if (v58 & 1) == 0 || (*(unsigned char *)(a1 + 56)) {
      goto LABEL_61;
    }
    if (!*(void *)(a1 + 16))
    {
      id v47 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      uint64_t v48 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v47;
    }
    int v49 = PBUnknownFieldAdd();
    unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
    if (!v49)
    {
      int v56 = 0;
      unint64_t v57 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
      goto LABEL_73;
    }
LABEL_70:
    if (!(v59 & 1 | (v10 != 0))) {
      goto LABEL_71;
    }
  }
  if (!v32) {
    goto LABEL_61;
  }
  if ((*(unsigned char *)(a1 + 56) & 4) == 0)
  {
    uint64_t v37 = PBReaderReadString();
    int v38 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v37;

    --v10;
LABEL_69:
    unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_70;
  }
  if (PBReaderSkipValueWithTag())
  {
    v10 += *(unsigned __int8 *)(a1 + 56) << 29 >> 31;
    goto LABEL_69;
  }
  int v56 = 0;
  unsigned __int8 v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_72:
  unint64_t v57 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
  if ((v58 & 1) == 0) {
    goto LABEL_74;
  }
LABEL_73:
  *(unsigned char *)(a1 + v57[743]) |= 1u;
LABEL_74:
  if (v61 || (v56 & 1) == 0)
  {
    *(unsigned char *)(a1 + v57[743]) |= 4u;
    *(unsigned char *)(a1 + v57[743]) |= 2u;
    goto LABEL_84;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        int v52 = *v17++;
        int v51 = v52;
        if (v52 == 1) {
          break;
        }
        if (v51 == 3)
        {
          char v53 = 2;
          goto LABEL_83;
        }
        if (!v51) {
          goto LABEL_84;
        }
      }
      char v53 = 4;
LABEL_83:
      *(unsigned char *)(a1 + v57[743]) |= v53;
      continue;
    }
  }
LABEL_84:
  if (v56) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v61)
  {
    uint64_t v54 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189DE1440(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE1568(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE1EC4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchAttributionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSearchAttributionReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOSearchAttributionReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOSearchAttributionReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOSearchAttributionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189DE2054(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchAttributionReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOSearchAttributionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DE20B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE2310(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchAttributionIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = (*(unsigned char *)(a1 + 56) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189DE26F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE2A3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchSubstringReadAllFrom(void *a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    long long v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *v4;
              uint64_t v22 = *(void *)&v3[v21];
              unint64_t v23 = v22 + 1;
              if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
                break;
              }
              char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
              *(void *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0) {
                goto LABEL_49;
              }
              v18 += 7;
              BOOL v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_51;
              }
            }
            v3[*v6] = 1;
LABEL_49:
            if (v3[*v6]) {
              LODWORD(v20) = 0;
            }
LABEL_51:
            uint64_t v40 = 32;
            goto LABEL_60;
          case 2u:
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v20 = 0;
            while (2)
            {
              uint64_t v29 = *v4;
              uint64_t v30 = *(void *)&v3[v29];
              unint64_t v31 = v30 + 1;
              if (v30 == -1 || v31 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
                *(void *)&v3[v29] = v31;
                v20 |= (unint64_t)(v32 & 0x7F) << v27;
                if (v32 < 0)
                {
                  v27 += 7;
                  BOOL v15 = v28++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_55;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v20) = 0;
            }
LABEL_55:
            uint64_t v40 = 24;
            goto LABEL_60;
          case 3u:
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v20 = 0;
            break;
          case 4u:
            BOOL v39 = PBReaderReadString();
            if (v39) {
              [a1 addSpanData:v39];
            }

            continue;
          default:
            if (!a1[1])
            {
              id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              unint64_t v26 = (void *)a1[1];
              a1[1] = v25;
            }
            if (!PBUnknownFieldAdd()) {
              goto LABEL_63;
            }
            continue;
        }
        while (1)
        {
          uint64_t v35 = *v4;
          uint64_t v36 = *(void *)&v3[v35];
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)&v3[*v5]) {
            break;
          }
          char v38 = *(unsigned char *)(*(void *)&v3[*v7] + v36);
          *(void *)&v3[v35] = v37;
          v20 |= (unint64_t)(v38 & 0x7F) << v33;
          if ((v38 & 0x80) == 0) {
            goto LABEL_57;
          }
          v33 += 7;
          BOOL v15 = v34++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_59;
          }
        }
        v3[*v6] = 1;
LABEL_57:
        if (v3[*v6]) {
          LODWORD(v20) = 0;
        }
LABEL_59:
        uint64_t v40 = 28;
LABEL_60:
        *(_DWORD *)((char *)a1 + v40) = v20;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v41 = v3[*v6] == 0;
  }
  else
  {
LABEL_63:
    BOOL v41 = 0;
  }
  objc_sync_exit(v3);

  return v41;
}

void sub_189DE38AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchSubstringReadFrom(void *a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOSearchSubstringReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DE3920(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSourceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 > 1;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v48 = v15 | v8;
        char v49 = v16 | v15 | v8;
        if ((v16 | v9)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        char v18 = (int *)MEMORY[0x1E4F940E8];
        char v50 = (v17 == 0) | v16;
        BOOL v51 = v16;
        unsigned int v19 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_65;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_65:
      int v47 = 1;
      goto LABEL_66;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v51;
    if ((v50 & 1) == 0)
    {
      char v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 3)
    {
      if (!v32) {
        goto LABEL_55;
      }
      if ((*(unsigned char *)(a1 + 60) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_81;
        }
        char v42 = 16 * *(unsigned char *)(a1 + 60);
        goto LABEL_63;
      }
      uint64_t v37 = PBReaderReadString();
      uint64_t v38 = 40;
      goto LABEL_48;
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (!v32) {
        goto LABEL_55;
      }
      if ((*(unsigned char *)(a1 + 60) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_81;
        }
        char v42 = 32 * *(unsigned char *)(a1 + 60);
        goto LABEL_63;
      }
      uint64_t v37 = PBReaderReadString();
      uint64_t v38 = 32;
      goto LABEL_48;
    }
    if (v48 & 1) == 0 || (*(unsigned char *)(a1 + 60))
    {
LABEL_55:
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_81;
      }
      goto LABEL_64;
    }
    if (!*(void *)(a1 + 16))
    {
      id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      BOOL v41 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v40;
    }
    if (!PBUnknownFieldAdd())
    {
      int v47 = 0;
      unsigned int v19 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_67;
    }
LABEL_64:
    unsigned int v19 = (int *)MEMORY[0x1E4F940C8];
    if (!(v49 & 1 | (v10 != 0))) {
      goto LABEL_65;
    }
  }
  if (!v32) {
    goto LABEL_55;
  }
  if ((*(unsigned char *)(a1 + 60) & 2) == 0)
  {
    uint64_t v37 = PBReaderReadString();
    uint64_t v38 = 24;
LABEL_48:
    BOOL v39 = *(void **)(a1 + v38);
    *(void *)(a1 + v38) = v37;

    --v10;
    goto LABEL_64;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v42 = *(unsigned char *)(a1 + 60) << 6;
LABEL_63:
    v10 += v42 >> 7;
    goto LABEL_64;
  }
LABEL_81:
  int v47 = 0;
  unsigned int v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_66:
  if ((v48 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_67:
  *(unsigned char *)(a1 + 60) |= 1u;
LABEL_68:
  if (v51 || (v47 & 1) == 0)
  {
    *(unsigned char *)(a1 + 60) |= 4u;
    *(unsigned char *)(a1 + 60) |= 2u;
    *(unsigned char *)(a1 + 60) |= 8u;
  }
  else if (v17)
  {
    while (1)
    {
      int v43 = *v17++;
      char v44 = 4;
      switch(v43)
      {
        case 0:
          goto LABEL_75;
        case 1:
          goto LABEL_74;
        case 2:
          char v44 = 2;
          goto LABEL_74;
        case 3:
          char v44 = 8;
LABEL_74:
          *(unsigned char *)(a1 + 60) |= v44;
          break;
        default:
          continue;
      }
    }
  }
LABEL_75:
  if (v47) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v51)
  {
    unint64_t v45 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189DE46DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE47A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE4874(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE4EEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSourceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSourceReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOSourceReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOSourceReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOSourceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189DE507C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSourceReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOSourceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DE50E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE5294(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSourceIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  BOOL v2 = (*(unsigned char *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_189DE556C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE580C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStyleAttributeReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOStyleAttributeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DE5E74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStyleAttributeIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_39;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        goto LABEL_39;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_41;
        }
        unsigned int v16 = 0;
        while (1)
        {
          uint64_t v17 = *v2;
          uint64_t v18 = *(void *)&a1[v17];
          unint64_t v19 = v18 + 1;
          if (v18 == -1 || v19 > *(void *)&a1[*v3]) {
            break;
          }
          int v20 = *(char *)(*(void *)&a1[*v5] + v18);
          *(void *)&a1[v17] = v19;
          if (v20 < 0)
          {
            BOOL v21 = v16++ > 8;
            if (!v21) {
              continue;
            }
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        BOOL v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_39;
      }
    }
    if ((v8 & 7) != 0) {
      goto LABEL_41;
    }
    unsigned int v22 = 0;
    while (1)
    {
      uint64_t v23 = *v2;
      uint64_t v24 = *(void *)&a1[v23];
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)&a1[*v3]) {
        goto LABEL_36;
      }
      int v26 = *(char *)(*(void *)&a1[*v5] + v24);
      *(void *)&a1[v23] = v25;
      if (v26 < 0)
      {
        BOOL v21 = v22++ > 8;
        if (!v21) {
          continue;
        }
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  BOOL v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOStyleAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOStyleAttributesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DE6B68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStyleAttributesIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_38;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8) {
            continue;
          }
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributeIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

void sub_189DE7458(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOSuggestionEntryReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 112));
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 108);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 104)];
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = *(unsigned __int16 *)(a1 + 116);
  unsigned int v12 = ((v11 >> 6) & 1)
      + (v11 & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v11), (uint16x4_t)0xFFFBFFFCFFFDFFFFLL), (int8x8_t)0x1000100010001))+ ((v11 >> 8) & 1)+ ((v11 >> 7) & 1)+ ((v11 >> 2) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v9;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 5;
        char v17 = v16 & ~(_BYTE)v10 | v8;
        unsigned __int8 v18 = v16 | v10;
        char v54 = v17;
        char v55 = v18 | v17;
        if ((v18 | v7)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v56 = (v19 == 0) | v18;
        BOOL v57 = v18;
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        int v21 = (int *)MEMORY[0x1E4F940C8];
        unsigned int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v8;
LABEL_8:
        uint64_t v14 = v9;
        uint64_t v15 = v10;
LABEL_10:
        ++v6;
        uint64_t v8 = v13;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    BOOL v23 = (int *)MEMORY[0x1E4F940E0];
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_94;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v20;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v23)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v22) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      if (v25++ >= 9)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_94:
      int v53 = 1;
      goto LABEL_95;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v57;
    if ((v56 & 1) == 0)
    {
      BOOL v36 = v19;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35 || (*(_WORD *)(a1 + 116) & 8) != 0) {
          goto LABEL_79;
        }
        PBReaderReadString();
        id v40 = (GEOLatLng *)objc_claimAutoreleasedReturnValue();
        if (v40) {
          -[GEOSuggestionEntry _addNoFlagsDisplayLine:](a1, v40);
        }
        goto LABEL_78;
      case 2:
        if (!v35 || (*(_WORD *)(a1 + 116) & 2) != 0) {
          goto LABEL_79;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_116;
        }
        -[GEOSuggestionEntry _reserveTextHighlights:](a1, 1uLL);
        if (!GEOHighlightReadAllFrom(*(void *)(a1 + 24) + 16 * *(void *)(a1 + 32), v3)) {
          goto LABEL_116;
        }
        PBReaderRecallMark();
        ++*(void *)(a1 + 32);
        goto LABEL_92;
      case 3:
        if (!v35) {
          goto LABEL_79;
        }
        if ((*(_WORD *)(a1 + 116) & 0x10) == 0)
        {
          uint64_t v41 = PBReaderReadString();
          uint64_t v42 = 64;
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_116;
        }
        __int16 v48 = *(_WORD *)(a1 + 116) << 11;
        goto LABEL_91;
      case 4:
        if (!v35) {
          goto LABEL_79;
        }
        if ((*(_WORD *)(a1 + 116) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_116;
          }
          __int16 v48 = *(_WORD *)(a1 + 116) << 10;
LABEL_91:
          v6 += v48 >> 15;
          goto LABEL_92;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_116;
        }
        id v40 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          int v43 = *(void **)(a1 + 72);
          *(void *)(a1 + 72) = v40;
LABEL_66:

          --v6;
LABEL_92:
          int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_93:
          if (!(v55 & 1 | (v6 != 0))) {
            goto LABEL_94;
          }
          continue;
        }
LABEL_115:

LABEL_116:
        int v53 = 0;
        int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_95:
        if (v54) {
LABEL_96:
        }
          *(_WORD *)(a1 + 116) |= 1u;
        if (v57 || (v53 & 1) == 0)
        {
          *(_WORD *)(a1 + 116) |= 8u;
          *(_WORD *)(a1 + 116) |= 2u;
          *(_WORD *)(a1 + 116) |= 0x10u;
          *(_WORD *)(a1 + 116) |= 0x20u;
          *(_WORD *)(a1 + 116) |= 0x100u;
          *(_WORD *)(a1 + 116) |= 0x80u;
          *(_WORD *)(a1 + 116) |= 4u;
          *(_WORD *)(a1 + 116) |= 0x40u;
        }
        else if (v19)
        {
          while (1)
          {
            int v49 = *v19++;
            __int16 v50 = 8;
            switch(v49)
            {
              case 0:
                goto LABEL_109;
              case 1:
                goto LABEL_108;
              case 2:
                __int16 v50 = 2;
                goto LABEL_108;
              case 3:
                __int16 v50 = 16;
                goto LABEL_108;
              case 4:
                __int16 v50 = 32;
                goto LABEL_108;
              case 5:
                __int16 v50 = 256;
                goto LABEL_108;
              case 6:
                __int16 v50 = 128;
                goto LABEL_108;
              case 7:
                __int16 v50 = 4;
                goto LABEL_108;
              case 9:
                __int16 v50 = 64;
LABEL_108:
                *(_WORD *)(a1 + 116) |= v50;
                break;
              default:
                continue;
            }
          }
        }
LABEL_109:
        if (v53) {
          uint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          uint64_t v3 = 0;
        }
        if (v57)
        {
          BOOL v51 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 5:
        if (!v35) {
          goto LABEL_79;
        }
        if ((*(_WORD *)(a1 + 116) & 0x100) == 0)
        {
          uint64_t v41 = PBReaderReadData();
          uint64_t v42 = 96;
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_116;
        }
        __int16 v48 = *(_WORD *)(a1 + 116) << 7;
        goto LABEL_91;
      case 6:
        if (!v35) {
          goto LABEL_79;
        }
        if ((*(_WORD *)(a1 + 116) & 0x80) == 0)
        {
          uint64_t v41 = PBReaderReadString();
          uint64_t v42 = 88;
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_116;
        }
        __int16 v48 = *(_WORD *)(a1 + 116) << 8;
        goto LABEL_91;
      case 7:
        if (!v35) {
          goto LABEL_79;
        }
        if ((*(_WORD *)(a1 + 116) & 4) == 0)
        {
          uint64_t v41 = PBReaderReadString();
          uint64_t v42 = 48;
LABEL_65:
          int v43 = *(void **)(a1 + v42);
          *(void *)(a1 + v42) = v41;
          goto LABEL_66;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_116;
        }
        __int16 v48 = *(_WORD *)(a1 + 116) << 13;
        goto LABEL_91;
      case 9:
        if (!v35 || (*(_WORD *)(a1 + 116) & 0x40) != 0) {
          goto LABEL_79;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_116;
        }
        id v40 = objc_alloc_init(GEONamedFeature);
        if (!GEONamedFeatureReadAllFrom(v40, (void *)v3)) {
          goto LABEL_115;
        }
        PBReaderRecallMark();
        -[GEOSuggestionEntry _addNoFlagsNamedFeature:](a1, v40);
LABEL_78:

        goto LABEL_92;
      default:
        if (v54 & 1) == 0 || (*(_WORD *)(a1 + 116))
        {
LABEL_79:
          char v47 = PBReaderSkipValueWithTag();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v47 & 1) == 0)
          {
            int v53 = 0;
            goto LABEL_95;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v46)
          {
            int v53 = 0;
            goto LABEL_96;
          }
        }
        goto LABEL_93;
    }
  }
}

void sub_189DE7FB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE80C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE8914(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE8A10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOSuggestionEntryCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 72) readAll:1];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(a1 + 80);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v6++), "readAll:", 1, (void)v7);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

uint64_t GEOSuggestionEntryReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 108))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSuggestionEntryReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 104) = [v8 position];
  *(_DWORD *)(a1 + 108) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOSuggestionEntryReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOSuggestionEntryReadAllFrom_initialTag;
  }
  uint64_t Specified = GEOSuggestionEntryReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOSuggestionEntryCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  return Specified;
}

void sub_189DE8D98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE9194(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE9548(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DE99E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSuggestionEntryListReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        uint64_t v13 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v8;
        unsigned __int8 v18 = v16 | v11;
        char v67 = v17;
        char v68 = v9;
        char v69 = v18 | v17;
        if ((v18 | v9)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        char v70 = (v19 == 0) | v18;
        BOOL v71 = v18;
        int v21 = (int *)MEMORY[0x1E4F940C8];
        unsigned int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
LABEL_10:
        ++v10;
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_83;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_83:
      int v65 = 1;
      goto LABEL_84;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v71;
    if ((v70 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34 || (*(unsigned char *)(a1 + 60) & 0x10) != 0) {
          goto LABEL_69;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_104;
        }
        BOOL v39 = objc_alloc_init(GEOSuggestionEntry);
        if (GEOSuggestionEntryReadAllFrom((uint64_t)v39, (void *)v3, v7 & 1))
        {
          PBReaderRecallMark();
          -[GEOSuggestionEntryList _addNoFlagsSuggestionEntries:](a1, v39);

          goto LABEL_81;
        }

        goto LABEL_104;
      case 2:
        if (!v34) {
          goto LABEL_69;
        }
        if ((*(unsigned char *)(a1 + 60) & 8) == 0)
        {
          uint64_t v43 = PBReaderReadString();
          id v44 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v43;

          --v10;
LABEL_81:
          int v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_82;
        }
        if (PBReaderSkipValueWithTag())
        {
          v10 += *(unsigned __int8 *)(a1 + 60) << 28 >> 31;
          goto LABEL_81;
        }
LABEL_104:
        int v65 = 0;
        int v66 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_85:
        if (v67) {
LABEL_86:
        }
          *(unsigned char *)(a1 + v66[412]) |= 4u;
        if (v71 || (v65 & 1) == 0)
        {
          *(unsigned char *)(a1 + v66[412]) |= 0x10u;
          *(unsigned char *)(a1 + v66[412]) |= 8u;
          goto LABEL_97;
        }
        if (v19)
        {
          while (2)
          {
            while (1)
            {
              int v61 = *v19++;
              int v60 = v61;
              if (v61 == 1) {
                break;
              }
              if (v60 == 2)
              {
                char v62 = 8;
                goto LABEL_96;
              }
              if (!v60) {
                goto LABEL_97;
              }
            }
            char v62 = 16;
LABEL_96:
            *(unsigned char *)(a1 + v66[412]) |= v62;
            continue;
          }
        }
LABEL_97:
        if (v65) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v71)
        {
          __int16 v63 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 3:
        if ((v68 & 1) == 0) {
          goto LABEL_69;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v48 = *v20;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v22) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v30 = v46++ >= 9;
              if (v30)
              {
                uint64_t v47 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v47 = 0;
        }
LABEL_74:
        *(unsigned char *)(a1 + 56) = v47 != 0;
        goto LABEL_82;
      case 4:
        if ((v68 & 1) == 0) {
          goto LABEL_69;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(unsigned char *)(a1 + 60) |= 1u;
        while (2)
        {
          uint64_t v55 = *v20;
          uint64_t v56 = *(void *)(v3 + v55);
          unint64_t v57 = v56 + 1;
          if (v56 == -1 || v57 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(v3 + *v22) + v56);
            *(void *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              BOOL v30 = v53++ >= 9;
              if (v30)
              {
                LODWORD(v54) = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v54) = 0;
        }
LABEL_78:
        *(_DWORD *)(a1 + 52) = v54;
        goto LABEL_82;
      default:
        if ((v67 & 1) == 0 || (*(unsigned char *)(a1 + 60) & 4) != 0)
        {
LABEL_69:
          char v59 = PBReaderSkipValueWithTag();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v59 & 1) == 0)
          {
            int v65 = 0;
LABEL_84:
            int v66 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_85;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v41 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v40;
          }
          int v42 = PBUnknownFieldAdd();
          int v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v42)
          {
            int v65 = 0;
            int v66 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_86;
          }
        }
LABEL_82:
        if (!(v69 & 1 | (v10 != 0))) {
          goto LABEL_83;
        }
        continue;
    }
  }
}

void sub_189DEA688(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DEA77C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOSuggestionEntryListCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        -[GEOSuggestionEntry readAll:](*(void *)(*((void *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEOSuggestionEntryListReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSuggestionEntryListReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOSuggestionEntryListReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOSuggestionEntryListReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOSuggestionEntryListReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOSuggestionEntryListCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189DEAAE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DEAD6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSuggestionEntryListIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = (*(unsigned char *)(a1 + 60) & 0x38) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189DEB08C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSuggestionsOptionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 64) >> 6) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 64) >> 4) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 | v7;
        char v81 = v14 & ~(_BYTE)v7 | v8;
        char v83 = v14 | v7 | v81;
        if (((v14 | v7) | v9)) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = a3;
        }
        char v84 = (v16 == 0) | v15;
        char v17 = (int *)MEMORY[0x1E4F940E8];
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        unint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        char v82 = v14 | v7;
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_108;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v17;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_108:
      int v80 = 1;
      goto LABEL_109;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v15;
    if ((v84 & 1) == 0)
    {
      unint64_t v33 = v16;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v9 & 1) == 0) {
          goto LABEL_82;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + v19[798]) |= 2u;
        while (1)
        {
          uint64_t v40 = *v17;
          uint64_t v41 = *(void *)(v3 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(v3 + *v6)) {
            break;
          }
          char v43 = *(unsigned char *)(*(void *)(v3 + *v20) + v41);
          *(void *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0) {
            goto LABEL_85;
          }
          v37 += 7;
          BOOL v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_87;
          }
        }
        *(unsigned char *)(v3 + *v18) = 1;
LABEL_85:
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v39) = 0;
        }
LABEL_87:
        uint64_t v71 = 56;
        goto LABEL_92;
      case 2:
        if ((v9 & 1) == 0) {
          goto LABEL_82;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + v19[798]) |= 1u;
        while (2)
        {
          uint64_t v46 = *v17;
          uint64_t v47 = *(void *)(v3 + v46);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(v3 + *v20) + v47);
            *(void *)(v3 + v46) = v48;
            v39 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              BOOL v28 = v45++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v39) = 0;
        }
LABEL_91:
        uint64_t v71 = 52;
LABEL_92:
        *(_DWORD *)(a1 + v71) = v39;
        goto LABEL_107;
      case 3:
        if (!v32) {
          goto LABEL_82;
        }
        if ((*(unsigned char *)(a1 + v19[798]) & 0x40) == 0)
        {
          uint64_t v50 = PBReaderReadData();
          uint64_t v51 = 32;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_127;
        }
        uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        char v74 = 2 * *(unsigned char *)(a1 + 64);
        goto LABEL_106;
      case 4:
        if (!v32) {
          goto LABEL_82;
        }
        if ((*(unsigned char *)(a1 + v19[798]) & 0x20) == 0)
        {
          uint64_t v50 = PBReaderReadData();
          uint64_t v51 = 24;
LABEL_59:
          char v52 = *(void **)(a1 + v51);
          *(void *)(a1 + v51) = v50;

          --v10;
          char v15 = v82;
          unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
LABEL_107:
          if (!(v83 & 1 | (v10 != 0))) {
            goto LABEL_108;
          }
          continue;
        }
        if (PBReaderSkipValueWithTag())
        {
          uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
          char v74 = 4 * *(unsigned char *)(a1 + 64);
LABEL_106:
          v10 += v74 >> 7;
          char v15 = v82;
          unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_107;
        }
LABEL_127:
        int v80 = 0;
        char v15 = v82;
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
LABEL_109:
        if (v81) {
LABEL_110:
        }
          *(unsigned char *)(a1 + v19[798]) |= 0x10u;
        if (v15 & 1 | ((v80 & 1) == 0))
        {
          *(unsigned char *)(a1 + v19[798]) |= 0x40u;
          *(unsigned char *)(a1 + v19[798]) |= 0x20u;
          goto LABEL_121;
        }
        if (v16)
        {
          while (1)
          {
            int v77 = *v16++;
            int v76 = v77;
            if (v77 == 3) {
              break;
            }
            if (v76 == 4)
            {
              char v75 = 32;
LABEL_117:
              *(unsigned char *)(a1 + v19[798]) |= v75;
            }
            else if (!v76)
            {
              goto LABEL_121;
            }
          }
          char v75 = 64;
          goto LABEL_117;
        }
LABEL_121:
        if (v80)
        {
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if ((v15 & 1) == 0) {
            return v3;
          }
LABEL_125:
          BOOL v78 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v15) {
            goto LABEL_125;
          }
        }
        return v3;
      case 5:
        if ((v9 & 1) == 0) {
          goto LABEL_82;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v55 = 0;
        *(unsigned char *)(a1 + v19[798]) |= 8u;
        while (2)
        {
          uint64_t v56 = *v17;
          uint64_t v57 = *(void *)(v3 + v56);
          unint64_t v58 = v57 + 1;
          if (v57 == -1 || v58 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(v3 + *v20) + v57);
            *(void *)(v3 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              BOOL v28 = v54++ >= 9;
              if (v28)
              {
                uint64_t v55 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          uint64_t v55 = 0;
        }
LABEL_96:
        BOOL v72 = v55 != 0;
        uint64_t v73 = 61;
        goto LABEL_101;
      case 7:
        if ((v9 & 1) == 0) {
          goto LABEL_82;
        }
        char v63 = 0;
        unsigned int v64 = 0;
        uint64_t v65 = 0;
        *(unsigned char *)(a1 + v19[798]) |= 4u;
        while (2)
        {
          uint64_t v66 = *v17;
          uint64_t v67 = *(void *)(v3 + v66);
          unint64_t v68 = v67 + 1;
          if (v67 == -1 || v68 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v69 = *(unsigned char *)(*(void *)(v3 + *v20) + v67);
            *(void *)(v3 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              BOOL v28 = v64++ >= 9;
              if (v28)
              {
                uint64_t v65 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          uint64_t v65 = 0;
        }
LABEL_100:
        BOOL v72 = v65 != 0;
        uint64_t v73 = 60;
LABEL_101:
        *(unsigned char *)(a1 + v73) = v72;
        goto LABEL_107;
      default:
        if ((v81 & 1) == 0 || (*(unsigned char *)(a1 + v19[798]) & 0x10) != 0)
        {
LABEL_82:
          char v70 = PBReaderSkipValueWithTag();
          uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
          unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
          char v15 = v82;
          if ((v70 & 1) == 0)
          {
            int v80 = 0;
            goto LABEL_109;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v60 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v61 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v60;
          }
          int v62 = PBUnknownFieldAdd();
          char v15 = v82;
          unsigned __int8 v18 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
          if (!v62)
          {
            int v80 = 0;
            goto LABEL_110;
          }
        }
        goto LABEL_107;
    }
  }
}

void sub_189DEC1B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DEC294(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSuggestionsOptionsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSuggestionsOptionsReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOSuggestionsOptionsReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOSuggestionsOptionsReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOSuggestionsOptionsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189DEC500(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DEC734(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSuggestionsOptionsIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = *(unsigned __int8 *)(a1 + 64) > 0x1Fu;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189DEC9C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTimeRangeReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    long long v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_49;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          goto LABEL_49;
        }
        if ((v10 >> 3) == 2) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5])
            {
              unint64_t v26 = &OBJC_IVAR___GEOTimeRange__from;
              goto LABEL_41;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v18 += 7;
            BOOL v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              unint64_t v26 = &OBJC_IVAR___GEOTimeRange__from;
              goto LABEL_44;
            }
          }
          unint64_t v26 = &OBJC_IVAR___GEOTimeRange__from;
LABEL_42:
          if (v3[*v6]) {
            LODWORD(v20) = 0;
          }
LABEL_44:
          *(_DWORD *)(a1 + *v26) = v20;
          goto LABEL_45;
        }
        if (!*(void *)(a1 + 8))
        {
          id v33 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          int v34 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v33;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_50;
        }
LABEL_45:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_49;
        }
      }
      char v27 = 0;
      unsigned int v28 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 24) |= 2u;
      while (1)
      {
        uint64_t v29 = *v4;
        uint64_t v30 = *(void *)&v3[v29];
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
        *(void *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          unint64_t v26 = &OBJC_IVAR___GEOTimeRange__to;
          goto LABEL_42;
        }
        v27 += 7;
        BOOL v25 = v28++ > 8;
        if (v25)
        {
          LODWORD(v20) = 0;
          unint64_t v26 = &OBJC_IVAR___GEOTimeRange__to;
          goto LABEL_44;
        }
      }
      unint64_t v26 = &OBJC_IVAR___GEOTimeRange__to;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    BOOL v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    BOOL v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189DED350(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOUUIDReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    long long v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_49;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          goto LABEL_49;
        }
        if ((v10 >> 3) == 2) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5])
            {
              unint64_t v26 = &OBJC_IVAR___GEOUUID__high;
              goto LABEL_41;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v18 += 7;
            BOOL v25 = v19++ > 8;
            if (v25)
            {
              uint64_t v20 = 0;
              unint64_t v26 = &OBJC_IVAR___GEOUUID__high;
              goto LABEL_44;
            }
          }
          unint64_t v26 = &OBJC_IVAR___GEOUUID__high;
LABEL_42:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_44:
          *(void *)(a1 + *v26) = v20;
          goto LABEL_45;
        }
        if (!*(void *)(a1 + 8))
        {
          id v33 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          int v34 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v33;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_50;
        }
LABEL_45:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_49;
        }
      }
      char v27 = 0;
      unsigned int v28 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 32) |= 2u;
      while (1)
      {
        uint64_t v29 = *v4;
        uint64_t v30 = *(void *)&v3[v29];
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
        *(void *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          unint64_t v26 = &OBJC_IVAR___GEOUUID__low;
          goto LABEL_42;
        }
        v27 += 7;
        BOOL v25 = v28++ > 8;
        if (v25)
        {
          uint64_t v20 = 0;
          unint64_t v26 = &OBJC_IVAR___GEOUUID__low;
          goto LABEL_44;
        }
      }
      unint64_t v26 = &OBJC_IVAR___GEOUUID__low;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    BOOL v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    BOOL v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189DEDD68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOUserReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        uint64_t v13 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v8;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v9)) {
          unsigned int v19 = 0;
        }
        else {
          unsigned int v19 = a3;
        }
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
LABEL_10:
        ++v10;
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_64;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_64:
      int v51 = 1;
      goto LABEL_65;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_55;
      }
      if ((*(unsigned char *)(a1 + 52) & 4) == 0)
      {
        uint64_t v39 = PBReaderReadString();
        uint64_t v40 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v39;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_83;
      }
      char v46 = 32 * *(unsigned char *)(a1 + 52);
LABEL_61:
      v10 += v46 >> 7;
LABEL_62:
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_63;
    }
    if (v53 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_55:
      char v45 = PBReaderSkipValueWithTag();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v45 & 1) == 0)
      {
        int v51 = 0;
        goto LABEL_65;
      }
      goto LABEL_63;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      char v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v44 = PBUnknownFieldAdd();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v44)
    {
      int v51 = 0;
      char v52 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
      goto LABEL_66;
    }
LABEL_63:
    if (!(v54 & 1 | (v10 != 0))) {
      goto LABEL_64;
    }
  }
  if (!v34) {
    goto LABEL_55;
  }
  if ((*(unsigned char *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_83;
    }
    char v46 = *(unsigned char *)(a1 + 52) << 6;
    goto LABEL_61;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_83;
  }
  uint64_t v41 = objc_alloc_init(GEOPhoto);
  if (GEOPhotoReadAllFrom((uint64_t)v41, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v41;
LABEL_48:

    --v10;
    goto LABEL_62;
  }

LABEL_83:
  int v51 = 0;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_65:
  char v52 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
  if ((v53 & 1) == 0) {
    goto LABEL_67;
  }
LABEL_66:
  *(unsigned char *)(a1 + v52[811]) |= 1u;
LABEL_67:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[811]) |= 4u;
    *(unsigned char *)(a1 + v52[811]) |= 2u;
    goto LABEL_76;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        int v48 = *v19++;
        int v47 = v48;
        if (v48 == 1) {
          break;
        }
        if (v47 == 2) {
          goto LABEL_75;
        }
        if (!v47) {
          goto LABEL_76;
        }
      }
      LOBYTE(v47) = 4;
LABEL_75:
      *(unsigned char *)(a1 + v52[811]) |= v47;
      continue;
    }
  }
LABEL_76:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    char v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189DEE9C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DEEABC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOUserReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOUserReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOUserReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOUserReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOUserReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 24) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189DEED40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DEEED0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOUserIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(unsigned char *)(a1 + 52) & 0xC) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 52) & 2) == 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);

  return GEOPhotoIsDirty(v3);
}

void sub_189DEF0BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWalkingSupportedFeaturesReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    long long v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_32;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_34:
          *(unsigned char *)(a1 + 16) = v20 != 0;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v25 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v26 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v25;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_37;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189DEF8F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWalkingSupportedFeaturesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOWalkingSupportedFeaturesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DEF95C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DEFDEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  long long v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v8)) {
          unsigned int v19 = 0;
        }
        else {
          unsigned int v19 = a3;
        }
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_72;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_72:
      int v51 = 1;
      goto LABEL_73;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 3)
    {
      if (v34 && (*(unsigned char *)(a1 + 60) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_90;
        }
        uint64_t v39 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v39, (void *)v3)) {
          goto LABEL_89;
        }
        PBReaderRecallMark();
        -[GEOWaypoint _addNoFlagsEntryPoint:](a1, v39);

        goto LABEL_70;
      }
      goto LABEL_63;
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (v34)
      {
        if ((*(unsigned char *)(a1 + 60) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_90;
          }
          uint64_t v39 = objc_alloc_init(GEOPlaceSearchRequest);
          if (!GEOPlaceSearchRequestReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
            goto LABEL_89;
          }
          PBReaderRecallMark();
          uint64_t v40 = 40;
LABEL_56:
          uint64_t v41 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;

          --v7;
LABEL_70:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_90;
        }
        char v46 = 16 * *(unsigned char *)(a1 + 60);
LABEL_69:
        v7 += v46 >> 7;
        goto LABEL_70;
      }
    }
    else if ((v53 & 1) != 0 && (*(unsigned char *)(a1 + 60) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        char v43 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v42;
      }
      int v44 = PBUnknownFieldAdd();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v44)
      {
        int v51 = 0;
        char v52 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        goto LABEL_75;
      }
      goto LABEL_71;
    }
LABEL_63:
    char v45 = PBReaderSkipValueWithTag();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v45 & 1) == 0)
    {
      int v51 = 0;
LABEL_73:
      char v52 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
      goto LABEL_74;
    }
LABEL_71:
    if (!(v54 & 1 | (v7 != 0))) {
      goto LABEL_72;
    }
  }
  if (!v34) {
    goto LABEL_63;
  }
  if ((*(unsigned char *)(a1 + 60) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_90;
    }
    char v46 = 32 * *(unsigned char *)(a1 + 60);
    goto LABEL_69;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_90;
  }
  uint64_t v39 = objc_alloc_init(GEOLocation);
  if (GEOLocationReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = 32;
    goto LABEL_56;
  }
LABEL_89:

LABEL_90:
  int v51 = 0;
  char v52 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_74:
  if ((v53 & 1) == 0) {
    goto LABEL_76;
  }
LABEL_75:
  *(unsigned char *)(a1 + v52[421]) |= 1u;
LABEL_76:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[421]) |= 8u;
    *(unsigned char *)(a1 + v52[421]) |= 4u;
    *(unsigned char *)(a1 + v52[421]) |= 2u;
  }
  else if (v19)
  {
    while (1)
    {
      int v47 = *v19++;
      char v48 = 8;
      switch(v47)
      {
        case 0:
          goto LABEL_83;
        case 1:
          goto LABEL_82;
        case 2:
          char v48 = 4;
          goto LABEL_82;
        case 3:
          char v48 = 2;
LABEL_82:
          *(unsigned char *)(a1 + v52[421]) |= v48;
          break;
        default:
          continue;
      }
    }
  }
LABEL_83:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    char v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189DF0588(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DF06F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DF120C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOWaypointCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [a1[5] readAll:1];
  [a1[4] readAll:1];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = a1[3];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v6++), "readAll:", 1, (void)v7);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

unint64_t GEOWaypointReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOWaypointReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOWaypointReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOWaypointReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOWaypointReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOWaypointCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189DF14C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOWaypointReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DF152C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_35;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_35;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
        {
LABEL_36:
          PBReaderRecallMark();
          return 0;
        }
        goto LABEL_32;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceSearchRequestIsValid(a1)) {
          goto LABEL_36;
        }
LABEL_32:
        PBReaderRecallMark();
        goto LABEL_34;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_36;
      }
LABEL_34:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_35;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocationIsValid(a1)) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
LABEL_35:
  BOOL v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_189DF19B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOWaypointIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  unsigned int v2 = *(unsigned __int8 *)(a1 + 60);
  if ((v2 & 0x10) != 0) {
    return 1;
  }
  if ((v2 & 8) != 0)
  {
    if (GEOPlaceSearchRequestIsDirty(*(os_unfair_lock_s **)(a1 + 40))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 4) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 32))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int8 *)(a1 + 60);
  }
  return (v2 >> 1) & 1;
}

os_unfair_lock_s *GEOWaypointIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOWaypointIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEOWaypointClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if ([a1 hasPlaceSearchRequest]
      && ([a1 placeSearchRequest],
          uint64_t v5 = objc_claimAutoreleasedReturnValue(),
          unsigned int v6 = GEOPlaceSearchRequestHasSensitiveFields(v5),
          v5,
          v6))
    {
      unsigned int v7 = [a1 placeSearchRequest];
      unint64_t v8 = (void *)[v7 copy];

      uint64_t v9 = [v8 location];
      [v9 clearSensitiveFields:a2];

      [a1 setPlaceSearchRequest:v8];
    }
    else
    {
      unint64_t v8 = [a1 placeSearchRequest];
      [v8 clearSensitiveFields:a2];
    }

    if ([a1 hasLocation])
    {
      unint64_t v11 = [a1 location];
      int HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v11);

      if (HasSensitiveFields)
      {
        uint64_t v13 = [a1 location];
        int v14 = (_DWORD *)[v13 copy];

        GEOLocationClearSensitiveFields(v14);
        [a1 setLocation:v14];
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v10 = [a1 placeSearchRequest];
    [v10 clearSensitiveFields:a2];
  }
  int v14 = [a1 location];
  [v14 clearSensitiveFields:a2];
LABEL_11:
}

void sub_189DF2120(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DF2494(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DF2908(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointIDReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  unsigned int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 76);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 72)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 92)), (uint16x4_t)0xFFFAFFF8FFF9FFFBLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 92) >> 4) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 2;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v83 = v17;
        char v84 = v8;
        char v85 = v18 | v17;
        if ((v18 | v8)) {
          unsigned int v19 = 0;
        }
        else {
          unsigned int v19 = a3;
        }
        char v86 = (v19 == 0) | v18;
        BOOL v87 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_126;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_126:
      int v81 = 1;
      goto LABEL_127;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v87;
    if ((v86 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v84 & 1) == 0) {
          goto LABEL_97;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 92) |= 1u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_100;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            uint64_t v41 = 0;
            goto LABEL_102;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_100:
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v41 = 0;
        }
LABEL_102:
        uint64_t v74 = 48;
        goto LABEL_107;
      case 2:
        if ((v84 & 1) == 0) {
          goto LABEL_97;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 92) |= 2u;
        while (2)
        {
          uint64_t v51 = *v20;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v22) + v52);
            *(void *)(v3 + v51) = v53;
            v41 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              BOOL v30 = v50++ >= 9;
              if (v30)
              {
                uint64_t v41 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v41 = 0;
        }
LABEL_106:
        uint64_t v74 = 64;
LABEL_107:
        *(void *)(a1 + v74) = v41;
        goto LABEL_125;
      case 3:
        if (!v34) {
          goto LABEL_97;
        }
        if ((*(_WORD *)(a1 + 92) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_146;
          }
          __int16 v76 = *(_WORD *)(a1 + 92) << 8;
          goto LABEL_123;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_146;
        }
        char v55 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v55, (void *)v3)) {
          goto LABEL_145;
        }
        PBReaderRecallMark();
        uint64_t v56 = 40;
        goto LABEL_71;
      case 4:
        if (!v34) {
          goto LABEL_97;
        }
        if ((*(_WORD *)(a1 + 92) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_146;
          }
          __int16 v76 = *(_WORD *)(a1 + 92) << 10;
LABEL_123:
          v7 += v76 >> 15;
LABEL_124:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_125;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_146;
        }
        char v55 = objc_alloc_init(GEOStructuredAddress);
        if (GEOStructuredAddressReadAllFrom(v55, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v56 = 24;
LABEL_71:
          uint64_t v57 = *(void **)(a1 + v56);
          *(void *)(a1 + v56) = v55;
LABEL_75:

          --v7;
          goto LABEL_124;
        }
LABEL_145:

LABEL_146:
        int v81 = 0;
        char v82 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_128:
        if (v83) {
LABEL_129:
        }
          *(_WORD *)(a1 + v82[425]) |= 0x10u;
        if (v87 || (v81 & 1) == 0)
        {
          *(_WORD *)(a1 + v82[425]) |= 0x80u;
          *(_WORD *)(a1 + v82[425]) |= 0x20u;
          *(_WORD *)(a1 + v82[425]) |= 0x100u;
          *(_WORD *)(a1 + v82[425]) |= 0x40u;
        }
        else if (v19)
        {
          while (1)
          {
            int v78 = *v19++;
            __int16 v77 = 128;
            switch(v78)
            {
              case 0:
                goto LABEL_139;
              case 3:
                goto LABEL_137;
              case 4:
                __int16 v77 = 32;
                goto LABEL_137;
              case 5:
                __int16 v77 = 256;
                goto LABEL_137;
              case 6:
                __int16 v77 = 64;
LABEL_137:
                *(_WORD *)(a1 + v82[425]) |= v77;
                break;
              default:
                continue;
            }
          }
        }
LABEL_139:
        if (v81) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v87)
        {
          uint64_t v79 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 5:
        if (!v34) {
          goto LABEL_97;
        }
        if ((*(_WORD *)(a1 + 92) & 0x100) == 0)
        {
          uint64_t v58 = PBReaderReadString();
          uint64_t v57 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v58;
          goto LABEL_75;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_146;
        }
        __int16 v76 = *(_WORD *)(a1 + 92) << 7;
        goto LABEL_123;
      case 6:
        if (!v34 || (*(_WORD *)(a1 + 92) & 0x40) != 0) {
          goto LABEL_97;
        }
        char v59 = PBReaderReadString();
        if (v59) {
          -[GEOWaypointID _addNoFlagsFormattedAddressLineHint:](a1, v59);
        }

        goto LABEL_124;
      case 7:
        if ((v84 & 1) == 0) {
          goto LABEL_97;
        }
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v62 = 0;
        *(_WORD *)(a1 + 92) |= 8u;
        while (2)
        {
          uint64_t v63 = *v20;
          uint64_t v64 = *(void *)(v3 + v63);
          unint64_t v65 = v64 + 1;
          if (v64 == -1 || v65 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(v3 + *v22) + v64);
            *(void *)(v3 + v63) = v65;
            v62 |= (unint64_t)(v66 & 0x7F) << v60;
            if (v66 < 0)
            {
              v60 += 7;
              BOOL v30 = v61++ >= 9;
              if (v30)
              {
                LODWORD(v62) = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v62) = 0;
        }
LABEL_111:
        uint64_t v75 = 88;
        goto LABEL_116;
      case 8:
        if ((v84 & 1) == 0) {
          goto LABEL_97;
        }
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v62 = 0;
        *(_WORD *)(a1 + 92) |= 4u;
        while (2)
        {
          uint64_t v69 = *v20;
          uint64_t v70 = *(void *)(v3 + v69);
          unint64_t v71 = v70 + 1;
          if (v70 == -1 || v71 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v72 = *(unsigned char *)(*(void *)(v3 + *v22) + v70);
            *(void *)(v3 + v69) = v71;
            v62 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              BOOL v30 = v68++ >= 9;
              if (v30)
              {
                LODWORD(v62) = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v62) = 0;
        }
LABEL_115:
        uint64_t v75 = 84;
LABEL_116:
        *(_DWORD *)(a1 + v75) = v62;
        goto LABEL_125;
      default:
        if ((v83 & 1) == 0 || (*(_WORD *)(a1 + 92) & 0x10) != 0)
        {
LABEL_97:
          char v73 = PBReaderSkipValueWithTag();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v73 & 1) == 0)
          {
            int v81 = 0;
LABEL_127:
            char v82 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_128;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v47 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v46;
          }
          int v48 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v48)
          {
            int v81 = 0;
            char v82 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_129;
          }
        }
LABEL_125:
        if (!(v85 & 1 | (v7 != 0))) {
          goto LABEL_126;
        }
        continue;
    }
  }
}

void sub_189DF3438(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DF35A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DF370C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DF52CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointIDReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 76))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOWaypointIDReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = [v8 position];
  *(_DWORD *)(a1 + 76) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOWaypointIDReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOWaypointIDReadAllFrom_initialTag;
  }
  unint64_t v6 = GEOWaypointIDReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 40) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return v6;
}

void sub_189DF5470(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointIDReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t v4 = GEOWaypointIDReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return v4;
}

void sub_189DF54D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointIDIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  unsigned int v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_68;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_64;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_65;
          }
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_68;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_64;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_65;
          }
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
            goto LABEL_68;
          }
          goto LABEL_42;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOStructuredAddressIsValid(a1)) {
            goto LABEL_68;
          }
LABEL_42:
          PBReaderRecallMark();
          continue;
        case 5u:
          if (v15 == 2) {
            goto LABEL_46;
          }
          goto LABEL_68;
        case 6u:
          if (v15 == 2) {
            goto LABEL_46;
          }
          goto LABEL_68;
        case 7u:
          if ((v8 & 7) != 0) {
            goto LABEL_68;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_64;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v22 = v28++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_65;
          }
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_68;
          }
          unsigned int v33 = 0;
          break;
        default:
LABEL_46:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_68:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v34 = *v2;
        uint64_t v35 = *(void *)&a1[v34];
        unint64_t v36 = v35 + 1;
        if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
          break;
        }
        int v37 = *(char *)(*(void *)&a1[*v5] + v35);
        *(void *)&a1[v34] = v36;
        if (v37 < 0)
        {
          BOOL v22 = v33++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_65;
      }
LABEL_64:
      a1[*v4] = 1;
LABEL_65:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v38 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v38;
}

void sub_189DF5B84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointIDIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  BOOL v2 = (*(_WORD *)(a1 + 92) & 0x3E0) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return v2;
}

void sub_189DF6160(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DF672C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointLocationReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    char v6 = (int *)MEMORY[0x1E4F940E8];
    unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
    unint64_t v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          uint64_t v14 = *(void *)&v5[v13];
          unint64_t v15 = v14 + 1;
          if (v14 == -1 || v15 > *(void *)&v5[*v7]) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          if (v11++ >= 9)
          {
            unint64_t v12 = 0;
            int v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v18 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v18 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          unint64_t v20 = objc_alloc_init(GEOLocation);
          if (!GEOLocationReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          int v21 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v22 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v23 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v22;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v24 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    BOOL v24 = 0;
  }
  objc_sync_exit(v5);

  return v24;
}

void sub_189DF6EC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointLocationReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOWaypointLocationReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DF6F2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointLocationIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocationIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOWaypointNamePropertiesReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    unint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 20) |= 2u;
            while (1)
            {
              uint64_t v21 = *v4;
              uint64_t v22 = *(void *)&v3[v21];
              unint64_t v23 = v22 + 1;
              if (v22 == -1 || v23 > *(void *)&v3[*v5])
              {
                unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayName;
                goto LABEL_56;
              }
              char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
              *(void *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0) {
                break;
              }
              v18 += 7;
              BOOL v25 = v19++ > 8;
              if (v25)
              {
                uint64_t v20 = 0;
                unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayName;
                goto LABEL_59;
              }
            }
            unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayName;
            goto LABEL_57;
          case 2u:
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 20) |= 8u;
            while (2)
            {
              uint64_t v31 = *v4;
              uint64_t v32 = *(void *)&v3[v31];
              unint64_t v33 = v32 + 1;
              if (v32 == -1 || v33 > *(void *)&v3[*v5])
              {
                unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenName;
                goto LABEL_56;
              }
              char v34 = *(unsigned char *)(*(void *)&v3[*v7] + v32);
              *(void *)&v3[v31] = v33;
              v20 |= (unint64_t)(v34 & 0x7F) << v29;
              if (v34 < 0)
              {
                v29 += 7;
                BOOL v25 = v30++ > 8;
                if (v25)
                {
                  uint64_t v20 = 0;
                  unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenName;
                  goto LABEL_59;
                }
                continue;
              }
              break;
            }
            unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenName;
            goto LABEL_57;
          case 3u:
            char v35 = 0;
            unsigned int v36 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 20) |= 1u;
            while (2)
            {
              uint64_t v37 = *v4;
              uint64_t v38 = *(void *)&v3[v37];
              unint64_t v39 = v38 + 1;
              if (v38 == -1 || v39 > *(void *)&v3[*v5])
              {
                unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayAddress;
                goto LABEL_56;
              }
              char v40 = *(unsigned char *)(*(void *)&v3[*v7] + v38);
              *(void *)&v3[v37] = v39;
              v20 |= (unint64_t)(v40 & 0x7F) << v35;
              if (v40 < 0)
              {
                v35 += 7;
                BOOL v25 = v36++ > 8;
                if (v25)
                {
                  uint64_t v20 = 0;
                  unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayAddress;
                  goto LABEL_59;
                }
                continue;
              }
              break;
            }
            unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasDisplayAddress;
            goto LABEL_57;
          case 4u:
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 20) |= 4u;
            break;
          default:
            if (!*(void *)(a1 + 8))
            {
              id v27 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              unsigned int v28 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v27;
            }
            if ((PBUnknownFieldAdd() & 1) == 0) {
              goto LABEL_67;
            }
            continue;
        }
        while (1)
        {
          uint64_t v43 = *v4;
          uint64_t v44 = *(void *)&v3[v43];
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)&v3[*v5]) {
            break;
          }
          char v46 = *(unsigned char *)(*(void *)&v3[*v7] + v44);
          *(void *)&v3[v43] = v45;
          v20 |= (unint64_t)(v46 & 0x7F) << v41;
          if ((v46 & 0x80) == 0)
          {
            unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenAddress;
            goto LABEL_57;
          }
          v41 += 7;
          BOOL v25 = v42++ > 8;
          if (v25)
          {
            uint64_t v20 = 0;
            unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenAddress;
            goto LABEL_59;
          }
        }
        unint64_t v26 = &OBJC_IVAR___GEOWaypointNameProperties__hasSpokenAddress;
LABEL_56:
        v3[*v6] = 1;
LABEL_57:
        if (v3[*v6]) {
          uint64_t v20 = 0;
        }
LABEL_59:
        *(unsigned char *)(a1 + *v26) = v20 != 0;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v47 = v3[*v6] == 0;
  }
  else
  {
LABEL_67:
    BOOL v47 = 0;
  }
  objc_sync_exit(v3);

  return v47;
}

void sub_189DF7FFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointNamePropertiesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOWaypointNamePropertiesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DF8070(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointNamePropertiesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_57;
          }
          unsigned int v16 = 0;
          while (1)
          {
            uint64_t v17 = *v2;
            uint64_t v18 = *(void *)&a1[v17];
            unint64_t v19 = v18 + 1;
            if (v18 == -1 || v19 > *(void *)&a1[*v3]) {
              goto LABEL_53;
            }
            int v20 = *(char *)(*(void *)&a1[*v5] + v18);
            *(void *)&a1[v17] = v19;
            if (v20 < 0)
            {
              BOOL v21 = v16++ > 8;
              if (!v21) {
                continue;
              }
            }
            goto LABEL_54;
          }
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_57;
          }
          unsigned int v22 = 0;
          while (1)
          {
            uint64_t v23 = *v2;
            uint64_t v24 = *(void *)&a1[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&a1[*v3]) {
              goto LABEL_53;
            }
            int v26 = *(char *)(*(void *)&a1[*v5] + v24);
            *(void *)&a1[v23] = v25;
            if (v26 < 0)
            {
              BOOL v21 = v22++ > 8;
              if (!v21) {
                continue;
              }
            }
            goto LABEL_54;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_57;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              goto LABEL_53;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v21 = v27++ > 8;
              if (!v21) {
                continue;
              }
            }
            goto LABEL_54;
          }
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_57;
          }
          unsigned int v32 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_57:
          BOOL v37 = 0;
          goto LABEL_56;
      }
      while (1)
      {
        uint64_t v33 = *v2;
        uint64_t v34 = *(void *)&a1[v33];
        unint64_t v35 = v34 + 1;
        if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
          break;
        }
        int v36 = *(char *)(*(void *)&a1[*v5] + v34);
        *(void *)&a1[v33] = v35;
        if (v36 < 0)
        {
          BOOL v21 = v32++ > 8;
          if (!v21) {
            continue;
          }
        }
        goto LABEL_54;
      }
LABEL_53:
      a1[*v4] = 1;
LABEL_54:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v37 = a1[*v4] == 0;
LABEL_56:
  PBReaderRecallMark();
  return v37;
}

void sub_189DF8B0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v8)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        int v20 = (int *)MEMORY[0x1E4F940E8];
        BOOL v21 = (int *)MEMORY[0x1E4F940C8];
        unsigned int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_72;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_72:
      int v51 = 1;
      goto LABEL_73;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 != 3) {
      break;
    }
    if (v34)
    {
      if ((*(unsigned char *)(a1 + 60) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_90;
        }
        unint64_t v39 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v39, (void *)v3)) {
          goto LABEL_89;
        }
        PBReaderRecallMark();
        uint64_t v40 = 32;
        goto LABEL_51;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_90;
      }
      char v46 = 32 * *(unsigned char *)(a1 + 60);
LABEL_69:
      v7 += v46 >> 7;
      goto LABEL_70;
    }
LABEL_63:
    char v45 = PBReaderSkipValueWithTag();
    BOOL v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v45 & 1) == 0)
    {
      int v51 = 0;
LABEL_73:
      uint64_t v52 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
      goto LABEL_74;
    }
LABEL_71:
    if (!(v54 & 1 | (v7 != 0))) {
      goto LABEL_72;
    }
  }
  if (v33 != 2)
  {
    if (v33 == 1)
    {
      if (v34)
      {
        if ((*(unsigned char *)(a1 + 60) & 2) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_90;
          }
          unint64_t v39 = objc_alloc_init(GEOLatLng);
          if (!GEOLatLngReadAllFrom((uint64_t)v39, (void *)v3)) {
            goto LABEL_89;
          }
          PBReaderRecallMark();
          uint64_t v40 = 24;
LABEL_51:
          char v41 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;

          --v7;
LABEL_70:
          BOOL v21 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_71;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_90;
        }
        char v46 = *(unsigned char *)(a1 + 60) << 6;
        goto LABEL_69;
      }
    }
    else if ((v53 & 1) != 0 && (*(unsigned char *)(a1 + 60) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        uint64_t v43 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v42;
      }
      int v44 = PBUnknownFieldAdd();
      BOOL v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v44)
      {
        int v51 = 0;
        uint64_t v52 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        goto LABEL_75;
      }
      goto LABEL_71;
    }
    goto LABEL_63;
  }
  if (!v34 || (*(unsigned char *)(a1 + 60) & 8) != 0) {
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_90;
  }
  unint64_t v39 = objc_alloc_init(GEORoadAccessPoint);
  if (GEORoadAccessPointReadAllFrom((uint64_t)v39, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOWaypointPlace _addNoFlagsRoadAccessPoint:](a1, v39);

    goto LABEL_70;
  }
LABEL_89:

LABEL_90:
  int v51 = 0;
  uint64_t v52 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
  BOOL v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_74:
  if ((v53 & 1) == 0) {
    goto LABEL_76;
  }
LABEL_75:
  *(unsigned char *)(a1 + v52[427]) |= 1u;
LABEL_76:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[427]) |= 2u;
    *(unsigned char *)(a1 + v52[427]) |= 8u;
    *(unsigned char *)(a1 + v52[427]) |= 4u;
  }
  else if (v19)
  {
    while (1)
    {
      int v47 = *v19++;
      char v48 = 2;
      switch(v47)
      {
        case 0:
          goto LABEL_83;
        case 1:
          goto LABEL_82;
        case 2:
          char v48 = 8;
          goto LABEL_82;
        case 3:
          char v48 = 4;
LABEL_82:
          *(unsigned char *)(a1 + v52[427]) |= v48;
          break;
        default:
          continue;
      }
    }
  }
LABEL_83:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    char v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189DF9280(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DF95B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOWaypointPlaceCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [a1[3] readAll:1];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = a1[5];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * v6++), "readAll:", 1, (void)v8);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  return [a1[4] readAll:1];
}

unint64_t GEOWaypointPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOWaypointPlaceReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOWaypointPlaceReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOWaypointPlaceReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOWaypointPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOWaypointPlaceCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189DFA078(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWaypointPlaceReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOWaypointPlaceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DFA0DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointPlaceIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_35;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_35;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
        {
LABEL_36:
          PBReaderRecallMark();
          return 0;
        }
        goto LABEL_32;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
          goto LABEL_36;
        }
LABEL_32:
        PBReaderRecallMark();
        goto LABEL_34;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_36;
      }
LABEL_34:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_35;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEORoadAccessPointIsValid(a1)) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
LABEL_35:
  BOOL v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

BOOL GEOWaypointPlaceIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  BOOL v2 = (*(unsigned char *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_189DFA88C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DFAC04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DFB044(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DFB218(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DFB5F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189DFB760(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOWaypointTypedCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  [*(id *)(a1 + 32) readAll:1];
  [*(id *)(a1 + 56) readAll:1];
  [*(id *)(a1 + 40) readAll:1];
  BOOL v2 = *(void **)(a1 + 48);

  return [v2 readAll:1];
}

unint64_t GEOWaypointTypedReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOWaypointTypedReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189DFCA8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointTypedIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWaypointIDIsValid(a1)) {
            goto LABEL_93;
          }
          goto LABEL_72;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWaypointPlaceIsValid(a1)) {
            goto LABEL_93;
          }
          goto LABEL_72;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWaypointLocationIsValid(a1)) {
            goto LABEL_93;
          }
          goto LABEL_72;
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v22 = v28++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 7u:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v33 = 0;
          while (1)
          {
            uint64_t v34 = *v2;
            uint64_t v35 = *(void *)&a1[v34];
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v37 = *(char *)(*(void *)&a1[*v5] + v35);
            *(void *)&a1[v34] = v36;
            if (v37 < 0)
            {
              BOOL v22 = v33++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWaypointNamePropertiesIsValid(a1)) {
            goto LABEL_93;
          }
          goto LABEL_72;
        case 9u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDSearchClientBehaviorIsValid(a1)) {
            goto LABEL_93;
          }
LABEL_72:
          PBReaderRecallMark();
          continue;
        case 0xAu:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v38 = 0;
          while (1)
          {
            uint64_t v39 = *v2;
            uint64_t v40 = *(void *)&a1[v39];
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v42 = *(char *)(*(void *)&a1[*v5] + v40);
            *(void *)&a1[v39] = v41;
            if (v42 < 0)
            {
              BOOL v22 = v38++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 0xBu:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v43 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_93:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v44 = *v2;
        uint64_t v45 = *(void *)&a1[v44];
        unint64_t v46 = v45 + 1;
        if (v45 == -1 || v46 > *(void *)&a1[*v3]) {
          break;
        }
        int v47 = *(char *)(*(void *)&a1[*v5] + v45);
        *(void *)&a1[v44] = v46;
        if (v47 < 0)
        {
          BOOL v22 = v43++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_90;
      }
LABEL_89:
      a1[*v4] = 1;
LABEL_90:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v48 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v48;
}

os_unfair_lock_s *GEOWaypointTypedIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOWaypointTypedIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189DFD9E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWaypointUUIDReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_49;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          goto LABEL_49;
        }
        if ((v10 >> 3) == 2) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5])
            {
              unint64_t v26 = &OBJC_IVAR___GEOWaypointUUID__high;
              goto LABEL_41;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v18 += 7;
            BOOL v25 = v19++ > 8;
            if (v25)
            {
              uint64_t v20 = 0;
              unint64_t v26 = &OBJC_IVAR___GEOWaypointUUID__high;
              goto LABEL_44;
            }
          }
          unint64_t v26 = &OBJC_IVAR___GEOWaypointUUID__high;
LABEL_42:
          if (v3[*v6]) {
            uint64_t v20 = 0;
          }
LABEL_44:
          *(void *)(a1 + *v26) = v20;
          goto LABEL_45;
        }
        if (!*(void *)(a1 + 8))
        {
          id v33 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          uint64_t v34 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v33;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_50;
        }
LABEL_45:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_49;
        }
      }
      char v27 = 0;
      unsigned int v28 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 32) |= 2u;
      while (1)
      {
        uint64_t v29 = *v4;
        uint64_t v30 = *(void *)&v3[v29];
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
        *(void *)&v3[v29] = v31;
        v20 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
        {
          unint64_t v26 = &OBJC_IVAR___GEOWaypointUUID__low;
          goto LABEL_42;
        }
        v27 += 7;
        BOOL v25 = v28++ > 8;
        if (v25)
        {
          uint64_t v20 = 0;
          unint64_t v26 = &OBJC_IVAR___GEOWaypointUUID__low;
          goto LABEL_44;
        }
      }
      unint64_t v26 = &OBJC_IVAR___GEOWaypointUUID__low;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    BOOL v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    BOOL v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189DFE298(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *GEOLogDirectory(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  BOOL v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v3 = @"/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/Maps";
  char v4 = [v2 fileExistsAtPath:@"/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/Maps"];

  if ((v4 & 1) == 0)
  {
    uint64_t v5 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v9 = 0;
    [v5 createDirectoryAtPath:@"/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/Maps" withIntermediateDirectories:1 attributes:0 error:&v9];
    id v6 = v9;

    if (v6)
    {
      unsigned int v7 = GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
        __int16 v12 = 1024;
        int v13 = 42;
        __int16 v14 = 2112;
        id v15 = v6;
        _os_log_impl(&dword_188D96000, v7, OS_LOG_TYPE_ERROR, "%s:%d %@", buf, 0x1Cu);
      }

      id v3 = 0;
      if (a1) {
        *a1 = v6;
      }
    }
  }
  return v3;
}

void _GEOLogToFile(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  id v91 = a2;
  uint64_t v11 = (void *)[[NSString alloc] initWithFormat:v91 arguments:&a9];
  id v12 = v10;
  id v13 = v11;
  __int16 v14 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v15 = qword_1EB29FD90;
  id v16 = v13;
  id v17 = v12;
  id v18 = v14;
  if (v15 != -1) {
    dispatch_once(&qword_1EB29FD90, &__block_literal_global_112);
  }
  unsigned int v19 = [(id)qword_1EB29FD88 stringFromDate:v18];

  uint64_t v20 = NSString;
  pid_t v21 = getpid();
  uint64_t v22 = [MEMORY[0x1E4F29060] currentThread];
  unsigned int v90 = [v20 stringWithFormat:@"%@, %ld, %p, [%@]: %@", v19, v21, v22, v17, v16];

  id v23 = v17;
  if (qword_1EB29FDA8 != -1) {
    dispatch_once(&qword_1EB29FDA8, &__block_literal_global_23);
  }
  uint64_t v24 = [0 objectForKey:v23];
  BOOL v25 = &stru_1ED51F370;
  if (v24) {
    BOOL v25 = (__CFString *)v24;
  }
  unint64_t v26 = v25;
  char v27 = getprogname();
  unsigned int v28 = (const UInt8 *)v27;
  if (v27)
  {
    CFIndex v29 = strlen(v27);
    CFStringRef v30 = CFStringCreateWithBytes(0, v28, v29, 0x8000100u, 0);
  }
  else
  {
    uint64_t v31 = getpid();
    CFStringRef v30 = CFStringCreateWithFormat(0, 0, @"pid_%d", v31);
  }
  char v32 = (__CFString *)v30;
  if ([(__CFString *)v26 length])
  {
    id v33 = [NSString stringWithFormat:@"%@-%@", v32, v26];
  }
  else
  {
    id v33 = v32;
  }
  uint64_t v34 = v33;

  BOOL v35 = [MEMORY[0x1E4F28CB8] defaultManager];
  unint64_t v36 = v34;
  if (qword_1EB29FDB0 != -1) {
    dispatch_once(&qword_1EB29FDB0, &__block_literal_global_37);
  }
  int v37 = NSString;
  unsigned int v38 = (void *)qword_1EB29FDB8;
  uint64_t v39 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v40 = [v38 stringFromDate:v39];
  unint64_t v41 = [v37 stringWithFormat:@"%@_%@.log", v36, v40];

  uint64_t v97 = 0;
  int v42 = GEOLogDirectory(&v97);
  unsigned int v43 = v42;
  if (v97)
  {
    uint64_t v44 = GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 165;
      _os_log_impl(&dword_188D96000, v44, OS_LOG_TYPE_ERROR, "Error creating LogDirectory for Maps. Cannot create filepath %s:%d", buf, 0x12u);
    }

    uint64_t v45 = 0;
  }
  else
  {
    uint64_t v45 = [v42 stringByAppendingPathComponent:v41];
  }

  if (([v35 fileExistsAtPath:v45] & 1) == 0) {
    [(id)qword_1EB29FD98 removeObjectForKey:v26];
  }
  id v46 = [(id)qword_1EB29FD98 objectForKey:v26];
  if (!v46)
  {
    unsigned int v50 = [(id)qword_1EB29FDA0 objectForKey:v23];
    BOOL v51 = v50 == 0;

    if (v51)
    {
      id v88 = v35;
      BOOL v87 = v36;
      uint64_t v97 = 0;
      unsigned int v98 = &v97;
      uint64_t v99 = 0x3032000000;
      uint64_t v100 = __Block_byref_object_copy__60;
      uint64_t v101 = __Block_byref_object_dispose__60;
      id v102 = 0;
      id v96 = 0;
      char v89 = GEOLogDirectory(&v96);
      id v86 = v96;
      if (v86)
      {
        uint64_t v52 = GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 101;
          _os_log_impl(&dword_188D96000, v52, OS_LOG_TYPE_ERROR, "Error creating LogDirectory for Maps. Cannot prune logs %s:%d", buf, 0x12u);
        }
      }
      else
      {
        char v53 = (id *)(v98 + 5);
        id obj = (id)v98[5];
        int v81 = [v88 contentsOfDirectoryAtPath:v89 error:&obj];
        objc_storeStrong(v53, obj);
        if (v98[5])
        {
          char v54 = GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            uint64_t v55 = v98[5];
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 107;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v55;
            _os_log_impl(&dword_188D96000, v54, OS_LOG_TYPE_ERROR, "%s:%d %@", buf, 0x1Cu);
          }
        }
        else
        {
          BOOL v56 = (void *)MEMORY[0x1E4F28F60];
          v93[0] = MEMORY[0x1E4F143A8];
          v93[1] = 3221225472;
          v93[2] = ___pruneOldLogs_block_invoke;
          v93[3] = &unk_1E53E7338;
          uint64_t v94 = v87;
          uint64_t v57 = [v56 predicateWithBlock:v93];
          int v80 = [v81 filteredArrayUsingPredicate:v57];

          uint64_t v58 = v80;
          if ((unint64_t)[v80 count] >= 7)
          {
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = ___pruneOldLogs_block_invoke_2;
            *(void *)&buf[24] = &unk_1E53E7360;
            id v84 = v89;
            id v110 = v84;
            id v83 = v88;
            id v111 = v83;
            unsigned int v112 = &v97;
            char v85 = [v80 sortedArrayUsingComparator:buf];
            char v59 = (void *)v98[5];
            v98[5] = 0;

            uint64_t v60 = [v85 count];
            uint64_t v82 = v60 - 6;
            if (v60 != 6)
            {
              uint64_t v61 = 0;
              do
              {
                uint64_t v62 = [v85 objectAtIndex:v61];
                uint64_t v63 = [v84 stringByAppendingPathComponent:v62];

                uint64_t v64 = (id *)(v98 + 5);
                id v92 = (id)v98[5];
                [v83 removeItemAtPath:v63 error:&v92];
                objc_storeStrong(v64, v92);
                if (v98[5])
                {
                  unint64_t v65 = GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
                  if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v66 = v98[5];
                    *(_DWORD *)char v103 = 136315650;
                    char v104 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
                    __int16 v105 = 1024;
                    int v106 = 142;
                    __int16 v107 = 2112;
                    uint64_t v108 = v66;
                    _os_log_impl(&dword_188D96000, v65, OS_LOG_TYPE_ERROR, "%s:%d %@", v103, 0x1Cu);
                  }

                  char v67 = (void *)v98[5];
                  v98[5] = 0;
                }
                ++v61;
              }
              while (v82 != v61);
            }

            uint64_t v58 = v80;
          }

          char v54 = v94;
        }

        uint64_t v52 = v81;
      }

      _Block_object_dispose(&v97, 8);
      [(id)qword_1EB29FDA0 setObject:MEMORY[0x1E4F1CC38] forKey:v23];
    }
    if (v45)
    {
      if (([v35 fileExistsAtPath:v45] & 1) != 0
        || ([MEMORY[0x1E4F1C9B8] data],
            unsigned int v68 = objc_claimAutoreleasedReturnValue(),
            char v69 = [v35 createFileAtPath:v45 contents:v68 attributes:0],
            v68,
            (v69 & 1) != 0))
      {
        uint64_t v70 = [MEMORY[0x1E4F28CB0] fileHandleForWritingAtPath:v45];
        id v46 = v70;
        if (v70)
        {
          [v70 seekToEndReturningOffset:0 error:0];
          [(id)qword_1EB29FD98 setObject:v46 forKey:v26];
          goto LABEL_23;
        }
        char v73 = GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v45;
          _os_log_impl(&dword_188D96000, v73, OS_LOG_TYPE_ERROR, "Could not open log file: %@", buf, 0xCu);
        }
      }
      else
      {
        char v73 = GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v45;
          _os_log_impl(&dword_188D96000, v73, OS_LOG_TYPE_ERROR, "Could not create log file: %@", buf, 0xCu);
        }
      }
    }
    else
    {
      unint64_t v71 = (void *)qword_1EB29FD98;
      char v72 = [MEMORY[0x1E4F1CA98] null];
      [v71 setObject:v72 forKey:v23];
    }
    id v46 = 0;
    goto LABEL_57;
  }
LABEL_23:
  id v47 = [MEMORY[0x1E4F1CA98] null];
  BOOL v48 = v46 == v47;

  if (!v48)
  {
    id v46 = v46;
    char v49 = v46;
    goto LABEL_58;
  }
LABEL_57:
  char v49 = 0;
LABEL_58:

  uint64_t v74 = [(id)_MergedGlobals_257 objectForKeyedSubscript:v23];
  uint64_t v75 = [v74 unsignedLongValue];

  if (v75)
  {
    __int16 v76 = [NSString stringWithFormat:@"\n-----------------------\n--- Dropped %lu Log entries for facility(%@) due to 'no disk space' error ---\n-----------------------\n\n", v75, v23];
    __int16 v77 = [v76 dataUsingEncoding:4];
    [v49 writeData:v77 error:0];
    [(id)_MergedGlobals_257 removeObjectForKey:v23];
  }
  int v78 = [NSString stringWithFormat:@"%@\n", v90];
  uint64_t v79 = [v78 dataUsingEncoding:4];
  [v49 writeData:v79 error:0];
}

void sub_189DFF0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t ___dateFormatterForLogMessage_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  id v1 = (void *)qword_1EB29FD88;
  qword_1EB29FD88 = (uint64_t)v0;

  BOOL v2 = (void *)qword_1EB29FD88;

  return [v2 setDateFormat:@"yyyy-MM-dd HH:mm:ss.SSS"];
}

void ___handleForFacility_block_invoke()
{
  if (!qword_1EB29FDA0)
  {
    id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v1 = (void *)qword_1EB29FDA0;
    qword_1EB29FDA0 = (uint64_t)v0;
  }
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v3 = (void *)qword_1EB29FD98;
  qword_1EB29FD98 = (uint64_t)v2;
}

uint64_t ___filenameForIdentifier_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  id v1 = (void *)qword_1EB29FDB8;
  qword_1EB29FDB8 = (uint64_t)v0;

  [(id)qword_1EB29FDB8 setDateStyle:1];
  id v2 = (void *)qword_1EB29FDB8;

  return [v2 setDateFormat:@"yyyy_MM_dd"];
}

uint64_t ___pruneOldLogs_block_invoke(uint64_t a1, void *a2)
{
  return [a2 hasPrefix:*(void *)(a1 + 32)];
}

uint64_t ___pruneOldLogs_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  unsigned int v7 = [v5 stringByAppendingPathComponent:a2];
  char v8 = [*(id *)(a1 + 32) stringByAppendingPathComponent:v6];

  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v10 + 40);
  uint64_t v11 = [v9 attributesOfItemAtPath:v7 error:&obj];
  objc_storeStrong((id *)(v10 + 40), obj);
  id v12 = [v11 fileModificationDate];

  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v15 = *(void *)(v13 + 40);
  __int16 v14 = (id *)(v13 + 40);
  if (v15)
  {
    id v16 = GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 136315650;
      char v27 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
      __int16 v28 = 1024;
      int v29 = 123;
      __int16 v30 = 2112;
      uint64_t v31 = v17;
      _os_log_impl(&dword_188D96000, v16, OS_LOG_TYPE_ERROR, "%s:%d %@", buf, 0x1Cu);
    }
    uint64_t v18 = -1;
  }
  else
  {
    unsigned int v19 = *(void **)(a1 + 40);
    id v24 = 0;
    uint64_t v20 = [v19 attributesOfItemAtPath:v8 error:&v24];
    objc_storeStrong(v14, v24);
    id v16 = [v20 fileModificationDate];

    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      pid_t v21 = GEOFindOrCreateLog("com.apple.GeoServices", "FileLogging");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        *(_DWORD *)buf = 136315650;
        char v27 = "/Library/Caches/com.apple.xbs/Sources/GeoServices/GeoServices/Logging/GEOFileLogging.m";
        __int16 v28 = 1024;
        int v29 = 128;
        __int16 v30 = 2112;
        uint64_t v31 = v22;
        _os_log_impl(&dword_188D96000, v21, OS_LOG_TYPE_ERROR, "%s:%d %@", buf, 0x1Cu);
      }

      uint64_t v18 = 1;
    }
    else
    {
      uint64_t v18 = [v12 compare:v16];
    }
  }

  return v18;
}

void sub_189E002B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E00458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v16 - 56));

  _Unwind_Resume(a1);
}

void sub_189E004F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E0072C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GEOGetGEORouteBuilderLog()
{
  if (qword_1EB29FDC8 != -1) {
    dispatch_once(&qword_1EB29FDC8, &__block_literal_global_113);
  }
  id v0 = (void *)_MergedGlobals_258;

  return v0;
}

void __GEOGetGEORouteBuilderLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "GEORouteBuilder");
  id v1 = (void *)_MergedGlobals_258;
  _MergedGlobals_258 = (uint64_t)v0;
}

void sub_189E01008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_189E01744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_189E01A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0296C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  _Unwind_Resume(a1);
}

void sub_189E02E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E02FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E03344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0362C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_189E03A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_189E03BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E03D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E03E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E03FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E041FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E04644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_189E049BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E04E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_189E04FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E05478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Block_object_dispose((const void *)(v22 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_189E05744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E05940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GEOAppleMediaServicesMediaTypeForGeoSubtype(unsigned int a1)
{
  if (a1 > 0x13) {
    return 0;
  }
  else {
    return qword_18A63D128[a1];
  }
}

__CFString *__setUserInfoValueProviderForGEOProtobufSessionErrorDomain_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  if ([a3 isEqualToString:*MEMORY[0x1E4F28568]]
    && (uint64_t v5 = [v4 code], (unint64_t)(v5 - 1) <= 3))
  {
    id v6 = off_1E53E7568[v5 - 1];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void __GEOGetDataSessionProtobufLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "DataSessionProtobuf");
  id v1 = (void *)qword_1EB29FDF0;
  qword_1EB29FDF0 = (uint64_t)v0;
}

_GEOCancelBlock *GEOCancellableForBlock(void *a1)
{
  id v1 = a1;
  id v2 = [_GEOCancelBlock alloc];
  id v3 = v1;
  if (v2)
  {
    v7.receiver = v2;
    v7.super_class = (Class)_GEOCancelBlock;
    id v2 = (_GEOCancelBlock *)objc_msgSendSuper2(&v7, sel_init);
    if (v2)
    {
      uint64_t v4 = [v3 copy];
      id block = v2->_block;
      v2->_id block = (id)v4;
    }
  }

  return v2;
}

double GEOMapRectForMapRegionE7(void *a1)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  double v2 = GEOTilePointForCoordinate((double)(int)[v1 northLatE7] * 0.0000001, (double)(int)objc_msgSend(v1, "westLngE7") * 0.0000001, 20.0);
  double v4 = v3;
  double v5 = GEOTilePointForCoordinate((double)(int)[v1 southLatE7] * 0.0000001, (double)(int)objc_msgSend(v1, "eastLngE7") * 0.0000001, 20.0);
  double v7 = v6;
  if (([v1 hasRectangleVertices] & 1) == 0)
  {
    if (![v1 vertexE7sCount])
    {
      double v19 = INFINITY;
      goto LABEL_33;
    }
    if ([v1 vertexE7sCount])
    {
      unint64_t v8 = 0;
      do
      {
        id v9 = [v1 vertexE7AtIndex:v8];
        [v9 coordinate];
        double v12 = GEOTilePointForCoordinate(v10, v11, 20.0);
        if (v2 >= v12) {
          double v14 = v12;
        }
        else {
          double v14 = v2;
        }
        if (v4 >= v13) {
          double v15 = v13;
        }
        else {
          double v15 = v4;
        }
        if (v5 <= v12) {
          double v16 = v12;
        }
        else {
          double v16 = v5;
        }
        if (v7 <= v13) {
          double v17 = v13;
        }
        else {
          double v17 = v7;
        }
        if (v8) {
          double v4 = v15;
        }
        else {
          double v4 = v13;
        }
        if (v8) {
          double v5 = v16;
        }
        else {
          double v5 = v12;
        }
        if (v8) {
          double v7 = v17;
        }
        else {
          double v7 = v13;
        }
        if (v8) {
          double v2 = v14;
        }
        else {
          double v2 = v12;
        }

        ++v8;
      }
      while (v8 < [v1 vertexE7sCount]);
    }
  }
  double v18 = -0.0;
  if (v2 > v5) {
    double v18 = 268435456.0;
  }
  *(double *)pid_t v21 = v2;
  *(double *)&v21[1] = v4;
  *(double *)&v21[2] = v5 + v18;
  *(double *)&v21[3] = v7;
  double v19 = GEOMapRectBoundingMapPoints((uint64_t)v21, 2);
LABEL_33:

  return v19;
}

GEOMapRegionE7 *GEOMapRegionE7Union(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = v4;
  if (v3)
  {
    if (v4)
    {
      double v6 = GEOMapRectForMapRegionE7(v3);
      double v8 = v7;
      double v10 = v9;
      double v12 = v11;
      double v13 = GEOMapRectForMapRegionE7(v5);
      double v15 = [[GEOMapRegionE7 alloc] initWithMapRect:GEOMapRectUnion(v6, v8, v10, v12, v13, v14)];
    }
    else
    {
      double v15 = (GEOMapRegionE7 *)v3;
    }
  }
  else
  {
    double v15 = (GEOMapRegionE7 *)v4;
  }
  double v16 = v15;

  return v16;
}

void sub_189E08470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E08774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E08A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_189E08EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E08FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E090FC(_Unwind_Exception *a1)
{
  if (!v3) {

  }
  _Unwind_Resume(a1);
}

void sub_189E0919C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)GEORouteHypothesisMonitor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_189E093B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E094D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E09590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E095E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E097D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E09A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E09AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E09BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E09CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E0A05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0A2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0A3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0A828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0AADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E0AF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0B148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0B34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0B480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0B5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E0B72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0B7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E0B984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0BBC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0BC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0BFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0C09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0C1A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0C544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0C718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0C970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0CAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0F734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  MEMORY[0x18C11F580](v17, 0x10A1C401611C0F7);

  _Unwind_Resume(a1);
}

void sub_189E0F90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E0FA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E101D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  MEMORY[0x18C11F580](v32, 0x10E0C4057EA438BLL);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  zilch::Path<std::shared_ptr<geo::MapEdge>>::~Path((uint64_t)&a31);
  std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::~deque[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void sub_189E1042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t zilch::Path<std::shared_ptr<geo::MapEdge>>::~Path(uint64_t a1)
{
  double v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  id v4 = (void **)(a1 + 48);
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](&v4);
  id v4 = (void **)(a1 + 24);
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void *__copy_helper_block_ea8_40c55_ZTSN5zilch4PathINSt3__110shared_ptrIN3geo7MapEdgeEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1;
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__init_with_size[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*>((void *)(a1 + 64), *(void *)(a2 + 64), *(void *)(a2 + 72), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  v3[11] = 0;
  v3[12] = 0;
  v3[13] = 0;
  std::vector<zilch::GeometryPathElement>::__init_with_size[abi:ne180100]<zilch::GeometryPathElement*,zilch::GeometryPathElement*>(v3 + 11, *(void *)(a2 + 88), *(void *)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4));
  v3[14] = 0;
  v3[15] = 0;
  v3 += 14;
  v3[2] = 0;
  return std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__init_with_size[abi:ne180100]<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*,zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*>(v3, *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 4);
}

void sub_189E10588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c55_ZTSN5zilch4PathINSt3__110shared_ptrIN3geo7MapEdgeEEEEE(uint64_t a1)
{
  double v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)(a1 + 88);
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 64);
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void *std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__init_with_size[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    unint64_t result = std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    while (a2 != a3)
    {
      unint64_t result = (void *)std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::construct[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>&>(v7, a2);
      a2 += 72;
      v7 += 72;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_189E1084C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a1);
}

uint64_t std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::construct[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>&>(uint64_t result, uint64_t a2)
{
  *(void *)unint64_t result = &unk_1ED514248;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  *(void *)unint64_t result = &unk_1ED514270;
  uint64_t v2 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void *zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::~RoadPathElement(void *a1)
{
  *a1 = &unk_1ED514270;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::~RoadPathElement(void *a1)
{
  *a1 = &unk_1ED514270;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x18C11F580);
}

uint64_t zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::toString@<X0>(zilch::PathElement *a1@<X0>, void *a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void **__return_ptr))(**((void **)a1 + 3) + 88))(__p);
  if ((v15 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v4, v5);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = zilch::PathElement::controlPointIndex(a1);
  std::stringbuf::str();
  if ((v15 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  snprintf(__str, 0x400uLL, "%lu: RPE(%s)", v6, (const char *)v7);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, __str);
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18C11F4F0](&v13);
}

void sub_189E10C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
}

void std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  id v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 72;
      uint64_t v7 = v4 - 72;
      uint64_t v8 = v4 - 72;
      do
      {
        double v9 = *(void (***)(char *))v8;
        v8 -= 72;
        (*v9)(v7);
        v6 -= 72;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<zilch::GeometryPathElement>::__init_with_size[abi:ne180100]<zilch::GeometryPathElement*,zilch::GeometryPathElement*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<zilch::GeometryPathElement>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<zilch::GeometryPathElement>,zilch::GeometryPathElement*,zilch::GeometryPathElement*,zilch::GeometryPathElement*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_189E10DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<zilch::GeometryPathElement>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = 3 * a2;
  unint64_t result = (char *)operator new(48 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v3];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<zilch::GeometryPathElement>,zilch::GeometryPathElement*,zilch::GeometryPathElement*,zilch::GeometryPathElement*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(void *)uint64_t v7 = &unk_1ED514248;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a1 + v6 + 8);
      *(void *)uint64_t v7 = &unk_1ED514298;
      *(void *)(v7 + 32) = 0;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 24) = 0;
      uint64_t v9 = *(unsigned char **)(a1 + v6 + 24);
      uint64_t v8 = *(unsigned char **)(a1 + v6 + 32);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        std::vector<maps::path_codec::Coordinate>::__vallocate[abi:ne180100]((void *)(a3 + v6 + 24), 0xAAAAAAAAAAAAAAABLL * (v10 >> 2));
        double v11 = *(char **)(a3 + v6 + 32);
        memmove(v11, v9, v10);
        *(void *)(a3 + v6 + 32) = &v11[4 * (v10 >> 2)];
      }
      v6 += 48;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_189E10F6C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v1 + v2 + 24);
  if (v4)
  {
    *(void *)(v1 + v2 + 32) = v4;
    operator delete(v4);
  }
  if (v2)
  {
    uint64_t v5 = v1 - 48;
    do
    {
      (**(void (***)(void))(v5 + v2))();
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 48;
      uint64_t v7 = v4 - 48;
      uint64_t v8 = v4 - 48;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 48;
        (*v9)(v7);
        v6 -= 48;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__init_with_size[abi:ne180100]<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*,zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    unint64_t result = std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_189E110E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        BOOL v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      unsigned __int8 v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::update(unint64_t a1, uint64_t a2, zilch::ControlPoint *this, void *a4, int a5, int a6)
{
  if (*(int *)(a1 + 320) <= 1)
  {
    unint64_t v9 = a1;
    ++*(void *)(a1 + 328);
    if (zilch::ControlPoint::dummy(this))
    {
      BOOL v10 = *(std::__shared_weak_count **)(v9 + 8);
      v102.n128_u64[0] = *(void *)v9;
      if (v10)
      {
        v102.n128_u64[1] = (unint64_t)std::__shared_weak_count::lock(v10);
        if (v102.n128_u64[1]) {
          goto LABEL_137;
        }
      }
      goto LABEL_140;
    }
    uint64_t v11 = *(void *)(v9 + 336);
    *(void *)(v9 + 336) = 0;
    if (*(void *)(v9 + 104) == *(void *)(v9 + 112))
    {
      uint64_t v12 = zilch::ControlPoint::position(this);
      int v13 = *(_DWORD *)(v12 + 8);
      *(void *)(v9 + 32) = *(void *)v12;
      *(_DWORD *)(v9 + 40) = v13;
    }
    uint64_t v92 = v9;
    if (a5)
    {
      uint64_t v14 = zilch::ControlPoint::position(this);
      int v15 = *(_DWORD *)(v14 + 8);
      *(void *)(v9 + 44) = *(void *)v14;
      *(_DWORD *)(v9 + 52) = v15;
      uint64_t v16 = *(void *)(v9 + 112);
      if (*(void *)(v9 + 104) != v16 && !*(_DWORD *)(v16 - 16))
      {
        zilch::GeoPolyline::walk((zilch::GeoPolyline *)(*(void *)(v9 + 56)+ 72* (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v9 + 64) - *(void *)(v9 + 56)) >> 3)- 1)+ 40), (zilch::GeoPolyline::Walker *)v107);
        __int16 v106 = zilch::ControlPoint::heading(this);
        uint64_t v17 = (const zilch::GeoCoordinates *)zilch::ControlPoint::position(this);
        if (zilch::GeoPolyline::Walker::advanceTo((zilch::GeoPolyline::Walker *)v107, v17, (const zilch::Angle *)&v106)
          && !zilch::GeoPolyline::Walker::done((unint64_t **)v107))
        {
          operator new();
        }
      }
      id v84 = *(std::__shared_weak_count **)(v9 + 8);
      v102.n128_u64[0] = *(void *)v9;
      if (v84)
      {
        v102.n128_u64[1] = (unint64_t)std::__shared_weak_count::lock(v84);
        if (v102.n128_u64[1])
        {
LABEL_137:
          std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(a4, &v102);
          uint64_t v66 = (std::__shared_weak_count *)v102.n128_u64[1];
          if (!v102.n128_u64[1]) {
            return;
          }
          goto LABEL_138;
        }
      }
LABEL_140:
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    if (*(void *)(v9 + 104) != *(void *)(v9 + 112))
    {
      if (a6 != 1)
      {
        zilch::GeoPolyline::walk((zilch::GeoPolyline *)(v9 + 152), (zilch::GeoPolyline::Walker *)&v102);
        LOWORD(v105) = zilch::ControlPoint::heading(this);
        uint64_t v63 = (const zilch::GeoCoordinates *)zilch::ControlPoint::position(this);
        zilch::GeoPolyline::Walker::advanceTo((zilch::GeoPolyline::Walker *)&v102, v63, (const zilch::Angle *)&v105);
        unsigned __int16 v64 = zilch::GeoPolyline::Walker::heading((uint64_t **)&v102);
        double Probability = zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability((double *)v9, this, v9 + 152, v64);
        zilch::Probability::Probability(&v97, 0.1);
        if (!zilch::Probability::operator>=(&Probability, v97)) {
          return;
        }
        unint64_t v65 = *(std::__shared_weak_count **)(v9 + 8);
        v107[0].n128_u64[0] = *(void *)v9;
        if (v65)
        {
          v107[0].n128_u64[1] = (unint64_t)std::__shared_weak_count::lock(v65);
          if (v107[0].n128_u64[1])
          {
            std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(a4, v107);
            uint64_t v66 = (std::__shared_weak_count *)v107[0].n128_u64[1];
            if (!v107[0].n128_u64[1]) {
              return;
            }
LABEL_138:
            std::__shared_weak_count::__release_shared[abi:ne180100](v66);
            return;
          }
        }
        goto LABEL_140;
      }
      uint64_t v90 = v11;
      if (*(void *)(v9 + 216) == *(void *)(v9 + 208))
      {
        double v19 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        unint64_t v18 = 0;
        double v19 = 0;
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        do
        {
          uint64_t v22 = *(void *)(v9 + 232);
          __int16 v23 = zilch::ControlPoint::heading(this);
          int v24 = zilch::ControlPoint::formOfWay(this);
          int v25 = zilch::ControlPoint::functionalClass(this);
          unsigned __int16 StartHeading = zilch::GeoPolyline::getStartHeading((zilch::GeoPolyline *)(v22 + 40 * v21));
          v107[0].n128_u64[0] = zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability((double *)v92, v23, v24, v25, StartHeading, *(_DWORD *)(v22 + 40 * v21 + 24), *(_DWORD *)(v22 + 40 * v21 + 28));
          uint64_t v27 = *(void *)(v92 + 208);
          __int16 v28 = *(std::__shared_weak_count **)(v92 + 144);
          v99[1] = *(double *)(v92 + 136);
          uint64_t v100 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(__n128 *__return_ptr))(*(void *)a2 + 24))(&v102);
          uint64_t v29 = *(void *)(v27 + 16 * v21);
          unint64_t v30 = v102.n128_u64[0];
          if (v102.n128_u64[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.n128_u64[1]);
          }
          if (v100) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v100);
          }
          if (v29 == v30)
          {
            zilch::Probability::Probability(v99, 0.9);
            v107[0].n128_u64[0] = zilch::Probability::operator*(v107[0].n128_f64, v99[0]);
          }
          zilch::Probability::Probability(&v98, 0.1);
          if (zilch::Probability::operator>=(v107[0].n128_f64, v98))
          {
            unint64_t v31 = v107[0].n128_u64[0];
            unint64_t v9 = v92;
            if ((unint64_t)v19 >= v18)
            {
              uint64_t v32 = ((char *)v19 - (char *)v20) >> 4;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 60) {
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v18 - (void)v20) >> 3 > v33) {
                unint64_t v33 = (uint64_t)(v18 - (void)v20) >> 3;
              }
              if (v18 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34) {
                unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v34);
              }
              else {
                uint64_t v35 = 0;
              }
              unint64_t v36 = (unint64_t *)(v34 + 16 * v32);
              *unint64_t v36 = v21;
              v36[1] = v31;
              if (v19 == v20)
              {
                unsigned int v38 = (unint64_t *)(v34 + 16 * v32);
              }
              else
              {
                unint64_t v37 = v34 + 16 * v32;
                do
                {
                  unsigned int v38 = (unint64_t *)(v37 - 16);
                  *(_OWORD *)(v37 - 16) = *((_OWORD *)v19 - 1);
                  v19 -= 2;
                  v37 -= 16;
                }
                while (v19 != v20);
              }
              unint64_t v18 = v34 + 16 * v35;
              double v19 = v36 + 2;
              if (v20) {
                operator delete(v20);
              }
              uint64_t v20 = v38;
            }
            else
            {
              *double v19 = v21;
              v19[1] = v31;
              v19 += 2;
            }
          }
          else
          {
            unint64_t v9 = v92;
          }
          ++v21;
        }
        while (v21 < (uint64_t)(*(void *)(v9 + 216) - *(void *)(v9 + 208)) >> 4);
      }
      uint64_t v72 = (char *)v19 - (char *)v20;
      if ((unint64_t)((char *)v19 - (char *)v20) > 0x10) {
        std::sort[abi:ne180100]<std::__wrap_iter<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>>((double *)v20, (double *)v19);
      }
      if (v19 == v20)
      {
        --*(void *)(v9 + 328);
        *(void *)(v9 + 336) = v90;
        zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::extend(v9, a2, a4);
        if (!v20) {
          return;
        }
      }
      else
      {
        uint64_t v73 = v72 >> 4;
        BOOL v74 = v72 >> 4 != 0;
        uint64_t v75 = (v72 >> 4) - 1;
        if (v75 != 0 && v74) {
          uint64_t v76 = v73;
        }
        else {
          uint64_t v76 = 1;
        }
        __int16 v77 = (double *)(v20 + 1);
        do
        {
          uint64_t v78 = *((void *)v77 - 1);
          long long v79 = *(_OWORD *)(*(void *)(v9 + 208) + 16 * v78);
          int v80 = *(std::__shared_weak_count **)(*(void *)(v9 + 208) + 16 * v78 + 8);
          if (*((void *)&v79 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v79 + 1) + 8), 1uLL, memory_order_relaxed);
            int v81 = (uint64_t *)(*(void *)(v9 + 232) + 40 * *((void *)v77 - 1));
            double v82 = *v77;
            if (v75) {
              goto LABEL_121;
            }
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v79 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          else
          {
            int v81 = (uint64_t *)(*(void *)(v9 + 232) + 40 * v78);
            double v82 = *v77;
            if (v75) {
LABEL_121:
            }
              operator new();
          }
          zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(v92, v79, v80, v81, a2, v82);
          if (v80) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v80);
          }
          id v83 = *(std::__shared_weak_count **)(v92 + 8);
          v102.n128_u64[0] = *(void *)v92;
          if (!v83 || (v102.n128_u64[1] = (unint64_t)std::__shared_weak_count::lock(v83)) == 0) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(a4, &v102);
          if (v102.n128_u64[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.n128_u64[1]);
          }
          if (v80) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v80);
          }
          --v75;
          v77 += 2;
          --v76;
          unint64_t v9 = v92;
        }
        while (v76);
      }
      unint64_t v71 = (double *)v20;
LABEL_134:
      operator delete(v71);
      return;
    }
    char v85 = (void *)(v9 + 256);
    uint64_t v39 = *(void *)(v9 + 256);
    uint64_t v40 = *(void *)(v9 + 264);
    if (v40 != v39)
    {
      do
      {
        unint64_t v41 = *(std::__shared_weak_count **)(v40 - 8);
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
        v40 -= 16;
      }
      while (v40 != v39);
      *(void *)(v9 + 264) = v39;
    }
    LOWORD(v101) = zilch::ControlPoint::heading(this);
    zilch::ControlPoint::position(this);
    (**(void (***)(void))a2)();
    uint64_t v42 = *(void *)(v9 + 256);
    if (*(void *)(v9 + 264) == v42)
    {
      __p = 0;
      unsigned int v43 = 0;
    }
    else
    {
      __p = 0;
      unsigned int v43 = 0;
      unint64_t v44 = 0;
      unint64_t v45 = 0;
      do
      {
        long long v46 = *(_OWORD *)(v42 + 16 * v45);
        long long v87 = v46;
        id v47 = *(std::__shared_weak_count **)(v42 + 16 * v45 + 8);
        if (*((void *)&v46 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road((uint64_t)&v102);
        long long v96 = v87;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, long long *, __n128 *))(*(void *)a2 + 8))(a2, &v96, &v102);
        if (*((void *)&v96 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v96 + 1));
        }
        zilch::GeoPolyline::walk((zilch::GeoPolyline *)&v102, (zilch::GeoPolyline::Walker *)v107);
        BOOL v48 = (const zilch::GeoCoordinates *)zilch::ControlPoint::position(this);
        zilch::GeoPolyline::Walker::advanceTo((zilch::GeoPolyline::Walker *)v107, v48, (const zilch::Angle *)&v101);
        unsigned __int16 v49 = zilch::GeoPolyline::Walker::heading((uint64_t **)v107);
        double v105 = zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability((double *)v92, this, (uint64_t)&v102, v49);
        double Probability = COERCE_DOUBLE(zilch::GeoPolyline::Walker::position((zilch::GeoPolyline::Walker *)v107));
        LODWORD(v104) = v50;
        BOOL v51 = (const zilch::GeoCoordinates *)zilch::ControlPoint::position(this);
        unsigned int v52 = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&Probability, v51);
        zilch::Probability::Probability(&v95, 0.1);
        if (zilch::Probability::operator>=(&v105, v95))
        {
          zilch::Probability::Probability(&v94, (double)v52 * 0.05);
          double v53 = zilch::Probability::operator-(&v105, v94);
          double v54 = v53;
          if ((unint64_t)v43 >= v44)
          {
            uint64_t v55 = __p;
            uint64_t v56 = ((char *)v43 - (char *)__p) >> 4;
            unint64_t v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 60) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v44 - (void)__p) >> 3 > v57) {
              unint64_t v57 = (uint64_t)(v44 - (void)__p) >> 3;
            }
            if (v44 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v58)
            {
              unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v58);
              uint64_t v55 = __p;
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v60 = (unint64_t *)(v58 + 16 * v56);
            *uint64_t v60 = v45;
            *((double *)v60 + 1) = v54;
            if (v43 == v55)
            {
              uint64_t v62 = (double *)(v58 + 16 * v56);
            }
            else
            {
              unint64_t v61 = v58 + 16 * v56;
              do
              {
                uint64_t v62 = (double *)(v61 - 16);
                *(_OWORD *)(v61 - 16) = *((_OWORD *)v43 - 1);
                v43 -= 2;
                v61 -= 16;
              }
              while (v43 != v55);
            }
            unint64_t v44 = v58 + 16 * v59;
            unsigned int v43 = (double *)(v60 + 2);
            if (v55) {
              operator delete(v55);
            }
            __p = v62;
          }
          else
          {
            *(void *)unsigned int v43 = v45;
            v43[1] = v53;
            v43 += 2;
          }
        }
        if (v102.n128_u64[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.n128_u64[1]);
        }
        if (v47) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        }
        ++v45;
        uint64_t v42 = *(void *)(v92 + 256);
      }
      while (v45 < (*(void *)(v92 + 264) - v42) >> 4);
    }
    if ((unint64_t)((char *)v43 - (char *)__p) > 0x10)
    {
      unint64_t v67 = 126 - 2 * __clz(((char *)v43 - (char *)__p) >> 4);
      if (v43 == __p) {
        uint64_t v68 = 0;
      }
      else {
        uint64_t v68 = v67;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(__p, v43, v68, 1);
    }
    if (v43 != __p)
    {
      long long v69 = *(_OWORD *)(*v85 + 16 * *(void *)__p);
      long long v88 = v69;
      uint64_t v70 = *(void *)(*v85 + 16 * *(void *)__p + 8);
      if (*((void *)&v69 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road((uint64_t)&v102);
      long long v93 = v88;
      if (v70) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, long long *, __n128 *))(*(void *)a2 + 8))(a2, &v93, &v102);
      if (*((void *)&v93 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v93 + 1));
      }
      operator new();
    }
    unint64_t v71 = __p;
    if (__p) {
      goto LABEL_134;
    }
  }
}

void sub_189E123A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  unint64_t v45 = *(std::__shared_weak_count **)(v43 - 232);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  long long v46 = *(std::__shared_weak_count **)(v43 - 176);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  _Unwind_Resume(exception_object);
}

uint64_t zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road(uint64_t a1)
{
  uint64_t v2 = zilch::GeoPolyline::GeoPolyline(a1);
  zilch::FormOfWay::FormOfWay((_DWORD *)(v2 + 24), 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)(a1 + 28), 9);
  *(void *)(a1 + 32) = -1;
  return a1;
}

void sub_189E1261C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::shared_ptr[abi:ne180100]<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_189E1270C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>> *,std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::__shared_ptr_default_delete<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>,std::allocator<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11F580);
}

uint64_t std::__shared_ptr_pointer<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>> *,std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::__shared_ptr_default_delete<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>,std::allocator<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::~PathHypothesis(result);
    JUMPOUT(0x18C11F580);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>> *,std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::__shared_ptr_default_delete<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>,std::allocator<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::~PathHypothesis(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::~__hash_table(a1 + 280);
  uint64_t v7 = (void **)(a1 + 256);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)(a1 + 232);
  std::vector<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)(a1 + 208);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 144);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(void *)(a1 + 112) = v4;
    operator delete(v4);
  }
  uint64_t v7 = (void **)(a1 + 80);
  std::vector<zilch::GeometryPathElement>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)(a1 + 56);
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::vector<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 4);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::unique_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::~PathHypothesis(result);
    JUMPOUT(0x18C11F580);
  }
  return result;
}

void std::sort[abi:ne180100]<std::__wrap_iter<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>>(double *a1, double *a2)
{
  unint64_t v2 = 126 - 2 * __clz(((char *)a2 - (char *)a1) >> 4);
  if (a2 == a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(a1, a2, v3, 1);
}

void zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t a5, double a6)
{
  v7[0] = a2;
  v7[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(a1, (uint64_t)v7, a4, (uint64_t)a4, a5, a6);
  if (a3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
}

void sub_189E12A70(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::extend(unint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112)) {
    return;
  }
  uint64_t v3 = a1;
  if (*(int *)(a1 + 320) > 1) {
    return;
  }
  unint64_t v4 = *(void *)(a1 + 336) + *(unsigned int *)(a1 + 188);
  *(void *)(a1 + 336) = v4;
  if (v4 > 0x5DC0) {
    return;
  }
  uint64_t v6 = *(void *)(a1 + 208);
  uint64_t v5 = *(void *)(a1 + 216);
  if (v5 == v6) {
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v75 = (int *)(a1 + 176);
  uint64_t v70 = (zilch::GeoPolyline *)(a1 + 152);
  unint64_t v72 = 0;
  uint64_t v73 = (zilch::FunctionalClass *)(a1 + 180);
  do
  {
    BOOL v10 = (uint64_t *)(v6 + 16 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = (std::__shared_weak_count *)v10[1];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = *(void *)(v3 + 208);
      uint64_t v5 = *(void *)(v3 + 216);
    }
    uint64_t v13 = (v5 - v6) >> 4;
    if (v13 == 1) {
      goto LABEL_63;
    }
    uint64_t v74 = *(void *)(v3 + 232);
    if (v13 != 2) {
      goto LABEL_17;
    }
    uint64_t v14 = *(std::__shared_weak_count **)(v3 + 144);
    uint64_t v90 = *(void *)(v3 + 136);
    id v91 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(__n128 *__return_ptr))(*(void *)a2 + 24))(&v92);
    uint64_t v15 = *(void *)(v6 + 16 * (1 - v9));
    unint64_t v16 = v92.n128_u64[0];
    if (v92.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.n128_u64[1]);
    }
    if (v91) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v91);
    }
    if (v15 == v16)
    {
      uint64_t v55 = *(std::__shared_weak_count **)(v3 + 144);
      uint64_t v88 = *(void *)(v3 + 136);
      char v89 = v55;
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(__n128 *__return_ptr))(*(void *)a2 + 24))(&v92);
      unint64_t v56 = v92.n128_u64[0];
      if (v92.n128_u64[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.n128_u64[1]);
      }
      a1 = (unint64_t)v89;
      if (v89) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v89);
      }
      if (v9) {
        BOOL v57 = v11 == v56;
      }
      else {
        BOOL v57 = 0;
      }
      int v44 = !v57;
      if (v12) {
        goto LABEL_64;
      }
    }
    else
    {
LABEL_17:
      zilch::FunctionalClass::FunctionalClass(&v87, 9);
      if (!zilch::FunctionalClass::operator!=(v73, v87)) {
        goto LABEL_127;
      }
      zilch::FunctionalClass::FunctionalClass(&v86, 9);
      if (!zilch::FunctionalClass::operator!=((_DWORD *)(v74 + 40 * v9 + 28), v86)) {
        goto LABEL_127;
      }
      int v17 = zilch::FunctionalClass::toInteger(v73);
      a1 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)(v74 + 40 * v9 + 28));
      unsigned int v18 = v17 - a1;
      if (v17 - (int)a1 < 0) {
        unsigned int v18 = a1 - v17;
      }
      if (v18 <= 1)
      {
LABEL_127:
        zilch::FormOfWay::FormOfWay(&v85, 0);
        if (!zilch::FormOfWay::operator!=(v75, v85)
          || (zilch::FormOfWay::FormOfWay(&v84, 0), !zilch::FormOfWay::operator!=((_DWORD *)(v74 + 40 * v9 + 24), v84))
          || (a1 = zilch::FormOfWay::operator!=(v75, *(_DWORD *)(v74 + 40 * v9 + 24)), (a1 & 1) == 0))
        {
          zilch::FormOfWay::FormOfWay(&v83, 1);
          if (zilch::FormOfWay::operator==(v75, v83))
          {
            zilch::FormOfWay::FormOfWay(&v82, 1);
            a1 = zilch::FormOfWay::operator==((_DWORD *)(v74 + 40 * v9 + 24), v82);
            if (a1)
            {
              uint64_t v20 = *(void *)(v3 + 208);
              uint64_t v19 = *(void *)(v3 + 216);
              if (v19 != v20)
              {
                uint64_t v21 = 0;
                unint64_t v22 = 0;
                uint64_t v23 = 24;
                do
                {
                  if (*(void *)(v20 + v21) != v11)
                  {
                    int v24 = *(std::__shared_weak_count **)(v3 + 144);
                    uint64_t v88 = *(void *)(v3 + 136);
                    char v89 = v24;
                    if (v24) {
                      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    (*(void (**)(__n128 *__return_ptr))(*(void *)a2 + 24))(&v92);
                    if (*(void *)(v20 + v21) == v92.n128_u64[0])
                    {
                      BOOL v26 = 0;
                    }
                    else
                    {
                      uint64_t v25 = *(void *)(v3 + 232);
                      zilch::FormOfWay::FormOfWay(&v81, 10);
                      BOOL v26 = zilch::FormOfWay::operator!=((_DWORD *)(v25 + v23), v81);
                    }
                    if (v92.n128_u64[1]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.n128_u64[1]);
                    }
                    a1 = (unint64_t)v89;
                    if (v89) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v89);
                    }
                    if (v26) {
                      goto LABEL_43;
                    }
                    uint64_t v20 = *(void *)(v3 + 208);
                    uint64_t v19 = *(void *)(v3 + 216);
                  }
                  ++v22;
                  v23 += 40;
                  v21 += 16;
                }
                while (v22 < (v19 - v20) >> 4);
              }
LABEL_63:
              int v44 = 1;
              if (!v12) {
                goto LABEL_65;
              }
LABEL_64:
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
              goto LABEL_65;
            }
          }
LABEL_43:
          zilch::FormOfWay::FormOfWay(&v92, 4);
          if (zilch::FormOfWay::operator==(v75, v92.n128_i32[0]))
          {
            zilch::FormOfWay::FormOfWay(&v80, 4);
            a1 = zilch::FormOfWay::operator==((_DWORD *)(v74 + 40 * v9 + 24), v80);
            if (a1)
            {
              uint64_t v28 = *(void *)(v3 + 208);
              uint64_t v27 = *(void *)(v3 + 216);
              if (v27 != v28)
              {
                uint64_t v29 = 0;
                unint64_t v30 = 0;
                uint64_t v31 = 24;
                do
                {
                  if (*(void *)(v28 + v29) != v11)
                  {
                    uint64_t v32 = *(void *)(v3 + 232);
                    zilch::FormOfWay::FormOfWay(&v79, 4);
                    a1 = zilch::FormOfWay::operator==((_DWORD *)(v32 + v31), v79);
                    if (a1) {
                      goto LABEL_52;
                    }
                    uint64_t v28 = *(void *)(v3 + 208);
                    uint64_t v27 = *(void *)(v3 + 216);
                  }
                  ++v30;
                  v31 += 40;
                  v29 += 16;
                }
                while (v30 < (v27 - v28) >> 4);
              }
              goto LABEL_63;
            }
          }
LABEL_52:
          unsigned __int16 EndHeading = zilch::GeoPolyline::getEndHeading(v70);
          __int16 StartHeading = zilch::GeoPolyline::getStartHeading((zilch::GeoPolyline *)(v74 + 40 * v9));
          unsigned __int16 v34 = EndHeading;
          if (zilch::Angle::degreesFrom(&StartHeading, EndHeading, v35) <= 20.0)
          {
            uint64_t v37 = *(void *)(v3 + 208);
            uint64_t v36 = *(void *)(v3 + 216);
            if (v36 == v37) {
              goto LABEL_63;
            }
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            double v41 = 360.0;
            do
            {
              if (*(void *)(v37 + v38) != v11)
              {
                __int16 v77 = zilch::GeoPolyline::getStartHeading((zilch::GeoPolyline *)(*(void *)(v3 + 232) + v39));
                double v43 = zilch::Angle::degreesFrom(&v77, v34, v42);
                if (v43 < v41) {
                  double v41 = v43;
                }
                uint64_t v37 = *(void *)(v3 + 208);
                uint64_t v36 = *(void *)(v3 + 216);
              }
              ++v40;
              v39 += 40;
              v38 += 16;
            }
            while (v40 < (v36 - v37) >> 4);
            if (v41 >= 25.0) {
              goto LABEL_63;
            }
          }
        }
      }
      int v44 = 0;
      if (v12) {
        goto LABEL_64;
      }
    }
LABEL_65:
    if (v44)
    {
      unint64_t v45 = (zilch::Angle *)zilch::Angle::zero((zilch::Angle *)a1);
      __int16 v46 = (__int16)v45;
      int v47 = *v75;
      int v48 = *(_DWORD *)v73;
      unsigned __int16 v49 = zilch::Angle::zero(v45);
      double Probability = zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability((double *)v3, v46, v47, v48, v49, *(_DWORD *)(*(void *)(v3 + 232) + 40 * v9 + 24), *(_DWORD *)(*(void *)(v3 + 232) + 40 * v9 + 28));
      double v51 = Probability;
      if ((unint64_t)v7 >= v72)
      {
        uint64_t v52 = ((char *)v7 - (char *)v8) >> 4;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 60) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v72 - (void)v8) >> 3 > v53) {
          unint64_t v53 = (uint64_t)(v72 - (void)v8) >> 3;
        }
        if (v72 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
          a1 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          a1 = v53;
        }
        if (a1) {
          a1 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(a1);
        }
        else {
          uint64_t v54 = 0;
        }
        unint64_t v58 = (unint64_t *)(a1 + 16 * v52);
        *unint64_t v58 = v9;
        *((double *)v58 + 1) = v51;
        if (v7 == v8)
        {
          uint64_t v60 = (double *)(a1 + 16 * v52);
        }
        else
        {
          unint64_t v59 = a1 + 16 * v52;
          do
          {
            uint64_t v60 = (double *)(v59 - 16);
            *(_OWORD *)(v59 - 16) = *((_OWORD *)v7 - 1);
            v7 -= 2;
            v59 -= 16;
          }
          while (v7 != v8);
        }
        unint64_t v72 = a1 + 16 * v54;
        uint64_t v7 = (double *)(v58 + 2);
        if (v8) {
          operator delete(v8);
        }
        uint64_t v8 = v60;
      }
      else
      {
        *(void *)uint64_t v7 = v9;
        v7[1] = Probability;
        v7 += 2;
      }
    }
    ++v9;
    uint64_t v6 = *(void *)(v3 + 208);
    uint64_t v5 = *(void *)(v3 + 216);
  }
  while (v9 < (v5 - v6) >> 4);
  if (v8 == v7)
  {
    if (v7) {
      goto LABEL_121;
    }
  }
  else
  {
    unint64_t v61 = ((char *)v7 - (char *)v8) >> 4;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(v8, v7, 126 - 2 * __clz(v61), 1);
    unint64_t v62 = v61 - 1;
    if (v61 <= 1) {
      uint64_t v63 = 1;
    }
    else {
      uint64_t v63 = ((char *)v7 - (char *)v8) >> 4;
    }
    unsigned __int16 v64 = v8 + 1;
    do
    {
      uint64_t v65 = *((void *)v64 - 1);
      long long v66 = *(_OWORD *)(*(void *)(v3 + 208) + 16 * v65);
      unint64_t v67 = *(std::__shared_weak_count **)(*(void *)(v3 + 208) + 16 * v65 + 8);
      if (*((void *)&v66 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v66 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v68 = (uint64_t *)(*(void *)(v3 + 232) + 40 * *((void *)v64 - 1));
        if (v62) {
          goto LABEL_109;
        }
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v66 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v68 = (uint64_t *)(*(void *)(v3 + 232) + 40 * v65);
        if (v62) {
LABEL_109:
        }
          operator new();
      }
      zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(v3, v66, *((std::__shared_weak_count **)&v66 + 1), v68, a2, *v64);
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      long long v69 = *(std::__shared_weak_count **)(v3 + 8);
      v92.n128_u64[0] = *(void *)v3;
      if (!v69 || (v92.n128_u64[1] = (unint64_t)std::__shared_weak_count::lock(v69)) == 0) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(a3, &v92);
      if (v92.n128_u64[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.n128_u64[1]);
      }
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      --v62;
      v64 += 2;
      --v63;
    }
    while (v63);
    uint64_t v7 = v8;
LABEL_121:
    operator delete(v7);
  }
}

void sub_189E1329C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

double zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability(double *a1, zilch::ControlPoint *this, uint64_t a3, unsigned __int16 a4)
{
  __int16 v8 = zilch::ControlPoint::heading(this);
  int v9 = zilch::ControlPoint::formOfWay(this);
  int v10 = zilch::ControlPoint::functionalClass(this);
  int v11 = *(_DWORD *)(a3 + 24);
  int v12 = *(_DWORD *)(a3 + 28);

  return zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability(a1, v8, v9, v10, a4, v11, v12);
}

__n128 std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v38);
      unint64_t v40 = &v39[8 * (v38 >> 2)];
      double v42 = &v39[8 * v41];
      double v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        __int16 v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)__int16 v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    int v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  uint64_t v21 = (char *)*a1;
  unint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    uint64_t v25 = operator new(0x1000uLL);
    BOOL v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      double v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v49);
      unint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      unint64_t v53 = (uint64_t *)a1[1];
      uint64_t v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        uint64_t v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        BOOL v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)BOOL v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      unint64_t v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        unint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v82);
      unint64_t v40 = &v39[8 * (v82 >> 2)];
      double v42 = &v39[8 * v83];
      int v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        int v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)int v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      int v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v28);
  uint64_t v31 = v30;
  uint64_t v32 = operator new(0x1000uLL);
  unint64_t v33 = &v29[8 * v23];
  unsigned __int16 v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      unint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v61);
      unint64_t v33 = &v62[8 * (v61 >> 2)];
      unsigned __int16 v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      uint64_t v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)unint64_t v33 = v32;
  unsigned __int16 v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        unint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v70);
        uint64_t v73 = v71;
        unint64_t v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        unsigned __int16 v64 = v33;
        if (!v74)
        {
          unsigned __int16 v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          __int16 v77 = v33;
          uint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)__int16 v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        unsigned __int16 v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        unint64_t v33 = &v29[8 * (v67 >> 1)];
        long long v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          long long v69 = v64;
        }
        unsigned __int16 v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  int v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_189E138D4(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

uint64_t zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::RoadPathElement(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = zilch::PathElement::PathElement(a1, 0, a4);
  *(void *)uint64_t result = &unk_1ED514270;
  uint64_t v7 = a2[1];
  *(void *)(result + 24) = *a2;
  *(void *)(result + 32) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a3 + 8);
  *(void *)(result + 40) = *(void *)a3;
  *(void *)(result + 48) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 56) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(result + 64) = 0;
  return result;
}

double zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::getProbability(double *a1, __int16 a2, int a3, int a4, unsigned __int16 a5, int a6, int a7)
{
  __int16 v25 = a2;
  int v23 = a4;
  int v24 = a3;
  int v21 = a7;
  int v22 = a6;
  double v26 = zilch::Probability::one((zilch::Probability *)a1);
  double v9 = zilch::Angle::degreesFrom(&v25, a5, v26);
  zilch::Probability::Probability(&v20, fmax(v9 / a1[3] * (v9 / a1[3]) * -0.9 + 1.0, 0.0));
  zilch::Probability::operator*=(&v26, v20);
  zilch::FormOfWay::FormOfWay(&v19, 0);
  if (zilch::FormOfWay::operator!=(&v24, v19))
  {
    zilch::FormOfWay::FormOfWay(&v18, 0);
    if (zilch::FormOfWay::operator!=(&v22, v18) && zilch::FormOfWay::operator!=(&v24, v22))
    {
      zilch::Probability::Probability(&v17, 0.5);
      zilch::Probability::operator*=(&v26, v17);
    }
  }
  zilch::FunctionalClass::FunctionalClass(&v16, 9);
  if (zilch::FunctionalClass::operator!=(&v23, v16))
  {
    zilch::FunctionalClass::FunctionalClass(&v15, 9);
    if (zilch::FunctionalClass::operator!=(&v21, v15))
    {
      int v10 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v23);
      int v11 = v10 - zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v21);
      if (v11 < 0) {
        int v11 = -v11;
      }
      double v12 = exp2(-(double)v11);
      zilch::Probability::Probability(&v14, v12);
      zilch::Probability::operator*=(&v26, v14);
    }
  }
  return v26;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(double *a1, double *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v80 = a2 - 2;
    int v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (zilch::Probability::operator<(a2 - 1, a1[1]))
                {
                  long long v83 = *(_OWORD *)a1;
                  *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
                  *((_OWORD *)a2 - 1) = v83;
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, v80);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4, (uint64_t)v80);
                break;
              case 5:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4, (uint64_t)(a1 + 6), (uint64_t)v80);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            if (a4)
            {
              if (a1 != a2)
              {
                uint64_t v39 = a1 + 2;
                if (a1 + 2 != a2)
                {
                  uint64_t v40 = 0;
                  uint64_t v41 = a1;
                  do
                  {
                    double v42 = v41[1];
                    double v43 = v41 + 3;
                    uint64_t v41 = v39;
                    if (zilch::Probability::operator<(v43, v42))
                    {
                      long long v83 = *(_OWORD *)v41;
                      uint64_t v44 = v40;
                      while (1)
                      {
                        uint64_t v45 = (double *)((char *)a1 + v44);
                        *(_OWORD *)((char *)a1 + v44 + 16) = *(_OWORD *)((char *)a1 + v44);
                        if (!v44) {
                          break;
                        }
                        v44 -= 16;
                        if (!zilch::Probability::operator<((double *)&v83 + 1, *(v45 - 1)))
                        {
                          __int16 v46 = (double *)((char *)a1 + v44 + 16);
                          goto LABEL_75;
                        }
                      }
                      __int16 v46 = a1;
LABEL_75:
                      *(_OWORD *)__int16 v46 = v83;
                    }
                    uint64_t v39 = v41 + 2;
                    v40 += 16;
                  }
                  while (v41 + 2 != a2);
                }
              }
            }
            else if (a1 != a2)
            {
              for (uint64_t i = a1 + 2; a1 + 2 != a2; uint64_t i = a1 + 2)
              {
                double v75 = a1[1];
                uint64_t v76 = a1 + 3;
                a1 = i;
                if (zilch::Probability::operator<(v76, v75))
                {
                  long long v83 = *(_OWORD *)a1;
                  __int16 v77 = a1;
                  do
                  {
                    uint64_t v78 = v77 - 2;
                    *(_OWORD *)__int16 v77 = *((_OWORD *)v77 - 1);
                    BOOL v79 = zilch::Probability::operator<((double *)&v83 + 1, *(v77 - 3));
                    __int16 v77 = v78;
                  }
                  while (v79);
                  *(_OWORD *)uint64_t v78 = v83;
                }
              }
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v47 = (unint64_t)(v12 - 2) >> 1;
              int64_t v48 = v47;
              do
              {
                int64_t v49 = v48;
                if (v47 >= v48)
                {
                  uint64_t v50 = (2 * v48) | 1;
                  double v51 = &a1[2 * v50];
                  if (2 * v48 + 2 < v12)
                  {
                    BOOL v52 = zilch::Probability::operator<(v51 + 1, v51[3]);
                    v51 += 2 * v52;
                    if (v52) {
                      uint64_t v50 = 2 * v49 + 2;
                    }
                  }
                  unint64_t v53 = &a1[2 * v49];
                  if (!zilch::Probability::operator<(v51 + 1, v53[1]))
                  {
                    uint64_t v81 = *(void *)v53;
                    double v54 = v53[1];
                    do
                    {
                      uint64_t v55 = v53;
                      unint64_t v53 = v51;
                      *(_OWORD *)uint64_t v55 = *(_OWORD *)v51;
                      if (v47 < v50) {
                        break;
                      }
                      uint64_t v56 = (2 * v50) | 1;
                      double v51 = &a1[2 * v56];
                      uint64_t v57 = 2 * v50 + 2;
                      if (v57 < v12)
                      {
                        BOOL v58 = zilch::Probability::operator<(v51 + 1, v51[3]);
                        v51 += 2 * v58;
                        if (v58) {
                          uint64_t v56 = v57;
                        }
                      }
                      uint64_t v50 = v56;
                    }
                    while (!zilch::Probability::operator<(v51 + 1, v54));
                    *(void *)unint64_t v53 = v81;
                    v53[1] = v54;
                  }
                }
                int64_t v48 = v49 - 1;
              }
              while (v49);
              uint64_t v59 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v60 = 0;
                long long v83 = *(_OWORD *)a1;
                uint64_t v61 = v59 - 2;
                if (v59 < 2) {
                  uint64_t v61 = v59 - 1;
                }
                uint64_t v62 = v61 >> 1;
                uint64_t v63 = a1;
                do
                {
                  unsigned __int16 v64 = &v63[2 * v60 + 2];
                  uint64_t v65 = (2 * v60) | 1;
                  uint64_t v66 = 2 * v60 + 2;
                  if (v66 < v59)
                  {
                    BOOL v67 = zilch::Probability::operator<(v64 + 1, v64[3]);
                    v64 += 2 * v67;
                    if (v67) {
                      uint64_t v65 = v66;
                    }
                  }
                  *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
                  uint64_t v63 = v64;
                  uint64_t v60 = v65;
                }
                while (v65 <= v62);
                a2 -= 2;
                if (v64 == a2)
                {
                  *(_OWORD *)unsigned __int16 v64 = v83;
                }
                else
                {
                  *(_OWORD *)unsigned __int16 v64 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v83;
                  uint64_t v68 = (char *)v64 - (char *)a1 + 16;
                  if (v68 >= 17)
                  {
                    unint64_t v69 = (((unint64_t)v68 >> 4) - 2) >> 1;
                    if (zilch::Probability::operator<(&a1[2 * v69 + 1], v64[1]))
                    {
                      uint64_t v70 = *(void *)v64;
                      double v71 = v64[1];
                      do
                      {
                        uint64_t v72 = v64;
                        unsigned __int16 v64 = &a1[2 * v69];
                        *(_OWORD *)uint64_t v72 = *(_OWORD *)v64;
                        if (!v69) {
                          break;
                        }
                        unint64_t v69 = (v69 - 1) >> 1;
                      }
                      while (zilch::Probability::operator<(&a1[2 * v69 + 1], v71));
                      *(void *)unsigned __int16 v64 = v70;
                      v64[1] = v71;
                    }
                  }
                }
              }
              while (v59-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          double v14 = &a1[2 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(v14, a1, v80);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, v14, v80);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1 + 2, v14 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1 + 4, &a1[2 * v13 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v83 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)double v14 = v83;
          }
          --a3;
          if ((a4 & 1) != 0 || zilch::Probability::operator<(a1 - 1, a1[1])) {
            break;
          }
          long long v82 = *(_OWORD *)a1;
          if (zilch::Probability::operator<((double *)&v82 + 1, *(a2 - 1)))
          {
            uint64_t v29 = a1;
            do
            {
              int v10 = v29 + 2;
              BOOL v30 = zilch::Probability::operator<((double *)&v82 + 1, v29[3]);
              uint64_t v29 = v10;
            }
            while (!v30);
          }
          else
          {
            uint64_t v31 = a1 + 2;
            do
            {
              int v10 = v31;
              if (v31 >= a2) {
                break;
              }
              BOOL v32 = zilch::Probability::operator<((double *)&v82 + 1, v31[1]);
              uint64_t v31 = v10 + 2;
            }
            while (!v32);
          }
          unint64_t v33 = a2;
          if (v10 < a2)
          {
            unsigned __int16 v34 = a2;
            do
            {
              unint64_t v33 = v34 - 2;
              BOOL v35 = zilch::Probability::operator<((double *)&v82 + 1, *(v34 - 1));
              unsigned __int16 v34 = v33;
            }
            while (v35);
          }
          while (v10 < v33)
          {
            long long v83 = *(_OWORD *)v10;
            *(_OWORD *)int v10 = *(_OWORD *)v33;
            *(_OWORD *)unint64_t v33 = v83;
            do
            {
              double v36 = v10[3];
              v10 += 2;
            }
            while (!zilch::Probability::operator<((double *)&v82 + 1, v36));
            do
            {
              double v37 = *(v33 - 1);
              v33 -= 2;
            }
            while (zilch::Probability::operator<((double *)&v82 + 1, v37));
          }
          unint64_t v38 = v10 - 2;
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(_OWORD *)unint64_t v38 = v82;
        }
        uint64_t v15 = 0;
        double v16 = *a1;
        double v17 = a1[1];
        do
        {
          BOOL v18 = zilch::Probability::operator<(&a1[v15 + 3], v17);
          v15 += 2;
        }
        while (v18);
        int v19 = &a1[v15];
        double v20 = a2;
        if (v15 == 2)
        {
          int v23 = a2;
          while (v19 < v23)
          {
            int v21 = v23 - 2;
            BOOL v24 = zilch::Probability::operator<(v23 - 1, v17);
            int v23 = v21;
            if (v24) {
              goto LABEL_21;
            }
          }
          int v21 = v23;
        }
        else
        {
          do
          {
            int v21 = v20 - 2;
            BOOL v22 = zilch::Probability::operator<(v20 - 1, v17);
            double v20 = v21;
          }
          while (!v22);
        }
LABEL_21:
        int v10 = v19;
        if (v19 < v21)
        {
          __int16 v25 = v21;
          do
          {
            long long v83 = *(_OWORD *)v10;
            *(_OWORD *)int v10 = *(_OWORD *)v25;
            *(_OWORD *)__int16 v25 = v83;
            do
            {
              double v26 = v10 + 3;
              v10 += 2;
            }
            while (zilch::Probability::operator<(v26, v17));
            do
            {
              uint64_t v27 = v25 - 1;
              v25 -= 2;
            }
            while (!zilch::Probability::operator<(v27, v17));
          }
          while (v10 < v25);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v16;
        *(v10 - 1) = v17;
        if (v19 >= v21) {
          break;
        }
LABEL_32:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_32;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(double *a1, double *a2, double *a3)
{
  uint64_t v6 = a2 + 1;
  BOOL v7 = zilch::Probability::operator<(a2 + 1, a1[1]);
  BOOL result = zilch::Probability::operator<(a3 + 1, a2[1]);
  if (v7)
  {
    if (result)
    {
      long long v9 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
    }
    else
    {
      long long v12 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v12;
      BOOL result = zilch::Probability::operator<(a3 + 1, a2[1]);
      if (!result) {
        return result;
      }
      long long v9 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v9;
  }
  else if (result)
  {
    long long v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    BOOL result = zilch::Probability::operator<(v6, a1[1]);
    if (result)
    {
      long long v11 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v11;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (zilch::Probability::operator<(a2 - 1, a1[1]))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4, (uint64_t)(a1 + 6), (uint64_t)(a2 - 2));
      return 1;
    default:
      BOOL v7 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4);
      uint64_t v8 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (zilch::Probability::operator<(v8 + 1, v7[1]))
    {
      long long v14 = *(_OWORD *)v8;
      uint64_t v11 = v9;
      while (1)
      {
        long long v12 = (double *)((char *)a1 + v11);
        *(_OWORD *)((char *)a1 + v11 + 48) = *(_OWORD *)((char *)a1 + v11 + 32);
        if (v11 == -32) {
          break;
        }
        v11 -= 16;
        if (!zilch::Probability::operator<((double *)&v14 + 1, v12[3]))
        {
          unint64_t v13 = (double *)((char *)a1 + v11 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v13 = a1;
LABEL_12:
      *(_OWORD *)unint64_t v13 = v14;
      if (++v10 == 8) {
        return v8 + 2 == a2;
      }
    }
    BOOL v7 = v8;
    v9 += 16;
    v8 += 2;
    if (v8 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(double *a1, double *a2, double *a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a2, a3);
  if (zilch::Probability::operator<((double *)(a4 + 8), a3[1]))
  {
    long long v9 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v9;
    if (zilch::Probability::operator<(a3 + 1, a2[1]))
    {
      long long v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v10;
      if (zilch::Probability::operator<(a2 + 1, a1[1]))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a2, a3, a4);
  if (zilch::Probability::operator<((double *)(a5 + 8), *(double *)(a4 + 8)))
  {
    long long v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v11;
    if (zilch::Probability::operator<((double *)(a4 + 8), a3[1]))
    {
      long long v12 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v12;
      if (zilch::Probability::operator<(a3 + 1, a2[1]))
      {
        long long v13 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v13;
        if (zilch::Probability::operator<(a2 + 1, a1[1]))
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

void zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v13 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  long long v14 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v13;
  *(void *)(a1 + 144) = v12;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v16 = *a3;
  uint64_t v15 = a3[1];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  double v17 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = v16;
  *(void *)(a1 + 160) = v15;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a3 + 3);
  zilch::Probability::operator*=((double *)(a1 + 128), a6);
  BOOL v18 = *(void ***)a2;
  int v19 = *(std::__shared_weak_count **)(a2 + 8);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(void *)(a1 + 328);
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v100 = v18;
  uint64_t v101 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>::RoadPathElement((uint64_t)v102, &v100, a4, v20);
  unint64_t v23 = *(void *)(a1 + 64);
  unint64_t v24 = *(void *)(a1 + 72);
  if (v23 < v24)
  {
    __int16 v25 = 0;
    *(void *)unint64_t v23 = &unk_1ED514248;
    *(_OWORD *)(v23 + 8) = *(_OWORD *)&v102[8];
    *(void *)unint64_t v23 = &unk_1ED514270;
    *(_OWORD *)(v23 + 24) = *(_OWORD *)&v102[24];
    *(void *)&v102[24] = 0;
    *(void *)&v102[32] = 0;
    *(_OWORD *)(v23 + 40) = v103;
    long long v103 = 0uLL;
    *(_DWORD *)(v23 + 56) = v104;
    *(_DWORD *)(v23 + 64) = v105;
    double v26 = (char *)(v23 + 72);
    goto LABEL_32;
  }
  uint64_t v27 = *(void *)(a1 + 56);
  unint64_t v28 = 0x8E38E38E38E38E39 * ((uint64_t)(v23 - v27) >> 3);
  unint64_t v29 = v28 + 1;
  if (v28 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v30 = 0x8E38E38E38E38E39 * ((uint64_t)(v24 - v27) >> 3);
  if (2 * v30 > v29) {
    unint64_t v29 = 2 * v30;
  }
  if (v30 >= 0x1C71C71C71C71C7) {
    unint64_t v31 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v31 = v29;
  }
  BOOL v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>>(v31);
  unsigned __int16 v34 = &v32[72 * v28];
  *(void *)unsigned __int16 v34 = &unk_1ED514248;
  *(_OWORD *)(v34 + 8) = *(_OWORD *)&v102[8];
  *(void *)unsigned __int16 v34 = &unk_1ED514270;
  *(_OWORD *)(v34 + 24) = *(_OWORD *)&v102[24];
  *(void *)&v102[24] = 0;
  *(void *)&v102[32] = 0;
  *(_OWORD *)(v34 + 40) = v103;
  long long v103 = 0uLL;
  *((_DWORD *)v34 + 14) = v104;
  *((_DWORD *)v34 + 16) = v105;
  BOOL v35 = *(char **)(a1 + 56);
  double v36 = *(char **)(a1 + 64);
  if (v36 == v35)
  {
    double v26 = v34 + 72;
    *(void *)(a1 + 56) = v34;
    *(void *)(a1 + 64) = v34 + 72;
    *(void *)(a1 + 72) = &v32[72 * v33];
    if (!v36) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v37 = 0;
    do
    {
      unint64_t v38 = &v34[v37];
      *((void *)v38 - 9) = &unk_1ED514248;
      uint64_t v39 = &v36[v37];
      *((_OWORD *)v38 - 4) = *(_OWORD *)&v36[v37 - 64];
      *((void *)v38 - 9) = &unk_1ED514270;
      *((_OWORD *)v38 - 3) = *(_OWORD *)&v36[v37 - 48];
      *((void *)v39 - 6) = 0;
      *((void *)v39 - 5) = 0;
      *((_OWORD *)v38 - 2) = *(_OWORD *)&v36[v37 - 32];
      *((void *)v39 - 4) = 0;
      *((void *)v39 - 3) = 0;
      *((_DWORD *)v38 - 4) = *(_DWORD *)&v36[v37 - 16];
      *((_DWORD *)v38 - 2) = *(_DWORD *)&v36[v37 - 8];
      v37 -= 72;
    }
    while (&v36[v37] != v35);
    double v36 = *(char **)(a1 + 56);
    uint64_t v40 = *(char **)(a1 + 64);
    double v26 = v34 + 72;
    *(void *)(a1 + 56) = &v34[v37];
    *(void *)(a1 + 64) = v34 + 72;
    *(void *)(a1 + 72) = &v32[72 * v33];
    if (v40 != v36)
    {
      uint64_t v96 = v22;
      uint64_t v41 = v21;
      double v42 = v40 - 72;
      double v43 = v40 - 72;
      uint64_t v44 = (void (***)(char *))(v40 - 72);
      do
      {
        uint64_t v45 = *v44;
        v44 -= 9;
        (*v45)(v43);
        v42 -= 72;
        BOOL v46 = v43 == v36;
        double v43 = (char *)v44;
      }
      while (!v46);
      uint64_t v21 = v41;
      uint64_t v22 = v96;
    }
    if (!v36) {
      goto LABEL_31;
    }
  }
  operator delete(v36);
LABEL_31:
  __int16 v25 = (std::__shared_weak_count *)*((void *)&v103 + 1);
LABEL_32:
  *(void *)(a1 + 64) = v26;
  *(void *)__n128 v102 = &unk_1ED514270;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (*(void *)&v102[32]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v102[32]);
  }
  if (v101) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v101);
  }
  unint64_t v47 = 0x8E38E38E38E38E39 * ((v21 - v22) >> 3);
  int64_t v49 = *(char **)(a1 + 112);
  unint64_t v48 = *(void *)(a1 + 120);
  if ((unint64_t)v49 >= v48)
  {
    double v51 = *(char **)(a1 + 104);
    uint64_t v52 = (v49 - v51) >> 4;
    unint64_t v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v54 = v48 - (void)v51;
    if (v54 >> 3 > v53) {
      unint64_t v53 = v54 >> 3;
    }
    BOOL v55 = (unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
    if (!v55) {
      unint64_t v56 = v53;
    }
    if (v56)
    {
      unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v56);
      double v51 = *(char **)(a1 + 104);
      int64_t v49 = *(char **)(a1 + 112);
    }
    else
    {
      uint64_t v57 = 0;
    }
    unint64_t v58 = v56 + 16 * v52;
    unint64_t v59 = v56 + 16 * v57;
    *(_DWORD *)unint64_t v58 = 0;
    *(void *)(v58 + 8) = v47;
    uint64_t v50 = (void *)(v58 + 16);
    if (v49 != v51)
    {
      do
      {
        *(_OWORD *)(v58 - 16) = *((_OWORD *)v49 - 1);
        v58 -= 16;
        v49 -= 16;
      }
      while (v49 != v51);
      double v51 = *(char **)(a1 + 104);
    }
    *(void *)(a1 + 104) = v58;
    *(void *)(a1 + 112) = v50;
    *(void *)(a1 + 120) = v59;
    if (v51) {
      operator delete(v51);
    }
  }
  else
  {
    *(_DWORD *)int64_t v49 = 0;
    *((void *)v49 + 1) = v47;
    uint64_t v50 = v49 + 16;
  }
  *(void *)(a1 + 112) = v50;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if ((std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::__emplace_unique_key_args<std::shared_ptr<geo::MapEdge>,std::shared_ptr<geo::MapEdge> const&>(a1 + 280, *(void *)a2, *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)++*(_DWORD *)(a1 + 320); {
  memset(v102, 0, sizeof(v102));
  }
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoCoordinates *)v102);
  long long v60 = 0uLL;
  *(void *)&v102[32] = 0;
  *(void *)(a1 + 192) = *(void *)v102;
  *(_OWORD *)&v102[16] = 0u;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)&v102[8];
  uint64_t v62 = (void **)(a1 + 208);
  uint64_t v61 = *(void *)(a1 + 208);
  if (v61)
  {
    std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__clear[abi:ne180100]((uint64_t *)(a1 + 208));
    operator delete(*v62);
    *uint64_t v62 = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    long long v60 = *(_OWORD *)&v102[16];
    uint64_t v61 = *(void *)&v102[32];
  }
  *(_OWORD *)(a1 + 208) = v60;
  *(void *)(a1 + 224) = v61;
  memset(&v102[16], 0, 24);
  uint64_t v100 = (void **)&v102[16];
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&v100);
  uint64_t v63 = *(std::__shared_weak_count **)(a1 + 144);
  uint64_t v98 = *(void *)(a1 + 136);
  uint64_t v99 = v63;
  if (v63) {
    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a5 + 16))(a5, &v98, a1 + 192);
  if (v99) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v99);
  }
  uint64_t v64 = *(void *)(a1 + 216) - *(void *)(a1 + 208);
  unint64_t v65 = v64 >> 4;
  uint64_t v66 = *(void *)(a1 + 232);
  uint64_t v67 = *(void *)(a1 + 240);
  unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((v67 - v66) >> 3);
  unint64_t v69 = (v64 >> 4) - v68;
  if (v64 >> 4 <= v68)
  {
    if (v64 >> 4 < v68)
    {
      uint64_t v87 = v66 + 40 * v65;
      while (v67 != v87)
      {
        uint64_t v88 = *(std::__shared_weak_count **)(v67 - 32);
        if (v88) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v88);
        }
        v67 -= 40;
      }
      *(void *)(a1 + 240) = v87;
    }
  }
  else
  {
    uint64_t v70 = *(void *)(a1 + 248);
    if (0xCCCCCCCCCCCCCCCDLL * ((v70 - v67) >> 3) >= v69)
    {
      unint64_t v89 = v67 + 40 * v69;
      uint64_t v90 = 40 * v65 - 8 * ((v67 - v66) >> 3);
      do
      {
        zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road(v67);
        v67 += 40;
        v90 -= 40;
      }
      while (v90);
      *(void *)(a1 + 240) = v89;
    }
    else
    {
      if ((unint64_t)v64 >= 0x6666666666666661) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v71 = 0xCCCCCCCCCCCCCCCDLL * ((v70 - v66) >> 3);
      uint64_t v72 = 2 * v71;
      if (2 * v71 <= v65) {
        uint64_t v72 = v65;
      }
      if (v71 >= 0x333333333333333) {
        unint64_t v73 = 0x666666666666666;
      }
      else {
        unint64_t v73 = v72;
      }
      *(void *)&v102[32] = a1 + 248;
      BOOL v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v73);
      uint64_t v75 = (uint64_t)&v74[40 * v68];
      *(void *)__n128 v102 = v74;
      *(void *)&v102[8] = v75;
      *(void *)&v102[16] = v75;
      *(void *)&v102[24] = &v74[40 * v76];
      uint64_t v77 = 5 * v65;
      uint64_t v78 = &v74[40 * v65];
      uint64_t v79 = 8 * v77 - 40 * v68;
      do
      {
        zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road(v75);
        v75 += 40;
        v79 -= 40;
      }
      while (v79);
      *(void *)&v102[16] = v78;
      uint64_t v81 = *(void *)(a1 + 232);
      unint64_t v80 = *(void *)(a1 + 240);
      uint64_t v82 = *(void *)&v102[8];
      if (v80 == v81)
      {
        int64x2_t v86 = vdupq_n_s64(v80);
      }
      else
      {
        uint64_t v83 = 0;
        do
        {
          uint64_t v84 = v82 + v83;
          uint64_t v85 = v80 + v83;
          *(_OWORD *)(v84 - 40) = *(_OWORD *)(v80 + v83 - 40);
          *(void *)(v85 - 40) = 0;
          *(void *)(v85 - 32) = 0;
          *(_DWORD *)(v84 - 24) = *(_DWORD *)(v80 + v83 - 24);
          *(_OWORD *)(v84 - 16) = *(_OWORD *)(v80 + v83 - 16);
          v83 -= 40;
        }
        while (v80 + v83 != v81);
        int64x2_t v86 = *(int64x2_t *)(a1 + 232);
        uint64_t v78 = *(char **)&v102[16];
        v82 += v83;
      }
      *(void *)(a1 + 232) = v82;
      *(void *)(a1 + 240) = v78;
      *(int64x2_t *)&v102[8] = v86;
      uint64_t v91 = *(void *)(a1 + 248);
      *(void *)(a1 + 248) = *(void *)&v102[24];
      *(void *)&v102[24] = v91;
      *(void *)__n128 v102 = v86.i64[0];
      std::__split_buffer<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road> &>::~__split_buffer((uint64_t)v102);
    }
  }
  uint64_t v92 = *(void *)(a1 + 208);
  if (*(void *)(a1 + 216) != v92)
  {
    uint64_t v93 = 0;
    unint64_t v94 = 0;
    do
    {
      long long v95 = *(_OWORD *)(v92 + 16 * v94);
      long long v97 = v95;
      if (*((void *)&v95 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v95 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a5 + 8))(a5, &v97, *(void *)(a1 + 232) + v93);
      if (*((void *)&v97 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
      }
      ++v94;
      uint64_t v92 = *(void *)(a1 + 208);
      v93 += 40;
    }
    while (v94 < (*(void *)(a1 + 216) - v92) >> 4);
  }
}

void sub_189E14F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::__emplace_unique_key_args<std::shared_ptr<geo::MapEdge>,std::shared_ptr<geo::MapEdge> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == a2) {
            return 0;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x20uLL);
  *uint64_t v16 = 0;
  v16[1] = v10;
  v16[2] = a3;
  v16[3] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<google::protobuf::Descriptor const*,std::hash<google::protobuf::Descriptor const*>,std::equal_to<google::protobuf::Descriptor const*>,std::allocator<google::protobuf::Descriptor const*>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t v16 = *v24;
LABEL_40:
    *unint64_t v24 = v16;
    goto LABEL_41;
  }
  *uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v16)
  {
    unint64_t v25 = *(void *)(*v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return 1;
}

void sub_189E151F4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<geo::MapEdge>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<geo::MapEdge>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    BOOL v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__split_buffer<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 40;
    unint64_t v4 = *(std::__shared_weak_count **)(v2 - 32);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::PathHypothesis(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, double a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v14 = *(_OWORD *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 32) = v14;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__init_with_size[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*>((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<zilch::GeometryPathElement>::__init_with_size[abi:ne180100]<zilch::GeometryPathElement*,zilch::GeometryPathElement*>((void *)(a1 + 80), *(void *)(a2 + 80), *(void *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__init_with_size[abi:ne180100]<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*,zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
  uint64_t v16 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = v16;
  zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road::Road(a1 + 152);
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoCoordinates *)(a1 + 192));
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  std::unordered_set<std::shared_ptr<geo::MapEdge>>::unordered_set(a1 + 280, a2 + 280);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  uint64_t v17 = *a3;
  float v18 = (std::__shared_weak_count *)a3[1];
  v20[0] = v17;
  v20[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::addRoadToHypothesis(a1, (uint64_t)v20, a4, a5, a6, a7);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return a1;
}

void sub_189E15474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::~__hash_table(v15);
  a12 = v16 + 6;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = v16 + 3;
  std::vector<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = v16;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a12);
  float v18 = (std::__shared_weak_count *)v12[20];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v19 = v13 - 24;
  unint64_t v20 = (std::__shared_weak_count *)v12[18];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  zilch::Path<std::shared_ptr<geo::MapEdge>>::~Path(v19);
  unint64_t v21 = (std::__shared_weak_count *)v12[1];
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::shared_ptr<geo::MapEdge>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<google::protobuf::Descriptor const*,std::hash<google::protobuf::Descriptor const*>,std::equal_to<google::protobuf::Descriptor const*>,std::allocator<google::protobuf::Descriptor const*>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::__emplace_unique_key_args<std::shared_ptr<geo::MapEdge>,std::shared_ptr<geo::MapEdge> const&>(a1, i[2], i[2], i[3]);
  return a1;
}

void sub_189E15598(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<geo::MapEdge>,std::hash<std::shared_ptr<geo::MapEdge>>,std::equal_to<std::shared_ptr<geo::MapEdge>>,std::allocator<std::shared_ptr<geo::MapEdge>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

uint64_t zilch::Path<std::shared_ptr<geo::MapEdge>>::operator=(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  if ((long long *)a1 != a2)
  {
    uint64_t v5 = (void **)(a1 + 24);
    uint64_t v6 = *(void (****)(void))(a1 + 24);
    uint64_t v8 = *((void *)a2 + 3);
    uint64_t v7 = *((void *)a2 + 4);
    unint64_t v9 = 0x8E38E38E38E38E39 * ((v7 - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 40);
    if (0x8E38E38E38E38E39 * ((v10 - (uint64_t)v6) >> 3) >= v9)
    {
      if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 32) - (void)v6) >> 3) >= v9)
      {
        uint64_t v25 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *>(*((void *)a2 + 3), *((void *)a2 + 4), *(void *)(a1 + 24));
        uint64_t v26 = *(void *)(a1 + 32);
        if (v26 != v25)
        {
          uint64_t v27 = v26 - 72;
          unint64_t v28 = (void (***)(void))(v26 - 72);
          unint64_t v29 = (void (***)(void))(v26 - 72);
          do
          {
            unint64_t v30 = *v29;
            v29 -= 9;
            (*v30)(v28);
            v27 -= 72;
            BOOL v17 = v28 == (void (***)(void))v25;
            unint64_t v28 = v29;
          }
          while (!v17);
        }
        *(void *)(a1 + 32) = v25;
      }
      else
      {
        uint64_t v22 = v8 + 8 * ((uint64_t)(*(void *)(a1 + 32) - (void)v6) >> 3);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *>(*((void *)a2 + 3), v22, *(void *)(a1 + 24));
        uint64_t v23 = *(void *)(a1 + 32);
        if (v22 != v7)
        {
          uint64_t v24 = *(void *)(a1 + 32);
          do
          {
            std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::construct[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>&>(v24, v22);
            v22 += 72;
            v24 += 72;
            v23 += 72;
          }
          while (v22 != v7);
        }
        *(void *)(a1 + 32) = v23;
      }
    }
    else
    {
      if (v6)
      {
        unint64_t v11 = *(void (****)(void))(a1 + 32);
        uint8x8_t v12 = *(void **)(a1 + 24);
        if (v11 != v6)
        {
          uint64_t v13 = v11 - 9;
          long long v14 = v11 - 9;
          uint64_t v15 = v11 - 9;
          do
          {
            uint64_t v16 = *v15;
            v15 -= 9;
            (*v16)(v14);
            v13 -= 9;
            BOOL v17 = v14 == v6;
            long long v14 = v15;
          }
          while (!v17);
          uint8x8_t v12 = *v5;
        }
        *(void *)(a1 + 32) = v6;
        operator delete(v12);
        uint64_t v10 = 0;
        void *v5 = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
      }
      if (v9 > 0x38E38E38E38E38ELL) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = 0x8E38E38E38E38E39 * (v10 >> 3);
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= v9) {
        uint64_t v19 = 0x8E38E38E38E38E39 * ((v7 - v8) >> 3);
      }
      if (v18 >= 0x1C71C71C71C71C7) {
        unint64_t v20 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v20 = v19;
      }
      std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__vallocate[abi:ne180100]((void *)(a1 + 24), v20);
      uint64_t v21 = *(void *)(a1 + 32);
      while (v8 != v7)
      {
        std::allocator<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::construct[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>&>(v21, v8);
        v8 += 72;
        v21 += 72;
      }
      *(void *)(a1 + 32) = v21;
    }
    unint64_t v31 = (void **)(a1 + 48);
    BOOL v32 = *(void (****)(void))(a1 + 48);
    uint64_t v34 = *((void *)a2 + 6);
    uint64_t v33 = *((void *)a2 + 7);
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v34) >> 4);
    uint64_t v36 = *(void *)(a1 + 64);
    if (0xAAAAAAAAAAAAAAABLL * ((v36 - (uint64_t)v32) >> 4) >= v35)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - (void)v32) >> 4) >= v35)
      {
        unint64_t v48 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::GeometryPathElement *,zilch::GeometryPathElement *,zilch::GeometryPathElement *>(*((void *)a2 + 6), *((void *)a2 + 7), *(void *)(a1 + 48));
        int64_t v49 = *(char ***)(a1 + 56);
        if (v49 != v48)
        {
          uint64_t v50 = v49 - 6;
          double v51 = v49 - 6;
          uint64_t v52 = v49 - 6;
          do
          {
            unint64_t v53 = *v52;
            v52 -= 6;
            (*(void (**)(char **))v53)(v51);
            v50 -= 6;
            BOOL v17 = v51 == v48;
            double v51 = v52;
          }
          while (!v17);
        }
        *(void *)(a1 + 56) = v48;
LABEL_53:
        uint64_t v54 = *(char **)(a1 + 72);
        BOOL v55 = (char *)*((void *)a2 + 9);
        unint64_t v56 = (unsigned char *)*((void *)a2 + 10);
        size_t v57 = v56 - v55;
        unint64_t v58 = (v56 - v55) >> 4;
        uint64_t v59 = *(void *)(a1 + 88);
        if (v58 <= (v59 - (uint64_t)v54) >> 4)
        {
          uint64_t v62 = (void **)(a1 + 80);
          uint64_t v63 = *(unsigned char **)(a1 + 80);
          unint64_t v64 = (v63 - v54) >> 4;
          if (v64 < v58)
          {
            unint64_t v65 = &v55[16 * v64];
            if (v63 != v54)
            {
              memmove(*(void **)(a1 + 72), v55, v63 - v54);
              uint64_t v54 = (char *)*v62;
            }
            size_t v57 = v56 - v65;
            if (v56 == v65) {
              goto LABEL_71;
            }
            uint64_t v66 = v54;
            uint64_t v67 = v65;
            goto LABEL_70;
          }
        }
        else
        {
          if (v54)
          {
            *(void *)(a1 + 80) = v54;
            operator delete(v54);
            uint64_t v59 = 0;
            *(void *)(a1 + 72) = 0;
            *(void *)(a1 + 80) = 0;
            *(void *)(a1 + 88) = 0;
          }
          if ((v57 & 0x8000000000000000) != 0) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v60 = v59 >> 3;
          if (v59 >> 3 <= v58) {
            uint64_t v60 = (v56 - v55) >> 4;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v60;
          }
          std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__vallocate[abi:ne180100]((void *)(a1 + 72), v61);
          uint64_t v62 = (void **)(a1 + 80);
          uint64_t v54 = *(char **)(a1 + 80);
        }
        if (v56 == v55)
        {
LABEL_71:
          *uint64_t v62 = &v54[v57];
          return a1;
        }
        uint64_t v66 = v54;
        uint64_t v67 = v55;
LABEL_70:
        memmove(v66, v67, v57);
        goto LABEL_71;
      }
      uint64_t v47 = v34 + 16 * ((uint64_t)(*(void *)(a1 + 56) - (void)v32) >> 4);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::GeometryPathElement *,zilch::GeometryPathElement *,zilch::GeometryPathElement *>(*((void *)a2 + 6), v47, *(void *)(a1 + 48));
      uint64_t v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<zilch::GeometryPathElement>,zilch::GeometryPathElement*,zilch::GeometryPathElement*,zilch::GeometryPathElement*>(v47, v33, *(void *)(a1 + 56));
    }
    else
    {
      if (v32)
      {
        uint64_t v37 = *(void (****)(void))(a1 + 56);
        unint64_t v38 = *(void **)(a1 + 48);
        if (v37 != v32)
        {
          uint64_t v39 = v37 - 6;
          uint64_t v40 = v37 - 6;
          uint64_t v41 = v37 - 6;
          do
          {
            double v42 = *v41;
            v41 -= 6;
            (*v42)(v40);
            v39 -= 6;
            BOOL v17 = v40 == v32;
            uint64_t v40 = v41;
          }
          while (!v17);
          unint64_t v38 = *v31;
        }
        *(void *)(a1 + 56) = v32;
        operator delete(v38);
        uint64_t v36 = 0;
        *unint64_t v31 = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
      }
      if (v35 > 0x555555555555555) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 4);
      uint64_t v44 = 2 * v43;
      if (2 * v43 <= v35) {
        uint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v34) >> 4);
      }
      if (v43 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v45 = 0x555555555555555;
      }
      else {
        unint64_t v45 = v44;
      }
      std::vector<zilch::GeometryPathElement>::__vallocate[abi:ne180100]((void *)(a1 + 48), v45);
      uint64_t v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<zilch::GeometryPathElement>,zilch::GeometryPathElement*,zilch::GeometryPathElement*,zilch::GeometryPathElement*>(v34, v33, *(void *)(a1 + 56));
    }
    *(void *)(a1 + 56) = v46;
    goto LABEL_53;
  }
  return a1;
}

void sub_189E15B58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

void sub_189E15B60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(v5 + 8);
      uint64_t v7 = *(void *)(v5 + 24);
      uint64_t v6 = *(void *)(v5 + 32);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(a3 + 32);
      *(void *)(a3 + 24) = v7;
      *(void *)(a3 + 32) = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      uint64_t v10 = *(void *)(v5 + 40);
      uint64_t v9 = *(void *)(v5 + 48);
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v11 = *(std::__shared_weak_count **)(a3 + 48);
      *(void *)(a3 + 40) = v10;
      *(void *)(a3 + 48) = v9;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      *(_DWORD *)(a3 + 56) = *(_DWORD *)(v5 + 56);
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(v5 + 64);
      v5 += 72;
      a3 += 72;
    }
    while (v5 != a2);
  }
  return a3;
}

char **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<zilch::GeometryPathElement *,zilch::GeometryPathElement *,zilch::GeometryPathElement *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    uint64_t v6 = (char **)(a3 + 24);
    do
    {
      *((_OWORD *)v6 - 1) = *(_OWORD *)(v5 + 8);
      if ((char **)v5 != v6 - 3)
      {
        uint64_t v7 = *(char **)(v5 + 24);
        uint64_t v8 = *(unsigned char **)(v5 + 32);
        uint64_t v9 = v8 - v7;
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
        uint64_t v11 = (uint64_t)v6[2];
        uint8x8_t v12 = *v6;
        if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)*v6) >> 2) >= v10)
        {
          uint64_t v16 = (void *)(v3 + 32);
          BOOL v17 = v6[1];
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v12) >> 2);
          if (v18 >= v10)
          {
            if (v8 != v7) {
              memmove(*v6, *(const void **)(v5 + 24), v8 - v7);
            }
            uint64_t v4 = a2;
          }
          else
          {
            if (v17 != v12)
            {
              memmove(*v6, *(const void **)(v5 + 24), v17 - v12);
              uint8x8_t v12 = v6[1];
            }
            uint64_t v19 = &v7[12 * v18];
            uint64_t v9 = v8 - v19;
            if (v8 != v19) {
              memmove(v12, v19, v8 - v19);
            }
            uint64_t v4 = a2;
          }
        }
        else
        {
          if (v12)
          {
            v6[1] = v12;
            operator delete(v12);
            uint64_t v11 = 0;
            *uint64_t v6 = 0;
            v6[1] = 0;
            v6[2] = 0;
          }
          if (v10 > 0x1555555555555555) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 2);
          uint64_t v14 = 2 * v13;
          if (2 * v13 <= v10) {
            uint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
          }
          if (v13 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v15 = 0x1555555555555555;
          }
          else {
            unint64_t v15 = v14;
          }
          std::vector<maps::path_codec::Coordinate>::__vallocate[abi:ne180100](v6, v15);
          uint64_t v16 = v6 + 1;
          uint8x8_t v12 = v6[1];
          if (v8 != v7) {
            memmove(v6[1], v7, v8 - v7);
          }
        }
        *uint64_t v16 = &v12[v9];
      }
      v5 += 48;
      v3 += 48;
      v6 += 6;
    }
    while (v5 != v4);
    return v6 - 3;
  }
  return (char **)v3;
}

uint64_t zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::PathHypothesis(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>>::__init_with_size[abi:ne180100]<zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*,zilch::RoadPathElement<std::shared_ptr<geo::MapEdge>>*>((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<zilch::GeometryPathElement>::__init_with_size[abi:ne180100]<zilch::GeometryPathElement*,zilch::GeometryPathElement*>((void *)(a1 + 80), *(void *)(a2 + 80), *(void *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry,std::allocator<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry>>::__init_with_size[abi:ne180100]<zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*,zilch::Path<std::shared_ptr<geo::MapEdge>>::Entry*>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 144);
  *(void *)(a1 + 144) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v7 = *(void *)(a2 + 160);
  *(void *)(a1 + 160) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  uint64_t v8 = *(void *)(a2 + 192);
  int v9 = *(_DWORD *)(a2 + 200);
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 200) = v9;
  *(void *)(a1 + 192) = v8;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  std::vector<std::shared_ptr<geo::MapEdge>>::__init_with_size[abi:ne180100]<std::shared_ptr<geo::MapEdge>*,std::shared_ptr<geo::MapEdge>*>((void *)(a1 + 208), *(void **)(a2 + 208), *(void **)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 4);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v10 = *(void *)(a2 + 232);
  uint64_t v11 = *(void *)(a2 + 240);
  if (v11 != v10)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3);
    if (v12 >= 0x666666666666667) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v12);
    uint64_t v14 = 0;
    *(void *)(a1 + 232) = v13;
    *(void *)(a1 + 240) = v13;
    *(void *)(a1 + 248) = &v13[40 * v15];
    uint64_t v16 = v13;
    do
    {
      *(void *)uint64_t v16 = *(void *)v10;
      uint64_t v17 = *(void *)(v10 + 8);
      *((void *)v16 + 1) = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v16 + 4) = *(_DWORD *)(v10 + 16);
      *(_OWORD *)(v16 + 24) = *(_OWORD *)(v10 + 24);
      v14 += 40;
      v10 += 40;
      v16 += 40;
    }
    while (v10 != v11);
    *(void *)(a1 + 240) = &v13[v14];
  }
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  std::vector<std::shared_ptr<geo::MapEdge>>::__init_with_size[abi:ne180100]<std::shared_ptr<geo::MapEdge>*,std::shared_ptr<geo::MapEdge>*>((void *)(a1 + 256), *(void **)(a2 + 256), *(void **)(a2 + 264), (uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 4);
  std::unordered_set<std::shared_ptr<geo::MapEdge>>::unordered_set(a1 + 280, a2 + 280);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  return a1;
}

void sub_189E16060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road,std::allocator<zilch::AbstractMapModel<std::shared_ptr<geo::MapEdge>>::Road>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v12 = v10 - 24;
  unint64_t v13 = (std::__shared_weak_count *)v9[20];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)v9[18];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  zilch::Path<std::shared_ptr<geo::MapEdge>>::~Path(v12);
  uint64_t v15 = (std::__shared_weak_count *)v9[1];
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<geo::MapEdge>>::__init_with_size[abi:ne180100]<std::shared_ptr<geo::MapEdge>*,std::shared_ptr<geo::MapEdge>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v4 = result;
    if (a4 >> 60) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    __n128 result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)(result + 2), a4);
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v7];
    if (a2 != a3)
    {
      uint64_t v8 = result;
      do
      {
        *uint64_t v8 = *a2;
        uint64_t v9 = a2[1];
        v8[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        result += 2;
        a2 += 2;
        v8 += 2;
      }
      while (a2 != a3);
    }
    v4[1] = result;
  }
  return result;
}

void sub_189E161BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_189E16350(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddStopRouteInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 76)), (uint16x4_t)0xFFFDFFFCFFFFFFFBLL) & 0xFF01FF01FF01FF01))+ (*(unsigned char *)(a1 + 76) & 1)+ ((*(unsigned char *)(a1 + 76) & 4) != 0));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 3;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v54 = v17;
        char v55 = v18 | v17;
        if ((v18 | v8)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v56 = (v19 == 0) | v18;
        BOOL v57 = v18;
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_79;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_79:
      int v52 = 1;
      goto LABEL_80;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v57;
    if ((v56 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 76) & 2) == 0)
        {
          uint64_t v39 = PBReaderReadData();
          uint64_t v40 = 24;
          goto LABEL_57;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_98;
        }
        char v47 = *(unsigned char *)(a1 + 76) << 6;
        goto LABEL_76;
      case 2:
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x20) == 0)
        {
          uint64_t v39 = PBReaderReadData();
          uint64_t v40 = 56;
          goto LABEL_57;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_98;
        }
        char v47 = 4 * *(unsigned char *)(a1 + 76);
        goto LABEL_76;
      case 3:
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x10) == 0)
        {
          uint64_t v39 = PBReaderReadData();
          uint64_t v40 = 48;
          goto LABEL_57;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_98;
        }
        char v47 = 8 * *(unsigned char *)(a1 + 76);
        goto LABEL_76;
      case 4:
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 76) & 8) == 0)
        {
          uint64_t v39 = PBReaderReadData();
          uint64_t v40 = 40;
LABEL_57:
          uint64_t v44 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;
          goto LABEL_58;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_98;
        }
        char v47 = 16 * *(unsigned char *)(a1 + 76);
        goto LABEL_76;
      case 5:
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 76) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_98;
          }
          char v47 = 32 * *(unsigned char *)(a1 + 76);
LABEL_76:
          v7 += v47 >> 7;
          goto LABEL_77;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        unint64_t v45 = objc_alloc_init(GEORouteAttributes);
        if (GEORouteAttributesReadAllFrom((uint64_t)v45, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v44 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v45;
LABEL_58:

          --v7;
LABEL_77:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_78:
          if (!(v55 & 1 | (v7 != 0))) {
            goto LABEL_79;
          }
          continue;
        }

LABEL_98:
        int v52 = 0;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_80:
        unint64_t v53 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        if (v54) {
LABEL_81:
        }
          *(unsigned char *)(a1 + v53[887]) |= 1u;
        if (v57 || (v52 & 1) == 0)
        {
          *(unsigned char *)(a1 + v53[887]) |= 2u;
          *(unsigned char *)(a1 + v53[887]) |= 0x20u;
          *(unsigned char *)(a1 + v53[887]) |= 0x10u;
          *(unsigned char *)(a1 + v53[887]) |= 8u;
          *(unsigned char *)(a1 + v53[887]) |= 4u;
        }
        else if (v19)
        {
          while (1)
          {
            int v48 = *v19++;
            char v49 = 2;
            switch(v48)
            {
              case 0:
                goto LABEL_91;
              case 1:
                goto LABEL_90;
              case 2:
                char v49 = 32;
                goto LABEL_90;
              case 3:
                char v49 = 16;
                goto LABEL_90;
              case 4:
                char v49 = 8;
                goto LABEL_90;
              case 5:
                char v49 = 4;
LABEL_90:
                *(unsigned char *)(a1 + v53[887]) |= v49;
                break;
              default:
                continue;
            }
          }
        }
LABEL_91:
        if (v52) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v57)
        {
          uint64_t v50 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v54 & 1) == 0 || (*(unsigned char *)(a1 + 76))
        {
LABEL_64:
          char v46 = PBReaderSkipValueWithTag();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v46 & 1) == 0)
          {
            int v52 = 0;
            goto LABEL_80;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            double v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v43)
          {
            int v52 = 0;
            unint64_t v53 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
            goto LABEL_81;
          }
        }
        goto LABEL_78;
    }
  }
}

void sub_189E16BDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E16D48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E16EB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E17028(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E178F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddStopRouteInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOAddStopRouteInfoReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = [v8 position];
  *(_DWORD *)(a1 + 68) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOAddStopRouteInfoReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOAddStopRouteInfoReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOAddStopRouteInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 32) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_189E17AA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddStopRouteInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOAddStopRouteInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E17B04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAddStopRouteInfoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2) {
            goto LABEL_34;
          }
          goto LABEL_26;
        case 2u:
          if (v15 == 2) {
            goto LABEL_26;
          }
          goto LABEL_34;
        case 3u:
          if (v15 == 2) {
            goto LABEL_26;
          }
          goto LABEL_34;
        case 4u:
          if (v15 == 2) {
            goto LABEL_26;
          }
          goto LABEL_34;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORouteAttributesIsValid(a1)) {
            goto LABEL_34;
          }
          PBReaderRecallMark();
          goto LABEL_27;
        default:
LABEL_26:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_34:
            PBReaderRecallMark();
            return 0;
          }
LABEL_27:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_33;
          }
          break;
      }
    }
  }
LABEL_33:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189E17F50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *_GEOAddStopRouteInfoIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  if ((*(unsigned char *)(a1 + 76) & 0x7A) != 0) {
    return (os_unfair_lock_s *)1;
  }
  if ((*(unsigned char *)(a1 + 76) & 4) == 0) {
    return 0;
  }
  id v3 = *(os_unfair_lock_s **)(a1 + 32);

  return GEORouteAttributesIsDirty(v3);
}

os_unfair_lock_s *GEOAddStopRouteInfoIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t v2 = _GEOAddStopRouteInfoIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return v2;
  }
  return result;
}

void sub_189E18320(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E18670(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E18954(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCachedCategorySuggestionsPlaceResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  unsigned int v7 = v6;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFEFFFCFFFBLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 76) & 2) != 0));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 2;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v58 = v18;
        char v59 = v19 | v18;
        if ((v19 | v8)) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = a3;
        }
        char v60 = (v20 == 0) | v19;
        BOOL v61 = v19;
        uint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
        char v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v9;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_80;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      if (v25++ >= 9)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_80:
      int v56 = 1;
      goto LABEL_81;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v61;
    if ((v60 & 1) == 0)
    {
      int v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35) {
          goto LABEL_65;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x10) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_98;
          }
          uint64_t v40 = objc_alloc_init(GEOPDPlaceResponse);
          if (GEOPDPlaceResponseReadAllFrom((uint64_t)v40, (void *)v3, v11 & 1))
          {
            PBReaderRecallMark();
            id v41 = *(void **)(a1 + 40);
            *(void *)(a1 + 40) = v40;
            goto LABEL_64;
          }

          goto LABEL_98;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_98;
        }
        char v51 = 8 * *(unsigned char *)(a1 + 76);
        goto LABEL_75;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_65;
        }
        *(unsigned char *)(a1 + 76) |= 1u;
        uint64_t v45 = *v21;
        unint64_t v46 = *(void *)(v3 + v45);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v47 = *(void *)(*(void *)(v3 + *v23) + v46);
          *(void *)(v3 + v45) = v46 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v47 = 0;
        }
        *(void *)(a1 + 56) = v47;
        goto LABEL_79;
      case 3:
        if (!v35) {
          goto LABEL_65;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x20) == 0)
        {
          uint64_t v48 = PBReaderReadString();
          uint64_t v49 = 48;
          goto LABEL_63;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_98;
        }
        char v51 = 4 * *(unsigned char *)(a1 + 76);
        goto LABEL_75;
      case 4:
        if (!v35) {
          goto LABEL_65;
        }
        if ((*(unsigned char *)(a1 + 76) & 4) == 0)
        {
          uint64_t v48 = PBReaderReadString();
          uint64_t v49 = 24;
          goto LABEL_63;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_98;
        }
        char v51 = 32 * *(unsigned char *)(a1 + 76);
        goto LABEL_75;
      case 5:
        if (!v35) {
          goto LABEL_65;
        }
        if ((*(unsigned char *)(a1 + 76) & 8) == 0)
        {
          uint64_t v48 = PBReaderReadString();
          uint64_t v49 = 32;
LABEL_63:
          id v41 = *(void **)(a1 + v49);
          *(void *)(a1 + v49) = v48;
LABEL_64:

          --v9;
LABEL_76:
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
LABEL_79:
          if (!(v59 & 1 | (v9 != 0))) {
            goto LABEL_80;
          }
          continue;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v51 = 16 * *(unsigned char *)(a1 + 76);
LABEL_75:
          v9 += v51 >> 7;
          goto LABEL_76;
        }
LABEL_98:
        int v56 = 0;
        uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_81:
        BOOL v57 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        if (v58) {
LABEL_82:
        }
          *(unsigned char *)(a1 + v57[898]) |= 2u;
        if (v61 || (v56 & 1) == 0)
        {
          *(unsigned char *)(a1 + v57[898]) |= 0x10u;
          *(unsigned char *)(a1 + v57[898]) |= 0x20u;
          *(unsigned char *)(a1 + v57[898]) |= 4u;
          *(unsigned char *)(a1 + v57[898]) |= 8u;
        }
        else if (v20)
        {
          while (1)
          {
            int v52 = *v20++;
            char v53 = 16;
            switch(v52)
            {
              case 0:
                goto LABEL_91;
              case 1:
                goto LABEL_90;
              case 3:
                char v53 = 32;
                goto LABEL_90;
              case 4:
                char v53 = 4;
                goto LABEL_90;
              case 5:
                char v53 = 8;
LABEL_90:
                *(unsigned char *)(a1 + v57[898]) |= v53;
                break;
              default:
                continue;
            }
          }
        }
LABEL_91:
        if (v56) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v61)
        {
          char v54 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v58 & 1) == 0 || (*(unsigned char *)(a1 + 76) & 2) != 0)
        {
LABEL_65:
          char v50 = PBReaderSkipValueWithTag();
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v50 & 1) == 0)
          {
            int v56 = 0;
            goto LABEL_81;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v43 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v42;
          }
          int v44 = PBUnknownFieldAdd();
          uint64_t v22 = (int *)MEMORY[0x1E4F940C8];
          unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v44)
          {
            int v56 = 0;
            BOOL v57 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
            goto LABEL_82;
          }
        }
        goto LABEL_79;
    }
  }
}

void sub_189E19268(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E193D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E19540(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E19CC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCachedCategorySuggestionsPlaceResponseReadAllFrom(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOCachedCategorySuggestionsPlaceResponseReadAllFrom can only be called once per object"];
  }
  else
  {
    if (!((unint64_t)[a2 position] >> 32)
      && !((unint64_t)[a2 length] >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
      id v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 64) = [v6 position];
      *(_DWORD *)(a1 + 68) = [v6 length];
      unint64_t Specified = GEOCachedCategorySuggestionsPlaceResponseReadSpecified(a1, (unint64_t)v6, (int *)&GEOCachedCategorySuggestionsPlaceResponseReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unsigned int v7 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_189E19E3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E1A2E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E1A718(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E1AB14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCameraFrameReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    long long v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    id v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            *(unsigned char *)(a1 + 64) |= 2u;
            uint64_t v18 = *v4;
            unint64_t v19 = *(void *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v19);
              *(void *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            unint64_t v33 = &OBJC_IVAR___GEOCameraFrame__latitude;
            goto LABEL_54;
          case 2u:
            *(unsigned char *)(a1 + 64) |= 4u;
            uint64_t v23 = *v4;
            unint64_t v24 = *(void *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v24);
              *(void *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            unint64_t v33 = &OBJC_IVAR___GEOCameraFrame__longitude;
            goto LABEL_54;
          case 3u:
            *(unsigned char *)(a1 + 64) |= 1u;
            uint64_t v25 = *v4;
            unint64_t v26 = *(void *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v26);
              *(void *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            unint64_t v33 = &OBJC_IVAR___GEOCameraFrame__altitude;
            goto LABEL_54;
          case 4u:
            *(unsigned char *)(a1 + 64) |= 0x20u;
            uint64_t v27 = *v4;
            unint64_t v28 = *(void *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v28);
              *(void *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            unint64_t v33 = &OBJC_IVAR___GEOCameraFrame__yaw;
            goto LABEL_54;
          case 5u:
            *(unsigned char *)(a1 + 64) |= 8u;
            uint64_t v29 = *v4;
            unint64_t v30 = *(void *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v30);
              *(void *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            unint64_t v33 = &OBJC_IVAR___GEOCameraFrame__pitch;
            goto LABEL_54;
          case 6u:
            *(unsigned char *)(a1 + 64) |= 0x10u;
            uint64_t v31 = *v4;
            unint64_t v32 = *(void *)&v3[v31];
            if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v32);
              *(void *)&v3[v31] = v32 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            unint64_t v33 = &OBJC_IVAR___GEOCameraFrame__roll;
LABEL_54:
            *(void *)(a1 + *v33) = v20;
            break;
          default:
            if (!*(void *)(a1 + 8))
            {
              id v21 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              uint64_t v22 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v21;
            }
            if ((PBUnknownFieldAdd() & 1) == 0) {
              goto LABEL_57;
            }
            break;
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_57:
    BOOL v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_189E1B9EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCameraFrameReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOCameraFrameReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E1BA68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCameraFrameIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          if (v16 != 1) {
            goto LABEL_28;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v20 = v19 + 8, v20 <= *(void *)&a1[*v3])) {
            *(void *)&a1[v18] = v20;
          }
          else {
            a1[v14] = 1;
          }
          goto LABEL_25;
        default:
          if (!PBReaderSkipValueWithTag())
          {
LABEL_28:
            BOOL v21 = 0;
            goto LABEL_27;
          }
LABEL_25:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_26;
          }
          break;
      }
    }
  }
LABEL_26:
  BOOL v21 = a1[*v4] == 0;
LABEL_27:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOClientMetricsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    char v6 = (int *)MEMORY[0x1E4F940E8];
    unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
    unint64_t v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          uint64_t v14 = *(void *)&v5[v13];
          unint64_t v15 = v14 + 1;
          if (v14 == -1 || v15 > *(void *)&v5[*v7]) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          BOOL v17 = v11++ >= 9;
          if (v17)
          {
            unint64_t v12 = 0;
            int v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v18 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v18 || (v12 & 7) == 4) {
          break;
        }
        unint64_t v20 = v12 >> 3;
        if ((v12 >> 3) == 3)
        {
          *(unsigned char *)(a1 + 36) |= 1u;
          uint64_t v28 = *v6;
          unint64_t v29 = *(void *)&v5[v28];
          if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)&v5[*v7])
          {
            uint64_t v30 = *(void *)(*(void *)&v5[*v9] + v29);
            *(void *)&v5[v28] = v29 + 8;
          }
          else
          {
            v5[*v8] = 1;
            uint64_t v30 = 0;
          }
          *(void *)(a1 + 24) = v30;
        }
        else if (v20 == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_48;
          }
          uint64_t v31 = objc_alloc_init(GEOClientNetworkMetrics);
          if (!GEOClientNetworkMetricsReadAllFrom((uint64_t)v31, v5, a3))
          {

            goto LABEL_48;
          }
          PBReaderRecallMark();
          unint64_t v32 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v31;
        }
        else if (v20 == 1)
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (1)
          {
            uint64_t v24 = *v6;
            uint64_t v25 = *(void *)&v5[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&v5[*v7]) {
              break;
            }
            char v27 = *(unsigned char *)(*(void *)&v5[*v9] + v25);
            *(void *)&v5[v24] = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if ((v27 & 0x80) == 0) {
              goto LABEL_40;
            }
            v21 += 7;
            BOOL v17 = v22++ >= 9;
            if (v17)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          v5[*v8] = 1;
LABEL_40:
          if (v5[*v8]) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          *(_DWORD *)(a1 + 32) = v23;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v33 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            BOOL v34 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v33;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_48;
          }
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v35 = v5[*v8] == 0;
  }
  else
  {
LABEL_48:
    BOOL v35 = 0;
  }
  objc_sync_exit(v5);

  return v35;
}

void sub_189E1D1E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientMetricsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOClientMetricsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E1D24C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientMetricsIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      unint64_t v18 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v16 != 1) {
          goto LABEL_44;
        }
        uint64_t v25 = *v2;
        unint64_t v26 = *(void *)&a1[v25];
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v27 = v26 + 8, v27 <= *(void *)&a1[*v3])) {
          *(void *)&a1[v25] = v27;
        }
        else {
          a1[v14] = 1;
        }
      }
      else if (v18 == 2)
      {
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOClientNetworkMetricsIsValid(a1))
        {
LABEL_44:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v18 == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_44;
        }
        unsigned int v19 = 0;
        while (1)
        {
          uint64_t v20 = *v2;
          uint64_t v21 = *(void *)&a1[v20];
          unint64_t v22 = v21 + 1;
          if (v21 == -1 || v22 > *(void *)&a1[*v3]) {
            break;
          }
          int v23 = *(char *)(*(void *)&a1[*v5] + v21);
          *(void *)&a1[v20] = v22;
          if (v23 < 0 && v19++ <= 8) {
            continue;
          }
          goto LABEL_41;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_44;
      }
LABEL_41:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

BOOL GEOClientNetworkMetricsIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_78;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              goto LABEL_68;
            }
            int v22 = *(char *)(*(void *)&a1[*v5] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              BOOL v23 = v18++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_70;
          }
        case 2u:
          if (v16 != 2) {
            goto LABEL_78;
          }
LABEL_58:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_78:
          PBReaderRecallMark();
          return 0;
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_78;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              goto LABEL_68;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v23 = v27++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_70;
          }
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_78;
          }
          unsigned int v32 = 0;
          while (1)
          {
            uint64_t v33 = *v2;
            uint64_t v34 = *(void *)&a1[v33];
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
              goto LABEL_68;
            }
            int v36 = *(char *)(*(void *)&a1[*v5] + v34);
            *(void *)&a1[v33] = v35;
            if (v36 < 0)
            {
              BOOL v23 = v32++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_70;
          }
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_78;
          }
          unsigned int v37 = 0;
          while (1)
          {
            uint64_t v38 = *v2;
            uint64_t v39 = *(void *)&a1[v38];
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
              goto LABEL_68;
            }
            int v41 = *(char *)(*(void *)&a1[*v5] + v39);
            *(void *)&a1[v38] = v40;
            if (v41 < 0)
            {
              BOOL v23 = v37++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_70;
          }
        default:
          switch((v8 >> 3))
          {
            case 0x14u:
            case 0x15u:
              if (v16 != 1) {
                goto LABEL_78;
              }
              uint64_t v24 = *v2;
              unint64_t v25 = *(void *)&a1[v24];
              if (v25 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_69;
              }
              unint64_t v26 = v25 + 8;
              if (v26 > *(void *)&a1[*v3]) {
                goto LABEL_69;
              }
              *(void *)&a1[v24] = v26;
              continue;
            case 0x16u:
              if ((v8 & 7) != 0) {
                goto LABEL_78;
              }
              unsigned int v42 = 0;
              break;
            case 0x17u:
              if (v16 != 2 || !PBReaderPlaceMark() || !GEOClientNetworkTransactionMetricsIsValid(a1)) {
                goto LABEL_78;
              }
              PBReaderRecallMark();
              continue;
            default:
              goto LABEL_58;
          }
          break;
      }
      while (1)
      {
        uint64_t v43 = *v2;
        uint64_t v44 = *(void *)&a1[v43];
        unint64_t v45 = v44 + 1;
        if (v44 == -1 || v45 > *(void *)&a1[*v3]) {
          break;
        }
        int v46 = *(char *)(*(void *)&a1[*v5] + v44);
        *(void *)&a1[v43] = v45;
        if (v46 < 0)
        {
          BOOL v23 = v42++ > 8;
          if (!v23) {
            continue;
          }
        }
        goto LABEL_70;
      }
LABEL_68:
      uint64_t v14 = *v4;
LABEL_69:
      a1[v14] = 1;
LABEL_70:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v47 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v47;
}

void sub_189E1DF50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClientNetworkMetricsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = (HIBYTE(*(unsigned __int16 *)(a1 + 88)) & 1)
      + ((*(unsigned __int16 *)(a1 + 88) >> 9) & 1)
      + ((*(unsigned __int16 *)(a1 + 88) >> 7) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 | v10;
        char v89 = v14 & ~(_BYTE)v10 | v7;
        char v91 = v14 | v10 | v89;
        if (((v14 | v10) | v8)) {
          int v16 = 0;
        }
        else {
          int v16 = a3;
        }
        BOOL v17 = (int *)MEMORY[0x1E4F940E8];
        char v92 = (v16 == 0) | v15;
        unsigned int v18 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        char v90 = v14 | v10;
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_133;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v17;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_133:
      int v88 = 1;
      goto LABEL_134;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v15;
    if ((v92 & 1) == 0)
    {
      uint64_t v33 = v16;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_102;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + v19[923]) |= 4u;
        while (2)
        {
          uint64_t v40 = *v17;
          uint64_t v41 = *(void *)(v3 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(v3 + *v20) + v41);
            *(void *)(v3 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              BOOL v28 = v38++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v39) = 0;
        }
LABEL_107:
        uint64_t v81 = 68;
        goto LABEL_124;
      case 2:
        if (!v32) {
          goto LABEL_102;
        }
        if ((*(_WORD *)(a1 + v19[923]) & 0x100) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v47;

          --v9;
          goto LABEL_101;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_153;
        }
        uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        v9 += *(unsigned __int16 *)(a1 + 88) << 23 >> 31;
        char v15 = v90;
        unsigned int v18 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_132;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_102;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + v19[923]) |= 0x10u;
        while (2)
        {
          uint64_t v51 = *v17;
          uint64_t v52 = *(void *)(v3 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(v3 + *v20) + v52);
            *(void *)(v3 + v51) = v53;
            v39 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              BOOL v28 = v50++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v39) = 0;
        }
LABEL_111:
        uint64_t v81 = 76;
        goto LABEL_124;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_102;
        }
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v39 = 0;
        *(_WORD *)(a1 + v19[923]) |= 0x20u;
        while (2)
        {
          uint64_t v57 = *v17;
          uint64_t v58 = *(void *)(v3 + v57);
          unint64_t v59 = v58 + 1;
          if (v58 == -1 || v59 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(v3 + *v20) + v58);
            *(void *)(v3 + v57) = v59;
            v39 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              BOOL v28 = v56++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v39) = 0;
        }
LABEL_115:
        uint64_t v81 = 80;
        goto LABEL_124;
      case 5:
        if (v8)
        {
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v63 = 0;
          *(_WORD *)(a1 + v19[923]) |= 0x40u;
          while (1)
          {
            uint64_t v64 = *v17;
            uint64_t v65 = *(void *)(v3 + v64);
            unint64_t v66 = v65 + 1;
            if (v65 == -1 || v66 > *(void *)(v3 + *v6)) {
              break;
            }
            char v67 = *(unsigned char *)(*(void *)(v3 + *v20) + v65);
            *(void *)(v3 + v64) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if ((v67 & 0x80) == 0) {
              goto LABEL_117;
            }
            v61 += 7;
            BOOL v28 = v62++ >= 9;
            if (v28)
            {
              uint64_t v63 = 0;
              goto LABEL_119;
            }
          }
          *(unsigned char *)(v3 + *v18) = 1;
LABEL_117:
          if (*(unsigned char *)(v3 + *v18)) {
            uint64_t v63 = 0;
          }
LABEL_119:
          *(unsigned char *)(a1 + 84) = v63 != 0;
        }
        else
        {
LABEL_102:
          char v80 = PBReaderSkipValueWithTag();
          uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
          unsigned int v18 = (int *)MEMORY[0x1E4F940C8];
          char v15 = v90;
          if ((v80 & 1) == 0)
          {
            int v88 = 0;
            goto LABEL_134;
          }
        }
        goto LABEL_132;
      default:
        switch((int)v31)
        {
          case 20:
            if ((v8 & 1) == 0) {
              goto LABEL_102;
            }
            *(_WORD *)(a1 + v19[923]) |= 2u;
            uint64_t v44 = *v17;
            unint64_t v45 = *(void *)(v3 + v44);
            if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(void *)(v3 + *v6))
            {
              uint64_t v46 = *(void *)(*(void *)(v3 + *v20) + v45);
              *(void *)(v3 + v44) = v45 + 8;
            }
            else
            {
              *(unsigned char *)(v3 + *v18) = 1;
              uint64_t v46 = 0;
            }
            uint64_t v82 = 32;
            goto LABEL_131;
          case 21:
            if ((v8 & 1) == 0) {
              goto LABEL_102;
            }
            *(_WORD *)(a1 + v19[923]) |= 1u;
            uint64_t v71 = *v17;
            unint64_t v72 = *(void *)(v3 + v71);
            if (v72 <= 0xFFFFFFFFFFFFFFF7 && v72 + 8 <= *(void *)(v3 + *v6))
            {
              uint64_t v46 = *(void *)(*(void *)(v3 + *v20) + v72);
              *(void *)(v3 + v71) = v72 + 8;
            }
            else
            {
              *(unsigned char *)(v3 + *v18) = 1;
              uint64_t v46 = 0;
            }
            uint64_t v82 = 24;
LABEL_131:
            *(void *)(a1 + v82) = v46;
            goto LABEL_132;
          case 22:
            if ((v8 & 1) == 0) {
              goto LABEL_102;
            }
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v39 = 0;
            *(_WORD *)(a1 + v19[923]) |= 8u;
            while (2)
            {
              uint64_t v75 = *v17;
              uint64_t v76 = *(void *)(v3 + v75);
              unint64_t v77 = v76 + 1;
              if (v76 == -1 || v77 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v18) = 1;
              }
              else
              {
                char v78 = *(unsigned char *)(*(void *)(v3 + *v20) + v76);
                *(void *)(v3 + v75) = v77;
                v39 |= (unint64_t)(v78 & 0x7F) << v73;
                if (v78 < 0)
                {
                  v73 += 7;
                  BOOL v28 = v74++ >= 9;
                  if (v28)
                  {
                    LODWORD(v39) = 0;
                    goto LABEL_123;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v18)) {
              LODWORD(v39) = 0;
            }
LABEL_123:
            uint64_t v81 = 72;
LABEL_124:
            *(_DWORD *)(a1 + v81) = v39;
            goto LABEL_132;
          case 23:
            if (!v32 || (*(_WORD *)(a1 + v19[923]) & 0x200) != 0) {
              goto LABEL_102;
            }
            if ((PBReaderPlaceMark() & 1) == 0) {
              goto LABEL_153;
            }
            uint64_t v79 = objc_alloc_init(GEOClientNetworkTransactionMetrics);
            if (GEOClientNetworkTransactionMetricsReadAllFrom((uint64_t)v79, (void *)v3))
            {
              PBReaderRecallMark();
              -[GEOClientNetworkMetrics _addNoFlagsTransactionMetrics:](a1, v79);

LABEL_101:
              char v15 = v90;
              unsigned int v18 = (int *)MEMORY[0x1E4F940C8];
              uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
LABEL_132:
              if (!(v91 & 1 | (v9 != 0))) {
                goto LABEL_133;
              }
              continue;
            }

LABEL_153:
            int v88 = 0;
            char v15 = v90;
            unsigned int v18 = (int *)MEMORY[0x1E4F940C8];
            uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
LABEL_134:
            if (v89) {
LABEL_135:
            }
              *(_WORD *)(a1 + v19[923]) |= 0x80u;
            if (v15 & 1 | ((v88 & 1) == 0))
            {
              *(_WORD *)(a1 + v19[923]) |= 0x100u;
              *(_WORD *)(a1 + v19[923]) |= 0x200u;
              goto LABEL_146;
            }
            if (v16)
            {
              while (2)
              {
                while (1)
                {
                  int v84 = *v16++;
                  int v83 = v84;
                  if (v84 == 2) {
                    break;
                  }
                  if (v83 == 23)
                  {
                    __int16 v85 = 512;
                    goto LABEL_145;
                  }
                  if (!v83) {
                    goto LABEL_146;
                  }
                }
                __int16 v85 = 256;
LABEL_145:
                *(_WORD *)(a1 + v19[923]) |= v85;
                continue;
              }
            }
LABEL_146:
            if (v88)
            {
              unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
              if ((v15 & 1) == 0) {
                return v3;
              }
LABEL_150:
              int64x2_t v86 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = 0;
            }
            else
            {
              unint64_t v3 = 0;
              if (v15) {
                goto LABEL_150;
              }
            }
            return v3;
          default:
            if ((v89 & 1) == 0 || (*(_WORD *)(a1 + v19[923]) & 0x80) != 0) {
              goto LABEL_102;
            }
            if (!*(void *)(a1 + 16))
            {
              id v68 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              unint64_t v69 = *(void **)(a1 + 16);
              *(void *)(a1 + 16) = v68;
            }
            int v70 = PBUnknownFieldAdd();
            char v15 = v90;
            unsigned int v18 = (int *)MEMORY[0x1E4F940C8];
            uint64_t v19 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
            if (v70) {
              goto LABEL_132;
            }
            int v88 = 0;
            goto LABEL_135;
        }
    }
  }
}

void _GEOClientNetworkMetricsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 48);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5++), "readAll:", 1, (void)v6);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEOClientNetworkMetricsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOClientNetworkMetricsReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOClientNetworkMetricsReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOClientNetworkMetricsReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOClientNetworkMetricsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOClientNetworkMetricsCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189E1FB28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClientNetworkMetricsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOClientNetworkMetricsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E1FB8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientNetworkTransactionMetricsIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
          if (v16 != 1) {
            goto LABEL_86;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_82;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_82;
          }
          *(void *)&a1[v18] = v20;
          continue;
        case 0xCu:
          if ((v8 & 7) != 0) {
            goto LABEL_86;
          }
          unsigned int v21 = 0;
          while (1)
          {
            uint64_t v22 = *v2;
            uint64_t v23 = *(void *)&a1[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
              goto LABEL_81;
            }
            int v25 = *(char *)(*(void *)&a1[*v5] + v23);
            *(void *)&a1[v22] = v24;
            if (v25 < 0)
            {
              BOOL v26 = v21++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_83;
          }
        case 0xDu:
          if ((v8 & 7) != 0) {
            goto LABEL_86;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              goto LABEL_81;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v26 = v27++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_83;
          }
        case 0xEu:
          if ((v8 & 7) != 0) {
            goto LABEL_86;
          }
          unsigned int v32 = 0;
          while (1)
          {
            uint64_t v33 = *v2;
            uint64_t v34 = *(void *)&a1[v33];
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
              goto LABEL_81;
            }
            int v36 = *(char *)(*(void *)&a1[*v5] + v34);
            *(void *)&a1[v33] = v35;
            if (v36 < 0)
            {
              BOOL v26 = v32++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_83;
          }
        case 0xFu:
          if ((v8 & 7) != 0) {
            goto LABEL_86;
          }
          unsigned int v37 = 0;
          while (1)
          {
            uint64_t v38 = *v2;
            uint64_t v39 = *(void *)&a1[v38];
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
              goto LABEL_81;
            }
            int v41 = *(char *)(*(void *)&a1[*v5] + v39);
            *(void *)&a1[v38] = v40;
            if (v41 < 0)
            {
              BOOL v26 = v37++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_83;
          }
        case 0x10u:
          if ((v8 & 7) != 0) {
            goto LABEL_86;
          }
          unsigned int v42 = 0;
          while (1)
          {
            uint64_t v43 = *v2;
            uint64_t v44 = *(void *)&a1[v43];
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)&a1[*v3]) {
              goto LABEL_81;
            }
            int v46 = *(char *)(*(void *)&a1[*v5] + v44);
            *(void *)&a1[v43] = v45;
            if (v46 < 0)
            {
              BOOL v26 = v42++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_83;
          }
        case 0x11u:
          if ((v8 & 7) != 0) {
            goto LABEL_86;
          }
          unsigned int v47 = 0;
          while (1)
          {
            uint64_t v48 = *v2;
            uint64_t v49 = *(void *)&a1[v48];
            unint64_t v50 = v49 + 1;
            if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
              goto LABEL_81;
            }
            int v51 = *(char *)(*(void *)&a1[*v5] + v49);
            *(void *)&a1[v48] = v50;
            if (v51 < 0)
            {
              BOOL v26 = v47++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_83;
          }
        case 0x12u:
          if ((v8 & 7) != 0) {
            goto LABEL_86;
          }
          unsigned int v52 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_86:
          BOOL v57 = 0;
          goto LABEL_85;
      }
      while (1)
      {
        uint64_t v53 = *v2;
        uint64_t v54 = *(void *)&a1[v53];
        unint64_t v55 = v54 + 1;
        if (v54 == -1 || v55 > *(void *)&a1[*v3]) {
          break;
        }
        int v56 = *(char *)(*(void *)&a1[*v5] + v54);
        *(void *)&a1[v53] = v55;
        if (v56 < 0)
        {
          BOOL v26 = v52++ > 8;
          if (!v26) {
            continue;
          }
        }
        goto LABEL_83;
      }
LABEL_81:
      uint64_t v14 = *v4;
LABEL_82:
      a1[v14] = 1;
LABEL_83:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v57 = a1[*v4] == 0;
LABEL_85:
  PBReaderRecallMark();
  return v57;
}

BOOL GEOClientNetworkMetricsIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  BOOL v2 = (*(_WORD *)(a1 + 88) & 0x700) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189E2061C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E20D40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientNetworkTransactionMetricsReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            *(_DWORD *)(a1 + 120) |= 0x10u;
            uint64_t v18 = *v4;
            unint64_t v19 = *(void *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v19);
              *(void *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 48;
            goto LABEL_158;
          case 2u:
            *(_DWORD *)(a1 + 120) |= 8u;
            uint64_t v23 = *v4;
            unint64_t v24 = *(void *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v24);
              *(void *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 40;
            goto LABEL_158;
          case 3u:
            *(_DWORD *)(a1 + 120) |= 4u;
            uint64_t v25 = *v4;
            unint64_t v26 = *(void *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v26);
              *(void *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 32;
            goto LABEL_158;
          case 4u:
            *(_DWORD *)(a1 + 120) |= 2u;
            uint64_t v27 = *v4;
            unint64_t v28 = *(void *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v28);
              *(void *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 24;
            goto LABEL_158;
          case 5u:
            *(_DWORD *)(a1 + 120) |= 0x400u;
            uint64_t v29 = *v4;
            unint64_t v30 = *(void *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v30);
              *(void *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 96;
            goto LABEL_158;
          case 6u:
            *(_DWORD *)(a1 + 120) |= 0x200u;
            uint64_t v31 = *v4;
            unint64_t v32 = *(void *)&v3[v31];
            if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v32);
              *(void *)&v3[v31] = v32 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 88;
            goto LABEL_158;
          case 7u:
            *(_DWORD *)(a1 + 120) |= 1u;
            uint64_t v33 = *v4;
            unint64_t v34 = *(void *)&v3[v33];
            if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v34);
              *(void *)&v3[v33] = v34 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 16;
            goto LABEL_158;
          case 8u:
            *(_DWORD *)(a1 + 120) |= 0x40u;
            uint64_t v35 = *v4;
            unint64_t v36 = *(void *)&v3[v35];
            if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v36);
              *(void *)&v3[v35] = v36 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 64;
            goto LABEL_158;
          case 9u:
            *(_DWORD *)(a1 + 120) |= 0x20u;
            uint64_t v37 = *v4;
            unint64_t v38 = *(void *)&v3[v37];
            if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v38);
              *(void *)&v3[v37] = v38 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 56;
            goto LABEL_158;
          case 0xAu:
            *(_DWORD *)(a1 + 120) |= 0x100u;
            uint64_t v39 = *v4;
            unint64_t v40 = *(void *)&v3[v39];
            if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v40);
              *(void *)&v3[v39] = v40 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 80;
            goto LABEL_158;
          case 0xBu:
            *(_DWORD *)(a1 + 120) |= 0x80u;
            uint64_t v41 = *v4;
            unint64_t v42 = *(void *)&v3[v41];
            if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v42);
              *(void *)&v3[v41] = v42 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v93 = 72;
LABEL_158:
            *(void *)(a1 + v93) = v20;
            continue;
          case 0xCu:
            char v43 = 0;
            unsigned int v44 = 0;
            uint64_t v45 = 0;
            *(_DWORD *)(a1 + 120) |= 0x1000u;
            while (2)
            {
              uint64_t v46 = *v4;
              uint64_t v47 = *(void *)&v3[v46];
              unint64_t v48 = v47 + 1;
              if (v47 == -1 || v48 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v49 = *(unsigned char *)(*(void *)&v3[*v7] + v47);
                *(void *)&v3[v46] = v48;
                v45 |= (unint64_t)(v49 & 0x7F) << v43;
                if (v49 < 0)
                {
                  v43 += 7;
                  BOOL v15 = v44++ >= 9;
                  if (v15)
                  {
                    LODWORD(v45) = 0;
                    goto LABEL_109;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v45) = 0;
            }
LABEL_109:
            uint64_t v90 = 108;
            goto LABEL_130;
          case 0xDu:
            char v50 = 0;
            unsigned int v51 = 0;
            uint64_t v52 = 0;
            *(_DWORD *)(a1 + 120) |= 0x8000u;
            while (2)
            {
              uint64_t v53 = *v4;
              uint64_t v54 = *(void *)&v3[v53];
              unint64_t v55 = v54 + 1;
              if (v54 == -1 || v55 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v56 = *(unsigned char *)(*(void *)&v3[*v7] + v54);
                *(void *)&v3[v53] = v55;
                v52 |= (unint64_t)(v56 & 0x7F) << v50;
                if (v56 < 0)
                {
                  v50 += 7;
                  BOOL v15 = v51++ >= 9;
                  if (v15)
                  {
                    uint64_t v52 = 0;
                    goto LABEL_113;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v52 = 0;
            }
LABEL_113:
            BOOL v91 = v52 != 0;
            uint64_t v92 = 117;
            goto LABEL_135;
          case 0xEu:
            char v57 = 0;
            unsigned int v58 = 0;
            uint64_t v59 = 0;
            *(_DWORD *)(a1 + 120) |= 0x10000u;
            while (2)
            {
              uint64_t v60 = *v4;
              uint64_t v61 = *(void *)&v3[v60];
              unint64_t v62 = v61 + 1;
              if (v61 == -1 || v62 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v63 = *(unsigned char *)(*(void *)&v3[*v7] + v61);
                *(void *)&v3[v60] = v62;
                v59 |= (unint64_t)(v63 & 0x7F) << v57;
                if (v63 < 0)
                {
                  v57 += 7;
                  BOOL v15 = v58++ >= 9;
                  if (v15)
                  {
                    uint64_t v59 = 0;
                    goto LABEL_117;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v59 = 0;
            }
LABEL_117:
            BOOL v91 = v59 != 0;
            uint64_t v92 = 118;
            goto LABEL_135;
          case 0xFu:
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v45 = 0;
            *(_DWORD *)(a1 + 120) |= 0x2000u;
            while (2)
            {
              uint64_t v66 = *v4;
              uint64_t v67 = *(void *)&v3[v66];
              unint64_t v68 = v67 + 1;
              if (v67 == -1 || v68 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v69 = *(unsigned char *)(*(void *)&v3[*v7] + v67);
                *(void *)&v3[v66] = v68;
                v45 |= (unint64_t)(v69 & 0x7F) << v64;
                if (v69 < 0)
                {
                  v64 += 7;
                  BOOL v15 = v65++ >= 9;
                  if (v15)
                  {
                    LODWORD(v45) = 0;
                    goto LABEL_121;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v45) = 0;
            }
LABEL_121:
            uint64_t v90 = 112;
            goto LABEL_130;
          case 0x10u:
            char v70 = 0;
            unsigned int v71 = 0;
            uint64_t v72 = 0;
            *(_DWORD *)(a1 + 120) |= 0x4000u;
            while (2)
            {
              uint64_t v73 = *v4;
              uint64_t v74 = *(void *)&v3[v73];
              unint64_t v75 = v74 + 1;
              if (v74 == -1 || v75 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v76 = *(unsigned char *)(*(void *)&v3[*v7] + v74);
                *(void *)&v3[v73] = v75;
                v72 |= (unint64_t)(v76 & 0x7F) << v70;
                if (v76 < 0)
                {
                  v70 += 7;
                  BOOL v15 = v71++ >= 9;
                  if (v15)
                  {
                    uint64_t v72 = 0;
                    goto LABEL_125;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v72 = 0;
            }
LABEL_125:
            BOOL v91 = v72 != 0;
            uint64_t v92 = 116;
            goto LABEL_135;
          case 0x11u:
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v45 = 0;
            *(_DWORD *)(a1 + 120) |= 0x800u;
            while (2)
            {
              uint64_t v79 = *v4;
              uint64_t v80 = *(void *)&v3[v79];
              unint64_t v81 = v80 + 1;
              if (v80 == -1 || v81 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v82 = *(unsigned char *)(*(void *)&v3[*v7] + v80);
                *(void *)&v3[v79] = v81;
                v45 |= (unint64_t)(v82 & 0x7F) << v77;
                if (v82 < 0)
                {
                  v77 += 7;
                  BOOL v15 = v78++ >= 9;
                  if (v15)
                  {
                    LODWORD(v45) = 0;
                    goto LABEL_129;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v45) = 0;
            }
LABEL_129:
            uint64_t v90 = 104;
LABEL_130:
            *(_DWORD *)(a1 + v90) = v45;
            continue;
          case 0x12u:
            char v83 = 0;
            unsigned int v84 = 0;
            uint64_t v85 = 0;
            *(_DWORD *)(a1 + 120) |= 0x20000u;
            break;
          default:
            if (!*(void *)(a1 + 8))
            {
              id v21 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              uint64_t v22 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v21;
            }
            if (!PBUnknownFieldAdd()) {
              goto LABEL_161;
            }
            continue;
        }
        while (1)
        {
          uint64_t v86 = *v4;
          uint64_t v87 = *(void *)&v3[v86];
          unint64_t v88 = v87 + 1;
          if (v87 == -1 || v88 > *(void *)&v3[*v5]) {
            break;
          }
          char v89 = *(unsigned char *)(*(void *)&v3[*v7] + v87);
          *(void *)&v3[v86] = v88;
          v85 |= (unint64_t)(v89 & 0x7F) << v83;
          if ((v89 & 0x80) == 0) {
            goto LABEL_132;
          }
          v83 += 7;
          BOOL v15 = v84++ >= 9;
          if (v15)
          {
            uint64_t v85 = 0;
            goto LABEL_134;
          }
        }
        v3[*v6] = 1;
LABEL_132:
        if (v3[*v6]) {
          uint64_t v85 = 0;
        }
LABEL_134:
        BOOL v91 = v85 != 0;
        uint64_t v92 = 119;
LABEL_135:
        *(unsigned char *)(a1 + v92) = v91;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v94 = v3[*v6] == 0;
  }
  else
  {
LABEL_161:
    BOOL v94 = 0;
  }
  objc_sync_exit(v3);

  return v94;
}

void sub_189E2344C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOClientNetworkTransactionMetricsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOClientNetworkTransactionMetricsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E234F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E24B44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCollectionPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFBFFFDFFFCLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v7;
        unsigned __int8 v18 = v16 | v11;
        char v68 = v17;
        char v69 = v8;
        char v70 = v18 | v17;
        if ((v18 | v8)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        char v71 = (v19 == 0) | v18;
        BOOL v72 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        id v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v9;
        uint64_t v7 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_93;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_93:
      int v66 = 1;
      goto LABEL_94;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v72;
    if ((v71 & 1) == 0)
    {
      uint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v69 & 1) == 0) {
          goto LABEL_74;
        }
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 72) |= 2u;
        while (1)
        {
          uint64_t v42 = *v20;
          uint64_t v43 = *(void *)(v3 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(v3 + *v6)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(v3 + *v22) + v43);
          *(void *)(v3 + v42) = v44;
          v41 |= (unint64_t)(v45 & 0x7F) << v39;
          if ((v45 & 0x80) == 0) {
            goto LABEL_77;
          }
          v39 += 7;
          BOOL v30 = v40++ >= 9;
          if (v30)
          {
            LODWORD(v41) = 0;
            goto LABEL_79;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_77:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v41) = 0;
        }
LABEL_79:
        *(_DWORD *)(a1 + 68) = v41;
        goto LABEL_92;
      case 2:
        if ((v69 & 1) == 0) {
          goto LABEL_74;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(unsigned char *)(a1 + 72) |= 1u;
        while (2)
        {
          uint64_t v52 = *v20;
          uint64_t v53 = *(void *)(v3 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v22) + v53);
            *(void *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v30 = v50++ >= 9;
              if (v30)
              {
                uint64_t v51 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v51 = 0;
        }
LABEL_83:
        *(void *)(a1 + 40) = v51;
        goto LABEL_92;
      case 3:
        if (!v34) {
          goto LABEL_74;
        }
        if ((*(unsigned char *)(a1 + 72) & 8) == 0)
        {
          uint64_t v56 = PBReaderReadString();
          uint64_t v57 = 24;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_110;
        }
        char v61 = 16 * *(unsigned char *)(a1 + 72);
        goto LABEL_90;
      case 4:
        if (!v34) {
          goto LABEL_74;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_110;
          }
          char v61 = 8 * *(unsigned char *)(a1 + 72);
LABEL_90:
          v9 += v61 >> 7;
          goto LABEL_91;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_110;
        }
        unsigned int v58 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v58, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v59 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v58;
LABEL_73:

          --v9;
LABEL_91:
          id v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_92:
          if (!(v70 & 1 | (v9 != 0))) {
            goto LABEL_93;
          }
          continue;
        }

LABEL_110:
        int v66 = 0;
        id v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_94:
        uint64_t v67 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
        if (v68) {
LABEL_95:
        }
          *(unsigned char *)(a1 + v67[958]) |= 4u;
        if (v72 || (v66 & 1) == 0)
        {
          *(unsigned char *)(a1 + v67[958]) |= 8u;
          *(unsigned char *)(a1 + v67[958]) |= 0x10u;
          *(unsigned char *)(a1 + v67[958]) |= 0x20u;
        }
        else if (v19)
        {
          while (1)
          {
            int v62 = *v19++;
            char v63 = 8;
            switch(v62)
            {
              case 0:
                goto LABEL_103;
              case 3:
                goto LABEL_102;
              case 4:
                char v63 = 16;
                goto LABEL_102;
              case 5:
                char v63 = 32;
LABEL_102:
                *(unsigned char *)(a1 + v67[958]) |= v63;
                break;
              default:
                continue;
            }
          }
        }
LABEL_103:
        if (v66) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v72)
        {
          char v64 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 5:
        if (!v34) {
          goto LABEL_74;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x20) == 0)
        {
          uint64_t v56 = PBReaderReadString();
          uint64_t v57 = 48;
LABEL_72:
          uint64_t v59 = *(void **)(a1 + v57);
          *(void *)(a1 + v57) = v56;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_110;
        }
        char v61 = 4 * *(unsigned char *)(a1 + 72);
        goto LABEL_90;
      default:
        if ((v68 & 1) == 0 || (*(unsigned char *)(a1 + 72) & 4) != 0)
        {
LABEL_74:
          char v60 = PBReaderSkipValueWithTag();
          id v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v60 & 1) == 0)
          {
            int v66 = 0;
            goto LABEL_94;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v46 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v47 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v46;
          }
          int v48 = PBUnknownFieldAdd();
          id v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v48)
          {
            int v66 = 0;
            uint64_t v67 = &OBJC_IVAR___GEORPCorrectedLabel__featureRegion;
            goto LABEL_95;
          }
        }
        goto LABEL_92;
    }
  }
}

void sub_189E25450(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E255C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E25D74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCollectionPlaceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOCollectionPlaceReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOCollectionPlaceReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOCollectionPlaceReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOCollectionPlaceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 32) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189E25F1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCollectionPlaceReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOCollectionPlaceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E25F80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCollectionPlaceIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_47;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_35;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_44;
          }
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_47;
          }
          unsigned int v23 = 0;
          break;
        case 3u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
            goto LABEL_47;
          }
          PBReaderRecallMark();
          continue;
        case 5u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        default:
LABEL_43:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_47:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v24 = *v2;
        uint64_t v25 = *(void *)&a1[v24];
        unint64_t v26 = v25 + 1;
        if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
          break;
        }
        int v27 = *(char *)(*(void *)&a1[*v5] + v25);
        *(void *)&a1[v24] = v26;
        if (v27 < 0)
        {
          BOOL v22 = v23++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_44;
      }
LABEL_35:
      a1[*v4] = 1;
LABEL_44:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

void sub_189E26468(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCollectionPlaceIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  BOOL v2 = (*(unsigned char *)(a1 + 72) & 0x78) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189E26864(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E26C1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E26EDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocationInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 > 1;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v48 = v15 | v8;
        char v49 = v16 | v15 | v8;
        if ((v16 | v9)) {
          unsigned int v17 = 0;
        }
        else {
          unsigned int v17 = a3;
        }
        uint64_t v18 = (int *)MEMORY[0x1E4F940E8];
        char v50 = (v17 == 0) | v16;
        BOOL v51 = v16;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_65;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_65:
      int v47 = 1;
      goto LABEL_66;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v51;
    if ((v50 & 1) == 0)
    {
      unint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 3)
    {
      if (!v32) {
        goto LABEL_55;
      }
      if ((*(unsigned char *)(a1 + 60) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_81;
        }
        char v42 = *(unsigned char *)(a1 + 60) << 6;
        goto LABEL_63;
      }
      uint64_t v37 = PBReaderReadString();
      uint64_t v38 = 24;
      goto LABEL_48;
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (!v32) {
        goto LABEL_55;
      }
      if ((*(unsigned char *)(a1 + 60) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_81;
        }
        char v42 = 32 * *(unsigned char *)(a1 + 60);
        goto LABEL_63;
      }
      uint64_t v37 = PBReaderReadString();
      uint64_t v38 = 32;
      goto LABEL_48;
    }
    if (v48 & 1) == 0 || (*(unsigned char *)(a1 + 60))
    {
LABEL_55:
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_81;
      }
      goto LABEL_64;
    }
    if (!*(void *)(a1 + 16))
    {
      id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      uint64_t v41 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v40;
    }
    if (!PBUnknownFieldAdd())
    {
      int v47 = 0;
      uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_67;
    }
LABEL_64:
    uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    if (!(v49 & 1 | (v10 != 0))) {
      goto LABEL_65;
    }
  }
  if (!v32) {
    goto LABEL_55;
  }
  if ((*(unsigned char *)(a1 + 60) & 8) == 0)
  {
    uint64_t v37 = PBReaderReadString();
    uint64_t v38 = 40;
LABEL_48:
    char v39 = *(void **)(a1 + v38);
    *(void *)(a1 + v38) = v37;

    --v10;
    goto LABEL_64;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v42 = 16 * *(unsigned char *)(a1 + 60);
LABEL_63:
    v10 += v42 >> 7;
    goto LABEL_64;
  }
LABEL_81:
  int v47 = 0;
  uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_66:
  if ((v48 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_67:
  *(unsigned char *)(a1 + 60) |= 1u;
LABEL_68:
  if (v51 || (v47 & 1) == 0)
  {
    *(unsigned char *)(a1 + 60) |= 4u;
    *(unsigned char *)(a1 + 60) |= 8u;
    *(unsigned char *)(a1 + 60) |= 2u;
  }
  else if (v17)
  {
    while (1)
    {
      int v43 = *v17++;
      char v44 = 4;
      switch(v43)
      {
        case 0:
          goto LABEL_75;
        case 1:
          goto LABEL_74;
        case 2:
          char v44 = 8;
          goto LABEL_74;
        case 3:
          char v44 = 2;
LABEL_74:
          *(unsigned char *)(a1 + 60) |= v44;
          break;
        default:
          continue;
      }
    }
  }
LABEL_75:
  if (v47) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v51)
  {
    char v45 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189E275B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E27720(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E27D9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocationInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOLocationInfoReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOLocationInfoReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOLocationInfoReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOLocationInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189E27F2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocationInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOLocationInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E27F90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocationInfoIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_30;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_30;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        if (v15 != 2) {
          goto LABEL_32;
        }
LABEL_26:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_29;
      }
      if (v17 == 1)
      {
        if (v15 != 2) {
          goto LABEL_32;
        }
        goto LABEL_26;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_32:
        BOOL v18 = 0;
        goto LABEL_31;
      }
LABEL_29:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_30;
      }
    }
    if (v15 != 2) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }
LABEL_30:
  BOOL v18 = a1[*v4] == 0;
LABEL_31:
  PBReaderRecallMark();
  return v18;
}

void sub_189E28330(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocationInfoIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  BOOL v2 = (*(unsigned char *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_189E2861C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E288BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E28D28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemAddressBookAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFBFFFALL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 76) & 4) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 2;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v65 = v15;
        char v66 = v16 | v15;
        if ((v16 | v8)) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = a3;
        }
        BOOL v18 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        char v67 = (v17 == 0) | v16;
        BOOL v68 = v16;
        unint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_94;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_94:
      int v63 = 1;
      goto LABEL_95;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v68;
    if ((v67 & 1) == 0)
    {
      unint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_73;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + 76) |= 1u;
        while (1)
        {
          uint64_t v40 = *v18;
          uint64_t v41 = *(void *)(v3 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(v3 + *v6)) {
            break;
          }
          char v43 = *(unsigned char *)(*(void *)(v3 + *v20) + v41);
          *(void *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0) {
            goto LABEL_76;
          }
          v37 += 7;
          BOOL v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_78;
          }
        }
        *(unsigned char *)(v3 + *v19) = 1;
LABEL_76:
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v39) = 0;
        }
LABEL_78:
        *(_DWORD *)(a1 + 68) = v39;
        goto LABEL_93;
      case 2:
        if (!v32) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x20) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 40;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_113;
        }
        char v58 = 4 * *(unsigned char *)(a1 + 76);
        goto LABEL_91;
      case 3:
        if (!v32) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x40) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 48;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_113;
        }
        char v58 = 2 * *(unsigned char *)(a1 + 76);
        goto LABEL_91;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_73;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(unsigned char *)(a1 + 76) |= 2u;
        while (2)
        {
          uint64_t v52 = *v18;
          uint64_t v53 = *(void *)(v3 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v20) + v53);
            *(void *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v28 = v50++ >= 9;
              if (v28)
              {
                uint64_t v51 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          uint64_t v51 = 0;
        }
LABEL_82:
        *(unsigned char *)(a1 + 72) = v51 != 0;
        goto LABEL_93;
      case 5:
        if (!v32) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 76) & 8) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 24;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_113;
        }
        char v58 = 16 * *(unsigned char *)(a1 + 76);
        goto LABEL_91;
      case 6:
        if (!v32) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x10) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 32;
LABEL_72:
          uint64_t v56 = *(void **)(a1 + v48);
          *(void *)(a1 + v48) = v47;

          --v9;
LABEL_92:
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_93;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v58 = 8 * *(unsigned char *)(a1 + 76);
LABEL_91:
          v9 += v58 >> 7;
          goto LABEL_92;
        }
LABEL_113:
        int v63 = 0;
        char v64 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_96:
        if (v65) {
LABEL_97:
        }
          *(unsigned char *)(a1 + v64[513]) |= 4u;
        if (v68 || (v63 & 1) == 0)
        {
          *(unsigned char *)(a1 + v64[513]) |= 0x20u;
          *(unsigned char *)(a1 + v64[513]) |= 0x40u;
          *(unsigned char *)(a1 + v64[513]) |= 8u;
          *(unsigned char *)(a1 + v64[513]) |= 0x10u;
        }
        else if (v17)
        {
          while (1)
          {
            int v60 = *v17++;
            char v59 = 32;
            switch(v60)
            {
              case 0:
                goto LABEL_107;
              case 2:
                goto LABEL_105;
              case 3:
                char v59 = 64;
                goto LABEL_105;
              case 5:
                char v59 = 8;
                goto LABEL_105;
              case 6:
                char v59 = 16;
LABEL_105:
                *(unsigned char *)(a1 + v64[513]) |= v59;
                break;
              default:
                continue;
            }
          }
        }
LABEL_107:
        if (v63) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v68)
        {
          char v61 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v65 & 1) == 0 || (*(unsigned char *)(a1 + 76) & 4) != 0)
        {
LABEL_73:
          char v57 = PBReaderSkipValueWithTag();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v57 & 1) == 0)
          {
            int v63 = 0;
LABEL_95:
            char v64 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_96;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v46)
          {
            int v63 = 0;
            char v64 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_97;
          }
        }
LABEL_93:
        if (!(v66 & 1 | (v9 != 0))) {
          goto LABEL_94;
        }
        continue;
    }
  }
}

void sub_189E29668(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E29848(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E299B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2A220(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemAddressBookAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMapItemAddressBookAttributesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOMapItemAddressBookAttributesReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOMapItemAddressBookAttributesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOMapItemAddressBookAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189E2A3AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemAddressBookAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOMapItemAddressBookAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E2A410(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemAddressBookAttributesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_47;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_39;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_44;
          }
        case 2u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        case 3u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_47;
          }
          unsigned int v23 = 0;
          break;
        case 5u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        case 6u:
          if (v15 == 2) {
            goto LABEL_43;
          }
          goto LABEL_47;
        default:
LABEL_43:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_47:
          BOOL v28 = 0;
          goto LABEL_46;
      }
      while (1)
      {
        uint64_t v24 = *v2;
        uint64_t v25 = *(void *)&a1[v24];
        unint64_t v26 = v25 + 1;
        if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
          break;
        }
        int v27 = *(char *)(*(void *)&a1[*v5] + v25);
        *(void *)&a1[v24] = v26;
        if (v27 < 0)
        {
          BOOL v22 = v23++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_44;
      }
LABEL_39:
      a1[*v4] = 1;
LABEL_44:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v28 = a1[*v4] == 0;
LABEL_46:
  PBReaderRecallMark();
  return v28;
}

void sub_189E2A900(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemAddressBookAttributesIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  BOOL v2 = *(unsigned __int8 *)(a1 + 76) > 7u;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189E2ACFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2B11C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2B4F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemClientAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOMapItemClientAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E2BBF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemClientAttributesIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOMapItemAddressBookAttributesIsValid(a1)) {
            goto LABEL_36;
          }
          goto LABEL_39;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemRoutineAttributesIsValid(a1)) {
            goto LABEL_39;
          }
          goto LABEL_36;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemCorrectedLocationAttributesIsValid(a1)) {
            goto LABEL_39;
          }
          goto LABEL_36;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemMapsSyncAttributesIsValid(a1)) {
            goto LABEL_39;
          }
LABEL_36:
          PBReaderRecallMark();
          goto LABEL_37;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_39:
            PBReaderRecallMark();
            return 0;
          }
LABEL_37:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_38;
          }
          break;
      }
    }
  }
LABEL_38:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOMapItemRoutineAttributesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_50;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              goto LABEL_43;
            }
            int v22 = *(char *)(*(void *)&a1[*v5] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              BOOL v23 = v18++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_47;
          }
        case 2u:
          if (v16 == 2) {
            goto LABEL_46;
          }
          goto LABEL_50;
        case 3u:
          if (v16 != 1) {
            goto LABEL_50;
          }
          uint64_t v24 = *v2;
          unint64_t v25 = *(void *)&a1[v24];
          if (v25 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_44;
          }
          unint64_t v26 = v25 + 8;
          if (v26 > *(void *)&a1[*v3]) {
            goto LABEL_44;
          }
          *(void *)&a1[v24] = v26;
          continue;
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_50;
          }
          unsigned int v27 = 0;
          break;
        case 5u:
          if (v16 != 2) {
            goto LABEL_50;
          }
LABEL_46:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_50:
          BOOL v32 = 0;
          goto LABEL_49;
        default:
          if (!PBReaderSkipValueWithTag()) {
            goto LABEL_50;
          }
          continue;
      }
      while (1)
      {
        uint64_t v28 = *v2;
        uint64_t v29 = *(void *)&a1[v28];
        unint64_t v30 = v29 + 1;
        if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
          break;
        }
        int v31 = *(char *)(*(void *)&a1[*v5] + v29);
        *(void *)&a1[v28] = v30;
        if (v31 < 0)
        {
          BOOL v23 = v27++ > 8;
          if (!v23) {
            continue;
          }
        }
        goto LABEL_47;
      }
LABEL_43:
      uint64_t v14 = *v4;
LABEL_44:
      a1[v14] = 1;
LABEL_47:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v32 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v32;
}

BOOL GEOMapItemCorrectedLocationAttributesIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOLatLngIsValid(a1)) {
            goto LABEL_26;
          }
          goto LABEL_49;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOAddressIsValid(a1)) {
            goto LABEL_49;
          }
LABEL_26:
          PBReaderRecallMark();
          continue;
        case 3u:
          if (v16 == 2) {
            goto LABEL_30;
          }
          goto LABEL_49;
        case 4u:
          if (v16 == 2) {
            goto LABEL_30;
          }
          goto LABEL_49;
        case 5u:
          if (v16 != 1) {
            goto LABEL_49;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_45;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_45;
          }
          *(void *)&a1[v18] = v20;
          continue;
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_49;
          }
          unsigned int v21 = 0;
          break;
        default:
LABEL_30:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_49:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v22 = *v2;
        uint64_t v23 = *(void *)&a1[v22];
        unint64_t v24 = v23 + 1;
        if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
          break;
        }
        int v25 = *(char *)(*(void *)&a1[*v5] + v23);
        *(void *)&a1[v22] = v24;
        if (v25 < 0 && v21++ <= 8) {
          continue;
        }
        goto LABEL_46;
      }
      uint64_t v14 = *v4;
LABEL_45:
      a1[v14] = 1;
LABEL_46:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

BOOL GEOMapItemMapsSyncAttributesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_38;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_38;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_40;
        }
        unsigned int v18 = 0;
        while (1)
        {
          uint64_t v19 = *v2;
          uint64_t v20 = *(void *)&a1[v19];
          unint64_t v21 = v20 + 1;
          if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
            break;
          }
          int v22 = *(char *)(*(void *)&a1[*v5] + v20);
          *(void *)&a1[v19] = v21;
          if (v22 < 0 && v18++ <= 8) {
            continue;
          }
          goto LABEL_37;
        }
        a1[*v4] = 1;
        goto LABEL_37;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        if (v15 != 2) {
          goto LABEL_40;
        }
        goto LABEL_32;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_40:
        BOOL v24 = 0;
        goto LABEL_39;
      }
LABEL_37:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_38;
      }
    }
    if (v15 != 2) {
      goto LABEL_40;
    }
LABEL_32:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_40;
    }
    goto LABEL_37;
  }
LABEL_38:
  BOOL v24 = a1[*v4] == 0;
LABEL_39:
  PBReaderRecallMark();
  return v24;
}

BOOL _GEOMapItemClientAttributesIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v2 = *(unsigned char *)(a1 + 68);
  if ((v2 & 0x20) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 68) & 2) != 0)
  {
    if (GEOMapItemAddressBookAttributesIsDirty(*(void *)(a1 + 24))) {
      return 1;
    }
    char v2 = *(unsigned char *)(a1 + 68);
  }
  if ((v2 & 0x10) == 0) {
    goto LABEL_8;
  }
  if (GEOMapItemRoutineAttributesIsDirty(*(void *)(a1 + 48))) {
    return 1;
  }
  char v2 = *(unsigned char *)(a1 + 68);
LABEL_8:
  if ((v2 & 4) != 0)
  {
    if (GEOMapItemCorrectedLocationAttributesIsDirty(*(os_unfair_lock_s **)(a1 + 32))) {
      return 1;
    }
    char v2 = *(unsigned char *)(a1 + 68);
  }
  if ((v2 & 8) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);

  return GEOMapItemMapsSyncAttributesIsDirty(v4);
}

os_unfair_lock_s *GEOMapItemClientAttributesIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    BOOL IsDirty = _GEOMapItemClientAttributesIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189E2CB44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2CDC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemCorrectedLocationAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 80)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFAFFFDFFFBFFFCLL) & 0xFF01FF01FF01FF01))+ ((*(unsigned char *)(a1 + 80) & 4) != 0));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 2;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v65 = v17;
        char v66 = v18 | v17;
        if ((v18 | v8)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v67 = (v19 == 0) | v18;
        BOOL v68 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_95;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_95:
      int v63 = 1;
      goto LABEL_96;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v68;
    if ((v67 & 1) == 0)
    {
      int v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_76;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x20) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_114;
          }
          uint64_t v39 = objc_alloc_init(GEOLatLng);
          if (GEOLatLngReadAllFrom((uint64_t)v39, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v40 = 40;
            goto LABEL_55;
          }
          goto LABEL_113;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_114;
        }
        char v58 = 4 * *(unsigned char *)(a1 + 80);
        goto LABEL_90;
      case 2:
        if (!v34) {
          goto LABEL_76;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_114;
          }
          char v58 = 8 * *(unsigned char *)(a1 + 80);
LABEL_90:
          v7 += v58 >> 7;
          goto LABEL_91;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_114;
        }
        uint64_t v39 = objc_alloc_init(GEOAddress);
        if (GEOAddressReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v40 = 32;
LABEL_55:
          id v44 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;
LABEL_63:

          --v7;
LABEL_91:
          unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          int v22 = (int *)MEMORY[0x1E4F940B8];
          goto LABEL_94;
        }
LABEL_113:

LABEL_114:
        int v63 = 0;
        char v64 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_97:
        if (v65) {
LABEL_98:
        }
          *(unsigned char *)(a1 + v64[521]) |= 4u;
        if (v68 || (v63 & 1) == 0)
        {
          *(unsigned char *)(a1 + v64[521]) |= 0x20u;
          *(unsigned char *)(a1 + v64[521]) |= 0x10u;
          *(unsigned char *)(a1 + v64[521]) |= 8u;
          *(unsigned char *)(a1 + v64[521]) |= 0x40u;
        }
        else if (v19)
        {
          while (1)
          {
            int v59 = *v19++;
            char v60 = 32;
            switch(v59)
            {
              case 0:
                goto LABEL_107;
              case 1:
                goto LABEL_106;
              case 2:
                char v60 = 16;
                goto LABEL_106;
              case 3:
                char v60 = 8;
                goto LABEL_106;
              case 4:
                char v60 = 64;
LABEL_106:
                *(unsigned char *)(a1 + v64[521]) |= v60;
                break;
              default:
                continue;
            }
          }
        }
LABEL_107:
        if (v63) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v68)
        {
          char v61 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 3:
        if (!v34) {
          goto LABEL_76;
        }
        if ((*(unsigned char *)(a1 + 80) & 8) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 24;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_114;
        }
        char v58 = 16 * *(unsigned char *)(a1 + 80);
        goto LABEL_90;
      case 4:
        if (!v34) {
          goto LABEL_76;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x40) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 48;
LABEL_62:
          id v44 = *(void **)(a1 + v46);
          *(void *)(a1 + v46) = v45;
          goto LABEL_63;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_114;
        }
        char v58 = 2 * *(unsigned char *)(a1 + 80);
        goto LABEL_90;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_76;
        }
        *(unsigned char *)(a1 + 80) |= 1u;
        uint64_t v47 = *v20;
        unint64_t v48 = *(void *)(v3 + v47);
        if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v49 = *(void *)(*(void *)(v3 + *v22) + v48);
          *(void *)(v3 + v47) = v48 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v21) = 1;
          uint64_t v49 = 0;
        }
        *(void *)(a1 + 56) = v49;
        goto LABEL_94;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_76;
        }
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v52 = 0;
        *(unsigned char *)(a1 + 80) |= 2u;
        while (2)
        {
          uint64_t v53 = *v20;
          uint64_t v54 = *(void *)(v3 + v53);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(v3 + *v22) + v54);
            *(void *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              BOOL v30 = v51++ >= 9;
              if (v30)
              {
                uint64_t v52 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v52 = 0;
        }
LABEL_81:
        *(unsigned char *)(a1 + 76) = v52 != 0;
        goto LABEL_94;
      default:
        if ((v65 & 1) == 0 || (*(unsigned char *)(a1 + 80) & 4) != 0)
        {
LABEL_76:
          char v57 = PBReaderSkipValueWithTag();
          int v22 = (int *)MEMORY[0x1E4F940B8];
          unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v57 & 1) == 0)
          {
            int v63 = 0;
LABEL_96:
            char v64 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_97;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          int v22 = (int *)MEMORY[0x1E4F940B8];
          if (!v43)
          {
            int v63 = 0;
            char v64 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_98;
          }
        }
LABEL_94:
        if (!(v66 & 1 | (v7 != 0))) {
          goto LABEL_95;
        }
        continue;
    }
  }
}

void sub_189E2D760(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2D8CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2DA34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2E36C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemCorrectedLocationAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMapItemCorrectedLocationAttributesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = [v8 position];
  *(_DWORD *)(a1 + 68) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOMapItemCorrectedLocationAttributesReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOMapItemCorrectedLocationAttributesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOMapItemCorrectedLocationAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 40) readAll:1];
    [*(id *)(a1 + 32) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_189E2E524(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemCorrectedLocationAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOMapItemCorrectedLocationAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E2E588(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2E7B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOMapItemCorrectedLocationAttributesIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  unsigned int v2 = *(unsigned __int8 *)(a1 + 80);
  if ((v2 & 0xA0) != 0) {
    return 1;
  }
  if ((v2 & 0x10) != 0)
  {
    if (GEOAddressIsDirty(*(void *)(a1 + 32))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int8 *)(a1 + 80);
  }
  if ((v2 & 8) != 0) {
    return 1;
  }
  return (v2 >> 6) & 1;
}

os_unfair_lock_s *GEOMapItemCorrectedLocationAttributesIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOMapItemCorrectedLocationAttributesIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189E2EC48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2F0E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2F374(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E2F4C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemMapsSyncAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOMapItemMapsSyncAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E2FCEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemMapsSyncAttributesIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = (*(unsigned char *)(a1 + 56) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189E3007C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E30498(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemRoutineAttributesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 68) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 3) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v69 = v15 | v8;
        char v70 = v16 | v15 | v8;
        if ((v16 | v9)) {
          char v17 = 0;
        }
        else {
          char v17 = a3;
        }
        char v71 = (v17 == 0) | v16;
        BOOL v72 = v16;
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_89;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_89:
      int v67 = 1;
      goto LABEL_90;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v72;
    if ((v71 & 1) == 0)
    {
      unint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v9 & 1) == 0) {
          goto LABEL_70;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + 68) |= 2u;
        while (1)
        {
          uint64_t v40 = *v18;
          uint64_t v41 = *(void *)(v3 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(v3 + *v6)) {
            break;
          }
          char v43 = *(unsigned char *)(*(void *)(v3 + *v20) + v41);
          *(void *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0) {
            goto LABEL_73;
          }
          v37 += 7;
          BOOL v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_75;
          }
        }
        *(unsigned char *)(v3 + *v19) = 1;
LABEL_73:
        if (*(unsigned char *)(v3 + *v19)) {
          LODWORD(v39) = 0;
        }
LABEL_75:
        *(_DWORD *)(a1 + 60) = v39;
        goto LABEL_88;
      case 2:
        if (!v32) {
          goto LABEL_70;
        }
        if ((*(unsigned char *)(a1 + 68) & 0x10) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 32;
          goto LABEL_69;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_109;
        }
        char v61 = 8 * *(unsigned char *)(a1 + 68);
        goto LABEL_84;
      case 3:
        if ((v9 & 1) == 0) {
          goto LABEL_70;
        }
        *(unsigned char *)(a1 + 68) |= 1u;
        uint64_t v49 = *v18;
        unint64_t v50 = *(void *)(v3 + v49);
        if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v51 = *(void *)(*(void *)(v3 + *v20) + v50);
          *(void *)(v3 + v49) = v50 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v19) = 1;
          uint64_t v51 = 0;
        }
        *(void *)(a1 + 24) = v51;
        goto LABEL_88;
      case 4:
        if ((v9 & 1) == 0) {
          goto LABEL_70;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(unsigned char *)(a1 + 68) |= 4u;
        while (2)
        {
          uint64_t v55 = *v18;
          uint64_t v56 = *(void *)(v3 + v55);
          unint64_t v57 = v56 + 1;
          if (v56 == -1 || v57 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v19) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(v3 + *v20) + v56);
            *(void *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              BOOL v28 = v53++ >= 9;
              if (v28)
              {
                uint64_t v54 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v19)) {
          uint64_t v54 = 0;
        }
LABEL_79:
        *(unsigned char *)(a1 + 64) = v54 != 0;
        goto LABEL_88;
      case 5:
        if (!v32) {
          goto LABEL_70;
        }
        if ((*(unsigned char *)(a1 + 68) & 0x20) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = 40;
LABEL_69:
          int v59 = *(void **)(a1 + v48);
          *(void *)(a1 + v48) = v47;

          --v10;
LABEL_85:
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_88;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v61 = 4 * *(unsigned char *)(a1 + 68);
LABEL_84:
          v10 += v61 >> 7;
          goto LABEL_85;
        }
LABEL_109:
        int v67 = 0;
        BOOL v68 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_91:
        if (v69) {
LABEL_92:
        }
          *(unsigned char *)(a1 + v68[526]) |= 8u;
        if (v72 || (v67 & 1) == 0)
        {
          *(unsigned char *)(a1 + v68[526]) |= 0x10u;
          *(unsigned char *)(a1 + v68[526]) |= 0x20u;
          goto LABEL_103;
        }
        if (v17)
        {
          while (2)
          {
            while (1)
            {
              int v63 = *v17++;
              int v62 = v63;
              if (v63 == 2) {
                break;
              }
              if (v62 == 5)
              {
                char v64 = 32;
                goto LABEL_102;
              }
              if (!v62) {
                goto LABEL_103;
              }
            }
            char v64 = 16;
LABEL_102:
            *(unsigned char *)(a1 + v68[526]) |= v64;
            continue;
          }
        }
LABEL_103:
        if (v67) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v72)
        {
          char v65 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v69 & 1) == 0 || (*(unsigned char *)(a1 + 68) & 8) != 0)
        {
LABEL_70:
          char v60 = PBReaderSkipValueWithTag();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v60 & 1) == 0)
          {
            int v67 = 0;
LABEL_90:
            BOOL v68 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_91;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v46)
          {
            int v67 = 0;
            BOOL v68 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
            goto LABEL_92;
          }
        }
LABEL_88:
        if (!(v70 & 1 | (v10 != 0))) {
          goto LABEL_89;
        }
        continue;
    }
  }
}

void sub_189E30E08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E31624(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemRoutineAttributesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMapItemRoutineAttributesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOMapItemRoutineAttributesReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOMapItemRoutineAttributesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOMapItemRoutineAttributesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189E317B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemRoutineAttributesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOMapItemRoutineAttributesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E31814(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E31A2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemRoutineAttributesIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  BOOL v2 = (*(unsigned char *)(a1 + 68) & 0x70) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_189E31DFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E32240(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E32524(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E326C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemStorageReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOMapItemStorageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E3364C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemStorageIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
        case 9u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPDPlaceIsValid(a1)) {
            goto LABEL_49;
          }
          goto LABEL_52;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceIsValid(a1)) {
            goto LABEL_52;
          }
          goto LABEL_49;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemClientAttributesIsValid(a1)) {
            goto LABEL_52;
          }
          goto LABEL_49;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPlaceResultIsValid(a1)) {
            goto LABEL_52;
          }
          goto LABEL_49;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
            goto LABEL_52;
          }
          goto LABEL_49;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDResultDetourInfoIsValid(a1)) {
            goto LABEL_52;
          }
          goto LABEL_49;
        case 7u:
          if (v15 == 2) {
            goto LABEL_44;
          }
          goto LABEL_52;
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemStorageUserValuesIsValid(a1)) {
            goto LABEL_52;
          }
LABEL_49:
          PBReaderRecallMark();
          goto LABEL_50;
        default:
LABEL_44:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_52:
            PBReaderRecallMark();
            return 0;
          }
LABEL_50:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_51;
          }
          break;
      }
    }
  }
LABEL_51:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOMapItemStorageUserValuesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2) {
            goto LABEL_33;
          }
          goto LABEL_30;
        case 2u:
          if (v15 == 2) {
            goto LABEL_30;
          }
          goto LABEL_33;
        case 3u:
          if (v15 == 2) {
            goto LABEL_30;
          }
          goto LABEL_33;
        case 4u:
          if (v15 == 2) {
            goto LABEL_30;
          }
          goto LABEL_33;
        case 5u:
          if (v15 != 2) {
            goto LABEL_33;
          }
LABEL_30:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_33:
            BOOL v17 = 0;
            goto LABEL_34;
          }
LABEL_31:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_32;
          }
          break;
        default:
          if (!PBReaderSkipValueWithTag()) {
            goto LABEL_33;
          }
          goto LABEL_31;
      }
    }
  }
LABEL_32:
  BOOL v17 = a1[*v4] == 0;
LABEL_34:
  PBReaderRecallMark();
  return v17;
}

uint64_t _GEOMapItemStorageIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
  if ((v2 & 0x400) != 0) {
    return 1;
  }
  if ((v2 & 0x40) != 0)
  {
    if (GEOPDPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 88))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
  }
  if ((v2 & 0x100) != 0)
  {
    if (GEOPlaceIsDirty(*(os_unfair_lock_s **)(a1 + 104))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
  }
  if ((v2 & 4) != 0)
  {
    if (GEOMapItemClientAttributesIsDirty(*(os_unfair_lock_s **)(a1 + 56))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_14;
  }
  if (GEOPlaceResultIsDirty(*(os_unfair_lock_s **)(a1 + 96))) {
    return 1;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
LABEL_14:
  if ((v2 & 0x38) != 0) {
    return 1;
  }
  if ((v2 & 0x200) != 0)
  {
    if (GEOMapItemStorageUserValuesIsDirty(*(void *)(a1 + 112))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 132);
  }
  return (v2 >> 1) & 1;
}

os_unfair_lock_s *GEOMapItemStorageIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOMapItemStorageIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 32);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEOMapItemStorageClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if ([a1 hasPlaceData]
      && ([a1 placeData],
          char v6 = objc_claimAutoreleasedReturnValue(),
          unsigned int v7 = GEOPDPlaceHasSensitiveFields(v6, a2),
          v6,
          v7))
    {
      unint64_t v8 = [a1 placeData];
      uint64_t v9 = (void *)[v8 copy];

      uint64_t v10 = [v9 requestData];
      [v10 clearSensitiveFields:a2];

      [a1 setPlaceData:v9];
    }
    else
    {
      uint64_t v9 = [a1 placeData];
      [v9 clearSensitiveFields:a2];
    }

    if ([a1 hasPlaceResult])
    {
      char v12 = [a1 placeResult];
      unsigned int v13 = GEOPlaceResultHasSensitiveFields(v12);

      if (v13)
      {
        int v14 = [a1 placeResult];
        int v15 = (void *)[v14 copy];

        unsigned __int8 v16 = [v15 revgeoRequestTemplate];
        [v16 clearSensitiveFields:a2];

        [a1 setPlaceResult:v15];
        goto LABEL_11;
      }
    }
  }
  else
  {
    unint64_t v11 = [a1 placeData];
    [v11 clearSensitiveFields:a2];
  }
  int v15 = [a1 placeResult];
  [v15 clearSensitiveFields:a2];
LABEL_11:

  -[GEOMapItemStorage _readAdditionalPlaceDatas]((uint64_t)a1);
  unint64_t result = [a1[6] count];
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      uint64_t v19 = [a1[6] objectAtIndexedSubscript:i];
      uint64_t v20 = v19;
      if (a3 && GEOPDPlaceHasSensitiveFields(v19, a2))
      {
        char v21 = (void *)[v20 copy];
        unsigned int v22 = [v21 requestData];
        [v22 clearSensitiveFields:a2];

        [a1[6] replaceObjectAtIndex:i withObject:v21];
      }
      else
      {
        [v20 clearSensitiveFields:a2];
      }

      unint64_t result = [a1[6] count];
    }
  }
  return result;
}

uint64_t GEOMapItemStorageHasSensitiveFields(uint64_t result, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    id v3 = (void *)result;
    uint64_t v4 = [(id)result placeData];
    if (GEOPDPlaceHasSensitiveFields(v4, a2))
    {

      return 1;
    }
    uint64_t v5 = [v3 placeResult];
    unsigned __int8 v6 = GEOPlaceResultHasSensitiveFields(v5);

    if (v6) {
      return 1;
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    unsigned int v7 = objc_msgSend(v3, "additionalPlaceDatas", 0);
    uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v13;
      while (2)
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          if (GEOPDPlaceHasSensitiveFields(*(void **)(*((void *)&v12 + 1) + 8 * v11), a2))
          {

            return 1;
          }
          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

    return 0;
  }
  return result;
}

void sub_189E34818(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemStorageUserValuesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  unsigned __int8 v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 68);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 64)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 76)), (uint16x4_t)0xFFFCFFFBFFFFFFFELL) & 0xFF01FF01FF01FF01))+ (*(unsigned char *)(a1 + 76) & 1)+ ((*(unsigned char *)(a1 + 76) & 8) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v50 = v15;
        char v51 = v16 | v15;
        if ((v16 | v8)) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = a3;
        }
        unsigned __int8 v18 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        char v52 = (v17 == 0) | v16;
        BOOL v53 = v16;
        uint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_75;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_75:
      int v49 = 1;
      goto LABEL_76;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v53;
    if ((v52 & 1) == 0)
    {
      unint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 2) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 24;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_93;
        }
        char v44 = *(unsigned char *)(a1 + 76) << 6;
        goto LABEL_72;
      case 2:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 4) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 32;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_93;
        }
        char v44 = 32 * *(unsigned char *)(a1 + 76);
        goto LABEL_72;
      case 3:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x20) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 56;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_93;
        }
        char v44 = 4 * *(unsigned char *)(a1 + 76);
        goto LABEL_72;
      case 4:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 0x10) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 48;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_93;
        }
        char v44 = 8 * *(unsigned char *)(a1 + 76);
        goto LABEL_72;
      case 5:
        if (!v32) {
          goto LABEL_60;
        }
        if ((*(unsigned char *)(a1 + 76) & 8) == 0)
        {
          uint64_t v37 = PBReaderReadData();
          uint64_t v38 = 40;
LABEL_59:
          unint64_t v42 = *(void **)(a1 + v38);
          *(void *)(a1 + v38) = v37;

          --v9;
LABEL_73:
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_74:
          if (!(v51 & 1 | (v9 != 0))) {
            goto LABEL_75;
          }
          continue;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v44 = 16 * *(unsigned char *)(a1 + 76);
LABEL_72:
          v9 += v44 >> 7;
          goto LABEL_73;
        }
LABEL_93:
        int v49 = 0;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_76:
        if (v50) {
LABEL_77:
        }
          *(unsigned char *)(a1 + 76) |= 1u;
        if (v53 || (v49 & 1) == 0)
        {
          *(unsigned char *)(a1 + 76) |= 2u;
          *(unsigned char *)(a1 + 76) |= 4u;
          *(unsigned char *)(a1 + 76) |= 0x20u;
          *(unsigned char *)(a1 + 76) |= 0x10u;
          *(unsigned char *)(a1 + 76) |= 8u;
        }
        else if (v17)
        {
          while (1)
          {
            int v45 = *v17++;
            char v46 = 2;
            switch(v45)
            {
              case 0:
                goto LABEL_87;
              case 1:
                goto LABEL_86;
              case 2:
                char v46 = 4;
                goto LABEL_86;
              case 3:
                char v46 = 32;
                goto LABEL_86;
              case 4:
                char v46 = 16;
                goto LABEL_86;
              case 5:
                char v46 = 8;
LABEL_86:
                *(unsigned char *)(a1 + 76) |= v46;
                break;
              default:
                continue;
            }
          }
        }
LABEL_87:
        if (v49) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v53)
        {
          uint64_t v47 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v50 & 1) == 0 || (*(unsigned char *)(a1 + 76))
        {
LABEL_60:
          char v43 = PBReaderSkipValueWithTag();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v43 & 1) == 0)
          {
            int v49 = 0;
            goto LABEL_76;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v40 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v39;
          }
          int v41 = PBUnknownFieldAdd();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v41)
          {
            int v49 = 0;
            goto LABEL_77;
          }
        }
        goto LABEL_74;
    }
  }
}

void sub_189E351AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E35318(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E35484(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E355F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E35D9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemStorageUserValuesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMapItemStorageUserValuesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = [v8 position];
  *(_DWORD *)(a1 + 68) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOMapItemStorageUserValuesReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOMapItemStorageUserValuesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOMapItemStorageUserValuesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_189E35F2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemStorageUserValuesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOMapItemStorageUserValuesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E35F90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E36198(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemStorageUserValuesIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  BOOL v2 = (*(unsigned char *)(a1 + 76) & 0x7E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v2;
}

void sub_189E364F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E36830(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E37144(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E37D30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E37EAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3834C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E38D04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E38E4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E38F94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E390DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E39BB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3A700(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3AE94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3B580(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3B6F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3BACC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3C0BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3C698(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3C844(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3CBCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3D260(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3D550(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3D6C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3D9D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3DCC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3E0E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3E494(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3E690(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E3E850(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOMapServiceTraitsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 384) readAll:1];
  [*(id *)(a1 + 456) readAll:1];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v2 = *(id *)(a1 + 472);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v35 objects:v42 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v36;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v36 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v35 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v35 objects:v42 count:16];
    }
    while (v4);
  }

  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v7 = *(id *)(a1 + 520);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v31 objects:v41 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v32;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v32 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v31 + 1) + 8 * v11++) readAll:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v31 objects:v41 count:16];
    }
    while (v9);
  }

  [*(id *)(a1 + 568) readAll:1];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v12 = *(id *)(a1 + 440);
  uint64_t v13 = [v12 countByEnumeratingWithState:&v27 objects:v40 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v28;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v28 != v15) {
          objc_enumerationMutation(v12);
        }
        [*(id *)(*((void *)&v27 + 1) + 8 * v16++) readAll:1];
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v27 objects:v40 count:16];
    }
    while (v14);
  }

  [*(id *)(a1 + 328) readAll:1];
  [*(id *)(a1 + 560) readAll:1];
  [*(id *)(a1 + 600) readAll:1];
  -[GEOPDVenueIdentifier readAll:](*(void *)(a1 + 592), 1);
  [*(id *)(a1 + 576) readAll:1];
  [*(id *)(a1 + 376) readAll:1];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v17 = *(id *)(a1 + 424);
  uint64_t v18 = [v17 countByEnumeratingWithState:&v23 objects:v39 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v24;
    do
    {
      uint64_t v21 = 0;
      do
      {
        if (*(void *)v24 != v20) {
          objc_enumerationMutation(v17);
        }
        objc_msgSend(*(id *)(*((void *)&v23 + 1) + 8 * v21++), "readAll:", 1, (void)v23);
      }
      while (v19 != v21);
      uint64_t v19 = [v17 countByEnumeratingWithState:&v23 objects:v39 count:16];
    }
    while (v19);
  }

  [*(id *)(a1 + 480) readAll:1];
  [*(id *)(a1 + 512) readAll:1];
  [*(id *)(a1 + 320) readAll:1];
  [*(id *)(a1 + 536) readAll:1];
  [*(id *)(a1 + 280) readAll:1];
  [*(id *)(a1 + 488) readAll:1];
  [*(id *)(a1 + 528) readAll:1];
  [*(id *)(a1 + 504) readAll:1];
  return [*(id *)(a1 + 584) readAll:1];
}

uint64_t GEOMapServiceTraitsReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  uint64_t AllFrom = GEOMapServiceTraitsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E46410(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapServiceTraitsIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v12 = v7++ >= 9;
        if (v12)
        {
          unint64_t v8 = 0;
          uint64_t v13 = *v4;
          int v14 = a1[v13];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v13 = *v4;
      int v14 = a1[v13];
      if (a1[v13]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && (GEOSessionIDIsValid(a1) & 1) != 0) {
            goto LABEL_634;
          }
          goto LABEL_751;
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v20 = 0;
          while (1)
          {
            uint64_t v21 = *v2;
            uint64_t v22 = *(void *)&a1[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v24 = *(char *)(*(void *)&a1[*v5] + v22);
            *(void *)&a1[v21] = v23;
            if (v24 < 0)
            {
              BOOL v25 = v20++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 3u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 4u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 5u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 6u:
        case 0x26u:
          if (v15 != 2 || !PBReaderPlaceMark() || (GEOLocationIsValid(a1) & 1) == 0) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 7u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v26 = *v2;
              uint64_t v27 = *(void *)&a1[v26];
              unint64_t v28 = v27 + 1;
              if (v27 == -1 || v28 > *(void *)&a1[*v3]) {
                goto LABEL_643;
              }
              int v29 = *(char *)(*(void *)&a1[*v5] + v27);
              *(void *)&a1[v26] = v28;
              if (v29 < 0)
              {
                unsigned int v30 = v15++;
                if (v30 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_751;
          }
LABEL_650:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v351 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v352 = *v2;
              uint64_t v353 = *(void *)&a1[v352];
              unint64_t v354 = v353 + 1;
              if (v353 == -1 || v354 > *(void *)&a1[*v3]) {
                break;
              }
              int v355 = *(char *)(*(void *)&a1[*v5] + v353);
              *(void *)&a1[v352] = v354;
              if (v355 < 0)
              {
                BOOL v12 = v351++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_650;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 9u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0xAu:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0xBu:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0xEu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v31 = 0;
          while (1)
          {
            uint64_t v32 = *v2;
            uint64_t v33 = *(void *)&a1[v32];
            unint64_t v34 = v33 + 1;
            if (v33 == -1 || v34 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v35 = *(char *)(*(void *)&a1[*v5] + v33);
            *(void *)&a1[v32] = v34;
            if (v35 < 0)
            {
              BOOL v25 = v31++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0xFu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v36 = 0;
          while (1)
          {
            uint64_t v37 = *v2;
            uint64_t v38 = *(void *)&a1[v37];
            unint64_t v39 = v38 + 1;
            if (v38 == -1 || v39 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v40 = *(char *)(*(void *)&a1[*v5] + v38);
            *(void *)&a1[v37] = v39;
            if (v40 < 0)
            {
              BOOL v25 = v36++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x10u:
        case 0x12u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsPhotoSizeIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x11u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v41 = 0;
          while (1)
          {
            uint64_t v42 = *v2;
            uint64_t v43 = *(void *)&a1[v42];
            unint64_t v44 = v43 + 1;
            if (v43 == -1 || v44 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v45 = *(char *)(*(void *)&a1[*v5] + v43);
            *(void *)&a1[v42] = v44;
            if (v45 < 0)
            {
              BOOL v25 = v41++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x13u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v46 = 0;
          while (1)
          {
            uint64_t v47 = *v2;
            uint64_t v48 = *(void *)&a1[v47];
            unint64_t v49 = v48 + 1;
            if (v48 == -1 || v49 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v50 = *(char *)(*(void *)&a1[*v5] + v48);
            *(void *)&a1[v47] = v49;
            if (v50 < 0)
            {
              BOOL v25 = v46++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x14u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v51 = 0;
          while (1)
          {
            uint64_t v52 = *v2;
            uint64_t v53 = *(void *)&a1[v52];
            unint64_t v54 = v53 + 1;
            if (v53 == -1 || v54 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v55 = *(char *)(*(void *)&a1[*v5] + v53);
            *(void *)&a1[v52] = v54;
            if (v55 < 0)
            {
              BOOL v25 = v51++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x15u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v56 = 0;
          while (1)
          {
            uint64_t v57 = *v2;
            uint64_t v58 = *(void *)&a1[v57];
            unint64_t v59 = v58 + 1;
            if (v58 == -1 || v59 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v60 = *(char *)(*(void *)&a1[*v5] + v58);
            *(void *)&a1[v57] = v59;
            if (v60 < 0)
            {
              BOOL v25 = v56++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x17u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v61 = 0;
          while (1)
          {
            uint64_t v62 = *v2;
            uint64_t v63 = *(void *)&a1[v62];
            unint64_t v64 = v63 + 1;
            if (v63 == -1 || v64 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v65 = *(char *)(*(void *)&a1[*v5] + v63);
            *(void *)&a1[v62] = v64;
            if (v65 < 0)
            {
              BOOL v25 = v61++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x18u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0x19u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0x1Au:
        case 0x1Bu:
        case 0x1Du:
        case 0x35u:
        case 0x4Eu:
          if (v15 != 1) {
            goto LABEL_751;
          }
          uint64_t v17 = *v2;
          unint64_t v18 = *(void *)&a1[v17];
          if (v18 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_644;
          }
          unint64_t v19 = v18 + 8;
          if (v19 > *(void *)&a1[*v3]) {
            goto LABEL_644;
          }
          *(void *)&a1[v17] = v19;
          goto LABEL_647;
        case 0x1Cu:
        case 0x3Eu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsTransitScheduleFilterIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x1Eu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v66 = 0;
          while (1)
          {
            uint64_t v67 = *v2;
            uint64_t v68 = *(void *)&a1[v67];
            unint64_t v69 = v68 + 1;
            if (v68 == -1 || v69 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v70 = *(char *)(*(void *)&a1[*v5] + v68);
            *(void *)&a1[v67] = v69;
            if (v70 < 0)
            {
              BOOL v25 = v66++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x1Fu:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0x20u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0x21u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v71 = 0;
          while (1)
          {
            uint64_t v72 = *v2;
            uint64_t v73 = *(void *)&a1[v72];
            unint64_t v74 = v73 + 1;
            if (v73 == -1 || v74 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v75 = *(char *)(*(void *)&a1[*v5] + v73);
            *(void *)&a1[v72] = v74;
            if (v75 < 0)
            {
              BOOL v25 = v71++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x22u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v76 = 0;
          while (1)
          {
            uint64_t v77 = *v2;
            uint64_t v78 = *(void *)&a1[v77];
            unint64_t v79 = v78 + 1;
            if (v78 == -1 || v79 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v80 = *(char *)(*(void *)&a1[*v5] + v78);
            *(void *)&a1[v77] = v79;
            if (v80 < 0)
            {
              BOOL v25 = v76++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x23u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v81 = 0;
          while (1)
          {
            uint64_t v82 = *v2;
            uint64_t v83 = *(void *)&a1[v82];
            unint64_t v84 = v83 + 1;
            if (v83 == -1 || v84 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v85 = *(char *)(*(void *)&a1[*v5] + v83);
            *(void *)&a1[v82] = v84;
            if (v85 < 0)
            {
              BOOL v25 = v81++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x24u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v86 = 0;
          while (1)
          {
            uint64_t v87 = *v2;
            uint64_t v88 = *(void *)&a1[v87];
            unint64_t v89 = v88 + 1;
            if (v88 == -1 || v89 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v90 = *(char *)(*(void *)&a1[*v5] + v88);
            *(void *)&a1[v87] = v89;
            if (v90 < 0)
            {
              BOOL v25 = v86++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x27u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOAutomobileOptionsIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x28u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOTransitOptionsIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x29u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOWalkingOptionsIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x2Au:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v91 = *v2;
              uint64_t v92 = *(void *)&a1[v91];
              unint64_t v93 = v92 + 1;
              if (v92 == -1 || v93 > *(void *)&a1[*v3]) {
                goto LABEL_643;
              }
              int v94 = *(char *)(*(void *)&a1[*v5] + v92);
              *(void *)&a1[v91] = v93;
              if (v94 < 0)
              {
                unsigned int v95 = v15++;
                if (v95 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_751;
          }
LABEL_660:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v356 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v357 = *v2;
              uint64_t v358 = *(void *)&a1[v357];
              unint64_t v359 = v358 + 1;
              if (v358 == -1 || v359 > *(void *)&a1[*v3]) {
                break;
              }
              int v360 = *(char *)(*(void *)&a1[*v5] + v358);
              *(void *)&a1[v357] = v359;
              if (v360 < 0)
              {
                BOOL v12 = v356++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_660;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x2Bu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v96 = 0;
          while (1)
          {
            uint64_t v97 = *v2;
            uint64_t v98 = *(void *)&a1[v97];
            unint64_t v99 = v98 + 1;
            if (v98 == -1 || v99 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v100 = *(char *)(*(void *)&a1[*v5] + v98);
            *(void *)&a1[v97] = v99;
            if (v100 < 0)
            {
              BOOL v25 = v96++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x2Cu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v101 = 0;
          while (1)
          {
            uint64_t v102 = *v2;
            uint64_t v103 = *(void *)&a1[v102];
            unint64_t v104 = v103 + 1;
            if (v103 == -1 || v104 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v105 = *(char *)(*(void *)&a1[*v5] + v103);
            *(void *)&a1[v102] = v104;
            if (v105 < 0)
            {
              BOOL v25 = v101++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x2Du:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v106 = *v2;
              uint64_t v107 = *(void *)&a1[v106];
              unint64_t v108 = v107 + 1;
              if (v107 == -1 || v108 > *(void *)&a1[*v3]) {
                goto LABEL_643;
              }
              int v109 = *(char *)(*(void *)&a1[*v5] + v107);
              *(void *)&a1[v106] = v108;
              if (v109 < 0)
              {
                unsigned int v110 = v15++;
                if (v110 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_751;
          }
LABEL_670:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v361 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v362 = *v2;
              uint64_t v363 = *(void *)&a1[v362];
              unint64_t v364 = v363 + 1;
              if (v363 == -1 || v364 > *(void *)&a1[*v3]) {
                break;
              }
              int v365 = *(char *)(*(void *)&a1[*v5] + v363);
              *(void *)&a1[v362] = v364;
              if (v365 < 0)
              {
                BOOL v12 = v361++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_670;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x2Eu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v111 = 0;
          while (1)
          {
            uint64_t v112 = *v2;
            uint64_t v113 = *(void *)&a1[v112];
            unint64_t v114 = v113 + 1;
            if (v113 == -1 || v114 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v115 = *(char *)(*(void *)&a1[*v5] + v113);
            *(void *)&a1[v112] = v114;
            if (v115 < 0)
            {
              BOOL v25 = v111++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x2Fu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDVenueIdentifierIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x30u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v116 = 0;
          while (1)
          {
            uint64_t v117 = *v2;
            uint64_t v118 = *(void *)&a1[v117];
            unint64_t v119 = v118 + 1;
            if (v118 == -1 || v119 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v120 = *(char *)(*(void *)&a1[*v5] + v118);
            *(void *)&a1[v117] = v119;
            if (v120 < 0)
            {
              BOOL v25 = v116++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x31u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v121 = 0;
          while (1)
          {
            uint64_t v122 = *v2;
            uint64_t v123 = *(void *)&a1[v122];
            unint64_t v124 = v123 + 1;
            if (v123 == -1 || v124 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v125 = *(char *)(*(void *)&a1[*v5] + v123);
            *(void *)&a1[v122] = v124;
            if (v125 < 0)
            {
              BOOL v25 = v121++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x32u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v126 = 0;
          while (1)
          {
            uint64_t v127 = *v2;
            uint64_t v128 = *(void *)&a1[v127];
            unint64_t v129 = v128 + 1;
            if (v128 == -1 || v129 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v130 = *(char *)(*(void *)&a1[*v5] + v128);
            *(void *)&a1[v127] = v129;
            if (v130 < 0)
            {
              BOOL v25 = v126++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x33u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v131 = 0;
          while (1)
          {
            uint64_t v132 = *v2;
            uint64_t v133 = *(void *)&a1[v132];
            unint64_t v134 = v133 + 1;
            if (v133 == -1 || v134 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v135 = *(char *)(*(void *)&a1[*v5] + v133);
            *(void *)&a1[v132] = v134;
            if (v135 < 0)
            {
              BOOL v25 = v131++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x34u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0x36u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v136 = 0;
          while (1)
          {
            uint64_t v137 = *v2;
            uint64_t v138 = *(void *)&a1[v137];
            unint64_t v139 = v138 + 1;
            if (v138 == -1 || v139 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v140 = *(char *)(*(void *)&a1[*v5] + v138);
            *(void *)&a1[v137] = v139;
            if (v140 < 0)
            {
              BOOL v25 = v136++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x37u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v141 = 0;
          while (1)
          {
            uint64_t v142 = *v2;
            uint64_t v143 = *(void *)&a1[v142];
            unint64_t v144 = v143 + 1;
            if (v143 == -1 || v144 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v145 = *(char *)(*(void *)&a1[*v5] + v143);
            *(void *)&a1[v142] = v144;
            if (v145 < 0)
            {
              BOOL v25 = v141++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x38u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v146 = 0;
          while (1)
          {
            uint64_t v147 = *v2;
            uint64_t v148 = *(void *)&a1[v147];
            unint64_t v149 = v148 + 1;
            if (v148 == -1 || v149 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v150 = *(char *)(*(void *)&a1[*v5] + v148);
            *(void *)&a1[v147] = v149;
            if (v150 < 0)
            {
              BOOL v25 = v146++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x39u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v151 = 0;
          while (1)
          {
            uint64_t v152 = *v2;
            uint64_t v153 = *(void *)&a1[v152];
            unint64_t v154 = v153 + 1;
            if (v153 == -1 || v154 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v155 = *(char *)(*(void *)&a1[*v5] + v153);
            *(void *)&a1[v152] = v154;
            if (v155 < 0)
            {
              BOOL v25 = v151++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x3Au:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v156 = 0;
          while (1)
          {
            uint64_t v157 = *v2;
            uint64_t v158 = *(void *)&a1[v157];
            unint64_t v159 = v158 + 1;
            if (v158 == -1 || v159 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v160 = *(char *)(*(void *)&a1[*v5] + v158);
            *(void *)&a1[v157] = v159;
            if (v160 < 0)
            {
              BOOL v25 = v156++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x3Bu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v161 = 0;
          while (1)
          {
            uint64_t v162 = *v2;
            uint64_t v163 = *(void *)&a1[v162];
            unint64_t v164 = v163 + 1;
            if (v163 == -1 || v164 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v165 = *(char *)(*(void *)&a1[*v5] + v163);
            *(void *)&a1[v162] = v164;
            if (v165 < 0)
            {
              BOOL v25 = v161++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x3Cu:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v166 = *v2;
              uint64_t v167 = *(void *)&a1[v166];
              unint64_t v168 = v167 + 1;
              if (v167 == -1 || v168 > *(void *)&a1[*v3]) {
                goto LABEL_643;
              }
              int v169 = *(char *)(*(void *)&a1[*v5] + v167);
              *(void *)&a1[v166] = v168;
              if (v169 < 0)
              {
                unsigned int v170 = v15++;
                if (v170 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_751;
          }
LABEL_680:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v366 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v367 = *v2;
              uint64_t v368 = *(void *)&a1[v367];
              unint64_t v369 = v368 + 1;
              if (v368 == -1 || v369 > *(void *)&a1[*v3]) {
                break;
              }
              int v370 = *(char *)(*(void *)&a1[*v5] + v368);
              *(void *)&a1[v367] = v369;
              if (v370 < 0)
              {
                BOOL v12 = v366++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_680;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x3Du:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v171 = 0;
          while (1)
          {
            uint64_t v172 = *v2;
            uint64_t v173 = *(void *)&a1[v172];
            unint64_t v174 = v173 + 1;
            if (v173 == -1 || v174 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v175 = *(char *)(*(void *)&a1[*v5] + v173);
            *(void *)&a1[v172] = v174;
            if (v175 < 0)
            {
              BOOL v25 = v171++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x3Fu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v176 = 0;
          while (1)
          {
            uint64_t v177 = *v2;
            uint64_t v178 = *(void *)&a1[v177];
            unint64_t v179 = v178 + 1;
            if (v178 == -1 || v179 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v180 = *(char *)(*(void *)&a1[*v5] + v178);
            *(void *)&a1[v177] = v179;
            if (v180 < 0)
            {
              BOOL v25 = v176++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x40u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v181 = *v2;
              uint64_t v182 = *(void *)&a1[v181];
              unint64_t v183 = v182 + 1;
              if (v182 == -1 || v183 > *(void *)&a1[*v3]) {
                goto LABEL_643;
              }
              int v184 = *(char *)(*(void *)&a1[*v5] + v182);
              *(void *)&a1[v181] = v183;
              if (v184 < 0)
              {
                unsigned int v185 = v15++;
                if (v185 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_751;
          }
LABEL_690:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v371 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v372 = *v2;
              uint64_t v373 = *(void *)&a1[v372];
              unint64_t v374 = v373 + 1;
              if (v373 == -1 || v374 > *(void *)&a1[*v3]) {
                break;
              }
              int v375 = *(char *)(*(void *)&a1[*v5] + v373);
              *(void *)&a1[v372] = v374;
              if (v375 < 0)
              {
                BOOL v12 = v371++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_690;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x41u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v186 = 0;
          while (1)
          {
            uint64_t v187 = *v2;
            uint64_t v188 = *(void *)&a1[v187];
            unint64_t v189 = v188 + 1;
            if (v188 == -1 || v189 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v190 = *(char *)(*(void *)&a1[*v5] + v188);
            *(void *)&a1[v187] = v189;
            if (v190 < 0)
            {
              BOOL v25 = v186++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x42u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v191 = 0;
          while (1)
          {
            uint64_t v192 = *v2;
            uint64_t v193 = *(void *)&a1[v192];
            unint64_t v194 = v193 + 1;
            if (v193 == -1 || v194 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v195 = *(char *)(*(void *)&a1[*v5] + v193);
            *(void *)&a1[v192] = v194;
            if (v195 < 0)
            {
              BOOL v25 = v191++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x43u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v196 = 0;
          while (1)
          {
            uint64_t v197 = *v2;
            uint64_t v198 = *(void *)&a1[v197];
            unint64_t v199 = v198 + 1;
            if (v198 == -1 || v199 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v200 = *(char *)(*(void *)&a1[*v5] + v198);
            *(void *)&a1[v197] = v199;
            if (v200 < 0)
            {
              BOOL v25 = v196++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x44u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v201 = *v2;
              uint64_t v202 = *(void *)&a1[v201];
              unint64_t v203 = v202 + 1;
              if (v202 == -1 || v203 > *(void *)&a1[*v3]) {
                goto LABEL_643;
              }
              int v204 = *(char *)(*(void *)&a1[*v5] + v202);
              *(void *)&a1[v201] = v203;
              if (v204 < 0)
              {
                unsigned int v205 = v15++;
                if (v205 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_751;
          }
LABEL_700:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v376 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v377 = *v2;
              uint64_t v378 = *(void *)&a1[v377];
              unint64_t v379 = v378 + 1;
              if (v378 == -1 || v379 > *(void *)&a1[*v3]) {
                break;
              }
              int v380 = *(char *)(*(void *)&a1[*v5] + v378);
              *(void *)&a1[v377] = v379;
              if (v380 < 0)
              {
                BOOL v12 = v376++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_700;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x46u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v206 = 0;
          while (1)
          {
            uint64_t v207 = *v2;
            uint64_t v208 = *(void *)&a1[v207];
            unint64_t v209 = v208 + 1;
            if (v208 == -1 || v209 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v210 = *(char *)(*(void *)&a1[*v5] + v208);
            *(void *)&a1[v207] = v209;
            if (v210 < 0)
            {
              BOOL v25 = v206++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x47u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOCyclingOptionsIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x48u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v211 = 0;
          while (1)
          {
            uint64_t v212 = *v2;
            uint64_t v213 = *(void *)&a1[v212];
            unint64_t v214 = v213 + 1;
            if (v213 == -1 || v214 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v215 = *(char *)(*(void *)&a1[*v5] + v213);
            *(void *)&a1[v212] = v214;
            if (v215 < 0)
            {
              BOOL v25 = v211++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x49u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDEvChargingPortIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x4Au:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v216 = 0;
          while (1)
          {
            uint64_t v217 = *v2;
            uint64_t v218 = *(void *)&a1[v217];
            unint64_t v219 = v218 + 1;
            if (v218 == -1 || v219 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v220 = *(char *)(*(void *)&a1[*v5] + v218);
            *(void *)&a1[v217] = v219;
            if (v220 < 0)
            {
              BOOL v25 = v216++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x4Bu:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v221 = *v2;
              uint64_t v222 = *(void *)&a1[v221];
              unint64_t v223 = v222 + 1;
              if (v222 == -1 || v223 > *(void *)&a1[*v3]) {
                goto LABEL_643;
              }
              int v224 = *(char *)(*(void *)&a1[*v5] + v222);
              *(void *)&a1[v221] = v223;
              if (v224 < 0)
              {
                unsigned int v225 = v15++;
                if (v225 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_751;
          }
LABEL_710:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v381 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v382 = *v2;
              uint64_t v383 = *(void *)&a1[v382];
              unint64_t v384 = v383 + 1;
              if (v383 == -1 || v384 > *(void *)&a1[*v3]) {
                break;
              }
              int v385 = *(char *)(*(void *)&a1[*v5] + v383);
              *(void *)&a1[v382] = v384;
              if (v385 < 0)
              {
                BOOL v12 = v381++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_710;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x4Cu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v226 = 0;
          while (1)
          {
            uint64_t v227 = *v2;
            uint64_t v228 = *(void *)&a1[v227];
            unint64_t v229 = v228 + 1;
            if (v228 == -1 || v229 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v230 = *(char *)(*(void *)&a1[*v5] + v228);
            *(void *)&a1[v227] = v229;
            if (v230 < 0)
            {
              BOOL v25 = v226++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x4Du:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v231 = 0;
          while (1)
          {
            uint64_t v232 = *v2;
            uint64_t v233 = *(void *)&a1[v232];
            unint64_t v234 = v233 + 1;
            if (v233 == -1 || v234 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v235 = *(char *)(*(void *)&a1[*v5] + v233);
            *(void *)&a1[v232] = v234;
            if (v235 < 0)
            {
              BOOL v25 = v231++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x4Fu:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v236 = *v2;
              uint64_t v237 = *(void *)&a1[v236];
              unint64_t v238 = v237 + 1;
              if (v237 == -1 || v238 > *(void *)&a1[*v3]) {
                goto LABEL_643;
              }
              int v239 = *(char *)(*(void *)&a1[*v5] + v237);
              *(void *)&a1[v236] = v238;
              if (v239 < 0)
              {
                unsigned int v240 = v15++;
                if (v240 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_751;
          }
LABEL_720:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v386 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v387 = *v2;
              uint64_t v388 = *(void *)&a1[v387];
              unint64_t v389 = v388 + 1;
              if (v388 == -1 || v389 > *(void *)&a1[*v3]) {
                break;
              }
              int v390 = *(char *)(*(void *)&a1[*v5] + v388);
              *(void *)&a1[v387] = v389;
              if (v390 < 0)
              {
                BOOL v12 = v386++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_720;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x50u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v241 = 0;
          while (1)
          {
            uint64_t v242 = *v2;
            uint64_t v243 = *(void *)&a1[v242];
            unint64_t v244 = v243 + 1;
            if (v243 == -1 || v244 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v245 = *(char *)(*(void *)&a1[*v5] + v243);
            *(void *)&a1[v242] = v244;
            if (v245 < 0)
            {
              BOOL v25 = v241++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x51u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v246 = 0;
          while (1)
          {
            uint64_t v247 = *v2;
            uint64_t v248 = *(void *)&a1[v247];
            unint64_t v249 = v248 + 1;
            if (v248 == -1 || v249 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v250 = *(char *)(*(void *)&a1[*v5] + v248);
            *(void *)&a1[v247] = v249;
            if (v250 < 0)
            {
              BOOL v25 = v246++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x52u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDViewportInfoIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x53u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v251 = 0;
          while (1)
          {
            uint64_t v252 = *v2;
            uint64_t v253 = *(void *)&a1[v252];
            unint64_t v254 = v253 + 1;
            if (v253 == -1 || v254 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v255 = *(char *)(*(void *)&a1[*v5] + v253);
            *(void *)&a1[v252] = v254;
            if (v255 < 0)
            {
              BOOL v25 = v251++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x54u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDResultRefinementQueryIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x55u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v256 = 0;
          while (1)
          {
            uint64_t v257 = *v2;
            uint64_t v258 = *(void *)&a1[v257];
            unint64_t v259 = v258 + 1;
            if (v258 == -1 || v259 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v260 = *(char *)(*(void *)&a1[*v5] + v258);
            *(void *)&a1[v257] = v259;
            if (v260 < 0)
            {
              BOOL v25 = v256++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x56u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v261 = 0;
          while (1)
          {
            uint64_t v262 = *v2;
            uint64_t v263 = *(void *)&a1[v262];
            unint64_t v264 = v263 + 1;
            if (v263 == -1 || v264 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v265 = *(char *)(*(void *)&a1[*v5] + v263);
            *(void *)&a1[v262] = v264;
            if (v265 < 0)
            {
              BOOL v25 = v261++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x57u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0x58u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v266 = *v2;
              uint64_t v267 = *(void *)&a1[v266];
              unint64_t v268 = v267 + 1;
              if (v267 == -1 || v268 > *(void *)&a1[*v3]) {
                goto LABEL_643;
              }
              int v269 = *(char *)(*(void *)&a1[*v5] + v267);
              *(void *)&a1[v266] = v268;
              if (v269 < 0)
              {
                unsigned int v270 = v15++;
                if (v270 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_751;
          }
LABEL_730:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v391 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v392 = *v2;
              uint64_t v393 = *(void *)&a1[v392];
              unint64_t v394 = v393 + 1;
              if (v393 == -1 || v394 > *(void *)&a1[*v3]) {
                break;
              }
              int v395 = *(char *)(*(void *)&a1[*v5] + v393);
              *(void *)&a1[v392] = v394;
              if (v395 < 0)
              {
                BOOL v12 = v391++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_730;
            }
            a1[*v4] = 1;
          }
          goto LABEL_634;
        case 0x59u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v271 = 0;
          while (1)
          {
            uint64_t v272 = *v2;
            uint64_t v273 = *(void *)&a1[v272];
            unint64_t v274 = v273 + 1;
            if (v273 == -1 || v274 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v275 = *(char *)(*(void *)&a1[*v5] + v273);
            *(void *)&a1[v272] = v274;
            if (v275 < 0)
            {
              BOOL v25 = v271++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x5Au:
        case 0x5Cu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x5Bu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v276 = 0;
          while (1)
          {
            uint64_t v277 = *v2;
            uint64_t v278 = *(void *)&a1[v277];
            unint64_t v279 = v278 + 1;
            if (v278 == -1 || v279 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v280 = *(char *)(*(void *)&a1[*v5] + v278);
            *(void *)&a1[v277] = v279;
            if (v280 < 0)
            {
              BOOL v25 = v276++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x5Eu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOAddStopRouteInfoIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x5Fu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v281 = 0;
          while (1)
          {
            uint64_t v282 = *v2;
            uint64_t v283 = *(void *)&a1[v282];
            unint64_t v284 = v283 + 1;
            if (v283 == -1 || v284 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v285 = *(char *)(*(void *)&a1[*v5] + v283);
            *(void *)&a1[v282] = v284;
            if (v285 < 0)
            {
              BOOL v25 = v281++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x60u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v286 = 0;
          while (1)
          {
            uint64_t v287 = *v2;
            uint64_t v288 = *(void *)&a1[v287];
            unint64_t v289 = v288 + 1;
            if (v288 == -1 || v289 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v290 = *(char *)(*(void *)&a1[*v5] + v288);
            *(void *)&a1[v287] = v289;
            if (v290 < 0)
            {
              BOOL v25 = v286++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x61u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v291 = 0;
          while (1)
          {
            uint64_t v292 = *v2;
            uint64_t v293 = *(void *)&a1[v292];
            unint64_t v294 = v293 + 1;
            if (v293 == -1 || v294 > *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            int v295 = *(char *)(*(void *)&a1[*v5] + v293);
            *(void *)&a1[v292] = v294;
            if (v295 < 0)
            {
              BOOL v25 = v291++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x62u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPrivacyMetadataIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x63u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v296 = 0;
          while (1)
          {
            uint64_t v297 = *v2;
            unint64_t v298 = *(void *)&a1[v297];
            if (v298 == -1 || v298 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v299 = v298 + 1;
            int v300 = *(char *)(*(void *)&a1[*v5] + v298);
            *(void *)&a1[v297] = v299;
            if (v300 < 0)
            {
              BOOL v25 = v296++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x64u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v301 = 0;
          while (1)
          {
            uint64_t v302 = *v2;
            unint64_t v303 = *(void *)&a1[v302];
            if (v303 == -1 || v303 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v304 = v303 + 1;
            int v305 = *(char *)(*(void *)&a1[*v5] + v303);
            *(void *)&a1[v302] = v304;
            if (v305 < 0)
            {
              BOOL v25 = v301++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x66u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v306 = 0;
          while (1)
          {
            uint64_t v307 = *v2;
            unint64_t v308 = *(void *)&a1[v307];
            if (v308 == -1 || v308 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v309 = v308 + 1;
            int v310 = *(char *)(*(void *)&a1[*v5] + v308);
            *(void *)&a1[v307] = v309;
            if (v310 < 0)
            {
              BOOL v25 = v306++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x67u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_751:
              PBReaderRecallMark();
              return 0;
            }
LABEL_740:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v396 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v397 = *v2;
                unint64_t v398 = *(void *)&a1[v397];
                if (v398 == -1 || v398 >= *(void *)&a1[*v3]) {
                  break;
                }
                unint64_t v399 = v398 + 1;
                int v400 = *(char *)(*(void *)&a1[*v5] + v398);
                *(void *)&a1[v397] = v399;
                if (v400 < 0)
                {
                  BOOL v12 = v396++ >= 9;
                  if (!v12) {
                    continue;
                  }
                }
                goto LABEL_740;
              }
              a1[*v4] = 1;
            }
LABEL_634:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0) {
              goto LABEL_751;
            }
            while (1)
            {
              uint64_t v311 = *v2;
              unint64_t v312 = *(void *)&a1[v311];
              if (v312 == -1 || v312 >= *(void *)&a1[*v3]) {
                break;
              }
              unint64_t v313 = v312 + 1;
              int v314 = *(char *)(*(void *)&a1[*v5] + v312);
              *(void *)&a1[v311] = v313;
              if (v314 < 0)
              {
                unsigned int v315 = v15++;
                if (v315 <= 8) {
                  continue;
                }
              }
              goto LABEL_647;
            }
LABEL_643:
            uint64_t v13 = *v4;
LABEL_644:
            a1[v13] = 1;
          }
LABEL_647:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_749;
          }
          break;
        case 0x68u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v316 = 0;
          while (1)
          {
            uint64_t v317 = *v2;
            unint64_t v318 = *(void *)&a1[v317];
            if (v318 == -1 || v318 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v319 = v318 + 1;
            int v320 = *(char *)(*(void *)&a1[*v5] + v318);
            *(void *)&a1[v317] = v319;
            if (v320 < 0)
            {
              BOOL v25 = v316++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x69u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOSearchImplicitFilterInfoIsValid(a1)) {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x6Au:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v321 = 0;
          while (1)
          {
            uint64_t v322 = *v2;
            unint64_t v323 = *(void *)&a1[v322];
            if (v323 == -1 || v323 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v324 = v323 + 1;
            int v325 = *(char *)(*(void *)&a1[*v5] + v323);
            *(void *)&a1[v322] = v324;
            if (v325 < 0)
            {
              BOOL v25 = v321++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x6Bu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v326 = 0;
          while (1)
          {
            uint64_t v327 = *v2;
            unint64_t v328 = *(void *)&a1[v327];
            if (v328 == -1 || v328 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v329 = v328 + 1;
            int v330 = *(char *)(*(void *)&a1[*v5] + v328);
            *(void *)&a1[v327] = v329;
            if (v330 < 0)
            {
              BOOL v25 = v326++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x6Cu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v331 = 0;
          while (1)
          {
            uint64_t v332 = *v2;
            unint64_t v333 = *(void *)&a1[v332];
            if (v333 == -1 || v333 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v334 = v333 + 1;
            int v335 = *(char *)(*(void *)&a1[*v5] + v333);
            *(void *)&a1[v332] = v334;
            if (v335 < 0)
            {
              BOOL v25 = v331++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x6Du:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        case 0x6Eu:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v336 = 0;
          while (1)
          {
            uint64_t v337 = *v2;
            unint64_t v338 = *(void *)&a1[v337];
            if (v338 == -1 || v338 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v339 = v338 + 1;
            int v340 = *(char *)(*(void *)&a1[*v5] + v338);
            *(void *)&a1[v337] = v339;
            if (v340 < 0)
            {
              BOOL v25 = v336++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x70u:
          if (v15 != 2
            || !PBReaderPlaceMark()
            || !GEOPDAutocompleteSessionDataIsValid((unsigned __int8 *)a1))
          {
            goto LABEL_751;
          }
          goto LABEL_634;
        case 0x71u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v341 = 0;
          while (1)
          {
            uint64_t v342 = *v2;
            unint64_t v343 = *(void *)&a1[v342];
            if (v343 == -1 || v343 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v344 = v343 + 1;
            int v345 = *(char *)(*(void *)&a1[*v5] + v343);
            *(void *)&a1[v342] = v344;
            if (v345 < 0)
            {
              BOOL v25 = v341++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x72u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPDSSessionUserActionMetadataIsValid(a1)) {
            goto LABEL_634;
          }
          goto LABEL_751;
        case 0x73u:
          if ((v8 & 7) != 0) {
            goto LABEL_751;
          }
          unsigned int v346 = 0;
          while (1)
          {
            uint64_t v347 = *v2;
            unint64_t v348 = *(void *)&a1[v347];
            if (v348 == -1 || v348 >= *(void *)&a1[*v3]) {
              goto LABEL_643;
            }
            unint64_t v349 = v348 + 1;
            int v350 = *(char *)(*(void *)&a1[*v5] + v348);
            *(void *)&a1[v347] = v349;
            if (v350 < 0)
            {
              BOOL v25 = v346++ > 8;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_647;
          }
        case 0x74u:
          if (v15 == 2) {
            goto LABEL_646;
          }
          goto LABEL_751;
        default:
LABEL_646:
          if (PBReaderSkipValueWithTag()) {
            goto LABEL_647;
          }
          goto LABEL_751;
      }
    }
  }
LABEL_749:
  BOOL v401 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v401;
}

BOOL GEOTraitsPhotoSizeIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_39;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        goto LABEL_39;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_41;
        }
        unsigned int v16 = 0;
        while (1)
        {
          uint64_t v17 = *v2;
          uint64_t v18 = *(void *)&a1[v17];
          unint64_t v19 = v18 + 1;
          if (v18 == -1 || v19 > *(void *)&a1[*v3]) {
            break;
          }
          int v20 = *(char *)(*(void *)&a1[*v5] + v18);
          *(void *)&a1[v17] = v19;
          if (v20 < 0)
          {
            BOOL v21 = v16++ > 8;
            if (!v21) {
              continue;
            }
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        BOOL v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_39;
      }
    }
    if ((v8 & 7) != 0) {
      goto LABEL_41;
    }
    unsigned int v22 = 0;
    while (1)
    {
      uint64_t v23 = *v2;
      uint64_t v24 = *(void *)&a1[v23];
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)&a1[*v3]) {
        goto LABEL_36;
      }
      int v26 = *(char *)(*(void *)&a1[*v5] + v24);
      *(void *)&a1[v23] = v25;
      if (v26 < 0)
      {
        BOOL v21 = v22++ > 8;
        if (!v21) {
          continue;
        }
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  BOOL v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOTraitsTransitScheduleFilterIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_31;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_31;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3) {
        break;
      }
      if (v17 == 2 || v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsTransitScheduleModeFilterIsValid(a1)) {
          goto LABEL_32;
        }
LABEL_28:
        PBReaderRecallMark();
        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_32;
      }
LABEL_30:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_31;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsTransitScheduleTimeRangeIsValid(a1))
    {
LABEL_32:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_28;
  }
LABEL_31:
  BOOL v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

BOOL GEOSearchImplicitFilterInfoIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_39;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        goto LABEL_39;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_41;
        }
        unsigned int v16 = 0;
        while (1)
        {
          uint64_t v17 = *v2;
          uint64_t v18 = *(void *)&a1[v17];
          unint64_t v19 = v18 + 1;
          if (v18 == -1 || v19 > *(void *)&a1[*v3]) {
            break;
          }
          int v20 = *(char *)(*(void *)&a1[*v5] + v18);
          *(void *)&a1[v17] = v19;
          if (v20 < 0)
          {
            BOOL v21 = v16++ > 8;
            if (!v21) {
              continue;
            }
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        BOOL v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_39;
      }
    }
    if ((v8 & 7) != 0) {
      goto LABEL_41;
    }
    unsigned int v22 = 0;
    while (1)
    {
      uint64_t v23 = *v2;
      uint64_t v24 = *(void *)&a1[v23];
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)&a1[*v3]) {
        goto LABEL_36;
      }
      int v26 = *(char *)(*(void *)&a1[*v5] + v24);
      *(void *)&a1[v23] = v25;
      if (v26 < 0)
      {
        BOOL v21 = v22++ > 8;
        if (!v21) {
          continue;
        }
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  BOOL v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

uint64_t _GEOMapServiceTraitsIsDirty(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 616));
  id v2 = (uint64_t *)(a1 + 756);
  uint64_t v3 = *(void *)(a1 + 764);
  if ((v3 & 0x200000003800) != 0) {
    return 1;
  }
  if ((v3 & 0x100000) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 384))) {
      return 1;
    }
    id v2 = (uint64_t *)(a1 + 756);
    uint64_t v3 = *(void *)(a1 + 764);
  }
  uint64_t v4 = *v2;
  if ((v3 & 0x830E30100) != 0) {
    return 1;
  }
  if ((v3 & 0x10000000000) == 0) {
    goto LABEL_9;
  }
  if (GEOTraitsTransitScheduleFilterIsDirty(*(void *)(a1 + 568))) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 756);
  uint64_t v3 = *(void *)(a1 + 764);
LABEL_9:
  if ((v3 & 0x109000000) != 0) {
    return 1;
  }
  if ((v3 & 0x8000) != 0)
  {
    if (GEOAutomobileOptionsIsDirty(*(os_unfair_lock_s **)(a1 + 328))) {
      return 1;
    }
    uint64_t v4 = *(void *)(a1 + 756);
    uint64_t v3 = *(void *)(a1 + 764);
  }
  if ((v3 & 0x8000000000) != 0)
  {
    if (GEOTransitOptionsIsDirty(*(void *)(a1 + 560))) {
      return 1;
    }
    uint64_t v4 = *(void *)(a1 + 756);
    uint64_t v3 = *(void *)(a1 + 764);
  }
  if ((v3 & 0x100000000000) != 0)
  {
    if (GEOWalkingOptionsIsDirty(*(void *)(a1 + 600))) {
      return 1;
    }
    uint64_t v4 = *(void *)(a1 + 756);
    uint64_t v3 = *(void *)(a1 + 764);
  }
  if (v4 & 0x8000000000000000 | v3 & 1) {
    return 1;
  }
  if ((v3 & 0x80000000000) != 0)
  {
    if (GEOPDVenueIdentifierIsDirty(*(void *)(a1 + 592))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 764);
  }
  if ((v3 & 0x408) != 0) {
    return 1;
  }
  if ((v3 & 0x20000000000) != 0)
  {
    if (GEOTraitsTransitScheduleFilterIsDirty(*(void *)(a1 + 576))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 764);
  }
  if ((v3 & 0x30) != 0) {
    return 1;
  }
  if ((v3 & 0x80000) != 0)
  {
    if (GEOCyclingOptionsIsDirty(*(void *)(a1 + 376))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 764);
  }
  if ((v3 & 0x42000082) != 0) {
    return 1;
  }
  if ((v3 & 0x400000000) != 0)
  {
    if (GEOPDResultRefinementQueryIsDirty(*(os_unfair_lock_s **)(a1 + 512))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 764);
  }
  if ((v3 & 0x2000044040) != 0) {
    return 1;
  }
  if ((v3 & 0x200) != 0)
  {
    if (GEOAddStopRouteInfoIsDirty(*(os_unfair_lock_s **)(a1 + 280))) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 764);
  }
  if ((v3 & 0x45284000004) != 0) {
    return 1;
  }
  if ((v3 & 0x8000000) == 0) {
    return 0;
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v7 = *(id *)(a1 + 440);
  uint64_t v5 = [v7 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v8 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v7);
        }
        if (GEOLocationIsDirty(*(os_unfair_lock_s **)(*((void *)&v10 + 1) + 8 * i)))
        {
          uint64_t v5 = 1;
          goto LABEL_54;
        }
      }
      uint64_t v5 = [v7 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_54:

  return v5;
}

os_unfair_lock_s *GEOMapServiceTraitsIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOMapServiceTraitsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 154);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEOMapServiceTraitsClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  if (a3
    && [a1 hasDeviceLocation]
    && ([a1 deviceLocation],
        char v6 = objc_claimAutoreleasedReturnValue(),
        int HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v6),
        v6,
        HasSensitiveFields))
  {
    uint64_t v8 = [a1 deviceLocation];
    uint64_t v9 = (_DWORD *)[v8 copy];

    GEOLocationClearSensitiveFields(v9);
    [a1 setDeviceLocation:v9];
  }
  else
  {
    uint64_t v9 = [a1 deviceLocation];
    [v9 clearSensitiveFields:a2];
  }

  -[GEOMapServiceTraits _readHistoricalLocations]((uint64_t)a1);
  unint64_t result = [a1[55] count];
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      uint64_t v12 = [a1[55] objectAtIndexedSubscript:i];
      long long v13 = (void *)v12;
      if (a3 && GEOLocationHasSensitiveFields(v12))
      {
        int v14 = (_DWORD *)[v13 copy];
        GEOLocationClearSensitiveFields(v14);
        [a1[55] replaceObjectAtIndex:i withObject:v14];
      }
      else
      {
        [v13 clearSensitiveFields:a2];
      }

      unint64_t result = [a1[55] count];
    }
  }
  return result;
}

uint64_t GEOMapServiceTraitsHasSensitiveFields(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  id v2 = [a1 deviceLocation];
  char HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v2);

  if (HasSensitiveFields) {
    return 1;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v5 = objc_msgSend(a1, "historicalLocations", 0);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v12;
    while (2)
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        if (GEOLocationHasSensitiveFields(*(void *)(*((void *)&v11 + 1) + 8 * v9)))
        {
          uint64_t v4 = 1;
          goto LABEL_15;
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  uint64_t v4 = 0;
LABEL_15:

  return v4;
}

void sub_189E4E0AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E4E690(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMuninViewStateReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v54 = v17;
        char v55 = v18 | v17;
        if ((v18 | v7)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        char v56 = (v19 == 0) | v18;
        BOOL v57 = v18;
        int v20 = (int *)MEMORY[0x1E4F940E8];
        BOOL v21 = (int *)MEMORY[0x1E4F940C8];
        unsigned int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_66;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_66:
      int v52 = 1;
      goto LABEL_67;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v57;
    if ((v56 & 1) == 0)
    {
      int v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_57;
      }
      if ((*(unsigned char *)(a1 + 52) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_86;
        }
        unint64_t v39 = objc_alloc_init(GEOCameraFrame);
        if (!GEOCameraFrameReadAllFrom((uint64_t)v39, (void *)v3)) {
          goto LABEL_85;
        }
        PBReaderRecallMark();
        uint64_t v40 = 24;
LABEL_50:
        unsigned int v41 = *(void **)(a1 + v40);
        *(void *)(a1 + v40) = v39;

        --v8;
LABEL_64:
        BOOL v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_65;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_86;
      }
      char v46 = *(unsigned char *)(a1 + 52) << 6;
LABEL_63:
      v8 += v46 >> 7;
      goto LABEL_64;
    }
    if (v54 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_57:
      char v45 = PBReaderSkipValueWithTag();
      BOOL v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v45 & 1) == 0)
      {
        int v52 = 0;
        goto LABEL_67;
      }
      goto LABEL_65;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      uint64_t v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v44 = PBUnknownFieldAdd();
    BOOL v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v44)
    {
      int v52 = 0;
      uint64_t v53 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v55 & 1 | (v8 != 0))) {
      goto LABEL_66;
    }
  }
  if (!v34) {
    goto LABEL_57;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_86;
    }
    char v46 = 32 * *(unsigned char *)(a1 + 52);
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_86;
  }
  unint64_t v39 = objc_alloc_init(GEOLocationInfo);
  if (GEOLocationInfoReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = 32;
    goto LABEL_50;
  }
LABEL_85:

LABEL_86:
  int v52 = 0;
  BOOL v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_67:
  uint64_t v53 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
  if ((v54 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_68:
  *(unsigned char *)(a1 + v53[128]) |= 1u;
LABEL_69:
  if (v57 || (v52 & 1) == 0)
  {
    *(unsigned char *)(a1 + v53[128]) |= 2u;
    *(unsigned char *)(a1 + v53[128]) |= 4u;
    goto LABEL_79;
  }
  if (v19)
  {
    while (1)
    {
      int v49 = *v19++;
      int v48 = v49;
      if (v49 == 1) {
        break;
      }
      if (v48 == 2)
      {
        char v47 = 4;
LABEL_75:
        *(unsigned char *)(a1 + v53[128]) |= v47;
      }
      else if (!v48)
      {
        goto LABEL_79;
      }
    }
    char v47 = 2;
    goto LABEL_75;
  }
LABEL_79:
  if (v52) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v57)
  {
    int v50 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189E4ED6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E4F3E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMuninViewStateReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOMuninViewStateReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOMuninViewStateReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOMuninViewStateReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOMuninViewStateReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 24) readAll:1];
    [*(id *)(a1 + 32) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189E4F5A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMuninViewStateReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOMuninViewStateReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E4F604(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMuninViewStateIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_30;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_30;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOCameraFrameIsValid(a1)) {
          goto LABEL_31;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_31;
      }
LABEL_29:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_30;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocationInfoIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189E4F998(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOMuninViewStateIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(unsigned char *)(a1 + 52) & 0xA) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) == 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 32);

  return GEOLocationInfoIsDirty(v3);
}

os_unfair_lock_s *GEOMuninViewStateIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    BOOL IsDirty = _GEOMuninViewStateIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189E4FCC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E4FF3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E501A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONetworkEventDataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 124);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 120)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = *(_DWORD *)(a1 + 156);
  uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  unsigned int v15 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A63D3C0), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A63D3D0), v14)))+ ((v12 >> 15) & 1)+ ((v12 >> 10) & 1)+ ((v12 >> 8) & 1);
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v19 = v15 > 7;
        char v20 = v19 & ~(_BYTE)v11 | v9;
        unsigned __int8 v21 = v19 | v11;
        char v105 = v20;
        char v106 = v8;
        char v107 = v21 | v20;
        if ((v21 | v8)) {
          unsigned int v22 = 0;
        }
        else {
          unsigned int v22 = a3;
        }
        char v108 = (v22 == 0) | v21;
        BOOL v109 = v21;
        char v23 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
        uint64_t v18 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v23) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v24)) {
      goto LABEL_196;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v23;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_196:
      int v104 = 1;
      goto LABEL_197;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v109;
    if ((v108 & 1) == 0)
    {
      BOOL v38 = v22;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37) {
          goto LABEL_141;
        }
        if ((*(unsigned char *)(a1 + 157) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_220;
          }
          id v42 = objc_alloc_init(GEOClientMetrics);
          if (GEOClientMetricsReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            uint64_t v43 = *(void **)(a1 + 40);
            *(void *)(a1 + 40) = v42;
            goto LABEL_140;
          }
          goto LABEL_219;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_220;
        }
        int v99 = (int)(*(_DWORD *)(a1 + 156) << 20) >> 31;
        goto LABEL_190;
      case 2:
        if ((v106 & 1) == 0) {
          goto LABEL_141;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        *(_DWORD *)(a1 + 156) |= 8u;
        while (2)
        {
          uint64_t v50 = *v23;
          uint64_t v51 = *(void *)(v3 + v50);
          unint64_t v52 = v51 + 1;
          if (v51 == -1 || v52 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v53 = *(unsigned char *)(*(void *)(v3 + *v25) + v51);
            *(void *)(v3 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              BOOL v33 = v48++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_146;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v49) = 0;
        }
LABEL_146:
        uint64_t v98 = 136;
        goto LABEL_171;
      case 3:
        if ((v106 & 1) == 0) {
          goto LABEL_141;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v49 = 0;
        *(_DWORD *)(a1 + 156) |= 4u;
        while (2)
        {
          uint64_t v56 = *v23;
          uint64_t v57 = *(void *)(v3 + v56);
          unint64_t v58 = v57 + 1;
          if (v57 == -1 || v58 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(v3 + *v25) + v57);
            *(void *)(v3 + v56) = v58;
            v49 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              BOOL v33 = v55++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_150;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v49) = 0;
        }
LABEL_150:
        uint64_t v98 = 132;
        goto LABEL_171;
      case 4:
        if ((v106 & 1) == 0) {
          goto LABEL_141;
        }
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v49 = 0;
        *(_DWORD *)(a1 + 156) |= 0x20u;
        while (2)
        {
          uint64_t v62 = *v23;
          uint64_t v63 = *(void *)(v3 + v62);
          unint64_t v64 = v63 + 1;
          if (v63 == -1 || v64 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v65 = *(unsigned char *)(*(void *)(v3 + *v25) + v63);
            *(void *)(v3 + v62) = v64;
            v49 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              BOOL v33 = v61++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_154;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v49) = 0;
        }
LABEL_154:
        uint64_t v98 = 144;
        goto LABEL_171;
      case 5:
        if ((v106 & 1) == 0) {
          goto LABEL_141;
        }
        char v66 = 0;
        unsigned int v67 = 0;
        uint64_t v68 = 0;
        *(_DWORD *)(a1 + 156) |= 0x80u;
        while (2)
        {
          uint64_t v69 = *v23;
          uint64_t v70 = *(void *)(v3 + v69);
          unint64_t v71 = v70 + 1;
          if (v70 == -1 || v71 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v72 = *(unsigned char *)(*(void *)(v3 + *v25) + v70);
            *(void *)(v3 + v69) = v71;
            v68 |= (unint64_t)(v72 & 0x7F) << v66;
            if (v72 < 0)
            {
              v66 += 7;
              BOOL v33 = v67++ >= 9;
              if (v33)
              {
                uint64_t v68 = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v68 = 0;
        }
LABEL_158:
        *(unsigned char *)(a1 + 152) = v68 != 0;
        goto LABEL_192;
      case 6:
        if (!v37) {
          goto LABEL_141;
        }
        if ((*(unsigned char *)(a1 + 158) & 1) == 0)
        {
          uint64_t v73 = PBReaderReadString();
          uint64_t v74 = 96;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_220;
        }
        int v99 = (int)(*(_DWORD *)(a1 + 156) << 15) >> 31;
        goto LABEL_190;
      case 7:
        if (!v37) {
          goto LABEL_141;
        }
        if ((*(unsigned char *)(a1 + 158) & 2) == 0)
        {
          uint64_t v73 = PBReaderReadString();
          uint64_t v74 = 104;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_220;
        }
        int v99 = (int)(*(_DWORD *)(a1 + 156) << 14) >> 31;
        goto LABEL_190;
      case 8:
        if (!v37) {
          goto LABEL_141;
        }
        if ((*(unsigned char *)(a1 + 158) & 4) == 0)
        {
          uint64_t v73 = PBReaderReadString();
          uint64_t v74 = 112;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_220;
        }
        int v99 = (int)(*(_DWORD *)(a1 + 156) << 13) >> 31;
        goto LABEL_190;
      case 9:
        if (!v37) {
          goto LABEL_141;
        }
        if ((*(unsigned char *)(a1 + 157) & 0x20) == 0)
        {
          uint64_t v73 = PBReaderReadString();
          uint64_t v74 = 64;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_220;
        }
        int v99 = (int)(*(_DWORD *)(a1 + 156) << 18) >> 31;
        goto LABEL_190;
      case 10:
        if ((v106 & 1) == 0) {
          goto LABEL_141;
        }
        char v75 = 0;
        unsigned int v76 = 0;
        uint64_t v77 = 0;
        *(_DWORD *)(a1 + 156) |= 1u;
        while (2)
        {
          uint64_t v78 = *v23;
          uint64_t v79 = *(void *)(v3 + v78);
          unint64_t v80 = v79 + 1;
          if (v79 == -1 || v80 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v81 = *(unsigned char *)(*(void *)(v3 + *v25) + v79);
            *(void *)(v3 + v78) = v80;
            v77 |= (unint64_t)(v81 & 0x7F) << v75;
            if (v81 < 0)
            {
              v75 += 7;
              BOOL v33 = v76++ >= 9;
              if (v33)
              {
                uint64_t v77 = 0;
                goto LABEL_162;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v77 = 0;
        }
LABEL_162:
        *(void *)(a1 + 56) = v77;
        goto LABEL_192;
      case 11:
        if (!v37 || (*(unsigned char *)(a1 + 157) & 2) != 0) {
          goto LABEL_141;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_220;
        }
        id v42 = objc_alloc_init(GEOLogMsgState);
        if (GEOLogMsgStateReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          -[GEONetworkEventData _addNoFlagsAdditionalStates:](a1, v42);

LABEL_191:
          unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
LABEL_192:
          if (!(v107 & 1 | (v7 != 0))) {
            goto LABEL_196;
          }
          continue;
        }
LABEL_219:

LABEL_220:
        int v104 = 0;
        unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
LABEL_197:
        if (v105) {
LABEL_198:
        }
          *(_DWORD *)(a1 + 156) |= 0x100u;
        if (v109 || (v104 & 1) == 0)
        {
          *(_DWORD *)(a1 + 156) |= 0x800u;
          *(_DWORD *)(a1 + 156) |= 0x10000u;
          *(_DWORD *)(a1 + 156) |= 0x20000u;
          *(_DWORD *)(a1 + 156) |= 0x40000u;
          *(_DWORD *)(a1 + 156) |= 0x2000u;
          *(_DWORD *)(a1 + 156) |= 0x200u;
          *(_DWORD *)(a1 + 156) |= 0x1000u;
          *(_DWORD *)(a1 + 156) |= 0x4000u;
          *(_DWORD *)(a1 + 156) |= 0x8000u;
          *(_DWORD *)(a1 + 156) |= 0x400u;
        }
        else if (v22)
        {
          while (1)
          {
            int v100 = *v22++;
            int v101 = 2048;
            switch(v100)
            {
              case 0:
                goto LABEL_213;
              case 1:
                goto LABEL_212;
              case 6:
                int v101 = 0x10000;
                goto LABEL_212;
              case 7:
                int v101 = 0x20000;
                goto LABEL_212;
              case 8:
                int v101 = 0x40000;
                goto LABEL_212;
              case 9:
                int v101 = 0x2000;
                goto LABEL_212;
              case 11:
                int v101 = 512;
                goto LABEL_212;
              case 13:
                int v101 = 4096;
                goto LABEL_212;
              case 15:
                int v101 = 0x4000;
                goto LABEL_212;
              case 17:
                int v101 = 0x8000;
                goto LABEL_212;
              case 18:
                int v101 = 1024;
LABEL_212:
                *(_DWORD *)(a1 + 156) |= v101;
                break;
              default:
                continue;
            }
          }
        }
LABEL_213:
        if (v104) {
          unint64_t v3 = *(unsigned char *)(v3 + *v24) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v109)
        {
          uint64_t v102 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 12:
        if ((v106 & 1) == 0) {
          goto LABEL_141;
        }
        *(_DWORD *)(a1 + 156) |= 2u;
        uint64_t v82 = *v23;
        unint64_t v83 = *(void *)(v3 + v82);
        if (v83 <= 0xFFFFFFFFFFFFFFF7 && v83 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v84 = *(void *)(*(void *)(v3 + *v25) + v83);
          *(void *)(v3 + v82) = v83 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v24) = 1;
          uint64_t v84 = 0;
        }
        *(void *)(a1 + 72) = v84;
        goto LABEL_192;
      case 13:
        if (!v37) {
          goto LABEL_141;
        }
        if ((*(unsigned char *)(a1 + 157) & 0x10) == 0)
        {
          uint64_t v73 = PBReaderReadString();
          uint64_t v74 = 48;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_220;
        }
        int v99 = (int)(*(_DWORD *)(a1 + 156) << 19) >> 31;
        goto LABEL_190;
      case 14:
        if ((v106 & 1) == 0) {
          goto LABEL_141;
        }
        char v85 = 0;
        unsigned int v86 = 0;
        uint64_t v49 = 0;
        *(_DWORD *)(a1 + 156) |= 0x40u;
        while (2)
        {
          uint64_t v87 = *v23;
          uint64_t v88 = *(void *)(v3 + v87);
          unint64_t v89 = v88 + 1;
          if (v88 == -1 || v89 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v90 = *(unsigned char *)(*(void *)(v3 + *v25) + v88);
            *(void *)(v3 + v87) = v89;
            v49 |= (unint64_t)(v90 & 0x7F) << v85;
            if (v90 < 0)
            {
              v85 += 7;
              BOOL v33 = v86++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_166;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v49) = 0;
        }
LABEL_166:
        uint64_t v98 = 148;
        goto LABEL_171;
      case 15:
        if (!v37) {
          goto LABEL_141;
        }
        if ((*(unsigned char *)(a1 + 157) & 0x40) == 0)
        {
          uint64_t v73 = PBReaderReadString();
          uint64_t v74 = 80;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_220;
        }
        int v99 = (int)(*(_DWORD *)(a1 + 156) << 17) >> 31;
        goto LABEL_190;
      case 16:
        if ((v106 & 1) == 0) {
          goto LABEL_141;
        }
        char v91 = 0;
        unsigned int v92 = 0;
        uint64_t v49 = 0;
        *(_DWORD *)(a1 + 156) |= 0x10u;
        while (2)
        {
          uint64_t v93 = *v23;
          uint64_t v94 = *(void *)(v3 + v93);
          unint64_t v95 = v94 + 1;
          if (v94 == -1 || v95 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v96 = *(unsigned char *)(*(void *)(v3 + *v25) + v94);
            *(void *)(v3 + v93) = v95;
            v49 |= (unint64_t)(v96 & 0x7F) << v91;
            if (v96 < 0)
            {
              v91 += 7;
              BOOL v33 = v92++ >= 9;
              if (v33)
              {
                LODWORD(v49) = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v49) = 0;
        }
LABEL_170:
        uint64_t v98 = 140;
LABEL_171:
        *(_DWORD *)(a1 + v98) = v49;
        goto LABEL_192;
      case 17:
        if (!v37) {
          goto LABEL_141;
        }
        if ((*(unsigned char *)(a1 + 157) & 0x80) == 0)
        {
          uint64_t v73 = PBReaderReadString();
          uint64_t v74 = 88;
          goto LABEL_139;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_220;
        }
        int v99 = (int)(*(_DWORD *)(a1 + 156) << 16) >> 31;
        goto LABEL_190;
      case 18:
        if (!v37) {
          goto LABEL_141;
        }
        if ((*(unsigned char *)(a1 + 157) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_220;
          }
          int v99 = (int)(*(_DWORD *)(a1 + 156) << 21) >> 31;
LABEL_190:
          v7 += v99;
        }
        else
        {
          uint64_t v73 = PBReaderReadString();
          uint64_t v74 = 32;
LABEL_139:
          uint64_t v43 = *(void **)(a1 + v74);
          *(void *)(a1 + v74) = v73;
LABEL_140:

          --v7;
        }
        goto LABEL_191;
      default:
        if (v105 & 1) == 0 || (*(unsigned char *)(a1 + 157))
        {
LABEL_141:
          char v97 = PBReaderSkipValueWithTag();
          unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
          if ((v97 & 1) == 0)
          {
            int v104 = 0;
            goto LABEL_197;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          unsigned int v24 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          if (!v46)
          {
            int v104 = 0;
            goto LABEL_198;
          }
        }
        goto LABEL_192;
    }
  }
}

void sub_189E517F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E51938(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E51A80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E51BC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E51FEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E52188(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E52324(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E5246C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEONetworkEventDataCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 40) readAll:1];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(a1 + 24);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v6++), "readAll:", 1, (void)v7);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

unint64_t GEONetworkEventDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 124))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEONetworkEventDataReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = [v8 position];
  *(_DWORD *)(a1 + 124) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEONetworkEventDataReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEONetworkEventDataReadAllFrom_initialTag;
  }
  unint64_t Specified = GEONetworkEventDataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEONetworkEventDataCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_189E53C08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONetworkEventDataReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEONetworkEventDataReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E53C6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONetworkEventDataIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOClientMetricsIsValid(a1)) {
            goto LABEL_74;
          }
          goto LABEL_108;
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_108;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              goto LABEL_99;
            }
            int v22 = *(char *)(*(void *)&a1[*v5] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              BOOL v23 = v18++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_105;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_108;
          }
          unsigned int v24 = 0;
          while (1)
          {
            uint64_t v25 = *v2;
            uint64_t v26 = *(void *)&a1[v25];
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
              goto LABEL_99;
            }
            int v28 = *(char *)(*(void *)&a1[*v5] + v26);
            *(void *)&a1[v25] = v27;
            if (v28 < 0)
            {
              BOOL v23 = v24++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_105;
          }
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_108;
          }
          unsigned int v29 = 0;
          while (1)
          {
            uint64_t v30 = *v2;
            uint64_t v31 = *(void *)&a1[v30];
            unint64_t v32 = v31 + 1;
            if (v31 == -1 || v32 > *(void *)&a1[*v3]) {
              goto LABEL_99;
            }
            int v33 = *(char *)(*(void *)&a1[*v5] + v31);
            *(void *)&a1[v30] = v32;
            if (v33 < 0)
            {
              BOOL v23 = v29++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_105;
          }
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_108;
          }
          unsigned int v34 = 0;
          while (1)
          {
            uint64_t v35 = *v2;
            uint64_t v36 = *(void *)&a1[v35];
            unint64_t v37 = v36 + 1;
            if (v36 == -1 || v37 > *(void *)&a1[*v3]) {
              goto LABEL_99;
            }
            int v38 = *(char *)(*(void *)&a1[*v5] + v36);
            *(void *)&a1[v35] = v37;
            if (v38 < 0)
            {
              BOOL v23 = v34++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_105;
          }
        case 6u:
          if (v16 == 2) {
            goto LABEL_104;
          }
          goto LABEL_108;
        case 7u:
          if (v16 == 2) {
            goto LABEL_104;
          }
          goto LABEL_108;
        case 8u:
          if (v16 == 2) {
            goto LABEL_104;
          }
          goto LABEL_108;
        case 9u:
          if (v16 == 2) {
            goto LABEL_104;
          }
          goto LABEL_108;
        case 0xAu:
          if ((v8 & 7) != 0) {
            goto LABEL_108;
          }
          unsigned int v39 = 0;
          while (1)
          {
            uint64_t v40 = *v2;
            uint64_t v41 = *(void *)&a1[v40];
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)&a1[*v3]) {
              goto LABEL_99;
            }
            int v43 = *(char *)(*(void *)&a1[*v5] + v41);
            *(void *)&a1[v40] = v42;
            if (v43 < 0)
            {
              BOOL v23 = v39++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_105;
          }
        case 0xBu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLogMsgStateIsValid(a1)) {
            goto LABEL_108;
          }
LABEL_74:
          PBReaderRecallMark();
          continue;
        case 0xCu:
          if (v16 != 1) {
            goto LABEL_108;
          }
          uint64_t v44 = *v2;
          unint64_t v45 = *(void *)&a1[v44];
          if (v45 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_100;
          }
          unint64_t v46 = v45 + 8;
          if (v46 > *(void *)&a1[*v3]) {
            goto LABEL_100;
          }
          *(void *)&a1[v44] = v46;
          continue;
        case 0xDu:
          if (v16 == 2) {
            goto LABEL_104;
          }
          goto LABEL_108;
        case 0xEu:
          if ((v8 & 7) != 0) {
            goto LABEL_108;
          }
          unsigned int v47 = 0;
          while (1)
          {
            uint64_t v48 = *v2;
            uint64_t v49 = *(void *)&a1[v48];
            unint64_t v50 = v49 + 1;
            if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
              goto LABEL_99;
            }
            int v51 = *(char *)(*(void *)&a1[*v5] + v49);
            *(void *)&a1[v48] = v50;
            if (v51 < 0)
            {
              BOOL v23 = v47++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_105;
          }
        case 0xFu:
          if (v16 == 2) {
            goto LABEL_104;
          }
          goto LABEL_108;
        case 0x10u:
          if ((v8 & 7) != 0) {
            goto LABEL_108;
          }
          unsigned int v52 = 0;
          break;
        case 0x11u:
          if (v16 == 2) {
            goto LABEL_104;
          }
          goto LABEL_108;
        case 0x12u:
          if (v16 == 2) {
            goto LABEL_104;
          }
          goto LABEL_108;
        default:
LABEL_104:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_108:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v53 = *v2;
        uint64_t v54 = *(void *)&a1[v53];
        unint64_t v55 = v54 + 1;
        if (v54 == -1 || v55 > *(void *)&a1[*v3]) {
          break;
        }
        int v56 = *(char *)(*(void *)&a1[*v5] + v54);
        *(void *)&a1[v53] = v55;
        if (v56 < 0)
        {
          BOOL v23 = v52++ > 8;
          if (!v23) {
            continue;
          }
        }
        goto LABEL_105;
      }
LABEL_99:
      uint64_t v14 = *v4;
LABEL_100:
      a1[v14] = 1;
LABEL_105:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v57 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v57;
}

BOOL GEONetworkEventDataIsDirty(os_unfair_lock_s *a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner(a1 + 32);
  BOOL v2 = (a1[39]._os_unfair_lock_opaque & 0xFFE00) != 0;
  os_unfair_lock_unlock(a1 + 32);
  return v2;
}

unint64_t GEONetworkEventDataClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  -[GEONetworkEventData _readAdditionalStates](a1);
  unint64_t result = [*(id *)(a1 + 24) count];
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      unint64_t v8 = [*(id *)(a1 + 24) objectAtIndexedSubscript:i];
      uint64_t v9 = v8;
      if (a3 && GEOLogMsgStateHasSensitiveFields(v8, a2))
      {
        uint64_t v10 = (void *)[v9 copy];
        GEOLogMsgStateClearSensitiveFields(v10, a2, 0);
        [*(id *)(a1 + 24) replaceObjectAtIndex:i withObject:v10];
      }
      else
      {
        [v9 clearSensitiveFields:a2];
      }

      unint64_t result = [*(id *)(a1 + 24) count];
    }
  }
  return result;
}

uint64_t GEONetworkEventDataHasSensitiveFields(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = objc_msgSend(a1, "additionalStates", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        if (GEOLogMsgStateHasSensitiveFields(*(void **)(*((void *)&v10 + 1) + 8 * v7), a2))
        {
          uint64_t v8 = 1;
          goto LABEL_12;
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_12:

  return v8;
}

void sub_189E54D38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E55754(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceCollectionStorageReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v7)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_66;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_66:
      int v51 = 1;
      goto LABEL_67;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      uint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_57;
      }
      if ((*(unsigned char *)(a1 + 52) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_85;
        }
        unsigned int v39 = objc_alloc_init(GEOPDPlaceCollection);
        if (!GEOPDPlaceCollectionReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        uint64_t v40 = 32;
LABEL_50:
        uint64_t v41 = *(void **)(a1 + v40);
        *(void *)(a1 + v40) = v39;

        --v8;
LABEL_64:
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_65;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_85;
      }
      char v46 = 32 * *(unsigned char *)(a1 + 52);
LABEL_63:
      v8 += v46 >> 7;
      goto LABEL_64;
    }
    if (v53 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_57:
      char v45 = PBReaderSkipValueWithTag();
      unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v45 & 1) == 0)
      {
        int v51 = 0;
        goto LABEL_67;
      }
      goto LABEL_65;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      int v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v44 = PBUnknownFieldAdd();
    unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v44)
    {
      int v51 = 0;
      unsigned int v52 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v54 & 1 | (v8 != 0))) {
      goto LABEL_66;
    }
  }
  if (!v34) {
    goto LABEL_57;
  }
  if ((*(unsigned char *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_85;
    }
    char v46 = *(unsigned char *)(a1 + 52) << 6;
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_85;
  }
  unsigned int v39 = objc_alloc_init(GEOPDAttribution);
  if (GEOPDAttributionReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = 24;
    goto LABEL_50;
  }
LABEL_84:

LABEL_85:
  int v51 = 0;
  unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_67:
  unsigned int v52 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
  if ((v53 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_68:
  *(unsigned char *)(a1 + v52[160]) |= 1u;
LABEL_69:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[160]) |= 4u;
    *(unsigned char *)(a1 + v52[160]) |= 2u;
    goto LABEL_78;
  }
  if (v19)
  {
    while (1)
    {
      int v48 = *v19++;
      int v47 = v48;
      if (v48 == 1) {
        break;
      }
      if (v47 == 2)
      {
LABEL_74:
        *(unsigned char *)(a1 + v52[160]) |= v47;
      }
      else if (!v47)
      {
        goto LABEL_78;
      }
    }
    LOBYTE(v47) = 4;
    goto LABEL_74;
  }
LABEL_78:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    uint64_t v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189E561AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E562B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceCollectionStorageReadAllFrom(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPlaceCollectionStorageReadAllFrom can only be called once per object"];
  }
  else
  {
    if (!((unint64_t)[a2 position] >> 32)
      && !((unint64_t)[a2 length] >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
      id v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 40) = [v6 position];
      *(_DWORD *)(a1 + 44) = [v6 length];
      unint64_t Specified = GEOPlaceCollectionStorageReadSpecified(a1, (unint64_t)v6, (int *)&GEOPlaceCollectionStorageReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)char v7 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_189E56510(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E566E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E5684C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E56B5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORequestResponseMetadataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  char v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 72)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFCFFFDFFFBLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 > 1;
        char v18 = v17 & ~(_BYTE)v12 | v10;
        unsigned __int8 v19 = v17 | v12;
        char v64 = v18;
        char v65 = v19 | v18;
        if ((v19 | v9)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        char v66 = (v20 == 0) | v19;
        BOOL v67 = v19;
        unint64_t v21 = (int *)MEMORY[0x1E4F940E8];
        int v22 = (int *)MEMORY[0x1E4F940C8];
        char v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v10;
LABEL_8:
        uint64_t v15 = v11;
        uint64_t v16 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        uint64_t v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_90;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v7)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_25;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_25:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_90:
      int v62 = 1;
      goto LABEL_91;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v67;
    if ((v66 & 1) == 0)
    {
      int v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 72) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_107;
          }
          uint64_t v40 = objc_alloc_init(GEOLogMsgEventServiceMetadata);
          if (GEOLogMsgEventServiceMetadataReadAllFrom((uint64_t)v40, (void *)v3, v11 & 1))
          {
            PBReaderRecallMark();
            uint64_t v41 = 32;
            goto LABEL_72;
          }
          goto LABEL_106;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_107;
        }
        char v57 = 16 * *(unsigned char *)(a1 + 72);
        goto LABEL_85;
      case 2:
        if (!v35) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_107;
          }
          char v57 = 4 * *(unsigned char *)(a1 + 72);
          goto LABEL_85;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t v40 = objc_alloc_init(GEOLogMsgStateUserSession);
        if (!GEOLogMsgStateUserSessionReadAllFrom((uint64_t)v40, (void *)v3)) {
          goto LABEL_106;
        }
        PBReaderRecallMark();
        uint64_t v41 = 48;
        goto LABEL_72;
      case 3:
        if ((v9 & 1) == 0) {
          goto LABEL_73;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(unsigned char *)(a1 + 72) |= 2u;
        while (2)
        {
          uint64_t v48 = *v21;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v23) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v31 = v46++ >= 9;
              if (v31)
              {
                LODWORD(v47) = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v47) = 0;
        }
LABEL_78:
        *(_DWORD *)(a1 + 68) = v47;
        goto LABEL_89;
      case 4:
        if ((v9 & 1) == 0) {
          goto LABEL_73;
        }
        *(unsigned char *)(a1 + 72) |= 1u;
        uint64_t v52 = *v21;
        unint64_t v53 = *(void *)(v3 + v52);
        if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *(void *)(v3 + *v7))
        {
          uint64_t v54 = *(void *)(*(void *)(v3 + *v23) + v53);
          *(void *)(v3 + v52) = v53 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v54 = 0;
        }
        *(void *)(a1 + 24) = v54;
        goto LABEL_89;
      case 5:
        if (!v35) {
          goto LABEL_73;
        }
        if ((*(unsigned char *)(a1 + 72) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_107;
          }
          char v57 = 8 * *(unsigned char *)(a1 + 72);
LABEL_85:
          v8 += v57 >> 7;
LABEL_86:
          int v22 = (int *)MEMORY[0x1E4F940C8];
          char v7 = (int *)MEMORY[0x1E4F940E0];
LABEL_89:
          if (!(v65 & 1 | (v8 != 0))) {
            goto LABEL_90;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_107;
        }
        uint64_t v40 = objc_alloc_init(GEOLogMsgStateOffline);
        if (GEOLogMsgStateOfflineReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v41 = 40;
LABEL_72:
          char v55 = *(void **)(a1 + v41);
          *(void *)(a1 + v41) = v40;

          --v8;
          goto LABEL_86;
        }
LABEL_106:

LABEL_107:
        int v62 = 0;
        int v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_91:
        uint64_t v63 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
        if (v64) {
LABEL_92:
        }
          *(unsigned char *)(a1 + v63[168]) |= 4u;
        if (v67 || (v62 & 1) == 0)
        {
          *(unsigned char *)(a1 + v63[168]) |= 8u;
          *(unsigned char *)(a1 + v63[168]) |= 0x20u;
          *(unsigned char *)(a1 + v63[168]) |= 0x10u;
        }
        else if (v20)
        {
          while (1)
          {
            int v58 = *v20++;
            char v59 = 8;
            switch(v58)
            {
              case 0:
                goto LABEL_100;
              case 1:
                goto LABEL_99;
              case 2:
                char v59 = 32;
                goto LABEL_99;
              case 5:
                char v59 = 16;
LABEL_99:
                *(unsigned char *)(a1 + v63[168]) |= v59;
                break;
              default:
                continue;
            }
          }
        }
LABEL_100:
        if (v62) {
          unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v67)
        {
          char v60 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v64 & 1) == 0 || (*(unsigned char *)(a1 + 72) & 4) != 0)
        {
LABEL_73:
          char v56 = PBReaderSkipValueWithTag();
          char v7 = (int *)MEMORY[0x1E4F940E0];
          int v22 = (int *)MEMORY[0x1E4F940C8];
          if ((v56 & 1) == 0)
          {
            int v62 = 0;
            goto LABEL_91;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v43 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v42;
          }
          int v44 = PBUnknownFieldAdd();
          int v22 = (int *)MEMORY[0x1E4F940C8];
          char v7 = (int *)MEMORY[0x1E4F940E0];
          if (!v44)
          {
            int v62 = 0;
            uint64_t v63 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
            goto LABEL_92;
          }
        }
        goto LABEL_89;
    }
  }
}

void sub_189E5749C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E576EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E57FAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORequestResponseMetadataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORequestResponseMetadataReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEORequestResponseMetadataReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEORequestResponseMetadataReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORequestResponseMetadataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 32) readAll:1];
    [*(id *)(a1 + 48) readAll:1];
    [*(id *)(a1 + 40) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189E58178(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORequestResponseMetadataReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORequestResponseMetadataReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E581DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORequestResponseMetadataIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOLogMsgEventServiceMetadataIsValid(a1)) {
            goto LABEL_44;
          }
          goto LABEL_49;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLogMsgStateUserSessionIsValid(a1)) {
            goto LABEL_49;
          }
          goto LABEL_44;
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_49;
          }
          unsigned int v18 = 0;
          break;
        case 4u:
          if (v16 != 1) {
            goto LABEL_49;
          }
          uint64_t v24 = *v2;
          unint64_t v25 = *(void *)&a1[v24];
          if (v25 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_46;
          }
          unint64_t v26 = v25 + 8;
          if (v26 > *(void *)&a1[*v3]) {
            goto LABEL_46;
          }
          *(void *)&a1[v24] = v26;
          continue;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLogMsgStateOfflineIsValid(a1)) {
            goto LABEL_49;
          }
LABEL_44:
          PBReaderRecallMark();
          continue;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_49:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v19 = *v2;
        uint64_t v20 = *(void *)&a1[v19];
        unint64_t v21 = v20 + 1;
        if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
          break;
        }
        int v22 = *(char *)(*(void *)&a1[*v5] + v20);
        *(void *)&a1[v19] = v21;
        if (v22 < 0 && v18++ <= 8) {
          continue;
        }
        goto LABEL_47;
      }
      uint64_t v14 = *v4;
LABEL_46:
      a1[v14] = 1;
LABEL_47:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

void sub_189E586CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORequestResponseMetadataIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  unsigned int v2 = *(unsigned __int8 *)(a1 + 72);
  if ((v2 & 0x40) != 0) {
    return 1;
  }
  if ((v2 & 8) != 0)
  {
    if (GEOLogMsgEventServiceMetadataIsDirty(*(void *)(a1 + 32))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int8 *)(a1 + 72);
  }
  if ((v2 & 0x20) == 0) {
    return (v2 >> 4) & 1;
  }
  return 1;
}

os_unfair_lock_s *GEORequestResponseMetadataIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEORequestResponseMetadataIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189E58AD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E58F1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E591C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchCategoryStorageReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v7)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        uint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        int v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_66;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_66:
      int v51 = 1;
      goto LABEL_67;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      BOOL v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_57;
      }
      if ((*(unsigned char *)(a1 + 52) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_85;
        }
        BOOL v39 = objc_alloc_init(GEOPDBrowseCategory);
        if (!GEOPDBrowseCategoryReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        uint64_t v40 = 32;
LABEL_50:
        uint64_t v41 = *(void **)(a1 + v40);
        *(void *)(a1 + v40) = v39;

        --v8;
LABEL_64:
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_65;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_85;
      }
      char v46 = 32 * *(unsigned char *)(a1 + 52);
LABEL_63:
      v8 += v46 >> 7;
      goto LABEL_64;
    }
    if (v53 & 1) == 0 || (*(unsigned char *)(a1 + 52))
    {
LABEL_57:
      char v45 = PBReaderSkipValueWithTag();
      unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v45 & 1) == 0)
      {
        int v51 = 0;
        goto LABEL_67;
      }
      goto LABEL_65;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      int v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v44 = PBUnknownFieldAdd();
    unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v44)
    {
      int v51 = 0;
      uint64_t v52 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
      goto LABEL_68;
    }
LABEL_65:
    if (!(v54 & 1 | (v8 != 0))) {
      goto LABEL_66;
    }
  }
  if (!v34) {
    goto LABEL_57;
  }
  if ((*(unsigned char *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_85;
    }
    char v46 = *(unsigned char *)(a1 + 52) << 6;
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_85;
  }
  BOOL v39 = objc_alloc_init(GEOPDAutocompleteEntry);
  if (GEOPDAutocompleteEntryReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    uint64_t v40 = 24;
    goto LABEL_50;
  }
LABEL_84:

LABEL_85:
  int v51 = 0;
  unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_67:
  uint64_t v52 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
  if ((v53 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_68:
  *(unsigned char *)(a1 + v52[179]) |= 1u;
LABEL_69:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[179]) |= 4u;
    *(unsigned char *)(a1 + v52[179]) |= 2u;
    goto LABEL_78;
  }
  if (v19)
  {
    while (1)
    {
      int v48 = *v19++;
      int v47 = v48;
      if (v48 == 1) {
        break;
      }
      if (v47 == 2)
      {
LABEL_74:
        *(unsigned char *)(a1 + v52[179]) |= v47;
      }
      else if (!v47)
      {
        goto LABEL_78;
      }
    }
    LOBYTE(v47) = 4;
    goto LABEL_74;
  }
LABEL_78:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    uint64_t v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189E59898(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E59EE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchCategoryStorageReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSearchCategoryStorageReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOSearchCategoryStorageReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOSearchCategoryStorageReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOSearchCategoryStorageReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    -[GEOPDBrowseCategory readAll:](*(void *)(a1 + 32), 1);
    [*(id *)(a1 + 24) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189E5A09C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchCategoryStorageReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOSearchCategoryStorageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E5A100(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchCategoryStorageIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  unsigned int v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_30;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_30;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDBrowseCategoryIsValid(a1)) {
          goto LABEL_31;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_31;
      }
LABEL_29:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_30;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAutocompleteEntryIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189E5A494(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOSearchCategoryStorageIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v2 = *(unsigned char *)(a1 + 52);
  if ((v2 & 8) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if (GEOPDBrowseCategoryIsDirty(*(void *)(a1 + 32))) {
      return 1;
    }
    char v2 = *(unsigned char *)(a1 + 52);
  }
  if ((v2 & 2) == 0) {
    return 0;
  }
  uint64_t v4 = *(os_unfair_lock_s **)(a1 + 24);

  return (uint64_t)GEOPDAutocompleteEntryIsDirty(v4);
}

os_unfair_lock_s *GEOSearchCategoryStorageIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOSearchCategoryStorageIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEOSearchCategoryStorageClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  if (a3
    && [a1 hasAutocompleteEntry]
    && ([a1 autocompleteEntry],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        unsigned int v6 = GEOPDAutocompleteEntryHasSensitiveFields(v5, a2),
        v5,
        v6))
  {
    unsigned int v7 = [a1 autocompleteEntry];
    id v9 = (id)[v7 copy];

    unint64_t v8 = [v9 business];
    [v8 clearSensitiveFields:a2];

    [a1 setAutocompleteEntry:v9];
  }
  else
  {
    id v9 = [a1 autocompleteEntry];
    [v9 clearSensitiveFields:a2];
  }
}

void *GEOSearchCategoryStorageHasSensitiveFields(void *result, uint64_t a2)
{
  if (result)
  {
    id v3 = [result autocompleteEntry];
    uint64_t v4 = GEOPDAutocompleteEntryHasSensitiveFields(v3, a2);

    return v4;
  }
  return result;
}

void sub_189E5A950(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E5ABD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchImplicitFilterInfoReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    unsigned int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v28 = *v4;
            uint64_t v29 = *(void *)&v3[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&v3[*v5]) {
              break;
            }
            char v31 = *(unsigned char *)(*(void *)&v3[*v7] + v29);
            *(void *)&v3[v28] = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0) {
              goto LABEL_44;
            }
            v25 += 7;
            BOOL v15 = v26++ >= 9;
            if (v15)
            {
              uint64_t v27 = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6]) {
            uint64_t v27 = 0;
          }
LABEL_46:
          *(void *)(a1 + 16) = v27;
        }
        else if ((v10 >> 3) == 1)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (1)
          {
            uint64_t v21 = *v4;
            uint64_t v22 = *(void *)&v3[v21];
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_40;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6]) {
            LODWORD(v20) = 0;
          }
LABEL_42:
          *(_DWORD *)(a1 + 24) = v20;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v32 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v33 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v32;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_49;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    BOOL v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_189E5B758(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchImplicitFilterInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOSearchImplicitFilterInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E5B7BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavChargingStationInfoReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    unsigned int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        unint64_t v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          *(unsigned char *)(a1 + 40) |= 1u;
          uint64_t v26 = *v4;
          unint64_t v27 = *(void *)&v3[v26];
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)&v3[*v5])
          {
            uint64_t v28 = *(void *)(*(void *)&v3[*v7] + v27);
            *(void *)&v3[v26] = v27 + 8;
          }
          else
          {
            v3[*v6] = 1;
            uint64_t v28 = 0;
          }
          *(void *)(a1 + 16) = v28;
        }
        else if (v18 == 2)
        {
          uint64_t v29 = PBReaderReadString();
          unint64_t v30 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v29;
        }
        else if (v18 == 1)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (1)
          {
            uint64_t v22 = *v4;
            uint64_t v23 = *(void *)&v3[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&v3[*v5]) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
            *(void *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0) {
              goto LABEL_38;
            }
            v19 += 7;
            BOOL v15 = v20++ >= 9;
            if (v15)
            {
              uint64_t v21 = 0;
              goto LABEL_40;
            }
          }
          v3[*v6] = 1;
LABEL_38:
          if (v3[*v6]) {
            uint64_t v21 = 0;
          }
LABEL_40:
          *(void *)(a1 + 24) = v21;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v31 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            id v32 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v31;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_45;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_45:
    BOOL v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189E5C554(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavChargingStationInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOSharedNavChargingStationInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E5C5B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavChargingStationInfoIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  char v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      unint64_t v18 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v16 != 1) {
          goto LABEL_43;
        }
        uint64_t v25 = *v2;
        unint64_t v26 = *(void *)&a1[v25];
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v27 = v26 + 8, v27 <= *(void *)&a1[*v3])) {
          *(void *)&a1[v25] = v27;
        }
        else {
          a1[v14] = 1;
        }
      }
      else if (v18 == 2)
      {
        if (v16 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_43:
          BOOL v28 = 0;
          goto LABEL_42;
        }
      }
      else if (v18 == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_43;
        }
        unsigned int v19 = 0;
        while (1)
        {
          uint64_t v20 = *v2;
          uint64_t v21 = *(void *)&a1[v20];
          unint64_t v22 = v21 + 1;
          if (v21 == -1 || v22 > *(void *)&a1[*v3]) {
            break;
          }
          int v23 = *(char *)(*(void *)&a1[*v5] + v21);
          *(void *)&a1[v20] = v22;
          if (v23 < 0 && v19++ <= 8) {
            continue;
          }
          goto LABEL_40;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_43;
      }
LABEL_40:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v28 = a1[*v4] == 0;
LABEL_42:
  PBReaderRecallMark();
  return v28;
}

BOOL GEOSharedNavETAInfoReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            *(unsigned char *)(a1 + 60) |= 8u;
            uint64_t v18 = *v4;
            unint64_t v19 = *(void *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v19);
              *(void *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v38 = 40;
            goto LABEL_60;
          case 2u:
            *(unsigned char *)(a1 + 60) |= 0x10u;
            uint64_t v23 = *v4;
            unint64_t v24 = *(void *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v24);
              *(void *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v38 = 48;
            goto LABEL_60;
          case 3u:
            *(unsigned char *)(a1 + 60) |= 2u;
            uint64_t v25 = *v4;
            unint64_t v26 = *(void *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v26);
              *(void *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v38 = 24;
            goto LABEL_60;
          case 4u:
            *(unsigned char *)(a1 + 60) |= 4u;
            uint64_t v27 = *v4;
            unint64_t v28 = *(void *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v28);
              *(void *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v38 = 32;
            goto LABEL_60;
          case 5u:
            *(unsigned char *)(a1 + 60) |= 1u;
            uint64_t v29 = *v4;
            unint64_t v30 = *(void *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)&v3[*v5])
            {
              uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v30);
              *(void *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              uint64_t v20 = 0;
            }
            uint64_t v38 = 16;
LABEL_60:
            *(void *)(a1 + v38) = v20;
            continue;
          case 6u:
            char v31 = 0;
            unsigned int v32 = 0;
            uint64_t v33 = 0;
            *(unsigned char *)(a1 + 60) |= 0x20u;
            break;
          default:
            if (!*(void *)(a1 + 8))
            {
              id v21 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              unint64_t v22 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v21;
            }
            if (!PBUnknownFieldAdd()) {
              goto LABEL_63;
            }
            continue;
        }
        while (1)
        {
          uint64_t v34 = *v4;
          uint64_t v35 = *(void *)&v3[v34];
          unint64_t v36 = v35 + 1;
          if (v35 == -1 || v36 > *(void *)&v3[*v5]) {
            break;
          }
          char v37 = *(unsigned char *)(*(void *)&v3[*v7] + v35);
          *(void *)&v3[v34] = v36;
          v33 |= (unint64_t)(v37 & 0x7F) << v31;
          if ((v37 & 0x80) == 0) {
            goto LABEL_47;
          }
          v31 += 7;
          BOOL v15 = v32++ >= 9;
          if (v15)
          {
            LODWORD(v33) = 0;
            goto LABEL_49;
          }
        }
        v3[*v6] = 1;
LABEL_47:
        if (v3[*v6]) {
          LODWORD(v33) = 0;
        }
LABEL_49:
        *(_DWORD *)(a1 + 56) = v33;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v39 = v3[*v6] == 0;
  }
  else
  {
LABEL_63:
    BOOL v39 = 0;
  }
  objc_sync_exit(v3);

  return v39;
}

void sub_189E5DC40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavETAInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOSharedNavETAInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E5DCBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavETAInfoIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  char v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
          if (v16 != 1) {
            goto LABEL_38;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_34;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_34;
          }
          *(void *)&a1[v18] = v20;
          continue;
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_38;
          }
          unsigned int v21 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_38:
          BOOL v27 = 0;
          goto LABEL_37;
      }
      while (1)
      {
        uint64_t v22 = *v2;
        uint64_t v23 = *(void *)&a1[v22];
        unint64_t v24 = v23 + 1;
        if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
          break;
        }
        int v25 = *(char *)(*(void *)&a1[*v5] + v23);
        *(void *)&a1[v22] = v24;
        if (v25 < 0 && v21++ <= 8) {
          continue;
        }
        goto LABEL_35;
      }
      uint64_t v14 = *v4;
LABEL_34:
      a1[v14] = 1;
LABEL_35:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v27 = a1[*v4] == 0;
LABEL_37:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOSharedNavLocationInfoReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        unint64_t v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          *(unsigned char *)(a1 + 32) |= 2u;
          uint64_t v21 = *v4;
          unint64_t v22 = *(void *)&v3[v21];
          if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(void *)&v3[*v5])
          {
            int v23 = *(_DWORD *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v22 + 4;
          }
          else
          {
            v3[*v6] = 1;
            int v23 = 0;
          }
          *(_DWORD *)(a1 + 28) = v23;
        }
        else if (v18 == 2)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v27 = *v4;
            uint64_t v28 = *(void *)&v3[v27];
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)&v3[*v5]) {
              break;
            }
            char v30 = *(unsigned char *)(*(void *)&v3[*v7] + v28);
            *(void *)&v3[v27] = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if ((v30 & 0x80) == 0) {
              goto LABEL_40;
            }
            v24 += 7;
            BOOL v15 = v25++ >= 9;
            if (v15)
            {
              LODWORD(v26) = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6]) {
            LODWORD(v26) = 0;
          }
LABEL_42:
          *(_DWORD *)(a1 + 24) = v26;
        }
        else if (v18 == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_48;
          }
          unint64_t v19 = objc_alloc_init(GEOLatLng);
          if (!GEOLatLngReadAllFrom((uint64_t)v19, v3))
          {

            goto LABEL_48;
          }
          PBReaderRecallMark();
          unint64_t v20 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v19;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v31 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v32 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v31;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_48;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    BOOL v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189E5F2C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavLocationInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOSharedNavLocationInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E5F324(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavLocationInfoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  char v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      unint64_t v18 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v16 != 5) {
          goto LABEL_44;
        }
        uint64_t v19 = *v2;
        unint64_t v20 = *(void *)&a1[v19];
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && (unint64_t v21 = v20 + 4, v21 <= *(void *)&a1[*v3])) {
          *(void *)&a1[v19] = v21;
        }
        else {
          a1[v14] = 1;
        }
      }
      else if (v18 == 2)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_44;
        }
        unsigned int v22 = 0;
        while (1)
        {
          uint64_t v23 = *v2;
          uint64_t v24 = *(void *)&a1[v23];
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)&a1[*v3]) {
            break;
          }
          int v26 = *(char *)(*(void *)&a1[*v5] + v24);
          *(void *)&a1[v23] = v25;
          if (v26 < 0 && v22++ <= 8) {
            continue;
          }
          goto LABEL_41;
        }
        a1[*v4] = 1;
      }
      else if (v18 == 1)
      {
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
        {
LABEL_44:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_44;
      }
LABEL_41:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

void sub_189E5FD9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavRouteInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 116);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 112)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 124)), (uint16x4_t)0xFFFCFFFEFFFFFFFDLL) & 0xFF01FF01FF01FF01))+ (*(unsigned char *)(a1 + 124) & 1)+ ((*(unsigned char *)(a1 + 124) & 0x20) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 3;
        int v15 = v14 & ~v10 | v9;
        int v16 = v14 | v10;
        BOOL v17 = (int *)MEMORY[0x1E4F940E8];
        if (((v14 | v10) | v8)) {
          unint64_t v18 = 0;
        }
        else {
          unint64_t v18 = a3;
        }
        int v82 = 1;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_123;
        }
        char v81 = v15;
        int v83 = (v7 != 0) | v16 | v15;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v9;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(unsigned char *)(v3 + *v19)) {
      goto LABEL_121;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v17;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        uint64_t v29 = *v19;
        int v30 = *(unsigned __int8 *)(v3 + v29);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    uint64_t v29 = *v19;
    int v30 = *(unsigned __int8 *)(v3 + v29);
    if (*(unsigned char *)(v3 + v29)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    int v31 = v23 & 7;
    if (v30 || v31 == 4)
    {
LABEL_121:
      int v82 = 1;
      goto LABEL_122;
    }
    unint64_t v33 = v23 >> 3;
    BOOL v34 = v16;
    if (!((v18 == 0) | v16 & 1))
    {
      uint64_t v35 = v18;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34 || (*(unsigned char *)(a1 + 124) & 2) != 0) {
          goto LABEL_95;
        }
        if (v31 != 2)
        {
          uint64_t v61 = *v17;
          unint64_t v62 = *(void *)(v3 + v61);
          if (v62 <= 0xFFFFFFFFFFFFFFF7 && v62 + 8 <= *(void *)(v3 + *v6)) {
            *(void *)(v3 + v61) = v62 + 8;
          }
          else {
            *(unsigned char *)(v3 + v29) = 1;
          }
          PBRepeatedDoubleAdd();
          goto LABEL_119;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_141;
        }
        while (1)
        {
          BOOL v39 = (unint64_t *)(v3 + *v17);
          unint64_t v40 = *v39;
          unint64_t v41 = *(void *)(v3 + *v6);
          if (*v39 >= v41) {
            break;
          }
          uint64_t v42 = *v19;
          if (*(unsigned char *)(v3 + v42)) {
            break;
          }
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > v41) {
            *(unsigned char *)(v3 + v42) = 1;
          }
          else {
            *BOOL v39 = v40 + 8;
          }
          PBRepeatedDoubleAdd();
        }
        goto LABEL_97;
      case 2:
        if (!v34 || (*(unsigned char *)(a1 + 124) & 8) != 0) {
          goto LABEL_95;
        }
        if (v31 != 2)
        {
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v65 = 0;
          while (1)
          {
            uint64_t v66 = *v17;
            uint64_t v67 = *(void *)(v3 + v66);
            unint64_t v68 = v67 + 1;
            if (v67 == -1 || v68 > *(void *)(v3 + *v6)) {
              goto LABEL_115;
            }
            char v69 = *(unsigned char *)(*(void *)(v3 + *v20) + v67);
            *(void *)(v3 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              BOOL v28 = v64++ >= 9;
              if (!v28) {
                continue;
              }
            }
            goto LABEL_116;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_141;
        }
        while (*(void *)(v3 + *v17) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v19))
        {
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v47 = 0;
          while (1)
          {
            uint64_t v48 = *v17;
            uint64_t v49 = *(void *)(v3 + v48);
            unint64_t v50 = v49 + 1;
            if (v49 == -1 || v50 > *(void *)(v3 + *v6)) {
              break;
            }
            char v51 = *(unsigned char *)(*(void *)(v3 + *v20) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v28 = v46++ >= 9;
              if (!v28) {
                continue;
              }
            }
            goto LABEL_69;
          }
          *(unsigned char *)(v3 + *v19) = 1;
LABEL_69:
          PBRepeatedUInt32Add();
        }
        goto LABEL_97;
      case 3:
        if (!v34 || (*(unsigned char *)(a1 + 124) & 4) != 0) {
          goto LABEL_95;
        }
        if (v31 == 2)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_141;
          }
          while (*(void *)(v3 + *v17) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v19))
          {
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v54 = 0;
            while (1)
            {
              uint64_t v55 = *v17;
              uint64_t v56 = *(void *)(v3 + v55);
              unint64_t v57 = v56 + 1;
              if (v56 == -1 || v57 > *(void *)(v3 + *v6)) {
                break;
              }
              char v58 = *(unsigned char *)(*(void *)(v3 + *v20) + v56);
              *(void *)(v3 + v55) = v57;
              v54 |= (unint64_t)(v58 & 0x7F) << v52;
              if (v58 < 0)
              {
                v52 += 7;
                BOOL v28 = v53++ >= 9;
                if (!v28) {
                  continue;
                }
              }
              goto LABEL_84;
            }
            *(unsigned char *)(v3 + *v19) = 1;
LABEL_84:
            PBRepeatedUInt32Add();
          }
LABEL_97:
          PBReaderRecallMark();
        }
        else
        {
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v72 = 0;
          while (1)
          {
            uint64_t v73 = *v17;
            uint64_t v74 = *(void *)(v3 + v73);
            unint64_t v75 = v74 + 1;
            if (v74 == -1 || v75 > *(void *)(v3 + *v6)) {
              break;
            }
            char v76 = *(unsigned char *)(*(void *)(v3 + *v20) + v74);
            *(void *)(v3 + v73) = v75;
            v72 |= (unint64_t)(v76 & 0x7F) << v70;
            if (v76 < 0)
            {
              v70 += 7;
              BOOL v28 = v71++ >= 9;
              if (!v28) {
                continue;
              }
            }
            goto LABEL_116;
          }
LABEL_115:
          *(unsigned char *)(v3 + *v19) = 1;
LABEL_116:
          PBRepeatedUInt32Add();
        }
        goto LABEL_119;
      case 4:
        if (!v34 || (*(unsigned char *)(a1 + 124) & 0x10) != 0) {
          goto LABEL_95;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_141;
        }
        char v59 = objc_alloc_init(GEOSharedNavChargingStationInfo);
        if (GEOSharedNavChargingStationInfoReadAllFrom((uint64_t)v59, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOSharedNavRouteInfo _addNoFlagsChargingStations:](a1, v59);
LABEL_94:

LABEL_119:
          if ((v83 & 1) == 0) {
            goto LABEL_121;
          }
LABEL_120:
          if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6)) {
            goto LABEL_121;
          }
          continue;
        }

LABEL_141:
        int v82 = 0;
LABEL_122:
        LOBYTE(v15) = v81;
LABEL_123:
        if (v15) {
LABEL_124:
        }
          *(unsigned char *)(a1 + 124) |= 1u;
        if (v16 & 1 | ((v82 & 1) == 0))
        {
          *(unsigned char *)(a1 + 124) |= 2u;
          *(unsigned char *)(a1 + 124) |= 8u;
          *(unsigned char *)(a1 + 124) |= 4u;
          *(unsigned char *)(a1 + 124) |= 0x10u;
          *(unsigned char *)(a1 + 124) |= 0x20u;
        }
        else if (v18)
        {
          while (1)
          {
            int v77 = *v18++;
            char v78 = 2;
            switch(v77)
            {
              case 0:
                goto LABEL_134;
              case 1:
                goto LABEL_133;
              case 2:
                char v78 = 8;
                goto LABEL_133;
              case 3:
                char v78 = 4;
                goto LABEL_133;
              case 4:
                char v78 = 16;
                goto LABEL_133;
              case 5:
                char v78 = 32;
LABEL_133:
                *(unsigned char *)(a1 + 124) |= v78;
                break;
              default:
                continue;
            }
          }
        }
LABEL_134:
        if (v82)
        {
          unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
          if ((v16 & 1) == 0) {
            return v3;
          }
LABEL_138:
          uint64_t v79 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v16) {
            goto LABEL_138;
          }
        }
        return v3;
      case 5:
        if (!v34 || (*(unsigned char *)(a1 + 124) & 0x20) != 0) {
          goto LABEL_95;
        }
        PBReaderReadData();
        char v59 = (GEOSharedNavChargingStationInfo *)objc_claimAutoreleasedReturnValue();
        if (v59) {
          -[GEOSharedNavRouteInfo _addNoFlagsRoutingPathLeg:](a1, v59);
        }
        goto LABEL_94;
      default:
        if (v81 & 1) == 0 || (*(unsigned char *)(a1 + 124))
        {
LABEL_95:
          int v60 = PBReaderSkipValueWithTag();
          if ((v60 & v83 & 1) == 0)
          {
            int v82 = v60;
            goto LABEL_122;
          }
          goto LABEL_120;
        }
        if (!*(void *)(a1 + 16))
        {
          id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          int v44 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v43;
        }
        if (!PBUnknownFieldAdd())
        {
          int v82 = 0;
          goto LABEL_124;
        }
        goto LABEL_119;
    }
  }
}

void sub_189E60AE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E60E70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E611FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E615C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E62550(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOSharedNavRouteInfoCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 96);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5++), "readAll:", 1, (void)v6);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEOSharedNavRouteInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 116))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSharedNavRouteInfoReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = [v8 position];
  *(_DWORD *)(a1 + 116) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOSharedNavRouteInfoReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOSharedNavRouteInfoReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOSharedNavRouteInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOSharedNavRouteInfoCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_189E627E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavRouteInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOSharedNavRouteInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E62848(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavRouteInfoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 1)
          {
            uint64_t v33 = *v2;
            unint64_t v34 = *(void *)&a1[v33];
            if (v34 <= 0xFFFFFFFFFFFFFFF7)
            {
              unint64_t v35 = v34 + 8;
              if (v35 <= *(void *)&a1[*v3])
              {
                *(void *)&a1[v33] = v35;
                goto LABEL_53;
              }
            }
            goto LABEL_52;
          }
          if (v16 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_78;
          }
          while (1)
          {
            unint64_t v18 = (unint64_t *)&a1[*v2];
            unint64_t v19 = *v18;
            unint64_t v20 = *(void *)&a1[*v3];
            if (*v18 >= v20) {
              break;
            }
            uint64_t v21 = *v4;
            if (a1[v21]) {
              break;
            }
            if (v19 > 0xFFFFFFFFFFFFFFF7 || (unint64_t v22 = v19 + 8, v22 > v20)) {
              a1[v21] = 1;
            }
            else {
              *unint64_t v18 = v22;
            }
          }
          goto LABEL_45;
        case 2u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_78;
            }
            while (1)
            {
              uint64_t v23 = *v2;
              uint64_t v24 = *(void *)&a1[v23];
              unint64_t v25 = v24 + 1;
              if (v24 == -1 || v25 > *(void *)&a1[*v3]) {
                goto LABEL_49;
              }
              int v26 = *(char *)(*(void *)&a1[*v5] + v24);
              *(void *)&a1[v23] = v25;
              if (v26 < 0)
              {
                unsigned int v27 = v16++;
                if (v27 <= 8) {
                  continue;
                }
              }
              goto LABEL_53;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_78;
          }
LABEL_56:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v36 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v37 = *v2;
              uint64_t v38 = *(void *)&a1[v37];
              unint64_t v39 = v38 + 1;
              if (v38 == -1 || v39 > *(void *)&a1[*v3]) {
                break;
              }
              int v40 = *(char *)(*(void *)&a1[*v5] + v38);
              *(void *)&a1[v37] = v39;
              if (v40 < 0)
              {
                BOOL v13 = v36++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_56;
            }
            a1[*v4] = 1;
          }
          goto LABEL_45;
        case 3u:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_78:
              PBReaderRecallMark();
              return 0;
            }
LABEL_66:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v41 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v42 = *v2;
                uint64_t v43 = *(void *)&a1[v42];
                unint64_t v44 = v43 + 1;
                if (v43 == -1 || v44 > *(void *)&a1[*v3]) {
                  break;
                }
                int v45 = *(char *)(*(void *)&a1[*v5] + v43);
                *(void *)&a1[v42] = v44;
                if (v45 < 0)
                {
                  BOOL v13 = v41++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_66;
              }
              a1[*v4] = 1;
            }
LABEL_45:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0) {
              goto LABEL_78;
            }
            while (1)
            {
              uint64_t v28 = *v2;
              uint64_t v29 = *(void *)&a1[v28];
              unint64_t v30 = v29 + 1;
              if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
                break;
              }
              int v31 = *(char *)(*(void *)&a1[*v5] + v29);
              *(void *)&a1[v28] = v30;
              if (v31 < 0)
              {
                unsigned int v32 = v16++;
                if (v32 <= 8) {
                  continue;
                }
              }
              goto LABEL_53;
            }
LABEL_49:
            uint64_t v14 = *v4;
LABEL_52:
            a1[v14] = 1;
          }
LABEL_53:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_76;
          }
          break;
        case 4u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOSharedNavChargingStationInfoIsValid(a1)) {
            goto LABEL_45;
          }
          goto LABEL_78;
        case 5u:
          if (v16 == 2) {
            goto LABEL_47;
          }
          goto LABEL_78;
        default:
LABEL_47:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_78;
          }
          goto LABEL_53;
      }
    }
  }
LABEL_76:
  BOOL v46 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v46;
}

void sub_189E63070(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavRouteInfoIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  BOOL v2 = (*(unsigned char *)(a1 + 124) & 0x7E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return v2;
}

void sub_189E63630(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E63AD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E63E2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavSenderInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 68)), (uint16x4_t)0xFFFFFFFEFFFCFFFDLL) & 0xFF01FF01FF01FF01))+ (*(unsigned char *)(a1 + 68) & 1));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 2;
        char v15 = v14 & ~(_BYTE)v10 | v7;
        unsigned __int8 v16 = v14 | v10;
        char v50 = v15;
        char v51 = v16 | v15;
        if ((v16 | v8)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = a3;
        }
        char v52 = (v17 == 0) | v16;
        BOOL v53 = v16;
        unint64_t v18 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_69;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_69:
      int v49 = 1;
      goto LABEL_70;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v53;
    if ((v52 & 1) == 0)
    {
      uint64_t v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 2:
        if (!v32) {
          goto LABEL_57;
        }
        if ((*(unsigned char *)(a1 + 68) & 0x10) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 48;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_87;
        }
        char v44 = 8 * *(unsigned char *)(a1 + 68);
        goto LABEL_67;
      case 3:
        if (!v32) {
          goto LABEL_57;
        }
        if ((*(unsigned char *)(a1 + 68) & 8) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 40;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_87;
        }
        char v44 = 16 * *(unsigned char *)(a1 + 68);
        goto LABEL_67;
      case 4:
        if (!v32) {
          goto LABEL_57;
        }
        if ((*(unsigned char *)(a1 + 68) & 4) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 32;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_87;
        }
        char v44 = 32 * *(unsigned char *)(a1 + 68);
        goto LABEL_67;
      case 5:
        if (!v32) {
          goto LABEL_57;
        }
        if ((*(unsigned char *)(a1 + 68) & 2) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 24;
LABEL_56:
          uint64_t v42 = *(void **)(a1 + v38);
          *(void *)(a1 + v38) = v37;

          unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          --v9;
LABEL_68:
          if (!(v51 & 1 | (v9 != 0))) {
            goto LABEL_69;
          }
          continue;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v44 = *(unsigned char *)(a1 + 68) << 6;
LABEL_67:
          v9 += v44 >> 7;
          unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_68;
        }
LABEL_87:
        int v49 = 0;
        unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_70:
        if (v50) {
LABEL_71:
        }
          *(unsigned char *)(a1 + 68) |= 1u;
        if (v53 || (v49 & 1) == 0)
        {
          *(unsigned char *)(a1 + 68) |= 0x10u;
          *(unsigned char *)(a1 + 68) |= 8u;
          *(unsigned char *)(a1 + 68) |= 4u;
          *(unsigned char *)(a1 + 68) |= 2u;
        }
        else if (v17)
        {
          while (1)
          {
            int v46 = *v17++;
            char v45 = 16;
            switch(v46)
            {
              case 0:
                goto LABEL_81;
              case 2:
                goto LABEL_79;
              case 3:
                char v45 = 8;
                goto LABEL_79;
              case 4:
                char v45 = 4;
                goto LABEL_79;
              case 5:
                char v45 = 2;
LABEL_79:
                *(unsigned char *)(a1 + 68) |= v45;
                break;
              default:
                continue;
            }
          }
        }
LABEL_81:
        if (v49) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v53)
        {
          uint64_t v47 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v50 & 1) == 0 || (*(unsigned char *)(a1 + 68))
        {
LABEL_57:
          char v43 = PBReaderSkipValueWithTag();
          unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v43 & 1) == 0)
          {
            int v49 = 0;
            goto LABEL_70;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v40 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v39;
          }
          int v41 = PBUnknownFieldAdd();
          unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v41)
          {
            int v49 = 0;
            goto LABEL_71;
          }
        }
        goto LABEL_68;
    }
  }
}

void sub_189E645B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E64728(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E64898(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E64FAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavSenderInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSharedNavSenderInfoReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOSharedNavSenderInfoReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOSharedNavSenderInfoReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOSharedNavSenderInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189E6513C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavSenderInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOSharedNavSenderInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E651A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavSenderInfoIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 2u:
          if (v15 != 2) {
            goto LABEL_32;
          }
          goto LABEL_28;
        case 3u:
          if (v15 == 2) {
            goto LABEL_28;
          }
          goto LABEL_32;
        case 4u:
          if (v15 == 2) {
            goto LABEL_28;
          }
          goto LABEL_32;
        case 5u:
          if (v15 != 2) {
            goto LABEL_32;
          }
LABEL_28:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_32:
            BOOL v17 = 0;
            goto LABEL_31;
          }
LABEL_29:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_30;
          }
          break;
        default:
          if (!PBReaderSkipValueWithTag()) {
            goto LABEL_32;
          }
          goto LABEL_29;
      }
    }
  }
LABEL_30:
  BOOL v17 = a1[*v4] == 0;
LABEL_31:
  PBReaderRecallMark();
  return v17;
}

void sub_189E65598(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavSenderInfoIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  BOOL v2 = (*(unsigned char *)(a1 + 68) & 0x3E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189E658BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E65BAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E65E70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavStateReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 116);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 112)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v12 = (const float *)(a1 + 148);
  uint32x4_t v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  unsigned int v15 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A63D3E0), v14), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A63D3F0), v14)));
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v17 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v19 = v15 > 4;
        char v20 = v19 | v11;
        char v128 = v19 & ~(_BYTE)v11 | v9;
        char v130 = v19 | v11 | v128;
        if (((v19 | v11) | v8)) {
          char v21 = 0;
        }
        else {
          char v21 = a3;
        }
        char v131 = (v21 == 0) | v20;
        unsigned int v22 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
        uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        char v129 = v19 | v11;
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
        uint64_t v18 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v22) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v23)) {
      goto LABEL_232;
    }
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v22;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v23) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v23);
    if (*(unsigned char *)(v3 + *v23)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4)
    {
LABEL_232:
      int v127 = 1;
      goto LABEL_233;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v20;
    if ((v131 & 1) == 0)
    {
      uint64_t v38 = v21;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37) {
          goto LABEL_170;
        }
        if ((*(unsigned char *)(a1 + v24[230] + 1) & 0x40) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_253;
          }
          uint64_t v42 = objc_alloc_init(GEOMapItemStorage);
          if (GEOMapItemStorageReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            uint64_t v43 = 40;
            goto LABEL_143;
          }
          goto LABEL_252;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_253;
        }
        uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
        int v121 = (int)(*(_DWORD *)(a1 + 148) << 17) >> 31;
        goto LABEL_220;
      case 2:
        if (!v37 || (*(unsigned char *)(a1 + v24[230] + 1) & 0x80) != 0) {
          goto LABEL_170;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_253;
        }
        uint64_t v42 = objc_alloc_init(GEOSharedNavETAInfo);
        if (!GEOSharedNavETAInfoReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_252;
        }
        PBReaderRecallMark();
        -[GEOSharedNavState _addNoFlagsEtaInfo:](a1, v42);
        goto LABEL_129;
      case 3:
        if (!v37) {
          goto LABEL_170;
        }
        if ((*(unsigned char *)(a1 + v24[230] + 2) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_253;
          }
          uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
          int v121 = (int)(*(_DWORD *)(a1 + 148) << 13) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_253;
        }
        uint64_t v42 = objc_alloc_init(GEOSharedNavRouteInfo);
        if (!GEOSharedNavRouteInfoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_252;
        }
        PBReaderRecallMark();
        uint64_t v43 = 80;
        goto LABEL_143;
      case 4:
        if (!v37) {
          goto LABEL_170;
        }
        if ((*(unsigned char *)(a1 + v24[230] + 2) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_253;
          }
          uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
          int v121 = (int)(*(_DWORD *)(a1 + 148) << 12) >> 31;
          goto LABEL_220;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_253;
        }
        uint64_t v42 = objc_alloc_init(GEOSharedNavSenderInfo);
        if (!GEOSharedNavSenderInfoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_252;
        }
        PBReaderRecallMark();
        uint64_t v43 = 88;
        goto LABEL_143;
      case 5:
        if (!v37) {
          goto LABEL_170;
        }
        if ((*(unsigned char *)(a1 + v24[230] + 2) & 1) == 0)
        {
          uint64_t v47 = PBReaderReadString();
          uint64_t v48 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v47;
          goto LABEL_144;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_253;
        }
        uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
        int v121 = (int)(*(_DWORD *)(a1 + 148) << 15) >> 31;
        goto LABEL_220;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(_DWORD *)(a1 + v24[230]) |= 0x200u;
        while (2)
        {
          uint64_t v52 = *v22;
          uint64_t v53 = *(void *)(v3 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v25) + v53);
            *(void *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v33 = v50++ >= 9;
              if (v33)
              {
                uint64_t v51 = 0;
                goto LABEL_175;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          uint64_t v51 = 0;
        }
LABEL_175:
        BOOL v118 = v51 != 0;
        uint64_t v119 = 144;
        goto LABEL_204;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v58 = 0;
        *(_DWORD *)(a1 + v24[230]) |= 0x400u;
        while (2)
        {
          uint64_t v59 = *v22;
          uint64_t v60 = *(void *)(v3 + v59);
          unint64_t v61 = v60 + 1;
          if (v60 == -1 || v61 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(v3 + *v25) + v60);
            *(void *)(v3 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              BOOL v33 = v57++ >= 9;
              if (v33)
              {
                uint64_t v58 = 0;
                goto LABEL_179;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          uint64_t v58 = 0;
        }
LABEL_179:
        BOOL v118 = v58 != 0;
        uint64_t v119 = 145;
        goto LABEL_204;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        char v63 = 0;
        unsigned int v64 = 0;
        uint64_t v65 = 0;
        *(_DWORD *)(a1 + v24[230]) |= 0x80u;
        while (2)
        {
          uint64_t v66 = *v22;
          uint64_t v67 = *(void *)(v3 + v66);
          unint64_t v68 = v67 + 1;
          if (v67 == -1 || v68 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v69 = *(unsigned char *)(*(void *)(v3 + *v25) + v67);
            *(void *)(v3 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              BOOL v33 = v64++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_183;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v65) = 0;
        }
LABEL_183:
        uint64_t v120 = 136;
        goto LABEL_209;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        char v70 = 0;
        unsigned int v71 = 0;
        uint64_t v72 = 0;
        *(_DWORD *)(a1 + v24[230]) |= 0x800u;
        while (2)
        {
          uint64_t v73 = *v22;
          uint64_t v74 = *(void *)(v3 + v73);
          unint64_t v75 = v74 + 1;
          if (v74 == -1 || v75 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v76 = *(unsigned char *)(*(void *)(v3 + *v25) + v74);
            *(void *)(v3 + v73) = v75;
            v72 |= (unint64_t)(v76 & 0x7F) << v70;
            if (v76 < 0)
            {
              v70 += 7;
              BOOL v33 = v71++ >= 9;
              if (v33)
              {
                uint64_t v72 = 0;
                goto LABEL_187;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          uint64_t v72 = 0;
        }
LABEL_187:
        BOOL v118 = v72 != 0;
        uint64_t v119 = 146;
        goto LABEL_204;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        *(_DWORD *)(a1 + v24[230]) |= 8u;
        uint64_t v77 = *v22;
        unint64_t v78 = *(void *)(v3 + v77);
        if (v78 <= 0xFFFFFFFFFFFFFFF7 && v78 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v79 = *(void *)(*(void *)(v3 + *v25) + v78);
          *(void *)(v3 + v77) = v78 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v23) = 1;
          uint64_t v79 = 0;
        }
        uint64_t v122 = 96;
        goto LABEL_230;
      case 11:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        char v80 = 0;
        unsigned int v81 = 0;
        uint64_t v65 = 0;
        *(_DWORD *)(a1 + v24[230]) |= 0x100u;
        while (2)
        {
          uint64_t v82 = *v22;
          uint64_t v83 = *(void *)(v3 + v82);
          unint64_t v84 = v83 + 1;
          if (v83 == -1 || v84 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v85 = *(unsigned char *)(*(void *)(v3 + *v25) + v83);
            *(void *)(v3 + v82) = v84;
            v65 |= (unint64_t)(v85 & 0x7F) << v80;
            if (v85 < 0)
            {
              v80 += 7;
              BOOL v33 = v81++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_191;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v65) = 0;
        }
LABEL_191:
        uint64_t v120 = 140;
        goto LABEL_209;
      case 12:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        char v86 = 0;
        unsigned int v87 = 0;
        uint64_t v65 = 0;
        *(_DWORD *)(a1 + v24[230]) |= 0x40u;
        while (2)
        {
          uint64_t v88 = *v22;
          uint64_t v89 = *(void *)(v3 + v88);
          unint64_t v90 = v89 + 1;
          if (v89 == -1 || v90 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v91 = *(unsigned char *)(*(void *)(v3 + *v25) + v89);
            *(void *)(v3 + v88) = v90;
            v65 |= (unint64_t)(v91 & 0x7F) << v86;
            if (v91 < 0)
            {
              v86 += 7;
              BOOL v33 = v87++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_195;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v65) = 0;
        }
LABEL_195:
        uint64_t v120 = 132;
        goto LABEL_209;
      case 13:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        *(_DWORD *)(a1 + v24[230]) |= 4u;
        uint64_t v92 = *v22;
        unint64_t v93 = *(void *)(v3 + v92);
        if (v93 <= 0xFFFFFFFFFFFFFFF7 && v93 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v79 = *(void *)(*(void *)(v3 + *v25) + v93);
          *(void *)(v3 + v92) = v93 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v23) = 1;
          uint64_t v79 = 0;
        }
        uint64_t v122 = 72;
        goto LABEL_230;
      case 14:
        if (!v37 || (*(unsigned char *)(a1 + v24[230] + 2) & 0x10) != 0) {
          goto LABEL_170;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_253;
        }
        uint64_t v42 = objc_alloc_init(GEOSharedNavWaypointInfo);
        if (!GEOSharedNavWaypointInfoReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1)) {
          goto LABEL_252;
        }
        PBReaderRecallMark();
        -[GEOSharedNavState _addNoFlagsWaypointInfo:](a1, v42);
LABEL_129:

        goto LABEL_145;
      case 15:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        char v94 = 0;
        unsigned int v95 = 0;
        uint64_t v65 = 0;
        *(_DWORD *)(a1 + v24[230]) |= 0x20u;
        while (2)
        {
          uint64_t v96 = *v22;
          uint64_t v97 = *(void *)(v3 + v96);
          unint64_t v98 = v97 + 1;
          if (v97 == -1 || v98 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v99 = *(unsigned char *)(*(void *)(v3 + *v25) + v97);
            *(void *)(v3 + v96) = v98;
            v65 |= (unint64_t)(v99 & 0x7F) << v94;
            if (v99 < 0)
            {
              v94 += 7;
              BOOL v33 = v95++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_199;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v65) = 0;
        }
LABEL_199:
        uint64_t v120 = 128;
        goto LABEL_209;
      case 16:
        if (!v37) {
          goto LABEL_170;
        }
        if ((*(unsigned char *)(a1 + v24[230] + 2) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_253;
          }
          uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
          int v121 = (int)(*(_DWORD *)(a1 + 148) << 14) >> 31;
LABEL_220:
          v7 += v121;
          char v20 = v129;
          unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
LABEL_221:
          uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
LABEL_231:
          if (!(v130 & 1 | (v7 != 0))) {
            goto LABEL_232;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_253;
        }
        uint64_t v42 = objc_alloc_init(GEOSharedNavLocationInfo);
        if (GEOSharedNavLocationInfoReadAllFrom((uint64_t)v42, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v43 = 64;
LABEL_143:
          uint64_t v48 = *(void **)(a1 + v43);
          *(void *)(a1 + v43) = v42;
LABEL_144:

          --v7;
LABEL_145:
          char v20 = v129;
          unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
          goto LABEL_221;
        }
LABEL_252:

LABEL_253:
        int v127 = 0;
        char v20 = v129;
        unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
LABEL_233:
        if (v128) {
LABEL_234:
        }
          *(_DWORD *)(a1 + v24[230]) |= 0x2000u;
        if (v20 & 1 | ((v127 & 1) == 0))
        {
          *(_DWORD *)(a1 + v24[230]) |= 0x4000u;
          *(_DWORD *)(a1 + v24[230]) |= 0x8000u;
          *(_DWORD *)(a1 + v24[230]) |= 0x40000u;
          *(_DWORD *)(a1 + v24[230]) |= 0x80000u;
          *(_DWORD *)(a1 + v24[230]) |= 0x10000u;
          *(_DWORD *)(a1 + v24[230]) |= 0x100000u;
          *(_DWORD *)(a1 + v24[230]) |= 0x20000u;
        }
        else if (v21)
        {
          while (1)
          {
            int v123 = *v21++;
            int v124 = 0x4000;
            switch(v123)
            {
              case 0:
                goto LABEL_246;
              case 1:
                goto LABEL_245;
              case 2:
                int v124 = 0x8000;
                goto LABEL_245;
              case 3:
                int v124 = 0x40000;
                goto LABEL_245;
              case 4:
                int v124 = 0x80000;
                goto LABEL_245;
              case 5:
                int v124 = 0x10000;
                goto LABEL_245;
              case 14:
                int v124 = 0x100000;
                goto LABEL_245;
              case 16:
                int v124 = 0x20000;
LABEL_245:
                *(_DWORD *)(a1 + v24[230]) |= v124;
                break;
              default:
                continue;
            }
          }
        }
LABEL_246:
        if (v127)
        {
          unint64_t v3 = *(unsigned char *)(v3 + *v23) == 0;
          if ((v20 & 1) == 0) {
            return v3;
          }
LABEL_250:
          int v125 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v20) {
            goto LABEL_250;
          }
        }
        return v3;
      case 17:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        char v100 = 0;
        unsigned int v101 = 0;
        uint64_t v102 = 0;
        *(_DWORD *)(a1 + v24[230]) |= 0x1000u;
        while (2)
        {
          uint64_t v103 = *v22;
          uint64_t v104 = *(void *)(v3 + v103);
          unint64_t v105 = v104 + 1;
          if (v104 == -1 || v105 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v106 = *(unsigned char *)(*(void *)(v3 + *v25) + v104);
            *(void *)(v3 + v103) = v105;
            v102 |= (unint64_t)(v106 & 0x7F) << v100;
            if (v106 < 0)
            {
              v100 += 7;
              BOOL v33 = v101++ >= 9;
              if (v33)
              {
                uint64_t v102 = 0;
                goto LABEL_203;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          uint64_t v102 = 0;
        }
LABEL_203:
        BOOL v118 = v102 != 0;
        uint64_t v119 = 147;
LABEL_204:
        *(unsigned char *)(a1 + v119) = v118;
        goto LABEL_231;
      case 18:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        char v107 = 0;
        unsigned int v108 = 0;
        uint64_t v65 = 0;
        *(_DWORD *)(a1 + v24[230]) |= 0x10u;
        while (2)
        {
          uint64_t v109 = *v22;
          uint64_t v110 = *(void *)(v3 + v109);
          unint64_t v111 = v110 + 1;
          if (v110 == -1 || v111 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v112 = *(unsigned char *)(*(void *)(v3 + *v25) + v110);
            *(void *)(v3 + v109) = v111;
            v65 |= (unint64_t)(v112 & 0x7F) << v107;
            if (v112 < 0)
            {
              v107 += 7;
              BOOL v33 = v108++ >= 9;
              if (v33)
              {
                LODWORD(v65) = 0;
                goto LABEL_208;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          LODWORD(v65) = 0;
        }
LABEL_208:
        uint64_t v120 = 124;
LABEL_209:
        *(_DWORD *)(a1 + v120) = v65;
        goto LABEL_231;
      case 19:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        *(_DWORD *)(a1 + v24[230]) |= 1u;
        uint64_t v113 = *v22;
        unint64_t v114 = *(void *)(v3 + v113);
        if (v114 <= 0xFFFFFFFFFFFFFFF7 && v114 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v79 = *(void *)(*(void *)(v3 + *v25) + v114);
          *(void *)(v3 + v113) = v114 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v23) = 1;
          uint64_t v79 = 0;
        }
        uint64_t v122 = 24;
        goto LABEL_230;
      case 20:
        if ((v8 & 1) == 0) {
          goto LABEL_170;
        }
        *(_DWORD *)(a1 + v24[230]) |= 2u;
        uint64_t v115 = *v22;
        unint64_t v116 = *(void *)(v3 + v115);
        if (v116 <= 0xFFFFFFFFFFFFFFF7 && v116 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v79 = *(void *)(*(void *)(v3 + *v25) + v116);
          *(void *)(v3 + v115) = v116 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v23) = 1;
          uint64_t v79 = 0;
        }
        uint64_t v122 = 32;
LABEL_230:
        *(void *)(a1 + v122) = v79;
        goto LABEL_231;
      default:
        if ((v128 & 1) == 0 || (*(unsigned char *)(a1 + v24[230] + 1) & 0x20) != 0)
        {
LABEL_170:
          char v117 = PBReaderSkipValueWithTag();
          uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
          unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
          char v20 = v129;
          if ((v117 & 1) == 0)
          {
            int v127 = 0;
            goto LABEL_233;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          char v20 = v129;
          unint64_t v23 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v24 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
          uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
          if (!v46)
          {
            int v127 = 0;
            goto LABEL_234;
          }
        }
        goto LABEL_231;
    }
  }
}

void sub_189E67190(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E67558(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E676CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E67840(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E67F04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E68340(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E69BA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOSharedNavStateCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  [a1[5] readAll:1];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = a1[6];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v17 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }
    while (v4);
  }

  [a1[10] readAll:1];
  [a1[11] readAll:1];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = a1[13];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v11++), "readAll:", 1, (void)v13);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }
    while (v9);
  }

  return [a1[8] readAll:1];
}

unint64_t GEOSharedNavStateReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 116))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSharedNavStateReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = [v8 position];
  *(_DWORD *)(a1 + 116) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOSharedNavStateReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOSharedNavStateReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOSharedNavStateReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOSharedNavStateCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_189E69F24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavStateReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOSharedNavStateReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E69F88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavStateIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOMapItemStorageIsValid(a1)) {
            goto LABEL_105;
          }
          goto LABEL_127;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavETAInfoIsValid(a1)) {
            goto LABEL_127;
          }
          goto LABEL_105;
        case 3u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavRouteInfoIsValid(a1)) {
            goto LABEL_127;
          }
          goto LABEL_105;
        case 4u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavSenderInfoIsValid(a1)) {
            goto LABEL_127;
          }
          goto LABEL_105;
        case 5u:
          if (v16 == 2) {
            goto LABEL_40;
          }
          goto LABEL_127;
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_127;
          }
          unsigned int v21 = 0;
          while (1)
          {
            uint64_t v22 = *v2;
            uint64_t v23 = *(void *)&a1[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
              goto LABEL_122;
            }
            int v25 = *(char *)(*(void *)&a1[*v5] + v23);
            *(void *)&a1[v22] = v24;
            if (v25 < 0)
            {
              BOOL v26 = v21++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_124;
          }
        case 7u:
          if ((v8 & 7) != 0) {
            goto LABEL_127;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              goto LABEL_122;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v26 = v27++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_124;
          }
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_127;
          }
          unsigned int v32 = 0;
          while (1)
          {
            uint64_t v33 = *v2;
            uint64_t v34 = *(void *)&a1[v33];
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
              goto LABEL_122;
            }
            int v36 = *(char *)(*(void *)&a1[*v5] + v34);
            *(void *)&a1[v33] = v35;
            if (v36 < 0)
            {
              BOOL v26 = v32++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_124;
          }
        case 9u:
          if ((v8 & 7) != 0) {
            goto LABEL_127;
          }
          unsigned int v37 = 0;
          while (1)
          {
            uint64_t v38 = *v2;
            uint64_t v39 = *(void *)&a1[v38];
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
              goto LABEL_122;
            }
            int v41 = *(char *)(*(void *)&a1[*v5] + v39);
            *(void *)&a1[v38] = v40;
            if (v41 < 0)
            {
              BOOL v26 = v37++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_124;
          }
        case 0xAu:
        case 0xDu:
        case 0x13u:
        case 0x14u:
          if (v16 != 1) {
            goto LABEL_127;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_123;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_123;
          }
          *(void *)&a1[v18] = v20;
          continue;
        case 0xBu:
          if ((v8 & 7) != 0) {
            goto LABEL_127;
          }
          unsigned int v42 = 0;
          while (1)
          {
            uint64_t v43 = *v2;
            uint64_t v44 = *(void *)&a1[v43];
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)&a1[*v3]) {
              goto LABEL_122;
            }
            int v46 = *(char *)(*(void *)&a1[*v5] + v44);
            *(void *)&a1[v43] = v45;
            if (v46 < 0)
            {
              BOOL v26 = v42++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_124;
          }
        case 0xCu:
          if ((v8 & 7) != 0) {
            goto LABEL_127;
          }
          unsigned int v47 = 0;
          while (1)
          {
            uint64_t v48 = *v2;
            uint64_t v49 = *(void *)&a1[v48];
            unint64_t v50 = v49 + 1;
            if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
              goto LABEL_122;
            }
            int v51 = *(char *)(*(void *)&a1[*v5] + v49);
            *(void *)&a1[v48] = v50;
            if (v51 < 0)
            {
              BOOL v26 = v47++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_124;
          }
        case 0xEu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavWaypointInfoIsValid(a1)) {
            goto LABEL_127;
          }
          goto LABEL_105;
        case 0xFu:
          if ((v8 & 7) != 0) {
            goto LABEL_127;
          }
          unsigned int v52 = 0;
          while (1)
          {
            uint64_t v53 = *v2;
            uint64_t v54 = *(void *)&a1[v53];
            unint64_t v55 = v54 + 1;
            if (v54 == -1 || v55 > *(void *)&a1[*v3]) {
              goto LABEL_122;
            }
            int v56 = *(char *)(*(void *)&a1[*v5] + v54);
            *(void *)&a1[v53] = v55;
            if (v56 < 0)
            {
              BOOL v26 = v52++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_124;
          }
        case 0x10u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavLocationInfoIsValid(a1)) {
            goto LABEL_127;
          }
LABEL_105:
          PBReaderRecallMark();
          continue;
        case 0x11u:
          if ((v8 & 7) != 0) {
            goto LABEL_127;
          }
          unsigned int v57 = 0;
          while (1)
          {
            uint64_t v58 = *v2;
            uint64_t v59 = *(void *)&a1[v58];
            unint64_t v60 = v59 + 1;
            if (v59 == -1 || v60 > *(void *)&a1[*v3]) {
              goto LABEL_122;
            }
            int v61 = *(char *)(*(void *)&a1[*v5] + v59);
            *(void *)&a1[v58] = v60;
            if (v61 < 0)
            {
              BOOL v26 = v57++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_124;
          }
        case 0x12u:
          if ((v8 & 7) != 0) {
            goto LABEL_127;
          }
          unsigned int v62 = 0;
          break;
        default:
LABEL_40:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_127:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v63 = *v2;
        uint64_t v64 = *(void *)&a1[v63];
        unint64_t v65 = v64 + 1;
        if (v64 == -1 || v65 > *(void *)&a1[*v3]) {
          break;
        }
        int v66 = *(char *)(*(void *)&a1[*v5] + v64);
        *(void *)&a1[v63] = v65;
        if (v66 < 0)
        {
          BOOL v26 = v62++ > 8;
          if (!v26) {
            continue;
          }
        }
        goto LABEL_124;
      }
LABEL_122:
      uint64_t v14 = *v4;
LABEL_123:
      a1[v14] = 1;
LABEL_124:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v67 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v67;
}

BOOL GEOSharedNavWaypointInfoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2) {
          goto LABEL_34;
        }
      }
      else
      {
        if (v17 == 2)
        {
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOSharedNavChargingStationInfoIsValid(a1))
          {
LABEL_34:
            PBReaderRecallMark();
            return 0;
          }
          goto LABEL_30;
        }
        if (v17 == 1)
        {
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemStorageIsValid(a1)) {
            goto LABEL_34;
          }
LABEL_30:
          PBReaderRecallMark();
          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_34;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_189E6ACC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOSharedNavStateIsDirty(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  int v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x200000) != 0) {
    return 1;
  }
  if ((v2 & 0x4000) != 0)
  {
    if (GEOMapItemStorageIsDirty(*(os_unfair_lock_s **)(a1 + 40))) {
      return 1;
    }
    int v2 = *(_DWORD *)(a1 + 148);
  }
  if ((v2 & 0x8000) != 0) {
    return 1;
  }
  if ((v2 & 0x40000) != 0)
  {
    if (GEOSharedNavRouteInfoIsDirty(*(void *)(a1 + 80))) {
      return 1;
    }
    int v2 = *(_DWORD *)(a1 + 148);
  }
  if ((v2 & 0x80000) == 0) {
    goto LABEL_12;
  }
  if (GEOSharedNavSenderInfoIsDirty(*(void *)(a1 + 88))) {
    return 1;
  }
  int v2 = *(_DWORD *)(a1 + 148);
LABEL_12:
  if ((v2 & 0x130000) != 0) {
    return 1;
  }
  if ((v2 & 0x100000) == 0) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v5 = *(id *)(a1 + 104);
  uint64_t v3 = [v5 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v5);
        }
        if (GEOSharedNavWaypointInfoIsDirty(*(os_unfair_lock_s **)(*((void *)&v8 + 1) + 8 * i)))
        {
          uint64_t v3 = 1;
          goto LABEL_27;
        }
      }
      uint64_t v3 = [v5 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_27:

  return v3;
}

os_unfair_lock_s *GEOSharedNavStateIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOSharedNavStateIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 30);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEOSharedNavStateClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  if (a3
    && [a1 hasDestinationInfo]
    && ([a1 destinationInfo],
        uint64_t v6 = objc_claimAutoreleasedReturnValue(),
        int HasSensitiveFields = GEOMapItemStorageHasSensitiveFields((uint64_t)v6, a2),
        v6,
        HasSensitiveFields))
  {
    long long v8 = [a1 destinationInfo];
    long long v9 = (id *)[v8 copy];

    GEOMapItemStorageClearSensitiveFields(v9, a2, 0);
    [a1 setDestinationInfo:v9];
  }
  else
  {
    long long v9 = [a1 destinationInfo];
    [v9 clearSensitiveFields:a2];
  }

  -[GEOSharedNavState _readWaypointInfos]((uint64_t)a1);
  unint64_t result = [a1[13] count];
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      char v12 = [a1[13] objectAtIndexedSubscript:i];
      uint64_t v13 = v12;
      if (a3 && GEOSharedNavWaypointInfoHasSensitiveFields(v12, a2))
      {
        int v14 = (void *)[v13 copy];
        int v15 = [v14 mapItemStorage];
        [v15 clearSensitiveFields:a2];

        [a1[13] replaceObjectAtIndex:i withObject:v14];
      }
      else
      {
        [v13 clearSensitiveFields:a2];
      }

      unint64_t result = [a1[13] count];
    }
  }
  return result;
}

uint64_t GEOSharedNavStateHasSensitiveFields(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v4 = [a1 destinationInfo];
  char HasSensitiveFields = GEOMapItemStorageHasSensitiveFields((uint64_t)v4, a2);

  if (HasSensitiveFields) {
    return 1;
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  unsigned int v7 = objc_msgSend(a1, "waypointInfos", 0);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v14;
    while (2)
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        if (GEOSharedNavWaypointInfoHasSensitiveFields(*(void **)(*((void *)&v13 + 1) + 8 * v11), a2))
        {
          uint64_t v6 = 1;
          goto LABEL_15;
        }
        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_15:

  return v6;
}

void *GEOSharedNavWaypointInfoHasSensitiveFields(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = [result mapItemStorage];
    uint64_t HasSensitiveFields = GEOMapItemStorageHasSensitiveFields((uint64_t)v3, a2);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void GEOSharedNavWaypointInfoClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  if (a3
    && [a1 hasMapItemStorage]
    && ([a1 mapItemStorage],
        id v5 = objc_claimAutoreleasedReturnValue(),
        int HasSensitiveFields = GEOMapItemStorageHasSensitiveFields((uint64_t)v5, a2),
        v5,
        HasSensitiveFields))
  {
    unsigned int v7 = [a1 mapItemStorage];
    uint64_t v8 = (id *)[v7 copy];

    GEOMapItemStorageClearSensitiveFields(v8, a2, 0);
    [a1 setMapItemStorage:v8];
  }
  else
  {
    uint64_t v8 = [a1 mapItemStorage];
    [v8 clearSensitiveFields:a2];
  }
}

void sub_189E6BDB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E6CAEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E6CF7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavWaypointInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v54 = v17;
        char v55 = v18 | v17;
        if ((v18 | v8)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
        char v56 = (v19 == 0) | v18;
        BOOL v57 = v18;
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_73;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_73:
      int v52 = 1;
      goto LABEL_74;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v57;
    if ((v56 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 3)
    {
      if (!v34) {
        goto LABEL_62;
      }
      if ((*(unsigned char *)(a1 + 60) & 8) == 0)
      {
        uint64_t v41 = PBReaderReadString();
        unsigned int v42 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v41;
        goto LABEL_55;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_90;
      }
      char v47 = 16 * *(unsigned char *)(a1 + 60);
      goto LABEL_70;
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_62;
      }
      if ((*(unsigned char *)(a1 + 60) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_90;
        }
        uint64_t v39 = objc_alloc_init(GEOMapItemStorage);
        if (!GEOMapItemStorageReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_89;
        }
        PBReaderRecallMark();
        uint64_t v40 = 32;
LABEL_54:
        unsigned int v42 = *(void **)(a1 + v40);
        *(void *)(a1 + v40) = v39;
LABEL_55:

        --v7;
LABEL_71:
        unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_72;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_90;
      }
      char v47 = 32 * *(unsigned char *)(a1 + 60);
LABEL_70:
      v7 += v47 >> 7;
      goto LABEL_71;
    }
    if (v54 & 1) == 0 || (*(unsigned char *)(a1 + 60))
    {
LABEL_62:
      char v46 = PBReaderSkipValueWithTag();
      unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
      if ((v46 & 1) == 0)
      {
        int v52 = 0;
        goto LABEL_74;
      }
      goto LABEL_72;
    }
    if (!*(void *)(a1 + 16))
    {
      id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      uint64_t v44 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v43;
    }
    int v45 = PBUnknownFieldAdd();
    unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v45)
    {
      int v52 = 0;
      uint64_t v53 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
      goto LABEL_75;
    }
LABEL_72:
    if (!(v55 & 1 | (v7 != 0))) {
      goto LABEL_73;
    }
  }
  if (!v34) {
    goto LABEL_62;
  }
  if ((*(unsigned char *)(a1 + 60) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_90;
    }
    char v47 = *(unsigned char *)(a1 + 60) << 6;
    goto LABEL_70;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_90;
  }
  uint64_t v39 = objc_alloc_init(GEOSharedNavChargingStationInfo);
  if (GEOSharedNavChargingStationInfoReadAllFrom((uint64_t)v39, (void *)v3))
  {
    PBReaderRecallMark();
    uint64_t v40 = 24;
    goto LABEL_54;
  }
LABEL_89:

LABEL_90:
  int v52 = 0;
  unsigned int v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_74:
  uint64_t v53 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
  if ((v54 & 1) == 0) {
    goto LABEL_76;
  }
LABEL_75:
  *(unsigned char *)(a1 + v53[256]) |= 1u;
LABEL_76:
  if (v57 || (v52 & 1) == 0)
  {
    *(unsigned char *)(a1 + v53[256]) |= 4u;
    *(unsigned char *)(a1 + v53[256]) |= 2u;
    *(unsigned char *)(a1 + v53[256]) |= 8u;
  }
  else if (v19)
  {
    while (1)
    {
      int v48 = *v19++;
      char v49 = 4;
      switch(v48)
      {
        case 0:
          goto LABEL_83;
        case 1:
          goto LABEL_82;
        case 2:
          char v49 = 2;
          goto LABEL_82;
        case 3:
          char v49 = 8;
LABEL_82:
          *(unsigned char *)(a1 + v53[256]) |= v49;
          break;
        default:
          continue;
      }
    }
  }
LABEL_83:
  if (v52) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v57)
  {
    unint64_t v50 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189E6D708(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E6D878(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E6DF90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavWaypointInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOSharedNavWaypointInfoReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOSharedNavWaypointInfoReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOSharedNavWaypointInfoReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOSharedNavWaypointInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 32) readAll:1];
    [*(id *)(a1 + 24) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189E6E14C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavWaypointInfoReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOSharedNavWaypointInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E6E1B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E6E368(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOSharedNavWaypointInfoIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  unsigned int v2 = *(unsigned __int8 *)(a1 + 60);
  if ((v2 & 0x10) != 0) {
    return 1;
  }
  if ((v2 & 4) != 0)
  {
    if (GEOMapItemStorageIsDirty(*(os_unfair_lock_s **)(a1 + 32))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 2) == 0) {
    return (v2 >> 3) & 1;
  }
  return 1;
}

os_unfair_lock_s *GEOSharedNavWaypointInfoIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOSharedNavWaypointInfoIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189E6E710(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E6E9D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsPhotoSizeReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOTraitsPhotoSizeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E6F044(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTraitsTransitScheduleFilterReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOTraitsTransitScheduleFilterReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E6F92C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsTransitScheduleModeFilterIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  unsigned int v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    id v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_38;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8) {
            continue;
          }
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsTransitScheduleTimeRangeIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEOTraitsTransitScheduleTimeRangeIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  unsigned int v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    id v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      if ((v8 >> 3) == 2 || (v8 >> 3) == 1)
      {
        if (v16 != 1) {
          goto LABEL_30;
        }
        uint64_t v18 = *v2;
        unint64_t v19 = *(void *)&a1[v18];
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v20 = v19 + 8, v20 <= *(void *)&a1[*v3])) {
          *(void *)&a1[v18] = v20;
        }
        else {
          a1[v14] = 1;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_30:
        BOOL v21 = 0;
        goto LABEL_29;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v21 = a1[*v4] == 0;
LABEL_29:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOTraitsTransitScheduleFilterIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  BOOL v2 = (*(unsigned char *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_189E70170(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsTransitScheduleModeFilterReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOTraitsTransitScheduleModeFilterReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E70798(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsTransitScheduleTimeRangeReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOTraitsTransitScheduleTimeRangeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E70FD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E71528(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLCollectionStorageReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        uint64_t v13 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v8;
        unsigned __int8 v18 = v16 | v11;
        char v53 = v17;
        char v54 = v18 | v17;
        if ((v18 | v9)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        char v55 = (v19 == 0) | v18;
        BOOL v56 = v18;
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        BOOL v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v7;
        uint64_t v14 = v8;
LABEL_8:
        uint64_t v15 = v11;
LABEL_10:
        ++v10;
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_60;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_60:
      int v51 = 1;
      goto LABEL_61;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v56;
    if ((v55 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (!v34) {
        goto LABEL_54;
      }
      if ((*(unsigned char *)(a1 + 52) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_80;
        }
        v10 += *(unsigned __int8 *)(a1 + 52) << 30 >> 31;
      }
      else
      {
        uint64_t v39 = PBReaderReadString();
        uint64_t v40 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v39;

        --v10;
      }
      goto LABEL_58;
    }
    if (v53 & 1) == 0 || (*(unsigned char *)(a1 + 52)) {
      goto LABEL_54;
    }
    if (!*(void *)(a1 + 16))
    {
      id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      id v43 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v42;
    }
    int v44 = PBUnknownFieldAdd();
    BOOL v21 = (int *)MEMORY[0x1E4F940C8];
    if (!v44)
    {
      int v51 = 0;
      int v52 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
      goto LABEL_62;
    }
LABEL_59:
    if (!(v54 & 1 | (v10 != 0))) {
      goto LABEL_60;
    }
  }
  if (!v34 || (*(unsigned char *)(a1 + 52) & 4) != 0)
  {
LABEL_54:
    char v45 = PBReaderSkipValueWithTag();
    BOOL v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v45 & 1) == 0)
    {
      int v51 = 0;
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_80;
  }
  uint64_t v41 = objc_alloc_init(GEOCollectionPlace);
  if (GEOCollectionPlaceReadAllFrom((uint64_t)v41, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    -[GEOURLCollectionStorage _addNoFlagsPlace:](a1, v41);

LABEL_58:
    BOOL v21 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_59;
  }

LABEL_80:
  int v51 = 0;
  BOOL v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_61:
  int v52 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
  if ((v53 & 1) == 0) {
    goto LABEL_63;
  }
LABEL_62:
  *(unsigned char *)(a1 + v52[286]) |= 1u;
LABEL_63:
  if (v56 || (v51 & 1) == 0)
  {
    *(unsigned char *)(a1 + v52[286]) |= 2u;
    *(unsigned char *)(a1 + v52[286]) |= 4u;
    goto LABEL_73;
  }
  if (v19)
  {
    while (1)
    {
      int v48 = *v19++;
      int v47 = v48;
      if (v48 == 1) {
        break;
      }
      if (v47 == 2)
      {
        char v46 = 4;
LABEL_69:
        *(unsigned char *)(a1 + v52[286]) |= v46;
      }
      else if (!v47)
      {
        goto LABEL_73;
      }
    }
    char v46 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v51) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v56)
  {
    char v49 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189E71BB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E725DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOURLCollectionStorageCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5++), "readAll:", 1, (void)v6);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEOURLCollectionStorageReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOURLCollectionStorageReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    long long v9 = (int *)&GEOURLCollectionStorageReadAllFrom_recursiveTag;
  }
  else {
    long long v9 = (int *)&GEOURLCollectionStorageReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOURLCollectionStorageReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOURLCollectionStorageCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189E72870(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLCollectionStorageReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOURLCollectionStorageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E728D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOURLCollectionStorageIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOCollectionPlaceIsValid(a1)) {
          goto LABEL_29;
        }
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_29:
        PBReaderRecallMark();
        return 0;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189E72CF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOURLCollectionStorageIsDirty(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(unsigned char *)(a1 + 52) & 0xE) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) == 0) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v3 = *(id *)(a1 + 32);
  uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v3);
        }
        if (GEOCollectionPlaceIsDirty(*(void *)(*((void *)&v7 + 1) + 8 * i)))
        {
          uint64_t v2 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOURLCollectionStorageIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOURLCollectionStorageIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189E7330C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E73614(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E7396C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLExtraStorageReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 68)), (uint16x4_t)0xFFFCFFFEFFFDFFFFLL) & 0xFF01FF01FF01FF01))+ (*(unsigned char *)(a1 + 68) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 2;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v55 = v17;
        char v56 = v18 | v17;
        if ((v18 | v8)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        char v57 = (v19 == 0) | v18;
        BOOL v58 = v18;
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        BOOL v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_77;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_77:
      int v53 = 1;
      goto LABEL_78;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v58;
    if ((v57 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 68) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_96;
          }
          uint64_t v39 = objc_alloc_init(GEOStyleAttributes);
          if (GEOStyleAttributesReadAllFrom((uint64_t)v39, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v40 = 40;
            goto LABEL_55;
          }
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_96;
        }
        char v48 = 16 * *(unsigned char *)(a1 + 68);
        goto LABEL_74;
      case 2:
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 68) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_96;
          }
          char v48 = *(unsigned char *)(a1 + 68) << 6;
LABEL_74:
          v7 += v48 >> 7;
          goto LABEL_75;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_96;
        }
        uint64_t v39 = objc_alloc_init(GEOMapRegion);
        if (GEOMapRegionReadAllFrom((uint64_t)v39, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v40 = 24;
LABEL_55:
          int v44 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;
LABEL_63:

          --v7;
LABEL_75:
          BOOL v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_76:
          if (!(v56 & 1 | (v7 != 0))) {
            goto LABEL_77;
          }
          continue;
        }
LABEL_95:

LABEL_96:
        int v53 = 0;
        BOOL v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_78:
        char v54 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
        if (v55) {
LABEL_79:
        }
          *(unsigned char *)(a1 + v54[294]) |= 1u;
        if (v58 || (v53 & 1) == 0)
        {
          *(unsigned char *)(a1 + v54[294]) |= 8u;
          *(unsigned char *)(a1 + v54[294]) |= 2u;
          *(unsigned char *)(a1 + v54[294]) |= 4u;
          *(unsigned char *)(a1 + v54[294]) |= 0x10u;
        }
        else if (v19)
        {
          while (1)
          {
            int v50 = *v19++;
            char v49 = 8;
            switch(v50)
            {
              case 0:
                goto LABEL_89;
              case 1:
                goto LABEL_87;
              case 2:
                char v49 = 2;
                goto LABEL_87;
              case 3:
                char v49 = 4;
                goto LABEL_87;
              case 4:
                char v49 = 16;
LABEL_87:
                *(unsigned char *)(a1 + v54[294]) |= v49;
                break;
              default:
                continue;
            }
          }
        }
LABEL_89:
        if (v53) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v58)
        {
          int v51 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 3:
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 68) & 4) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 32;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_96;
        }
        char v48 = 32 * *(unsigned char *)(a1 + 68);
        goto LABEL_74;
      case 4:
        if (!v34) {
          goto LABEL_64;
        }
        if ((*(unsigned char *)(a1 + 68) & 0x10) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 48;
LABEL_62:
          int v44 = *(void **)(a1 + v46);
          *(void *)(a1 + v46) = v45;
          goto LABEL_63;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_96;
        }
        char v48 = 8 * *(unsigned char *)(a1 + 68);
        goto LABEL_74;
      default:
        if (v55 & 1) == 0 || (*(unsigned char *)(a1 + 68))
        {
LABEL_64:
          char v47 = PBReaderSkipValueWithTag();
          BOOL v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v47 & 1) == 0)
          {
            int v53 = 0;
            goto LABEL_78;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            id v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          BOOL v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v43)
          {
            int v53 = 0;
            char v54 = &OBJC_IVAR___GEOMapItemStorage__readerMarkLength;
            goto LABEL_79;
          }
        }
        goto LABEL_76;
    }
  }
}

void sub_189E741A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E74310(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E74480(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E74C14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLExtraStorageReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOURLExtraStorageReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOURLExtraStorageReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOURLExtraStorageReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOURLExtraStorageReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 40) readAll:1];
    [*(id *)(a1 + 24) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189E74DD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLExtraStorageReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOURLExtraStorageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E74E34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOURLExtraStorageIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOStyleAttributesIsValid(a1)) {
            goto LABEL_26;
          }
          goto LABEL_33;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
            goto LABEL_33;
          }
LABEL_26:
          PBReaderRecallMark();
          goto LABEL_31;
        case 3u:
          if (v15 == 2) {
            goto LABEL_30;
          }
          goto LABEL_33;
        case 4u:
          if (v15 == 2) {
            goto LABEL_30;
          }
          goto LABEL_33;
        default:
LABEL_30:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_33:
            PBReaderRecallMark();
            return 0;
          }
LABEL_31:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_32;
          }
          break;
      }
    }
  }
LABEL_32:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189E7526C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOURLExtraStorageIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  BOOL v2 = (*(unsigned char *)(a1 + 68) & 0x3E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189E755D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E758F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWifiAccessPointReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v16 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            uint64_t v18 = PBReaderReadString();
            unint64_t v19 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v18;

            continue;
          case 2u:
            char v22 = 0;
            unsigned int v23 = 0;
            uint64_t v24 = 0;
            *(unsigned char *)(a1 + 44) |= 8u;
            while (1)
            {
              uint64_t v25 = *v4;
              uint64_t v26 = *(void *)&v3[v25];
              unint64_t v27 = v26 + 1;
              if (v26 == -1 || v27 > *(void *)&v3[*v5]) {
                break;
              }
              char v28 = *(unsigned char *)(*(void *)&v3[*v7] + v26);
              *(void *)&v3[v25] = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if ((v28 & 0x80) == 0) {
                goto LABEL_54;
              }
              v22 += 7;
              BOOL v15 = v23++ >= 9;
              if (v15)
              {
                LODWORD(v24) = 0;
                goto LABEL_56;
              }
            }
            v3[*v6] = 1;
LABEL_54:
            if (v3[*v6]) {
              LODWORD(v24) = 0;
            }
LABEL_56:
            uint64_t v48 = 40;
            goto LABEL_69;
          case 3u:
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v24 = 0;
            *(unsigned char *)(a1 + 44) |= 4u;
            while (2)
            {
              uint64_t v31 = *v4;
              uint64_t v32 = *(void *)&v3[v31];
              unint64_t v33 = v32 + 1;
              if (v32 == -1 || v33 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v34 = *(unsigned char *)(*(void *)&v3[*v7] + v32);
                *(void *)&v3[v31] = v33;
                v24 |= (unint64_t)(v34 & 0x7F) << v29;
                if (v34 < 0)
                {
                  v29 += 7;
                  BOOL v15 = v30++ >= 9;
                  if (v15)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              LODWORD(v24) = 0;
            }
LABEL_60:
            uint64_t v48 = 36;
            goto LABEL_69;
          case 4u:
            char v35 = 0;
            unsigned int v36 = 0;
            uint64_t v37 = 0;
            *(unsigned char *)(a1 + 44) |= 1u;
            while (2)
            {
              uint64_t v38 = *v4;
              uint64_t v39 = *(void *)&v3[v38];
              unint64_t v40 = v39 + 1;
              if (v39 == -1 || v40 > *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v41 = *(unsigned char *)(*(void *)&v3[*v7] + v39);
                *(void *)&v3[v38] = v40;
                v37 |= (unint64_t)(v41 & 0x7F) << v35;
                if (v41 < 0)
                {
                  v35 += 7;
                  BOOL v15 = v36++ >= 9;
                  if (v15)
                  {
                    uint64_t v37 = 0;
                    goto LABEL_64;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v37 = 0;
            }
LABEL_64:
            *(void *)(a1 + 24) = v37;
            continue;
          case 5u:
            char v42 = 0;
            unsigned int v43 = 0;
            uint64_t v24 = 0;
            *(unsigned char *)(a1 + 44) |= 2u;
            break;
          default:
            if (!*(void *)(a1 + 8))
            {
              id v20 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              BOOL v21 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v20;
            }
            if (!PBUnknownFieldAdd()) {
              goto LABEL_72;
            }
            continue;
        }
        while (1)
        {
          uint64_t v44 = *v4;
          uint64_t v45 = *(void *)&v3[v44];
          unint64_t v46 = v45 + 1;
          if (v45 == -1 || v46 > *(void *)&v3[*v5]) {
            break;
          }
          char v47 = *(unsigned char *)(*(void *)&v3[*v7] + v45);
          *(void *)&v3[v44] = v46;
          v24 |= (unint64_t)(v47 & 0x7F) << v42;
          if ((v47 & 0x80) == 0) {
            goto LABEL_66;
          }
          v42 += 7;
          BOOL v15 = v43++ >= 9;
          if (v15)
          {
            LODWORD(v24) = 0;
            goto LABEL_68;
          }
        }
        v3[*v6] = 1;
LABEL_66:
        if (v3[*v6]) {
          LODWORD(v24) = 0;
        }
LABEL_68:
        uint64_t v48 = 32;
LABEL_69:
        *(_DWORD *)(a1 + v48) = v24;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v49 = v3[*v6] == 0;
  }
  else
  {
LABEL_72:
    BOOL v49 = 0;
  }
  objc_sync_exit(v3);

  return v49;
}

void sub_189E76748(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWifiAccessPointReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEOWifiAccessPointReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E767C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWifiAccessPointIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2) {
            goto LABEL_58;
          }
          goto LABEL_20;
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_58;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_54;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_55;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_58;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_54;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_55;
          }
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_58;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_54;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v22 = v28++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_55;
          }
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_58;
          }
          unsigned int v33 = 0;
          break;
        default:
LABEL_20:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_58:
          BOOL v38 = 0;
          goto LABEL_57;
      }
      while (1)
      {
        uint64_t v34 = *v2;
        uint64_t v35 = *(void *)&a1[v34];
        unint64_t v36 = v35 + 1;
        if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
          break;
        }
        int v37 = *(char *)(*(void *)&a1[*v5] + v35);
        *(void *)&a1[v34] = v36;
        if (v37 < 0)
        {
          BOOL v22 = v33++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_55;
      }
LABEL_54:
      a1[*v4] = 1;
LABEL_55:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v38 = a1[*v4] == 0;
LABEL_57:
  PBReaderRecallMark();
  return v38;
}

uint64_t GEOZlibCompress(const Bytef *a1, uLong sourceLen, Bytef **a3, void *a4)
{
  if (sourceLen <= 0x400000)
  {
    uLong v9 = compressBound(sourceLen);
    uint64_t v10 = (Bytef *)malloc_type_malloc(v9 + 4, 0x336E8924uLL);
    *a3 = v10;
    *(_DWORD *)uint64_t v10 = sourceLen;
    uLongf destLen = v9;
    uint64_t result = j__compress(v10 + 4, &destLen, a1, sourceLen);
    if (result) {
      uint64_t result = fprintf((FILE *)*MEMORY[0x1E4F143C8], "compress returned %d\n", result);
    }
    *a4 = v9 + 4;
  }
  else
  {
    uint64_t result = fprintf((FILE *)*MEMORY[0x1E4F143C8], "Refusing to compress more than %d bytes\n", 0x400000);
    *a3 = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t GEOZlibUncompress(const Bytef *a1, uLong a2, Bytef **a3, uLongf *a4)
{
  if (a2 > 4)
  {
    size_t v8 = *(unsigned int *)a1;
    *a4 = v8;
    if (v8)
    {
      uint64_t v10 = (Bytef *)malloc_type_malloc(v8, 0x67729DC6uLL);
      *a3 = v10;
      uLongf destLen = *a4;
      uint64_t v6 = uncompress(v10, &destLen, a1 + 4, a2);
      if (v6) {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "uncompress returned %d\n", v6);
      }
    }
    else
    {
      uint64_t v6 = 0;
      *a3 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return v6;
}

void GEOGunzip()
{
  os_log_t v0 = (Bytef *)MEMORY[0x1F4188790]();
  BOOL v2 = v1;
  uint64_t v4 = v3;
  size_t v6 = v5;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(&strm.avail_in, 0, 104);
  strm.next_in = v0;
  strm.avail_in = v5;
  *id v3 = 0;
  void *v1 = 0;
  int v7 = inflateInit2_(&strm, 31, "1.2.12", 112);
  if (v7)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "inflateInit returned %d\n", v7);
  }
  else
  {
    uint64_t v18 = v4;
    uint64_t v8 = 2;
    do
    {
      size_t v9 = v8;
      v8 *= 2;
    }
    while (v9 < v6);
    uint64_t v10 = (char *)malloc_type_malloc(v9, 0x258F46BuLL);
    uint64_t v11 = 0;
    while (1)
    {
      strm.next_out = __src;
      strm.avail_out = 4096;
      unsigned int v12 = inflate(&strm, 0);
      if (v12 > 1) {
        break;
      }
      unsigned int v13 = v12;
      if (strm.avail_out != 4096)
      {
        size_t v14 = 4096 - strm.avail_out;
        size_t v15 = v9;
        do
        {
          size_t v16 = v15;
          v15 *= 2;
        }
        while (v16 < v14 + v11);
        if (v16 == v9)
        {
          size_t v16 = v9;
          unsigned int v17 = v10;
        }
        else
        {
          unsigned int v17 = (char *)malloc_type_realloc(v10, v16, 0xE08AFCFDuLL);
          if (!v17)
          {
            free(v10);
            uint64_t v10 = 0;
            break;
          }
        }
        memcpy(&v17[v11], __src, v14);
        size_t v9 = v16;
        uint64_t v10 = v17;
        v11 += v14;
      }
      if (v13)
      {
        inflateEnd(&strm);
        goto LABEL_18;
      }
    }
    inflateEnd(&strm);
    free(v10);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
LABEL_18:
    *uint64_t v18 = v10;
    void *v2 = v11;
  }
}

uint64_t GEOBZ2Uncompress(char *a1, unint64_t a2, char **a3, uint64_t *a4)
{
  if (a2 > 4)
  {
    uint64_t v8 = *(unsigned int *)a1;
    if (v8 <= 0x400000)
    {
      unsigned int v9 = a2;
      uint64_t v10 = (char *)malloc_type_malloc(*(unsigned int *)a1, 0x1911B595uLL);
      *a3 = v10;
      *a4 = v8;
      unsigned int destLen = v8;
      int v11 = BZ2_bzBuffToBuffDecompress(v10, &destLen, a1 + 4, v9, 0, 0);
      BOOL v6 = v11 == 0;
      if (v11) {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bzip2 uncompress returned %d\n", v11);
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Uncompressed data from Bzip2 exceeds max size with total of %d bytes\n", v8);
      *a3 = 0;
      *a4 = 0;
      return 1;
    }
  }
  else
  {
    BOOL v6 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return v6;
}

uint64_t GEODecompressFileHandleToFileHandle(void *a1, unint64_t a2, void *a3, compression_algorithm a4, id *a5)
{
  id v33 = a1;
  id v34 = a3;
  uint64_t v8 = malloc_type_malloc(0x8000uLL, 0x4B2734EBuLL);
  uint64_t v41 = 0;
  char v42 = &v41;
  uint64_t v43 = 0x4810000000;
  uint64_t v44 = "";
  memset(&v45, 0, sizeof(v45));
  if (compression_stream_init(&v45, COMPRESSION_STREAM_DECODE, a4) == COMPRESSION_STATUS_ERROR)
  {
    free(v8);
    if (a5)
    {
      uint64_t v31 = [MEMORY[0x1E4F28C58] GEOErrorWithCode:-10 reason:@"Unable to initialize the compression stream"];
      uint64_t v30 = 0;
      id v36 = *a5;
      *a5 = (id)v31;
    }
    else
    {
      uint64_t v30 = 0;
    }
    goto LABEL_32;
  }
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 3221225472;
  v40[2] = __GEODecompressFileHandleToFileHandle_block_invoke;
  v40[3] = &unk_1E53DFA98;
  v40[4] = &v41;
  v40[5] = v8;
  uint64_t v9 = MEMORY[0x18C120660](v40);
  id v10 = 0;
  BOOL v11 = 0;
  unsigned int v12 = v42;
  v42[4] = (uint64_t)v8;
  v12[5] = 0x8000;
  uint64_t v35 = (void (**)(void))v9;
  do
  {
    unsigned int v13 = (void *)MEMORY[0x18C1203C0]();
    size_t v14 = v42;
    if (!v42[7])
    {
      if (a2 >= 0x8000) {
        uint64_t v15 = 0x8000;
      }
      else {
        uint64_t v15 = a2;
      }
      id v39 = 0;
      size_t v16 = [v33 readDataUpToLength:v15 error:&v39];
      id v17 = v39;
      id v18 = v39;

      if (a5) {
        objc_storeStrong(a5, v17);
      }
      if (!v16)
      {
        v35[2]();
        id v10 = 0;
        int v27 = 1;
LABEL_24:

        goto LABEL_25;
      }
      BOOL v11 = (unint64_t)[v16 length] < 0x8000;
      uint64_t v19 = [v16 length];
      uint64_t v20 = [v16 length];
      v42[7] = v20;
      id v10 = v16;
      uint64_t v21 = [v10 bytes];
      a2 -= v19;
      v42[6] = v21;

      size_t v14 = v42;
    }
    v14[4] = (uint64_t)v8;
    v14[5] = 0x8000;
    compression_status v22 = compression_stream_process((compression_stream *)(v14 + 4), v11);
    if (v22 != COMPRESSION_STATUS_ERROR)
    {
      id v18 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v8 length:0x8000 - v42[5] freeWhenDone:0];
      unsigned int v23 = v8;
      id v38 = 0;
      char v24 = [v34 writeData:v18 error:&v38];
      id v25 = v38;
      id v26 = v38;
      if (v24)
      {
        if (v22 == COMPRESSION_STATUS_END) {
          int v27 = 3;
        }
        else {
          int v27 = 0;
        }
      }
      else
      {
        if (a5) {
          objc_storeStrong(a5, v25);
        }
        v35[2]();
        int v27 = 1;
      }
      uint64_t v8 = v23;

      goto LABEL_24;
    }
    if (a5)
    {
      uint64_t v28 = [MEMORY[0x1E4F28C58] GEOErrorWithCode:-10 reason:@"Received error while decompressing"];
      id v29 = *a5;
      *a5 = (id)v28;
    }
    v35[2]();
    int v27 = 1;
LABEL_25:
  }
  while (!v27);
  if (v27 == 3)
  {
    v35[2]();
    uint64_t v30 = 1;
  }
  else
  {
    uint64_t v30 = 0;
  }

LABEL_32:
  _Block_object_dispose(&v41, 8);

  return v30;
}

void sub_189E77CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __GEODecompressFileHandleToFileHandle_block_invoke(uint64_t a1)
{
  compression_stream_destroy((compression_stream *)(*(void *)(*(void *)(a1 + 32) + 8) + 32));
  BOOL v2 = *(void **)(a1 + 40);

  free(v2);
}

void geo::MapNodeTransit::~MapNodeTransit(void **this)
{
  *this = &unk_1ED513B60;
  GEOVectorTileRelease(this[3]);
}

{
  uint64_t vars8;

  *this = &unk_1ED513B60;
  GEOVectorTileRelease(this[3]);

  JUMPOUT(0x18C11F580);
}

uint64_t geo::MapNodeTransit::toString(geo::MapNodeTransit *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  uint64_t v2 = *((void *)this + 5);
  id v3 = *(const char **)(v2 + 16);
  if (v3)
  {
    size_t v4 = strlen(*(const char **)(v2 + 16));
  }
  else
  {
    id v3 = "unnamed node";
    size_t v4 = 12;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (", 2);
  size_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  BOOL v6 = (void *)std::ostream::operator<<();
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" id:", 4);
  std::ostream::operator<<();
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18C11F4F0](&v11);
}

void sub_189E77F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

GEOMapEdgeTransitConnectionFinder *geo::MapNodeTransit::findEdgesOut(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*(void *)(a1 + 32))
  {
    char v10 = -[GEOMapEdgeConnectionFinder initWithMap:tile:junction:coordinate:]([GEOMapEdgeTransitConnectionFinder alloc], "initWithMap:tile:junction:coordinate:", v7, *(void *)(a1 + 24), *(void *)(a1 + 32), *(double *)(a1 + 8), *(double *)(a1 + 16));
    [(GEOMapRequest *)v10 setCompletionHandler:v9];
    [(GEOMapEdgeConnectionFinder *)v10 findConnectionsOut:v8];
    if ([(GEOMapRequest *)v10 isFinished]) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    unsigned int v12 = v11;
  }
  else
  {
    unsigned int v12 = 0;
  }

  return v12;
}

void sub_189E78078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

GEOMapEdgeTransitConnectionFinder *geo::MapNodeTransit::findEdgesIn(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*(void *)(a1 + 32))
  {
    char v10 = -[GEOMapEdgeConnectionFinder initWithMap:tile:junction:coordinate:]([GEOMapEdgeTransitConnectionFinder alloc], "initWithMap:tile:junction:coordinate:", v7, *(void *)(a1 + 24), *(void *)(a1 + 32), *(double *)(a1 + 8), *(double *)(a1 + 16));
    [(GEOMapRequest *)v10 setCompletionHandler:v9];
    [(GEOMapEdgeConnectionFinder *)v10 findConnectionsIn:v8];
    if ([(GEOMapRequest *)v10 isFinished]) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    unsigned int v12 = v11;
  }
  else
  {
    unsigned int v12 = 0;
  }

  return v12;
}

void sub_189E7816C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t geo::MapNodeTransit::type(geo::MapNodeTransit *this)
{
  return 1;
}

void sub_189E79538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_189E7961C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E798B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E79C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E79EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E7A11C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E7A42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E7A5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_189E7A820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E7AA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_189E7AAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E7AB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL GEOBatchPlaceResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  size_t v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    BOOL v6 = (int *)MEMORY[0x1E4F940E8];
    id v7 = (int *)MEMORY[0x1E4F940E0];
    id v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      id v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          uint64_t v14 = *(void *)&v5[v13];
          unint64_t v15 = v14 + 1;
          if (v14 == -1 || v15 > *(void *)&v5[*v7]) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          BOOL v17 = v11++ >= 9;
          if (v17)
          {
            unint64_t v12 = 0;
            int v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v18 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v18 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_40;
          }
          int v27 = objc_alloc_init(GEOPlaceResult);
          if (!GEOPlaceResultReadAllFrom((uint64_t)v27, v5, a3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          uint64_t v28 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v27;
        }
        else if ((v12 >> 3) == 1)
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v23 = *v6;
            uint64_t v24 = *(void *)&v5[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&v5[*v7]) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)&v5[*v9] + v24);
            *(void *)&v5[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0) {
              goto LABEL_34;
            }
            v20 += 7;
            BOOL v17 = v21++ >= 9;
            if (v17)
            {
              LODWORD(v22) = 0;
              goto LABEL_36;
            }
          }
          v5[*v8] = 1;
LABEL_34:
          if (v5[*v8]) {
            LODWORD(v22) = 0;
          }
LABEL_36:
          *(_DWORD *)(a1 + 16) = v22;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v29 = v5[*v8] == 0;
  }
  else
  {
LABEL_40:
    BOOL v29 = 0;
  }
  objc_sync_exit(v5);

  return v29;
}

void sub_189E7B184(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void GEOBatchPlaceResultClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  if (a1
    && a3
    && (id v5 = a1[1]) != 0
    && (id v6 = v5, v7 = GEOPlaceResultHasSensitiveFields(v6), v6, v7))
  {
    id v8 = a1[1];
    id v10 = (id)[v8 copy];

    id v9 = [v10 revgeoRequestTemplate];
    [v9 clearSensitiveFields:a2];

    -[GEOBatchPlaceResult setPlaceResult:]((uint64_t)a1, v10);
  }
  else
  {
    -[GEOBatchPlaceResult placeResult](a1);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    [v10 clearSensitiveFields:a2];
  }
}

void sub_189E7B69C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBatchRevGeocodeRequestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 84);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 80)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 92)), (uint16x4_t)0xFFFEFFFDFFFFFFFCLL) & 0xFF01FF01FF01FF01))+ (*(unsigned char *)(a1 + 92) & 1)+ ((*(unsigned char *)(a1 + 92) & 0x20) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        int v14 = v10 | (v11 > 3);
        if ((v14 | v8)) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = a3;
        }
        LODWORD(v16) = v14;
        BOOL v17 = (int *)MEMORY[0x1E4F940E8];
        int v18 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_99;
        }
        char v65 = (v15 == 0) | v14;
        uint64_t v19 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(unsigned char *)(v3 + *v18)) {
      goto LABEL_99;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      uint64_t v24 = *(void *)(v3 + v23);
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)(v3 + *v6)) {
        break;
      }
      char v26 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      BOOL v27 = v21++ >= 9;
      if (v27)
      {
        unint64_t v22 = 0;
        int v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    int v29 = v22 & 7;
    if (v28 || v29 == 4)
    {
LABEL_99:
      if (v16)
      {
        char v58 = 1;
        goto LABEL_101;
      }
      if (v15)
      {
        while (1)
        {
          int v60 = *v15++;
          int v59 = v60;
          char v61 = 16;
          switch(v60)
          {
            case 0:
              goto LABEL_113;
            case 1:
              continue;
            case 2:
              goto LABEL_112;
            case 3:
              char v61 = 1;
              goto LABEL_112;
            case 4:
              char v61 = 2;
              goto LABEL_112;
            case 5:
              char v61 = 8;
              goto LABEL_112;
            case 6:
              char v61 = 4;
              goto LABEL_112;
            default:
              if (v59 != 100) {
                continue;
              }
              char v61 = 32;
LABEL_112:
              *(unsigned char *)(a1 + 92) |= v61;
              break;
          }
        }
      }
      goto LABEL_113;
    }
    unint64_t v31 = v22 >> 3;
    BOOL v32 = (char)v16;
    if ((v65 & 1) == 0)
    {
      id v33 = v15;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 2:
        if (!v32 || (*(unsigned char *)(a1 + 92) & 0x10) != 0) {
          goto LABEL_76;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_117;
        }
        int v64 = (int)v16;
        char v16 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1)) {
          goto LABEL_118;
        }
        PBReaderRecallMark();
        -[GEOBatchRevGeocodeRequest _addNoFlagsLocation:](a1, v16);
        goto LABEL_48;
      case 3:
        if (!v32 || (*(unsigned char *)(a1 + 92) & 1) != 0) {
          goto LABEL_76;
        }
        if (v29 == 2)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_117;
          }
          while (1)
          {
            int v37 = (int *)MEMORY[0x1E4F940C8];
            if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8])) {
              break;
            }
            char v38 = 0;
            unsigned int v39 = 0;
            uint64_t v40 = 0;
            while (1)
            {
              uint64_t v41 = *v17;
              uint64_t v42 = *(void *)(v3 + v41);
              unint64_t v43 = v42 + 1;
              if (v42 == -1 || v43 > *(void *)(v3 + *v6)) {
                break;
              }
              char v44 = *(unsigned char *)(*(void *)(v3 + *v19) + v42);
              *(void *)(v3 + v41) = v43;
              v40 |= (unint64_t)(v44 & 0x7F) << v38;
              if (v44 < 0)
              {
                v38 += 7;
                BOOL v27 = v39++ >= 9;
                if (!v27) {
                  continue;
                }
              }
              goto LABEL_63;
            }
            *(unsigned char *)(v3 + *v37) = 1;
LABEL_63:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v53 = 0;
          while (1)
          {
            uint64_t v54 = *v17;
            uint64_t v55 = *(void *)(v3 + v54);
            unint64_t v56 = v55 + 1;
            if (v55 == -1 || v56 > *(void *)(v3 + *v6)) {
              break;
            }
            char v57 = *(unsigned char *)(*(void *)(v3 + *v19) + v55);
            *(void *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              BOOL v27 = v52++ >= 9;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_98;
          }
          *(unsigned char *)(v3 + *v18) = 1;
LABEL_98:
          PBRepeatedInt32Add();
        }
        goto LABEL_85;
      case 4:
        if (!v32) {
          goto LABEL_76;
        }
        if ((*(unsigned char *)(a1 + 92) & 2) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 40;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_117;
        }
        char v50 = *(unsigned char *)(a1 + 92) << 6;
        goto LABEL_84;
      case 5:
        if (!v32) {
          goto LABEL_76;
        }
        if ((*(unsigned char *)(a1 + 92) & 8) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 56;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_117;
        }
        char v50 = 16 * *(unsigned char *)(a1 + 92);
        goto LABEL_84;
      case 6:
        if (!v32) {
          goto LABEL_76;
        }
        if ((*(unsigned char *)(a1 + 92) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_117:
            char v58 = 0;
            goto LABEL_119;
          }
          char v50 = 32 * *(unsigned char *)(a1 + 92);
LABEL_84:
          v7 += v50 >> 7;
        }
        else
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 48;
LABEL_73:
          char v47 = *(void **)(a1 + v46);
          *(void *)(a1 + v46) = v45;

          --v7;
        }
        goto LABEL_85;
      default:
        if (v31 != 100)
        {
          int v48 = PBReaderSkipValueWithTag();
          int v18 = (int *)MEMORY[0x1E4F940C8];
          if (!v48) {
            goto LABEL_116;
          }
          goto LABEL_86;
        }
        if (!v32 || (*(unsigned char *)(a1 + 92) & 0x20) != 0)
        {
LABEL_76:
          char v49 = PBReaderSkipValueWithTag();
          int v18 = (int *)MEMORY[0x1E4F940C8];
          if ((v49 & 1) == 0)
          {
LABEL_116:
            char v58 = 0;
            goto LABEL_101;
          }
LABEL_86:
          if (!(v16 & 1 | (v7 != 0)) || *(void *)(v3 + *v17) >= *(void *)(v3 + *v6)) {
            goto LABEL_99;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_117;
        }
        int v64 = (int)v16;
        char v16 = objc_alloc_init(GEOGeoServiceTag);
        if (GEOGeoServiceTagReadAllFrom((uint64_t)v16, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOBatchRevGeocodeRequest _addNoFlagsServiceTag:](a1, v16);
LABEL_48:

          LODWORD(v16) = v64;
LABEL_85:
          int v18 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_86;
        }
LABEL_118:

        char v58 = 0;
        LOBYTE(v16) = v64;
LABEL_119:
        int v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_101:
        *(unsigned char *)(a1 + 92) |= 0x10u;
        *(unsigned char *)(a1 + 92) |= 1u;
        *(unsigned char *)(a1 + 92) |= 2u;
        *(unsigned char *)(a1 + 92) |= 8u;
        *(unsigned char *)(a1 + 92) |= 4u;
        *(unsigned char *)(a1 + 92) |= 0x20u;
        if (v58)
        {
LABEL_113:
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if (v16) {
            goto LABEL_114;
          }
          return v3;
        }
        unint64_t v3 = 0;
        if ((v16 & 1) == 0) {
          return v3;
        }
LABEL_114:
        unsigned int v62 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;

        return v3;
    }
  }
}

void sub_189E7C278(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E7CDD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E7CF40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E7D0B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E7D21C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E7E738(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBatchRevGeocodeRequestReadAllFrom(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 84))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOBatchRevGeocodeRequestReadAllFrom can only be called once per object"];
  }
  else
  {
    if (!((unint64_t)[a2 position] >> 32)
      && !((unint64_t)[a2 length] >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
      id v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 80) = [v6 position];
      *(_DWORD *)(a1 + 84) = [v6 length];
      unint64_t Specified = GEOBatchRevGeocodeRequestReadSpecified(a1, (unint64_t)v6, (int *)&GEOBatchRevGeocodeRequestReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_189E7E8BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E7EF58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E7F678(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E8002C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBatchRevGeocodeResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = ((*(unsigned __int8 *)(a1 + 72) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 6) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -3:
        char v8 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        int v14 = v10 | (v11 > 1);
        if ((v14 | v8)) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = a3;
        }
        LODWORD(v16) = v14;
        char v67 = (v7 != 0) | v14;
        char v68 = (v15 == 0) | v14;
        BOOL v17 = (int *)MEMORY[0x1E4F940E8];
        int v18 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_100;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      uint64_t v24 = *(void *)(v3 + v23);
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)(v3 + *v6)) {
        break;
      }
      char v26 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      BOOL v27 = v21++ >= 9;
      if (v27)
      {
        unint64_t v22 = 0;
        int v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_100:
      if (v16)
      {
        char v61 = 1;
        goto LABEL_109;
      }
      if (v15)
      {
        while (1)
        {
          int v63 = *v15++;
          char v62 = 32;
          switch(v63)
          {
            case 0:
              goto LABEL_110;
            case 2:
              goto LABEL_106;
            case 3:
              char v62 = 16;
              goto LABEL_106;
            case 5:
              char v62 = 64;
LABEL_106:
              *(unsigned char *)(a1 + 72) |= v62;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_110;
    }
    unint64_t v30 = v22 >> 3;
    BOOL v31 = (char)v16;
    if ((v68 & 1) == 0)
    {
      BOOL v32 = v15;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_82;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        *(unsigned char *)(a1 + 72) |= 2u;
        while (1)
        {
          uint64_t v39 = *v17;
          uint64_t v40 = *(void *)(v3 + v39);
          unint64_t v41 = v40 + 1;
          if (v40 == -1 || v41 > *(void *)(v3 + *v6)) {
            break;
          }
          char v42 = *(unsigned char *)(*(void *)(v3 + *v19) + v40);
          *(void *)(v3 + v39) = v41;
          v38 |= (unint64_t)(v42 & 0x7F) << v36;
          if ((v42 & 0x80) == 0) {
            goto LABEL_85;
          }
          v36 += 7;
          BOOL v27 = v37++ >= 9;
          if (v27)
          {
            LODWORD(v38) = 0;
            goto LABEL_87;
          }
        }
        *(unsigned char *)(v3 + *v18) = 1;
LABEL_85:
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v38) = 0;
        }
LABEL_87:
        uint64_t v60 = 60;
        goto LABEL_96;
      case 2:
        if (!v31 || (*(unsigned char *)(a1 + 72) & 0x20) != 0) {
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_115;
        }
        int v66 = (int)v16;
        char v16 = objc_alloc_init(GEOCluster);
        if (!GEOClusterReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1)) {
          goto LABEL_116;
        }
        PBReaderRecallMark();
        -[GEOBatchRevGeocodeResponse _addNoFlagsCluster:](a1, v16);
        goto LABEL_69;
      case 3:
        if (!v31 || (*(unsigned char *)(a1 + 72) & 0x10) != 0) {
          goto LABEL_82;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
        {
LABEL_115:
          char v61 = 0;
          goto LABEL_117;
        }
        int v66 = (int)v16;
        char v16 = objc_alloc_init(GEOBatchPlaceResult);
        if (GEOBatchPlaceResultReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOBatchRevGeocodeResponse _addNoFlagsBatchPlaceResult:](a1, v16);
LABEL_69:

          LODWORD(v16) = v66;
          int v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_99:
          if ((v67 & 1) == 0) {
            goto LABEL_100;
          }
          continue;
        }
LABEL_116:

        char v61 = 0;
        LOBYTE(v16) = v66;
LABEL_117:
        int v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_109:
        *(unsigned char *)(a1 + 72) |= 0x20u;
        *(unsigned char *)(a1 + 72) |= 0x10u;
        *(unsigned char *)(a1 + 72) |= 0x40u;
        if (v61)
        {
LABEL_110:
          unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if (v16) {
            goto LABEL_111;
          }
        }
        else
        {
          unint64_t v3 = 0;
          if (v16)
          {
LABEL_111:
            int v64 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = 0;
          }
        }
        return v3;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_82;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v38 = 0;
        *(unsigned char *)(a1 + 72) |= 4u;
        while (2)
        {
          uint64_t v46 = *v17;
          uint64_t v47 = *(void *)(v3 + v46);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(v3 + *v19) + v47);
            *(void *)(v3 + v46) = v48;
            v38 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              BOOL v27 = v45++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v38) = 0;
        }
LABEL_91:
        uint64_t v60 = 64;
        goto LABEL_96;
      case 5:
        if (!v31 || (*(unsigned char *)(a1 + 72) & 0x40) != 0) {
          goto LABEL_82;
        }
        int v66 = (int)v16;
        PBReaderReadString();
        char v16 = (GEOBatchPlaceResult *)objc_claimAutoreleasedReturnValue();
        if (v16) {
          -[GEOBatchRevGeocodeResponse _addNoFlagsVersionDomain:](a1, v16);
        }
        goto LABEL_69;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_82;
        }
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v38 = 0;
        *(unsigned char *)(a1 + 72) |= 8u;
        while (2)
        {
          uint64_t v52 = *v17;
          uint64_t v53 = *(void *)(v3 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v19) + v53);
            *(void *)(v3 + v52) = v54;
            v38 |= (unint64_t)(v55 & 0x7F) << v50;
            if (v55 < 0)
            {
              v50 += 7;
              BOOL v27 = v51++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v38) = 0;
        }
LABEL_95:
        uint64_t v60 = 68;
LABEL_96:
        *(_DWORD *)(a1 + v60) = v38;
        goto LABEL_99;
      case 7:
        if (v8)
        {
          *(unsigned char *)(a1 + 72) |= 1u;
          uint64_t v56 = *v17;
          unint64_t v57 = *(void *)(v3 + v56);
          if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(void *)(v3 + *v6))
          {
            uint64_t v58 = *(void *)(*(void *)(v3 + *v19) + v57);
            *(void *)(v3 + v56) = v57 + 8;
          }
          else
          {
            *(unsigned char *)(v3 + *v18) = 1;
            uint64_t v58 = 0;
          }
          *(void *)(a1 + 32) = v58;
        }
        else
        {
LABEL_82:
          char v59 = PBReaderSkipValueWithTag();
          int v18 = (int *)MEMORY[0x1E4F940C8];
          if ((v59 & 1) == 0)
          {
LABEL_108:
            char v61 = 0;
            goto LABEL_109;
          }
        }
        goto LABEL_99;
      default:
        int v43 = PBReaderSkipValueWithTag();
        int v18 = (int *)MEMORY[0x1E4F940C8];
        if (!v43) {
          goto LABEL_108;
        }
        goto LABEL_99;
    }
  }
}

void sub_189E80B98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E81034(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E82474(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E8269C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBatchRevGeocodeResponseReadAllFrom(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOBatchRevGeocodeResponseReadAllFrom can only be called once per object"];
  }
  else
  {
    if (!((unint64_t)[a2 position] >> 32)
      && !((unint64_t)[a2 length] >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
      id v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 48) = [v6 position];
      *(_DWORD *)(a1 + 52) = [v6 length];
      unint64_t Specified = GEOBatchRevGeocodeResponseReadSpecified(a1, (unint64_t)v6, (int *)&GEOBatchRevGeocodeResponseReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_189E82820(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E83320(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void GEOClusterClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  if (a1
    && a3
    && (-[GEOCluster _readContainer](a1), *(void *)(a1 + 40))
    && (-[GEOCluster container]((id *)a1),
        id v5 = objc_claimAutoreleasedReturnValue(),
        unsigned int v6 = GEOPlaceResultHasSensitiveFields(v5),
        v5,
        v6))
  {
    uint64_t v7 = -[GEOCluster container]((id *)a1);
    id v9 = (id)[v7 copy];

    char v8 = [v9 revgeoRequestTemplate];
    [v8 clearSensitiveFields:a2];

    -[GEOCluster setContainer:](a1, v9);
  }
  else
  {
    -[GEOCluster container]((id *)a1);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    [v9 clearSensitiveFields:a2];
  }
}

void sub_189E83E04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E84644(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClusterReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  unsigned int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1) + (*(unsigned char *)(a1 + 60) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v8])
    {
      case -3:
        char v7 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = (v10 & 1 | v11) != 0;
        if ((v14 | v7)) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = a3;
        }
        BOOL v16 = v14;
        BOOL v17 = (int *)MEMORY[0x1E4F940E8];
        int v18 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_83;
        }
        if (v15) {
          char v19 = v14;
        }
        else {
          char v19 = 1;
        }
        char v65 = v19;
        char v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v8;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(unsigned char *)(v3 + *v18)) {
      goto LABEL_83;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v17;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_26;
      }
      v21 += 7;
      BOOL v28 = v22++ >= 9;
      if (v28)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_28;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_26:
    int v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v23 = 0;
    }
LABEL_28:
    int v30 = v23 & 7;
    if (v29 || v30 == 4)
    {
LABEL_83:
      if (v16)
      {
        char v58 = 1;
        goto LABEL_85;
      }
      if (!v15) {
        goto LABEL_96;
      }
      while (1)
      {
        int v60 = *v15++;
        int v59 = v60;
        if (v60 == 1) {
          break;
        }
        if (v59 == 2)
        {
          char v61 = 1;
LABEL_95:
          *(unsigned char *)(a1 + 60) |= v61;
        }
        else if (!v59)
        {
          goto LABEL_96;
        }
      }
      char v61 = 2;
      goto LABEL_95;
    }
    unint64_t v32 = v23 >> 3;
    BOOL v33 = v16;
    if ((v65 & 1) == 0)
    {
      int v34 = v15;
      do
      {
        int v36 = *v34++;
        int v35 = v36;
        BOOL v33 = v36 != 0;
        if (v36) {
          BOOL v37 = v35 == v32;
        }
        else {
          BOOL v37 = 1;
        }
      }
      while (!v37);
    }
    if (v32 != 2) {
      break;
    }
    if (v33 && (*(unsigned char *)(a1 + 60) & 1) == 0)
    {
      if (v30 == 2)
      {
        if (!PBReaderPlaceMark()) {
          goto LABEL_100;
        }
        while (1)
        {
          uint64_t v40 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8])) {
            break;
          }
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0;
          while (1)
          {
            uint64_t v44 = *v17;
            uint64_t v45 = *(void *)(v3 + v44);
            unint64_t v46 = v45 + 1;
            if (v45 == -1 || v46 > *(void *)(v3 + *v6)) {
              break;
            }
            char v47 = *(unsigned char *)(*(void *)(v3 + *v20) + v45);
            *(void *)(v3 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if (v47 < 0)
            {
              v41 += 7;
              BOOL v28 = v42++ >= 9;
              if (!v28) {
                continue;
              }
            }
            goto LABEL_60;
          }
          *(unsigned char *)(v3 + *v40) = 1;
LABEL_60:
          PBRepeatedInt32Add();
        }
        PBReaderRecallMark();
      }
      else
      {
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v52 = 0;
        while (1)
        {
          uint64_t v53 = *v17;
          uint64_t v54 = *(void *)(v3 + v53);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(v3 + *v6)) {
            break;
          }
          char v56 = *(unsigned char *)(*(void *)(v3 + *v20) + v54);
          *(void *)(v3 + v53) = v55;
          v52 |= (unint64_t)(v56 & 0x7F) << v50;
          if (v56 < 0)
          {
            v50 += 7;
            BOOL v28 = v51++ >= 9;
            if (!v28) {
              continue;
            }
          }
          goto LABEL_76;
        }
        *(unsigned char *)(v3 + *v18) = 1;
LABEL_76:
        PBRepeatedInt32Add();
      }
      goto LABEL_77;
    }
LABEL_63:
    char v49 = PBReaderSkipValueWithTag();
    int v18 = (int *)MEMORY[0x1E4F940C8];
    if ((v49 & 1) == 0)
    {
LABEL_99:
      char v58 = 0;
      goto LABEL_85;
    }
LABEL_78:
    if (v8) {
      int v57 = 1;
    }
    else {
      int v57 = v16;
    }
    if (v57 != 1 || *(void *)(v3 + *v17) >= *(void *)(v3 + *v6)) {
      goto LABEL_83;
    }
  }
  if (v32 != 1)
  {
    int v48 = PBReaderSkipValueWithTag();
    int v18 = (int *)MEMORY[0x1E4F940C8];
    if (!v48) {
      goto LABEL_99;
    }
    goto LABEL_78;
  }
  if (!v33) {
    goto LABEL_63;
  }
  if ((*(unsigned char *)(a1 + 60) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_100:
      char v58 = 0;
      goto LABEL_102;
    }
    v8 += *(unsigned __int8 *)(a1 + 60) << 30 >> 31;
    goto LABEL_77;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_100;
  }
  BOOL v64 = v16;
  uint64_t v38 = objc_alloc_init(GEOPlaceResult);
  if (GEOPlaceResultReadAllFrom((uint64_t)v38, (void *)v3, v9 & 1))
  {
    PBReaderRecallMark();
    uint64_t v39 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v38;

    --v8;
    BOOL v16 = v64;
LABEL_77:
    int v18 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_78;
  }

  char v58 = 0;
  BOOL v16 = v64;
LABEL_102:
  int v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_85:
  *(unsigned char *)(a1 + 60) |= 2u;
  *(unsigned char *)(a1 + 60) |= 1u;
  if (v58)
  {
LABEL_96:
    unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
    if (v16) {
      goto LABEL_97;
    }
    return v3;
  }
  unint64_t v3 = 0;
  if (!v16) {
    return v3;
  }
LABEL_97:
  char v62 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  return v3;
}

void sub_189E84F70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClusterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOClusterReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOClusterReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOClusterReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOClusterReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 40) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189E85118(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E852E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E85438(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVoltaireTileKeyMake(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (a6 <= 0x19 && ((1 << a6) & 0x200101C) != 0) {
    unint64_t v6 = 128;
  }
  else {
    unint64_t v6 = (unint64_t)(a6 == 26) << 7;
  }
  *(void *)((char *)&v8 + 1) = (a1 << 46) | ((unint64_t)(a3 & 0x3F) << 40);
  LOBYTE(v8) = 2;
  return v8 & 0xFFFFFFFFFFFFFF7FLL | v6;
}

GEOTileKeyList *_GEOTileKeysForCoordinate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), double a6, double a7, double a8)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  double v13 = GEOMapRectMakeWithRadialDistance(a6, a7, a8);
  double v17 = (double)(1 << a1) * 0.0000000037252903;
  uint64_t v18 = llround(floor(v17 * v13));
  if (v18 >= 4294967294) {
    uint64_t v18 = 4294967294;
  }
  uint64_t v19 = v18 & ~(v18 >> 63);
  uint64_t v20 = llround(floor(v17 * v14));
  if (v20 >= 4294967294) {
    uint64_t v20 = 4294967294;
  }
  uint64_t v21 = v20 & ~(v20 >> 63);
  uint64_t v22 = llround(floor(v17 * (v13 + v15)));
  if (v22 >= 4294967294) {
    uint64_t v22 = 4294967294;
  }
  unsigned int v23 = v22 & ~(v22 >> 63);
  uint64_t v24 = llround(floor(v17 * (v14 + v16)));
  if (v24 >= 4294967294) {
    uint64_t v24 = 4294967294;
  }
  unsigned int v33 = v24 & ~(v24 >> 63);
  if (v23 - v19 > 0x13880 || v33 - v21 > 0x13880)
  {
    unint64_t v26 = GEOGetGEOMapFeatureAccessLog();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v23 - v19;
      LOWORD(v35) = 1024;
      *(_DWORD *)((char *)&v35 + 2) = v33 - v21;
      _os_log_impl(&dword_188D96000, v26, OS_LOG_TYPE_ERROR, "GEOMapRect is too large: [width: %u, height: %u]", buf, 0xEu);
    }

    char v27 = 0;
  }
  else
  {
    BOOL v28 = objc_alloc_init(GEOTileKeyList);
    char v27 = v28;
    if (v23 >= v19)
    {
      do
      {
        uint64_t v29 = v21;
        if (v33 >= v21)
        {
          do
          {
            *(void *)buf = 0;
            uint64_t v35 = 0;
            *(void *)buf = a5(v19, v29, a1, a3, a4, a2);
            uint64_t v35 = v30;
            [(GEOTileKeyList *)v27 addKey:buf];
            uint64_t v29 = (v29 + 1);
          }
          while (v33 + 1 != v29);
        }
        BOOL v31 = v19 == v23;
        uint64_t v19 = (v19 + 1);
      }
      while (!v31);
    }
  }

  return v27;
}

uint64_t _GEOQuadIDTileKeyMakeWrapper(gloria::MortonUtils *this, unsigned int a2, unsigned int a3)
{
  if (a3 >= 0x100)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v6 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: z <= UINT8_MAX", v6, 2u);
    }
    LOBYTE(a3) = -1;
  }
  return GEOGloriaQuadIDTileKeyMake(this, a2, a3);
}

void sub_189E87778(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

GEOTileKeyList *GEOTileKeysForCoordinate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  return _GEOTileKeysForCoordinate(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))GEOVoltaireTileKeyMake, a5, a6, a7);
}

long double GEOComposedRouteSectionPadAndSquareBounds(double *a1)
{
  double v2 = a1[4];
  double v3 = a1[5];
  double v4 = a1[3];
  double v5 = v4 * 0.5 + *a1;
  double v6 = v2 * 0.5 + a1[1];
  double v7 = v3 * 0.5 + a1[2];
  double v8 = fmax(v4, v2);
  long double v9 = exp((v6 * 0.0078125 + -1048576.0) / 333772.107);
  long double v10 = atan(v9);
  long double result = v8 + GEOMapPointsPerMeterAtLatitude((v10 * -2.0 + 1.57079633) * 57.2957795) * 16.0;
  *a1 = v5 - result * 0.5;
  a1[1] = v6 - result * 0.5;
  a1[2] = v7 - (v3 + 16.0) * 0.5;
  a1[3] = result;
  a1[4] = result;
  a1[5] = v3 + 16.0;
  return result;
}

void sub_189E885A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E8884C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E88A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL GEOMapBoxEqualToBox(double *a1, double *a2)
{
  uint64_t v2 = 0;
  if (vabdd_f64(*a1, *a2) < 0.00000001 && vabdd_f64(a1[2], a2[2]) < 0.00000001) {
    return vabdd_f64(a1[3], a2[3]) < 0.00000001
  }
        && vabdd_f64(a1[4], a2[4]) < 0.00000001
        && vabdd_f64(a1[5], a2[5]) < 0.00000001;
  return v2;
}

void sub_189E88ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E890C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E893B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_189E89580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E89968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_189E89A20()
{
  JUMPOUT(0x189E89A00);
}

void sub_189E89ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E89B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E89DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float geo::_colorWithHexString<float,4,(geo::ColorSpace)2>(uint64_t a1, char *__s)
{
  switch(strlen(__s))
  {
    case 3uLL:
      int v5 = *__s;
      unsigned int v6 = v5 - 48;
      unsigned int v7 = v5 - 97;
      if ((v5 - 65) >= 6) {
        char v8 = 0;
      }
      else {
        char v8 = v5 - 55;
      }
      char v9 = v5 - 87;
      if (v7 > 5) {
        char v9 = v8;
      }
      if (v6 < 0xA) {
        char v9 = v6;
      }
      unsigned __int8 v10 = 16 * v9;
      int v11 = __s[1];
      unsigned int v12 = v11 - 48;
      unsigned int v13 = v11 - 97;
      if ((v11 - 65) >= 6) {
        char v14 = 0;
      }
      else {
        char v14 = v11 - 55;
      }
      char v15 = v11 - 87;
      if (v13 > 5) {
        char v15 = v14;
      }
      if (v12 < 0xA) {
        char v15 = v12;
      }
      unsigned __int8 v16 = 16 * v15;
      int v17 = __s[2];
      unsigned int v18 = v17 - 48;
      unsigned int v19 = v17 - 97;
      if ((v17 - 65) >= 6) {
        char v20 = 0;
      }
      else {
        char v20 = v17 - 55;
      }
      char v21 = v17 - 87;
      if (v19 > 5) {
        char v21 = v20;
      }
      if (v18 < 0xA) {
        char v21 = v18;
      }
      unsigned __int8 v22 = 16 * v21;
      goto LABEL_97;
    case 4uLL:
      int v23 = *__s;
      unsigned int v24 = v23 - 48;
      unsigned int v25 = v23 - 97;
      if ((v23 - 65) >= 6) {
        char v26 = 0;
      }
      else {
        char v26 = v23 - 55;
      }
      char v27 = v23 - 87;
      if (v25 > 5) {
        char v27 = v26;
      }
      if (v24 < 0xA) {
        char v27 = v24;
      }
      unsigned __int8 v10 = 16 * v27;
      int v28 = __s[1];
      unsigned int v29 = v28 - 48;
      unsigned int v30 = v28 - 97;
      if ((v28 - 65) >= 6) {
        char v31 = 0;
      }
      else {
        char v31 = v28 - 55;
      }
      char v32 = v28 - 87;
      if (v30 > 5) {
        char v32 = v31;
      }
      if (v29 < 0xA) {
        char v32 = v29;
      }
      unsigned __int8 v16 = 16 * v32;
      int v33 = __s[2];
      unsigned int v34 = v33 - 48;
      unsigned int v35 = v33 - 97;
      if ((v33 - 65) >= 6) {
        char v36 = 0;
      }
      else {
        char v36 = v33 - 55;
      }
      char v37 = v33 - 87;
      if (v35 > 5) {
        char v37 = v36;
      }
      if (v34 < 0xA) {
        char v37 = v34;
      }
      unsigned __int8 v22 = 16 * v37;
      int v38 = __s[3];
      unsigned int v39 = v38 - 48;
      unsigned int v40 = v38 - 97;
      if ((v38 - 65) >= 6) {
        char v41 = 0;
      }
      else {
        char v41 = v38 - 55;
      }
      char v42 = v38 - 87;
      if (v40 > 5) {
        char v42 = v41;
      }
      if (v39 < 0xA) {
        char v42 = v39;
      }
      unsigned __int8 v43 = 16 * v42;
      goto LABEL_155;
    case 6uLL:
      int v44 = *__s;
      unsigned int v45 = v44 - 48;
      unsigned int v46 = v44 - 97;
      if ((v44 - 65) >= 6) {
        char v47 = 0;
      }
      else {
        char v47 = v44 - 55;
      }
      char v48 = v44 - 87;
      if (v46 > 5) {
        char v48 = v47;
      }
      if (v45 < 0xA) {
        char v48 = v45;
      }
      char v49 = 16 * v48;
      int v50 = __s[1];
      unsigned int v51 = v50 - 48;
      unsigned int v52 = v50 - 97;
      if ((v50 - 65) >= 6) {
        char v53 = 0;
      }
      else {
        char v53 = v50 - 55;
      }
      char v54 = v50 - 87;
      if (v52 > 5) {
        char v54 = v53;
      }
      if (v51 < 0xA) {
        char v54 = v51;
      }
      unsigned __int8 v10 = v54 + v49;
      int v55 = __s[2];
      unsigned int v56 = v55 - 48;
      unsigned int v57 = v55 - 97;
      if ((v55 - 65) >= 6) {
        char v58 = 0;
      }
      else {
        char v58 = v55 - 55;
      }
      char v59 = v55 - 87;
      if (v57 > 5) {
        char v59 = v58;
      }
      if (v56 < 0xA) {
        char v59 = v56;
      }
      char v60 = 16 * v59;
      int v61 = __s[3];
      unsigned int v62 = v61 - 48;
      unsigned int v63 = v61 - 97;
      if ((v61 - 65) >= 6) {
        char v64 = 0;
      }
      else {
        char v64 = v61 - 55;
      }
      char v65 = v61 - 87;
      if (v63 > 5) {
        char v65 = v64;
      }
      if (v62 < 0xA) {
        char v65 = v62;
      }
      unsigned __int8 v16 = v65 + v60;
      int v66 = __s[4];
      unsigned int v67 = v66 - 48;
      unsigned int v68 = v66 - 97;
      if ((v66 - 65) >= 6) {
        char v69 = 0;
      }
      else {
        char v69 = v66 - 55;
      }
      char v70 = v66 - 87;
      if (v68 > 5) {
        char v70 = v69;
      }
      if (v67 < 0xA) {
        char v70 = v67;
      }
      char v71 = 16 * v70;
      int v72 = __s[5];
      unsigned int v73 = v72 - 48;
      unsigned int v74 = v72 - 97;
      if ((v72 - 65) >= 6) {
        char v75 = 0;
      }
      else {
        char v75 = v72 - 55;
      }
      char v76 = v72 - 87;
      if (v74 > 5) {
        char v76 = v75;
      }
      if (v73 < 0xA) {
        char v76 = v73;
      }
      unsigned __int8 v22 = v76 + v71;
LABEL_97:
      unsigned __int8 v43 = -1;
      goto LABEL_155;
    case 8uLL:
      int v77 = *__s;
      unsigned int v78 = v77 - 48;
      unsigned int v79 = v77 - 97;
      if ((v77 - 65) >= 6) {
        char v80 = 0;
      }
      else {
        char v80 = v77 - 55;
      }
      char v81 = v77 - 87;
      if (v79 > 5) {
        char v81 = v80;
      }
      if (v78 < 0xA) {
        char v81 = v78;
      }
      char v82 = 16 * v81;
      int v83 = __s[1];
      unsigned int v84 = v83 - 48;
      unsigned int v85 = v83 - 97;
      if ((v83 - 65) >= 6) {
        char v86 = 0;
      }
      else {
        char v86 = v83 - 55;
      }
      char v87 = v83 - 87;
      if (v85 > 5) {
        char v87 = v86;
      }
      if (v84 < 0xA) {
        char v87 = v84;
      }
      unsigned __int8 v10 = v87 + v82;
      int v88 = __s[2];
      unsigned int v89 = v88 - 48;
      unsigned int v90 = v88 - 97;
      if ((v88 - 65) >= 6) {
        char v91 = 0;
      }
      else {
        char v91 = v88 - 55;
      }
      char v92 = v88 - 87;
      if (v90 > 5) {
        char v92 = v91;
      }
      if (v89 < 0xA) {
        char v92 = v89;
      }
      char v93 = 16 * v92;
      int v94 = __s[3];
      unsigned int v95 = v94 - 48;
      unsigned int v96 = v94 - 97;
      if ((v94 - 65) >= 6) {
        char v97 = 0;
      }
      else {
        char v97 = v94 - 55;
      }
      char v98 = v94 - 87;
      if (v96 > 5) {
        char v98 = v97;
      }
      if (v95 < 0xA) {
        char v98 = v95;
      }
      unsigned __int8 v16 = v98 + v93;
      int v99 = __s[4];
      unsigned int v100 = v99 - 48;
      unsigned int v101 = v99 - 97;
      if ((v99 - 65) >= 6) {
        char v102 = 0;
      }
      else {
        char v102 = v99 - 55;
      }
      char v103 = v99 - 87;
      if (v101 > 5) {
        char v103 = v102;
      }
      if (v100 < 0xA) {
        char v103 = v100;
      }
      char v104 = 16 * v103;
      int v105 = __s[5];
      unsigned int v106 = v105 - 48;
      unsigned int v107 = v105 - 97;
      if ((v105 - 65) >= 6) {
        char v108 = 0;
      }
      else {
        char v108 = v105 - 55;
      }
      char v109 = v105 - 87;
      if (v107 > 5) {
        char v109 = v108;
      }
      if (v106 < 0xA) {
        char v109 = v106;
      }
      unsigned __int8 v22 = v109 + v104;
      int v110 = __s[6];
      unsigned int v111 = v110 - 48;
      unsigned int v112 = v110 - 97;
      if ((v110 - 65) >= 6) {
        char v113 = 0;
      }
      else {
        char v113 = v110 - 55;
      }
      char v114 = v110 - 87;
      if (v112 > 5) {
        char v114 = v113;
      }
      if (v111 < 0xA) {
        char v114 = v111;
      }
      char v115 = 16 * v114;
      int v116 = __s[7];
      unsigned int v117 = v116 - 48;
      unsigned int v118 = v116 - 97;
      if ((v116 - 65) >= 6) {
        char v119 = 0;
      }
      else {
        char v119 = v116 - 55;
      }
      char v120 = v116 - 87;
      if (v118 > 5) {
        char v120 = v119;
      }
      if (v117 < 0xA) {
        char v120 = v117;
      }
      unsigned __int8 v43 = v120 + v115;
LABEL_155:
      *(unsigned char *)a1 = 1;
      *(float *)(a1 + 4) = (float)v10 / 255.0;
      *(float *)(a1 + 8) = (float)v16 / 255.0;
      float result = (float)v43 / 255.0;
      *(float *)(a1 + 12) = (float)v22 / 255.0;
      *(float *)(a1 + 16) = result;
      break;
    default:
      *(unsigned char *)a1 = 0;
      break;
  }
  return result;
}

BOOL GEOActionComponentMapEntryReadAllFrom(uint64_t a1, void *a2)
{
  double v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    double v4 = (int *)MEMORY[0x1E4F940E8];
    int v5 = (int *)MEMORY[0x1E4F940E0];
    unsigned int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        int v17 = v10 & 7;
        if (v16 || v17 == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark()) {
              goto LABEL_61;
            }
            while (*(void *)&v3[*v4] < *(void *)&v3[*v5] && !v3[*v6])
            {
              char v26 = 0;
              unsigned int v27 = 0;
              uint64_t v28 = 0;
              while (1)
              {
                uint64_t v29 = *v4;
                uint64_t v30 = *(void *)&v3[v29];
                unint64_t v31 = v30 + 1;
                if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
                  break;
                }
                char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
                *(void *)&v3[v29] = v31;
                v28 |= (unint64_t)(v32 & 0x7F) << v26;
                if (v32 < 0)
                {
                  v26 += 7;
                  BOOL v15 = v27++ >= 9;
                  if (!v15) {
                    continue;
                  }
                }
                goto LABEL_40;
              }
              v3[*v6] = 1;
LABEL_40:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v35 = 0;
            unsigned int v36 = 0;
            uint64_t v37 = 0;
            while (1)
            {
              uint64_t v38 = *v4;
              uint64_t v39 = *(void *)&v3[v38];
              unint64_t v40 = v39 + 1;
              if (v39 == -1 || v40 > *(void *)&v3[*v5]) {
                break;
              }
              char v41 = *(unsigned char *)(*(void *)&v3[*v7] + v39);
              *(void *)&v3[v38] = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                BOOL v15 = v36++ >= 9;
                if (!v15) {
                  continue;
                }
              }
              goto LABEL_58;
            }
            v3[*v6] = 1;
LABEL_58:
            PBRepeatedInt32Add();
          }
        }
        else if ((v10 >> 3) == 1)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (1)
          {
            uint64_t v22 = *v4;
            uint64_t v23 = *(void *)&v3[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&v3[*v5]) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
            *(void *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0) {
              goto LABEL_46;
            }
            v19 += 7;
            BOOL v15 = v20++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_48;
            }
          }
          v3[*v6] = 1;
LABEL_46:
          if (v3[*v6]) {
            LODWORD(v21) = 0;
          }
LABEL_48:
          *(_DWORD *)(a1 + 40) = v21;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v33 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v34 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v33;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_61;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    BOOL v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_189E8B844(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E8BC24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E8C95C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAttributionAppReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOAttributionAppReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E8C9C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOAttributionAppIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  double v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    unsigned int v6 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v7 = 0;
      unsigned int v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *v2;
        uint64_t v11 = *(void *)&a1[v10];
        unint64_t v12 = v11 + 1;
        if (v11 == -1 || v12 > *(void *)&a1[*v3]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&a1[*v6] + v11);
        *(void *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v7 += 7;
        if (v8++ >= 9)
        {
          unint64_t v9 = 0;
          int v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v15 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v9 = 0;
      }
LABEL_14:
      int v16 = v9 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v9 >> 3))
      {
        case 1u:
          uint64_t v18 = 0;
          if (!v5 && v16 == 2)
          {
            int v5 = 1;
            goto LABEL_23;
          }
          goto LABEL_59;
        case 2u:
          if (v16 != 2) {
            goto LABEL_60;
          }
          goto LABEL_23;
        case 3u:
          if ((v9 & 7) != 0) {
            goto LABEL_60;
          }
          unsigned int v19 = 0;
          while (1)
          {
            uint64_t v20 = *v2;
            uint64_t v21 = *(void *)&a1[v20];
            unint64_t v22 = v21 + 1;
            if (v21 == -1 || v22 > *(void *)&a1[*v3]) {
              goto LABEL_49;
            }
            int v23 = *(char *)(*(void *)&a1[*v6] + v21);
            *(void *)&a1[v20] = v22;
            if (v23 < 0)
            {
              BOOL v24 = v19++ > 8;
              if (!v24) {
                continue;
              }
            }
            goto LABEL_50;
          }
        case 4u:
          if ((v9 & 7) != 0) {
            goto LABEL_60;
          }
          unsigned int v25 = 0;
          while (1)
          {
            uint64_t v26 = *v2;
            uint64_t v27 = *(void *)&a1[v26];
            unint64_t v28 = v27 + 1;
            if (v27 == -1 || v28 > *(void *)&a1[*v3]) {
              goto LABEL_49;
            }
            int v29 = *(char *)(*(void *)&a1[*v6] + v27);
            *(void *)&a1[v26] = v28;
            if (v29 < 0)
            {
              BOOL v24 = v25++ > 8;
              if (!v24) {
                continue;
              }
            }
            goto LABEL_50;
          }
        case 5u:
          if ((v9 & 7) != 0) {
            goto LABEL_60;
          }
          unsigned int v30 = 0;
          break;
        default:
LABEL_23:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_60:
          uint64_t v18 = 0;
          goto LABEL_59;
      }
      while (1)
      {
        uint64_t v31 = *v2;
        uint64_t v32 = *(void *)&a1[v31];
        unint64_t v33 = v32 + 1;
        if (v32 == -1 || v33 > *(void *)&a1[*v3]) {
          break;
        }
        int v34 = *(char *)(*(void *)&a1[*v6] + v32);
        *(void *)&a1[v31] = v33;
        if (v34 < 0)
        {
          BOOL v24 = v30++ > 8;
          if (!v24) {
            continue;
          }
        }
        goto LABEL_50;
      }
LABEL_49:
      a1[*v4] = 1;
LABEL_50:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  if (a1[*v4]) {
    BOOL v35 = 1;
  }
  else {
    BOOL v35 = v5 == 0;
  }
  uint64_t v18 = !v35;
LABEL_59:
  PBReaderRecallMark();
  return v18;
}

void sub_189E8CF6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAttributionAppIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v2 = (*(unsigned char *)(a1 + 60) & 0x70) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189E8D444(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E8D8D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOComponentActionReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    double v4 = (int *)MEMORY[0x1E4F940E8];
    int v5 = (int *)MEMORY[0x1E4F940E0];
    unsigned int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      char v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        int v17 = v10 & 7;
        if (v16 || v17 == 4) {
          break;
        }
        unint64_t v19 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 48) |= 2u;
          while (1)
          {
            uint64_t v30 = *v4;
            uint64_t v31 = *(void *)&v3[v30];
            unint64_t v32 = v31 + 1;
            if (v31 == -1 || v32 > *(void *)&v3[*v5]) {
              break;
            }
            char v33 = *(unsigned char *)(*(void *)&v3[*v7] + v31);
            *(void *)&v3[v30] = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if ((v33 & 0x80) == 0) {
              goto LABEL_58;
            }
            v27 += 7;
            BOOL v15 = v28++ >= 9;
            if (v15)
            {
              uint64_t v29 = 0;
              goto LABEL_60;
            }
          }
          v3[*v6] = 1;
LABEL_58:
          if (v3[*v6]) {
            uint64_t v29 = 0;
          }
LABEL_60:
          *(unsigned char *)(a1 + 44) = v29 != 0;
        }
        else if (v19 == 2)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark()) {
              goto LABEL_73;
            }
            while (*(void *)&v3[*v4] < *(void *)&v3[*v5] && !v3[*v6])
            {
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v36 = 0;
              while (1)
              {
                uint64_t v37 = *v4;
                uint64_t v38 = *(void *)&v3[v37];
                unint64_t v39 = v38 + 1;
                if (v38 == -1 || v39 > *(void *)&v3[*v5]) {
                  break;
                }
                char v40 = *(unsigned char *)(*(void *)&v3[*v7] + v38);
                *(void *)&v3[v37] = v39;
                v36 |= (unint64_t)(v40 & 0x7F) << v34;
                if (v40 < 0)
                {
                  v34 += 7;
                  BOOL v15 = v35++ >= 9;
                  if (!v15) {
                    continue;
                  }
                }
                goto LABEL_48;
              }
              v3[*v6] = 1;
LABEL_48:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v43 = 0;
            unsigned int v44 = 0;
            uint64_t v45 = 0;
            while (1)
            {
              uint64_t v46 = *v4;
              uint64_t v47 = *(void *)&v3[v46];
              unint64_t v48 = v47 + 1;
              if (v47 == -1 || v48 > *(void *)&v3[*v5]) {
                break;
              }
              char v49 = *(unsigned char *)(*(void *)&v3[*v7] + v47);
              *(void *)&v3[v46] = v48;
              v45 |= (unint64_t)(v49 & 0x7F) << v43;
              if (v49 < 0)
              {
                v43 += 7;
                BOOL v15 = v44++ >= 9;
                if (!v15) {
                  continue;
                }
              }
              goto LABEL_70;
            }
            v3[*v6] = 1;
LABEL_70:
            PBRepeatedInt32Add();
          }
        }
        else if (v19 == 1)
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 48) |= 1u;
          while (1)
          {
            uint64_t v23 = *v4;
            uint64_t v24 = *(void *)&v3[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&v3[*v5]) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)&v3[*v7] + v24);
            *(void *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0) {
              goto LABEL_54;
            }
            v20 += 7;
            BOOL v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_56;
            }
          }
          v3[*v6] = 1;
LABEL_54:
          if (v3[*v6]) {
            LODWORD(v22) = 0;
          }
LABEL_56:
          *(_DWORD *)(a1 + 40) = v22;
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            BOOL v42 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v41;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_73;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v50 = v3[*v6] == 0;
  }
  else
  {
LABEL_73:
    BOOL v50 = 0;
  }
  objc_sync_exit(v3);

  return v50;
}

void sub_189E8E414(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E8EBC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E8EFB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E8F3A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedPublisherAttributionReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOLocalizedPublisherAttributionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E902F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedPublisherAttributionIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  double v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2) {
            goto LABEL_74;
          }
          goto LABEL_52;
        case 2u:
          if (v15 == 2) {
            goto LABEL_52;
          }
          goto LABEL_74;
        case 3u:
          if (v15 == 2) {
            goto LABEL_52;
          }
          goto LABEL_74;
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_74;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_70;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_71;
          }
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_74;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_70;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_71;
          }
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_74;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_70;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v22 = v28++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_71;
          }
        case 7u:
          if (v15 == 2) {
            goto LABEL_52;
          }
          goto LABEL_74;
        case 8u:
          if (v15 == 2) {
            goto LABEL_52;
          }
          goto LABEL_74;
        case 9u:
          if ((v8 & 7) != 0) {
            goto LABEL_74;
          }
          unsigned int v33 = 0;
          while (1)
          {
            uint64_t v34 = *v2;
            uint64_t v35 = *(void *)&a1[v34];
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
              goto LABEL_70;
            }
            int v37 = *(char *)(*(void *)&a1[*v5] + v35);
            *(void *)&a1[v34] = v36;
            if (v37 < 0)
            {
              BOOL v22 = v33++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_71;
          }
        case 0xAu:
          if ((v8 & 7) != 0) {
            goto LABEL_74;
          }
          unsigned int v38 = 0;
          break;
        default:
LABEL_52:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_74:
          BOOL v43 = 0;
          goto LABEL_73;
      }
      while (1)
      {
        uint64_t v39 = *v2;
        uint64_t v40 = *(void *)&a1[v39];
        unint64_t v41 = v40 + 1;
        if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
          break;
        }
        int v42 = *(char *)(*(void *)&a1[*v5] + v40);
        *(void *)&a1[v39] = v41;
        if (v42 < 0)
        {
          BOOL v22 = v38++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_71;
      }
LABEL_70:
      a1[*v4] = 1;
LABEL_71:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v43 = a1[*v4] == 0;
LABEL_73:
  PBReaderRecallMark();
  return v43;
}

void sub_189E9098C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedPublisherAttributionIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  BOOL v2 = (*(_WORD *)(a1 + 96) & 0xFC0) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v2;
}

void sub_189E91024(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E91BF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPublisherAttributionSourceCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5++), "readAll:", 1, (void)v6);
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

unint64_t GEOPublisherAttributionSourceReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOPublisherAttributionSourceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189E91D4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPublisherAttributionSourceIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_30;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_30;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 5) {
        break;
      }
      if (v17 == 4)
      {
        if (v15 != 2) {
          goto LABEL_31;
        }
LABEL_28:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }
      if (v17 != 3) {
        goto LABEL_28;
      }
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedPublisherAttributionIsValid(a1))
      {
LABEL_31:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_29:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_30;
      }
    }
    if (v15 != 2) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }
LABEL_30:
  BOOL v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_189E921B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPublisherAttributionSourceIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  BOOL v2 = (*(unsigned char *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_189E925C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E92910(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E9327C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E93654(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E93AB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E93E08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E941C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E942D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E94CF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOSearchAttributionSourceCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v2 = a1[11];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v25;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v25 != v5) {
          objc_enumerationMutation(v2);
        }
        -[GEOLocalizedAttribution readAll:](*(void *)(*((void *)&v24 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v24 objects:v30 count:16];
    }
    while (v4);
  }

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v7 = a1[10];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v29 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v21;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v20 + 1) + 8 * v11++) readAll:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v20 objects:v29 count:16];
    }
    while (v9);
  }

  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v12 = a1[13];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v16 objects:v28 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v17;
    while (1)
    {
      if (*(void *)v17 != v15) {
        objc_enumerationMutation(v12);
      }
      if (!--v14)
      {
        uint64_t v14 = [v12 countByEnumeratingWithState:&v16 objects:v28 count:16];
        if (!v14) {
          break;
        }
      }
    }
  }
}

void sub_189E95530(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E95AF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E96040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E96118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E963C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id pointsToCoordinates(void *a1, void *a2, double a3, double a4)
{
  id v7 = a1;
  uint64_t v8 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2)];
  uint64_t v9 = (_DWORD *)*a2;
  uint64_t v10 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v10)
  {
    do
    {
      uint64_t v11 = objc_alloc_init(GEOLatLng);
      [v7 westLng];
      LODWORD(v12) = *v9;
      [(GEOLatLng *)v11 setLng:v13 + (double)v12 * a4];
      [v7 southLat];
      LODWORD(v14) = v9[1];
      [(GEOLatLng *)v11 setLat:v15 + (double)v14 * a3];
      [v8 addObject:v11];

      v9 += 3;
    }
    while (v9 != v10);
  }

  return v8;
}

void sub_189E96534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E966BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_189E96894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E96918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189E96AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E96BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E96DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E96E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_189E96F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __GEOGetNetEventRecorderLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "NetEventRecorder");
  id v1 = (void *)qword_1EB29FE68;
  qword_1EB29FE68 = (uint64_t)v0;
}

void __GEOGetGEODaemonLog_block_invoke_0()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "GEODaemon");
  id v1 = (void *)qword_1EB29FE88;
  qword_1EB29FE88 = (uint64_t)v0;
}

BOOL GEOPDRapFilterReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      int v8 = v3[*v6];
      if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
        break;
      }
      if (v3[*v6])
      {
        int v8 = 1;
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        unint64_t v13 = *(void *)&v3[v12];
        if (v13 == -1 || v13 >= *(void *)&v3[*v5]) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v13);
        *(void *)&v3[v12] = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0) {
          goto LABEL_13;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          char v16 = 0;
          int v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      int v8 = v3[*v6];
      if (v3[*v6]) {
        char v16 = 0;
      }
      else {
        char v16 = v11;
      }
LABEL_16:
      if (v8) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = (v16 & 7) == 4;
      }
      if (v17) {
        break;
      }
      if (!*(void *)(a1 + 8))
      {
        id v18 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        long long v19 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v18;
      }
      if ((PBUnknownFieldAdd() & 1) == 0) {
        goto LABEL_23;
      }
    }
    BOOL v20 = v8 == 0;
  }
  else
  {
LABEL_23:
    BOOL v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_189E98CEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189E98F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E98F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)GEOPathMatcher;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_189E99314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_189E998B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E99A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_189E9A0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_189E9A290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E9AA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_189E9AE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E9CC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void *maps::path_codec::RoadNetworkPath<GEOPathMatcherRoadKey>::~RoadNetworkPath(void *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>>>::~__hash_table((uint64_t)(a1 + 11));
  id v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_189E9D108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E9D618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189E9DA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_189E9FFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a71);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x2B8]);
  maps::path_codec::RoadProperties::~RoadProperties((void **)&STACK[0x218]);
  STACK[0x2B8] = (unint64_t)&a62;
  std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B8]);
  maps::path_codec::Logger::deregister_logger(v72);
  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg((maps::path_codec::geo3::RoutingPathLeg *)&a53);

  _Unwind_Resume(a1);
}

void sub_189EA069C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_189EA0858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189EA0984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_189EA0A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL23GEOGetGEOPathMatcherLogv_block_invoke_2()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "GEOPathMatcher");
  id v1 = (void *)_MergedGlobals_267;
  _MergedGlobals_267 = (uint64_t)v0;
}

void GEOPathCodecLogger::~GEOPathCodecLogger(GEOPathCodecLogger *this)
{
}

void GEOPathCodecLogger::log_trace(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = GEOGetPathCodecLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    int v5 = 136315138;
    uint64_t v6 = v4;
    _os_log_impl(&dword_188D96000, v3, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v5, 0xCu);
  }
}

void maps::path_codec::AbstractLogger::log_trace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_189EA0D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GEOPathCodecLogger::log_debug(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = GEOGetPathCodecLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    int v5 = 136315138;
    char v6 = v4;
    _os_log_impl(&dword_188D96000, v3, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v5, 0xCu);
  }
}

void maps::path_codec::AbstractLogger::log_debug(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_189EA0E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GEOPathCodecLogger::log_info(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = GEOGetPathCodecLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    int v5 = 136315138;
    char v6 = v4;
    _os_log_impl(&dword_188D96000, v3, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v5, 0xCu);
  }
}

void maps::path_codec::AbstractLogger::log_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_189EA0FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GEOPathCodecLogger::log_warning(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = GEOGetPathCodecLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    int v5 = 136315138;
    char v6 = v4;
    _os_log_impl(&dword_188D96000, v3, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v5, 0xCu);
  }
}

void maps::path_codec::AbstractLogger::log_warning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 64))(a1, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_189EA10EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GEOPathCodecLogger::log_error(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = GEOGetPathCodecLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    int v5 = 136315138;
    char v6 = v4;
    _os_log_impl(&dword_188D96000, v3, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v5, 0xCu);
  }
}

void maps::path_codec::AbstractLogger::log_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 80))(a1, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_189EA1228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id GEOGetPathCodecLog(void)
{
  if (qword_1EB29FEB0 != -1) {
    dispatch_once(&qword_1EB29FEB0, &__block_literal_global_231);
  }
  os_log_t v0 = (void *)qword_1EB29FEA8;

  return v0;
}

void ___ZL18GEOGetPathCodecLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "PathCodec");
  id v1 = (void *)qword_1EB29FEA8;
  qword_1EB29FEA8 = (uint64_t)v0;
}

uint64_t maps::path_codec::AbstractLogger::prepend_message_with_location_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
  unsigned int v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" | ", 3);
  int v12 = *(char *)(a4 + 23);
  if (v12 >= 0) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = *(void *)a4;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a4 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v16[1] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18C11F4F0](&v18);
}

void sub_189EA1478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::decode_multi_segment_path(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t *)a2;
  uint64_t v151 = a2 + 8;
  if (*(unsigned char *)(a2 + 121))
  {
    unint64_t v5 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3);
    if (v5 <= 1)
    {
      uint64_t v163 = 0;
      uint64_t v164 = 0;
      uint64_t v165 = 0;
LABEL_302:
      maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::build_path(a1, v4, (uint64_t)&v163, (maps::path_codec **)v3);
      *(void *)&long long v212 = &v163;
      goto LABEL_339;
    }
    uint64_t v149 = a1;
    uint64_t v162 = *(void **)a2;
    std::vector<std::vector<GEOPathMatcherRoadKey>>::vector(&v168, v5 - 1);
    uint64_t v37 = v169;
    if (v169 == v168)
    {
      uint64_t v110 = v169;
LABEL_291:
      uint64_t v163 = v110;
      uint64_t v164 = v37;
      uint64_t v165 = v170;
      unint64_t v139 = &v168;
LABEL_301:
      *unint64_t v139 = 0;
      v139[1] = 0;
      v139[2] = 0;
      *(void *)&long long v212 = &v168;
      std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
      uint64_t v4 = (uint64_t *)a2;
      a1 = v149;
      goto LABEL_302;
    }
    uint64_t v38 = 0;
    uint64_t v152 = *MEMORY[0x1E4FBA418];
    uint64_t v153 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    while (1)
    {
      uint64_t v209 = v38;
      unint64_t v219 = v162;
      int v220 = v162;
      maps::path_codec::KHeap<unsigned int,2u,std::less<unsigned int>>::KHeap((uint64_t)&__p, 100);
      long long v225 = 0u;
      long long v226 = 0u;
      int v227 = 1065353216;
      unint64_t v229 = 0;
      uint64_t v230 = 0;
      uint64_t v228 = 0;
      uint64_t v231 = v151;
      maps::path_codec::CostFunction::get_default_cost_function((uint64_t)&v207);
      int v206 = 200000;
      uint64_t v39 = (maps::path_codec *)*v3;
      uint64_t v40 = *v3 + 72 * v38;
      int v41 = *(_DWORD *)(v40 + 8);
      *(void *)&long long v202 = *(void *)v40;
      DWORD2(v202) = v41;
      memset(__dst, 0, sizeof(__dst));
      std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__init_with_size[abi:ne180100]<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*>(__dst, *(const void **)(v40 + 16), *(void *)(v40 + 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v40 + 24) - *(void *)(v40 + 16)) >> 3));
      int v42 = (char *)v39 + 72 * v38;
      long long v43 = *(_OWORD *)(v42 + 40);
      long long v44 = *(_OWORD *)(v42 + 56);
      long long v204 = v43;
      long long v205 = v44;
      uint64_t v45 = v209;
      if (v209)
      {
        uint64_t v46 = __dst[0];
        uint64_t v47 = __dst[1];
        if (__dst[0] != __dst[1])
        {
          uint64_t v48 = v168 + 24 * v209;
          uint64_t v50 = *(void *)(v48 - 16);
          char v49 = (void *)(v48 - 16);
          unsigned int v51 = (void *)(v50 - 32);
          unsigned int v52 = (void *)(v50 - 24);
          while (1)
          {
            uint64_t v53 = *v46;
            if (*v46) {
              char v54 = v51;
            }
            else {
              char v54 = v52;
            }
            if (!*v46) {
              uint64_t v53 = v46[1];
            }
            if (v53 != *v54) {
              break;
            }
            v46 += 7;
            if (v46 == __dst[1]) {
              goto LABEL_69;
            }
          }
          if (v46 != __dst[1])
          {
            int v55 = v46 + 7;
            if (v46 + 7 != __dst[1])
            {
              do
              {
                unsigned int v56 = (void *)(*v49 - 24);
                if (*v55)
                {
                  unsigned int v56 = (void *)(*v49 - 32);
                  uint64_t v57 = *v55;
                }
                else
                {
                  uint64_t v57 = v55[1];
                }
                if (v57 == *v56)
                {
                  long long v43 = *(_OWORD *)v55;
                  long long v58 = *((_OWORD *)v55 + 1);
                  long long v59 = *((_OWORD *)v55 + 2);
                  *((_DWORD *)v46 + 12) = *((_DWORD *)v55 + 12);
                  *((_OWORD *)v46 + 1) = v58;
                  *((_OWORD *)v46 + 2) = v59;
                  *(_OWORD *)uint64_t v46 = v43;
                  v46 += 7;
                }
                v55 += 7;
              }
              while (v55 != v47);
              uint64_t v47 = __dst[1];
            }
            if (v47 != v46) {
              __dst[1] = v46;
            }
          }
        }
      }
LABEL_69:
      uint64_t v60 = v45 + 1;
      int v61 = (maps::path_codec *)*v3;
      unsigned int v62 = (const maps::path_codec::Coordinate *)(*v3 + 72 * (v45 + 1));
      BOOL v63 = v202 == -1 && DWORD1(v202) == -1;
      uint64_t v150 = v38;
      if (v63 || (*(_DWORD *)v62 == -1 ? (BOOL v64 = *((_DWORD *)v62 + 1) == -1) : (BOOL v64 = 0), v64))
      {
        int v68 = 0x7FFFFFFF;
      }
      else
      {
        maps::path_codec::great_circle_distance_in_m((maps::path_codec *)&v202, v62, (const maps::path_codec::Coordinate *)1, *(double *)&v43);
        double v66 = v65 * 100.0;
        BOOL v67 = v66 >= -2147483650.0 && v66 < 2147483650.0;
        int v68 = llround(v66);
        if (!v67) {
          int v68 = 0x7FFFFFFF;
        }
      }
      v166[0] = 0;
      v166[1] = 0;
      uint64_t v167 = 0;
      char v69 = (char *)v61 + 72 * v60;
      char v70 = (long long *)*((void *)v69 + 2);
      unint64_t v159 = (const void **)(v69 + 16);
      double v71 = *((double *)v70 + 5);
      v201[0] = (uint64_t)v162;
      v201[1] = (uint64_t)&v209;
      int v160 = (uint64_t *)(v69 + 24);
      uint64_t v158 = (long long *)*((void *)v69 + 3);
      if (v70 != v158) {
        break;
      }
LABEL_231:
      if (maps::path_codec::Logger::m_log_level <= 1u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
        std::string::basic_string[abi:ne180100]<0>(&__src, "Final choice");
        unsigned int v191 = 0;
        uint64_t v192 = 0;
        uint64_t v193 = 0;
        std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v191, v166[0], (uint64_t)v166[1], ((char *)v166[1] - (char *)v166[0]) >> 5);
        maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v194, v201, (uint64_t)&__src, (uint64_t *)&v191);
        if (SHIBYTE(v196) >= 0) {
          int v105 = &v194;
        }
        else {
          int v105 = v194;
        }
        if (SHIBYTE(v196) >= 0) {
          uint64_t v106 = HIBYTE(v196);
        }
        else {
          uint64_t v106 = (uint64_t)v195;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)v105, v106);
        if (SHIBYTE(v196) < 0) {
          operator delete(v194);
        }
        if (v191)
        {
          uint64_t v192 = v191;
          operator delete(v191);
        }
        if (SHIBYTE(v211) < 0) {
          operator delete((void *)__src);
        }
        std::string::basic_string[abi:ne180100]<0>(&v194, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_debug((uint64_t)&v194, 165, (uint64_t)&__src);
        if (SHIBYTE(v211) < 0) {
          operator delete((void *)__src);
        }
        if (SHIBYTE(v196) < 0) {
          operator delete(v194);
        }
        *(void *)&long long v212 = v152;
        *(void *)((char *)&v212 + *(void *)(v152 - 24)) = v153;
        *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
        if (v217 < 0) {
          operator delete(v216);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18C11F4F0](v218);
      }
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
      if ((void)v207)
      {
        *((void *)&v207 + 1) = v207;
        operator delete((void *)v207);
      }
      if (v228)
      {
        unint64_t v229 = v228;
        operator delete(v228);
      }
      std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&v225);
      if (v223)
      {
        int v224 = v223;
        operator delete(v223);
      }
      if (__p)
      {
        uint64_t v222 = __p;
        operator delete(__p);
      }
      uint64_t v107 = v168;
      uint64_t v108 = v168 + 24 * v150;
      char v109 = *(void **)v108;
      if (*(void *)v108)
      {
        *(void *)(v168 + 24 * v150 + 8) = v109;
        operator delete(v109);
        *(void *)uint64_t v108 = 0;
        *(void *)(v108 + 8) = 0;
        *(void *)(v108 + 16) = 0;
      }
      *(_OWORD *)uint64_t v108 = *(_OWORD *)v166;
      *(void *)(v107 + 24 * v150 + 16) = v167;
      uint64_t v110 = v168;
      if (*(void *)(v168 + 24 * v150) == *(void *)(v168 + 24 * v150 + 8))
      {
        if (maps::path_codec::Logger::m_log_level <= 3u)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)"Pathlet ", 8);
          int v140 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)" NOT FOUND. Aborting decoding", 29);
          std::string::basic_string[abi:ne180100]<0>(&v219, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
          std::stringbuf::str();
          maps::path_codec::Logger::log_warning((uint64_t)&v219, 193, (uint64_t)&v207);
          if (SBYTE7(v208) < 0) {
            operator delete((void *)v207);
          }
          if (SHIBYTE(__p) < 0) {
            operator delete(v219);
          }
          *(void *)&long long v212 = v152;
          *(void *)((char *)&v212 + *(void *)(v152 - 24)) = v153;
          *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
          if (v217 < 0) {
            operator delete(v216);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18C11F4F0](v218);
        }
        unint64_t v139 = &v163;
        goto LABEL_301;
      }
      uint64_t v38 = v150 + 1;
      uint64_t v37 = v169;
      if (v150 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v169 - v168) >> 3)) {
        goto LABEL_291;
      }
    }
    double v72 = v71 + 5.0;
    uint64_t v157 = (long long *)((char *)v61 + 72 * v60 + 40);
    int v155 = 10000000;
    signed int v156 = llround((double)v68 * 5.0);
    while (1)
    {
      if (*((double *)v70 + 5) > v72) {
        goto LABEL_231;
      }
      unsigned int v73 = *(void **)v62;
      LODWORD(v195) = *((_DWORD *)v62 + 2);
      unint64_t v194 = v73;
      uint64_t v197 = 0;
      uint64_t v198 = 0;
      unsigned int v196 = 0;
      std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__init_with_size[abi:ne180100]<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*>(&v196, *v159, *v160, 0x6DB6DB6DB6DB6DB7 * ((*v160 - (uint64_t)*v159) >> 3));
      long long v74 = v157[1];
      long long v199 = *v157;
      long long v200 = v74;
      long long v212 = *v70;
      long long v213 = v70[1];
      long long v214 = v70[2];
      LODWORD(v215) = *((_DWORD *)v70 + 12);
      char v75 = v196;
      if (v198 == v196)
      {
        if (v198)
        {
          uint64_t v197 = v198;
          operator delete(v198);
        }
        char v75 = operator new(0x38uLL);
        unsigned int v196 = v75;
        uint64_t v198 = (char *)v75 + 56;
      }
      *char v75 = v212;
      v75[1] = v213;
      v75[2] = v214;
      *((_DWORD *)v75 + 12) = v215;
      uint64_t v197 = (char *)v75 + 56;
      maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::run((uint64_t)&v219, (uint64_t)&v202, (uint64_t)&v194, (uint64_t)&v207, &v206, (uint64_t **)&__src);
      int v76 = maps::path_codec::estimate_pathlet_length<GEOPathMatcherRoadKey>((uint64_t)v162, (uint64_t *)&__src);
      if ((void)__src == *((void *)&__src + 1) || (int v77 = v76, v76 > v156))
      {
        if (maps::path_codec::Logger::m_log_level <= 1u)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
          std::string::basic_string[abi:ne180100]<0>(&v188, "**Skipping (empty or too long)");
          unsigned int v185 = 0;
          unsigned int v186 = 0;
          uint64_t v187 = 0;
          std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v185, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 5);
          maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v191, v201, (uint64_t)&v188, (uint64_t *)&v185);
          if (SHIBYTE(v193) >= 0) {
            char v80 = &v191;
          }
          else {
            char v80 = v191;
          }
          if (SHIBYTE(v193) >= 0) {
            uint64_t v81 = HIBYTE(v193);
          }
          else {
            uint64_t v81 = (uint64_t)v192;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)v80, v81);
          if (SHIBYTE(v193) < 0) {
            operator delete(v191);
          }
          if (v185)
          {
            unsigned int v186 = v185;
            operator delete(v185);
          }
          if ((char)v190 < 0) {
            operator delete(v188);
          }
          std::string::basic_string[abi:ne180100]<0>(&v191, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
          std::stringbuf::str();
          maps::path_codec::Logger::log_debug((uint64_t)&v191, 137, (uint64_t)&v188);
          goto LABEL_122;
        }
      }
      else
      {
        if (v76 <= v155)
        {
          if (v209 + 2 >= 0x8E38E38E38E38E39 * ((v3[1] - *v3) >> 3)) {
            goto LABEL_191;
          }
          char v82 = (const maps::path_codec::Coordinate *)(*v3 + 72 * (v209 + 2));
          maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::run((uint64_t)&v219, (uint64_t)&v194, (uint64_t)v82, (uint64_t)&v207, &v206, (uint64_t **)&v191);
          signed int v83 = maps::path_codec::estimate_pathlet_length<GEOPathMatcherRoadKey>((uint64_t)v162, (uint64_t *)&v191);
          if (v194 == (void *)-1 || *(_DWORD *)v82 == -1 && *((_DWORD *)v82 + 1) == -1)
          {
            int v85 = 0x7FFFFFFF;
          }
          else
          {
            maps::path_codec::great_circle_distance_in_m((maps::path_codec *)&v194, v82, (const maps::path_codec::Coordinate *)1, v84);
            double v87 = v86 * 100.0;
            BOOL v88 = v87 >= -2147483650.0 && v87 < 2147483650.0;
            int v85 = llround(v87);
            if (!v88) {
              int v85 = 0x7FFFFFFF;
            }
          }
          if (v191 == v192 || v83 > (int)llround((double)v85 * 5.0))
          {
            if (maps::path_codec::Logger::m_log_level <= 1u)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
              std::string::basic_string[abi:ne180100]<0>(v180, "**Skipping (NEXT pathlet empty or too long)");
              uint64_t v177 = 0;
              uint64_t v178 = 0;
              uint64_t v179 = 0;
              std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v177, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 5);
              maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v188, v201, (uint64_t)v180, (uint64_t *)&v177);
              if ((v190 & 0x80u) == 0) {
                unsigned int v89 = &v188;
              }
              else {
                unsigned int v89 = v188;
              }
              if ((v190 & 0x80u) == 0) {
                uint64_t v90 = v190;
              }
              else {
                uint64_t v90 = v189;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)v89, v90);
              if ((char)v190 < 0) {
                operator delete(v188);
              }
              if (v177)
              {
                uint64_t v178 = v177;
                operator delete(v177);
              }
              if (v181 < 0) {
                operator delete(v180[0]);
              }
              std::string::basic_string[abi:ne180100]<0>(&v188, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
              std::stringbuf::str();
              maps::path_codec::Logger::log_debug((uint64_t)&v188, 156, (uint64_t)v180);
              if (v181 < 0) {
                operator delete(v180[0]);
              }
              if ((char)v190 < 0) {
                operator delete(v188);
              }
              *(void *)&long long v212 = v152;
              *(void *)((char *)&v212 + *(void *)(v152 - 24)) = v153;
              *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
              if (v217 < 0) {
                operator delete(v216);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x18C11F4F0](v218);
              if (maps::path_codec::Logger::m_log_level <= 1u)
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
                std::string::basic_string[abi:ne180100]<0>(v180, "****  Next (which failed the test)");
                unint64_t v174 = 0;
                int v175 = 0;
                uint64_t v176 = 0;
                std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v174, v191, (uint64_t)v192, (v192 - (unsigned char *)v191) >> 5);
                maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v188, v201, (uint64_t)v180, (uint64_t *)&v174);
                if ((v190 & 0x80u) == 0) {
                  char v91 = &v188;
                }
                else {
                  char v91 = v188;
                }
                if ((v190 & 0x80u) == 0) {
                  uint64_t v92 = v190;
                }
                else {
                  uint64_t v92 = v189;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)v91, v92);
                if ((char)v190 < 0) {
                  operator delete(v188);
                }
                if (v174)
                {
                  int v175 = v174;
                  operator delete(v174);
                }
                if (v181 < 0) {
                  operator delete(v180[0]);
                }
                std::string::basic_string[abi:ne180100]<0>(&v188, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
                std::stringbuf::str();
                maps::path_codec::Logger::log_debug((uint64_t)&v188, 157, (uint64_t)v180);
                if (v181 < 0) {
                  operator delete(v180[0]);
                }
                if ((char)v190 < 0) {
                  operator delete(v188);
                }
                *(void *)&long long v212 = v152;
                *(void *)((char *)&v212 + *(void *)(v152 - 24)) = v153;
                *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
                if (v217 < 0) {
                  operator delete(v216);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                MEMORY[0x18C11F4F0](v218);
              }
            }
            char v93 = 0;
          }
          else
          {
            char v93 = 1;
          }
          if (v191)
          {
            uint64_t v192 = v191;
            operator delete(v191);
          }
          if (v93)
          {
LABEL_191:
            if (maps::path_codec::Logger::m_log_level <= 1u)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
              std::string::basic_string[abi:ne180100]<0>(&v188, "**Accepting tentatively");
              unsigned int v171 = 0;
              uint64_t v172 = 0;
              uint64_t v173 = 0;
              std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v171, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 5);
              maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v191, v201, (uint64_t)&v188, (uint64_t *)&v171);
              if (SHIBYTE(v193) >= 0) {
                int v94 = &v191;
              }
              else {
                int v94 = v191;
              }
              if (SHIBYTE(v193) >= 0) {
                uint64_t v95 = HIBYTE(v193);
              }
              else {
                uint64_t v95 = (uint64_t)v192;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)v94, v95);
              if (SHIBYTE(v193) < 0) {
                operator delete(v191);
              }
              if (v171)
              {
                uint64_t v172 = v171;
                operator delete(v171);
              }
              if ((char)v190 < 0) {
                operator delete(v188);
              }
              std::string::basic_string[abi:ne180100]<0>(&v191, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
              std::stringbuf::str();
              maps::path_codec::Logger::log_debug((uint64_t)&v191, 161, (uint64_t)&v188);
              if ((char)v190 < 0) {
                operator delete(v188);
              }
              if (SHIBYTE(v193) < 0) {
                operator delete(v191);
              }
              *(void *)&long long v212 = v152;
              *(void *)((char *)&v212 + *(void *)(v152 - 24)) = v153;
              *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
              if (v217 < 0) {
                operator delete(v216);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x18C11F4F0](v218);
            }
            long long v96 = __src;
            size_t v97 = *((void *)&__src + 1) - __src;
            unint64_t v98 = (uint64_t)(*((void *)&__src + 1) - __src) >> 5;
            uint64_t v99 = v167;
            unsigned int v100 = (char *)v166[0];
            if (v98 <= (int64_t)(v167 - (unint64_t)v166[0]) >> 5)
            {
              unint64_t v103 = ((char *)v166[1] - (char *)v166[0]) >> 5;
              if (v103 >= v98)
              {
                uint64_t v3 = a3;
                if (*((void *)&__src + 1) != (void)__src) {
                  memmove(v166[0], (const void *)__src, *((void *)&__src + 1) - __src);
                }
              }
              else
              {
                if (v166[1] != v166[0])
                {
                  memmove(v166[0], (const void *)__src, (char *)v166[1] - (char *)v166[0]);
                  unsigned int v100 = (char *)v166[1];
                }
                char v104 = (const void *)(v96 + 32 * v103);
                size_t v97 = *((void *)&v96 + 1) - (void)v104;
                if (*((const void **)&v96 + 1) != v104) {
                  memmove(v100, v104, *((void *)&v96 + 1) - (void)v104);
                }
                uint64_t v3 = a3;
              }
            }
            else
            {
              if (v166[0])
              {
                v166[1] = v166[0];
                operator delete(v166[0]);
                uint64_t v99 = 0;
                v166[0] = 0;
                v166[1] = 0;
                uint64_t v167 = 0;
              }
              if ((v97 & 0x8000000000000000) != 0) {
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v101 = v99 >> 4;
              if (v99 >> 4 <= v98) {
                uint64_t v101 = v98;
              }
              if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v102 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v101;
              }
              std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](v166, v102);
              unsigned int v100 = (char *)v166[1];
              if (*((void *)&v96 + 1) != (void)v96) {
                memmove(v166[1], (const void *)v96, v97);
              }
            }
            v166[1] = &v100[v97];
            int v155 = v77;
          }
          goto LABEL_129;
        }
        if (maps::path_codec::Logger::m_log_level <= 1u)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
          std::string::basic_string[abi:ne180100]<0>(&v188, "**Skipping (seen better one)");
          uint64_t v182 = 0;
          unint64_t v183 = 0;
          uint64_t v184 = 0;
          std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v182, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 5);
          maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v191, v201, (uint64_t)&v188, (uint64_t *)&v182);
          if (SHIBYTE(v193) >= 0) {
            unsigned int v78 = &v191;
          }
          else {
            unsigned int v78 = v191;
          }
          if (SHIBYTE(v193) >= 0) {
            uint64_t v79 = HIBYTE(v193);
          }
          else {
            uint64_t v79 = (uint64_t)v192;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)v78, v79);
          if (SHIBYTE(v193) < 0) {
            operator delete(v191);
          }
          if (v182)
          {
            unint64_t v183 = v182;
            operator delete(v182);
          }
          if ((char)v190 < 0) {
            operator delete(v188);
          }
          std::string::basic_string[abi:ne180100]<0>(&v191, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
          std::stringbuf::str();
          maps::path_codec::Logger::log_debug((uint64_t)&v191, 142, (uint64_t)&v188);
LABEL_122:
          if ((char)v190 < 0) {
            operator delete(v188);
          }
          if (SHIBYTE(v193) < 0) {
            operator delete(v191);
          }
          *(void *)&long long v212 = v152;
          *(void *)((char *)&v212 + *(void *)(v152 - 24)) = v153;
          *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
          if (v217 < 0) {
            operator delete(v216);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18C11F4F0](v218);
        }
      }
LABEL_129:
      if ((void)__src)
      {
        *((void *)&__src + 1) = __src;
        operator delete((void *)__src);
      }
      if (v196)
      {
        uint64_t v197 = v196;
        operator delete(v196);
      }
      char v70 = (long long *)((char *)v70 + 56);
      if (v70 == v158) {
        goto LABEL_231;
      }
    }
  }
  uint64_t v148 = a1;
  int v6 = *(void **)a2;
  std::vector<std::vector<GEOPathMatcherRoadKey>>::vector(&v194, 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3) - 1);
  uint64_t v7 = v195;
  if (v195 != v194)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v161 = *MEMORY[0x1E4FBA418];
    uint64_t v10 = 72;
    uint64_t v11 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    while (1)
    {
      maps::path_codec::build_best_score_terminal<GEOPathMatcherRoadKey>((uint64_t)&v212, *a3 + v10 - 72);
      maps::path_codec::build_best_score_terminal<GEOPathMatcherRoadKey>((uint64_t)&v219, *a3 + v10);
      maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>((void **)&__src, (uint64_t)&v212, (uint64_t)&v219, v6, v151);
      int v12 = (char *)v194 + v8;
      uint64_t v13 = *(void **)((char *)v194 + v8);
      if (v13)
      {
        v12[1] = v13;
        operator delete(v13);
        *int v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
      }
      *(_OWORD *)int v12 = __src;
      v12[2] = v211;
      if (__p)
      {
        uint64_t v222 = __p;
        operator delete(__p);
      }
      if ((void)v213)
      {
        *((void *)&v213 + 1) = v213;
        operator delete((void *)v213);
      }
      unint64_t v14 = v9 + 1;
      double v15 = (char *)v194;
      uint64_t v16 = *(void *)((char *)v194 + v8);
      uint64_t v17 = *(void *)((char *)v194 + v8 + 8);
      if (v16 != v17) {
        break;
      }
      if (maps::path_codec::Logger::m_log_level <= 3u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)"Decoding pathlet between ", 25);
        uint64_t v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" and ", 5);
        long long v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" failed using best scored segment(s).", 37);
        std::string::basic_string[abi:ne180100]<0>(&v219, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_warning((uint64_t)&v219, 399, (uint64_t)&__src);
        if (SHIBYTE(v211) < 0) {
          operator delete((void *)__src);
        }
        if (SHIBYTE(__p) < 0) {
          operator delete(v219);
        }
        *(void *)&long long v212 = v161;
        *(void *)((char *)&v212 + *(void *)(v161 - 24)) = v11;
        *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
        if (v217 < 0) {
          operator delete(v216);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18C11F4F0](v218);
      }
      maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>((void **)&v212, *a3 + v10 - 72, *a3 + v10, v6, v151);
      BOOL v20 = (char *)v194 + v8;
      long long v21 = *(void **)((char *)v194 + v8);
      if (v21)
      {
        v20[1] = v21;
        operator delete(v21);
        *BOOL v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
      }
      *(_OWORD *)BOOL v20 = v212;
      v20[2] = v213;
      double v15 = (char *)v194;
      uint64_t v16 = *(void *)((char *)v194 + v8);
      uint64_t v17 = *(void *)((char *)v194 + v8 + 8);
      if (v16 != v17) {
        break;
      }
      if (maps::path_codec::Logger::m_log_level <= 3u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)"Decoding pathlet between ", 25);
        uint64_t v35 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" and ", 5);
        unint64_t v36 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" failed using all scored segment(s).", 36);
        std::string::basic_string[abi:ne180100]<0>(&v219, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_warning((uint64_t)&v219, 404, (uint64_t)&__src);
        goto LABEL_34;
      }
LABEL_41:
      uint64_t v34 = v194;
      uint64_t v7 = v195;
      v8 += 24;
      v10 += 72;
      ++v9;
      if (v14 >= 0xAAAAAAAAAAAAAAABLL * ((v195 - (unsigned char *)v194) >> 3))
      {
        uint64_t v3 = a3;
        goto LABEL_267;
      }
    }
    unint64_t v22 = v17 - v16;
    if (v22 < 0x21)
    {
      if (!v9) {
        goto LABEL_32;
      }
      uint64_t v24 = v9 - 1;
      long long v26 = &v15[v8 - 24];
      uint64_t v25 = *(void *)v26;
      unint64_t v27 = *((void *)v26 + 1) - *(void *)v26;
      if (v27 >= 0x21)
      {
        uint64_t v28 = v27 + v25;
        long long v29 = *(_OWORD *)(v28 - 48);
        long long v202 = *(_OWORD *)(v28 - 64);
        *(_OWORD *)__dst = v29;
        maps::path_codec::filter_snapped_support_point<GEOPathMatcherRoadKey>((uint64_t)&v202, (uint64_t)v6, *a3 + v10);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)(v22 + v16 - 48);
      long long v207 = *(_OWORD *)(v22 + v16 - 64);
      long long v208 = v23;
      maps::path_codec::filter_snapped_support_point<GEOPathMatcherRoadKey>((uint64_t)&v207, (uint64_t)v6, *a3 + v10);
      if (!v9) {
        goto LABEL_32;
      }
      uint64_t v24 = v9 - 1;
    }
    uint64_t v30 = (char *)v194 + 24 * v24;
    if (*(void *)v30 != *((void *)v30 + 1)
      && !maps::path_codec::align_pathlets<GEOPathMatcherRoadKey>((uint64_t)v6, (void **)((char *)v194 + v8), (void **)v30))
    {
      unsigned int v111 = &v191;
      uint64_t v3 = a3;
      goto LABEL_268;
    }
LABEL_32:
    if (maps::path_codec::Logger::m_log_level <= 1u)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)"Found DFS pathlet between ", 26);
      uint64_t v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" and ", 5);
      int v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
      unsigned int v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" segments", 9);
      std::string::basic_string[abi:ne180100]<0>(&v219, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_debug((uint64_t)&v219, 427, (uint64_t)&__src);
LABEL_34:
      if (SHIBYTE(v211) < 0) {
        operator delete((void *)__src);
      }
      if (SHIBYTE(__p) < 0) {
        operator delete(v219);
      }
      *(void *)&long long v212 = v161;
      *(void *)((char *)&v212 + *(void *)(v161 - 24)) = v11;
      *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
      if (v217 < 0) {
        operator delete(v216);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18C11F4F0](v218);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  uint64_t v34 = v195;
LABEL_267:
  unsigned int v191 = v34;
  uint64_t v192 = v7;
  uint64_t v193 = v196;
  unsigned int v111 = &v194;
LABEL_268:
  *unsigned int v111 = 0;
  v111[1] = 0;
  v111[2] = 0;
  *(void *)&long long v212 = &v194;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
  unint64_t v112 = 0x8E38E38E38E38E39 * ((v3[1] - *v3) >> 3);
  if (v112 < 2)
  {
LABEL_269:
    maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::build_path(v148, (uint64_t *)a2, (uint64_t)&v191, (maps::path_codec **)v3);
    goto LABEL_338;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v192 - (unsigned char *)v191) >> 3) != v112 - 1) {
    goto LABEL_337;
  }
  char v113 = *(void **)a2;
  unint64_t v219 = v113;
  int v220 = v113;
  maps::path_codec::KHeap<unsigned int,2u,std::less<unsigned int>>::KHeap((uint64_t)&__p, 100);
  long long v226 = 0u;
  long long v225 = 0u;
  int v227 = 1065353216;
  uint64_t v228 = 0;
  unint64_t v229 = 0;
  uint64_t v230 = 0;
  uint64_t v231 = v151;
  char v115 = (maps::path_codec *)*v3;
  uint64_t v114 = v3[1];
  unint64_t v116 = 0x8E38E38E38E38E39 * ((v114 - *v3) >> 3);
  if (v116 < 2)
  {
    uint64_t v118 = 0;
    uint64_t v117 = 0;
LABEL_305:
    uint64_t v3 = a3;
    if (maps::path_codec::p2p_decode_empty_pathlet<GEOPathMatcherRoadKey>((uint64_t)v113, (uint64_t)&v219, a3, v118, v116 - 1, v151, (uint64_t *)&v191))
    {
      char v141 = 1;
      if (v117 && maps::path_codec::Logger::m_log_level <= 1u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)"Ran ", 4);
        uint64_t v142 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)" queries", 8);
        std::string::basic_string[abi:ne180100]<0>(&v207, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_debug((uint64_t)&v207, 263, (uint64_t)&v202);
        if (SHIBYTE(__dst[0]) < 0) {
          operator delete((void *)v202);
        }
        if (SBYTE7(v208) < 0) {
          operator delete((void *)v207);
        }
        *(void *)&long long v212 = *MEMORY[0x1E4FBA418];
        *(void *)((char *)&v212 + *(void *)(v212 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
        if (v217 < 0) {
          operator delete(v216);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18C11F4F0](v218);
        char v141 = 1;
      }
    }
    else
    {
      if (maps::path_codec::Logger::m_log_level <= 4u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)"Could not decode path between ", 30);
        unint64_t v144 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)" and ", 5);
        std::ostream::operator<<();
        std::string::basic_string[abi:ne180100]<0>(&v207, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_error((uint64_t)&v207, 257, (uint64_t)&v202);
LABEL_319:
        if (SHIBYTE(__dst[0]) < 0) {
          operator delete((void *)v202);
        }
        if (SBYTE7(v208) < 0) {
          operator delete((void *)v207);
        }
        *(void *)&long long v212 = *MEMORY[0x1E4FBA418];
        *(void *)((char *)&v212 + *(void *)(v212 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        *((void *)&v212 + 1) = MEMORY[0x1E4FBA470] + 16;
        if (v217 < 0) {
          operator delete(v216);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18C11F4F0](v218);
      }
      char v141 = 0;
    }
    goto LABEL_330;
  }
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  unint64_t v119 = 1;
  while (1)
  {
    unint64_t v120 = v119 - 1;
    int v121 = (uint64_t *)((char *)v191 + 24 * v119 - 24);
    uint64_t v122 = *v121;
    if (*v121 != v121[1]) {
      break;
    }
LABEL_288:
    ++v119;
    unint64_t v116 = 0x8E38E38E38E38E39 * ((v114 - (uint64_t)v115) >> 3);
    if (v119 >= v116) {
      goto LABEL_305;
    }
  }
  if (v118 == v120)
  {
LABEL_287:
    uint64_t v118 = v119;
    goto LABEL_288;
  }
  int v123 = (char *)v115 + 72 * v120;
  unsigned int v126 = (uint64_t *)*((void *)v123 + 2);
  int v124 = v123 + 16;
  int v125 = (long long *)v126;
  char v128 = v124 + 1;
  int v127 = (uint64_t *)v124[1];
  char v129 = v126;
  if (v126 != v127)
  {
    char v129 = (uint64_t *)v125;
    while (1)
    {
      uint64_t v130 = *v129;
      if (!*v129) {
        uint64_t v130 = v129[1];
      }
      if (v130 == *(void *)(v122 + 8 * (*v129 == 0))) {
        break;
      }
      v129 += 7;
      if (v129 == v127) {
        goto LABEL_315;
      }
    }
  }
  if (v129 == v127)
  {
LABEL_315:
    if (maps::path_codec::Logger::m_log_level <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
      uint64_t v3 = a3;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)"Start segment of pathlet ", 25);
      uint64_t v143 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)" not found in the possible segments of point ", 45);
      std::ostream::operator<<();
      std::string::basic_string[abi:ne180100]<0>(&v207, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_error((uint64_t)&v207, 235, (uint64_t)&v202);
      goto LABEL_319;
    }
    goto LABEL_329;
  }
  long long v212 = *v125;
  long long v131 = v212;
  long long v213 = v125[1];
  long long v132 = v213;
  long long v214 = v125[2];
  long long v133 = v214;
  uint64_t v215 = *((void *)v125 + 6);
  int v134 = v215;
  int v135 = *((_DWORD *)v129 + 12);
  long long v137 = *((_OWORD *)v129 + 1);
  long long v136 = *((_OWORD *)v129 + 2);
  *int v125 = *(_OWORD *)v129;
  v125[1] = v137;
  v125[2] = v136;
  *((_DWORD *)v125 + 12) = v135;
  *((_OWORD *)v129 + 1) = v132;
  *((_OWORD *)v129 + 2) = v133;
  *((_DWORD *)v129 + 12) = v134;
  *(_OWORD *)char v129 = v131;
  uint64_t v138 = *v124 + 56;
  if (v138 != *v128) {
    *char v128 = v138;
  }
  if (maps::path_codec::p2p_decode_empty_pathlet<GEOPathMatcherRoadKey>((uint64_t)v113, (uint64_t)&v219, a3, v118, v119 - 1, v151, (uint64_t *)&v191))
  {
    ++v117;
    char v115 = (maps::path_codec *)*a3;
    uint64_t v114 = a3[1];
    goto LABEL_287;
  }
  if (maps::path_codec::Logger::m_log_level <= 4u)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v212);
    uint64_t v3 = a3;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v212, (uint64_t)"Could not decode path between ", 30);
    int v145 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)" and ", 5);
    std::ostream::operator<<();
    std::string::basic_string[abi:ne180100]<0>(&v207, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
    std::stringbuf::str();
    maps::path_codec::Logger::log_error((uint64_t)&v207, 245, (uint64_t)&v202);
    goto LABEL_319;
  }
LABEL_329:
  char v141 = 0;
  uint64_t v3 = a3;
LABEL_330:
  if (v228)
  {
    unint64_t v229 = v228;
    operator delete(v228);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&v225);
  if (v223)
  {
    int v224 = v223;
    operator delete(v223);
  }
  if (__p)
  {
    uint64_t v222 = __p;
    operator delete(__p);
  }
  if (v141) {
    goto LABEL_269;
  }
LABEL_337:
  *(void *)(v148 + 112) = 0;
  *(_OWORD *)(v148 + 80) = 0u;
  *(_OWORD *)(v148 + 96) = 0u;
  *(_OWORD *)(v148 + 48) = 0u;
  *(_OWORD *)(v148 + 64) = 0u;
  *(_OWORD *)(v148 + 16) = 0u;
  *(_OWORD *)(v148 + 32) = 0u;
  *(_OWORD *)uint64_t v148 = 0u;
  *(_DWORD *)(v148 + 120) = 1065353216;
  *(unsigned char *)(v148 + 128) = 0;
LABEL_338:
  *(void *)&long long v212 = &v191;
LABEL_339:
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
}

void sub_189EA35EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x2E0]);
  maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::~Dijkstra(&STACK[0x3F0]);
  STACK[0x2E0] = (unint64_t)&a63;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  id v1 = *a1;
  id v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (void *)*((void *)v4 - 7);
        if (v6)
        {
          *((void *)v4 - 6) = v6;
          operator delete(v6);
        }
        v4 -= 72;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a2 - 56;
    uint64_t v167 = a2 - 112;
    unint64_t v168 = a2;
    uint64_t v11 = a2 - 168;
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          uint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v10, a1))
                {
                  long long v74 = *(_OWORD *)a1;
                  long long v75 = *(_OWORD *)(a1 + 16);
                  long long v76 = *(_OWORD *)(a1 + 32);
                  uint64_t v176 = *(void *)(a1 + 48);
                  long long v174 = v75;
                  long long v175 = v76;
                  long long v173 = v74;
                  long long v77 = *(_OWORD *)v10;
                  long long v78 = *(_OWORD *)(v10 + 16);
                  long long v79 = *(_OWORD *)(v10 + 32);
                  *(_DWORD *)(a1 + 48) = *(_DWORD *)(v10 + 48);
                  *(_OWORD *)(a1 + 16) = v78;
                  *(_OWORD *)(a1 + 32) = v79;
                  *(_OWORD *)a1 = v77;
                  long long v80 = v173;
                  long long v81 = v174;
                  long long v82 = v175;
                  *(_DWORD *)(v10 + 48) = v176;
                  *(_OWORD *)(v10 + 16) = v81;
                  *(_OWORD *)(v10 + 32) = v82;
                  *(_OWORD *)uint64_t v10 = v80;
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, v10);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112, v10);
                break;
              case 5:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112, a1 + 168, v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 1343)
          {
            uint64_t v83 = a1 + 56;
            BOOL v85 = a1 == a2 || v83 == a2;
            if (a4)
            {
              if (!v85)
              {
                uint64_t v86 = 0;
                uint64_t v87 = a1;
                do
                {
                  uint64_t v88 = v87;
                  uint64_t v87 = v83;
                  if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v83, v88))
                  {
                    long long v89 = *(_OWORD *)v87;
                    long long v90 = *(_OWORD *)(v87 + 16);
                    long long v91 = *(_OWORD *)(v87 + 32);
                    uint64_t v176 = *(void *)(v87 + 48);
                    long long v174 = v90;
                    long long v175 = v91;
                    long long v173 = v89;
                    uint64_t v92 = v86;
                    while (1)
                    {
                      uint64_t v93 = a1 + v92;
                      long long v94 = *(_OWORD *)(a1 + v92 + 16);
                      *(_OWORD *)(v93 + 56) = *(_OWORD *)(a1 + v92);
                      *(_OWORD *)(v93 + 72) = v94;
                      *(_OWORD *)(v93 + 88) = *(_OWORD *)(a1 + v92 + 32);
                      *(_DWORD *)(v93 + 104) = *(_DWORD *)(a1 + v92 + 48);
                      if (!v92) {
                        break;
                      }
                      v92 -= 56;
                      if ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v173, v92 + a1) & 1) == 0)
                      {
                        uint64_t v95 = a1 + v92 + 56;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v95 = a1;
LABEL_80:
                    long long v96 = v173;
                    long long v97 = v174;
                    long long v98 = v175;
                    *(_DWORD *)(v95 + 48) = v176;
                    *(_OWORD *)(v95 + 16) = v97;
                    *(_OWORD *)(v95 + 32) = v98;
                    *(_OWORD *)uint64_t v95 = v96;
                    a2 = v168;
                  }
                  uint64_t v83 = v87 + 56;
                  v86 += 56;
                }
                while (v87 + 56 != a2);
              }
            }
            else if (!v85)
            {
              uint64_t v156 = a1 - 56;
              do
              {
                uint64_t v157 = a1;
                a1 = v83;
                if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v83, v157))
                {
                  long long v158 = *(_OWORD *)a1;
                  long long v159 = *(_OWORD *)(a1 + 16);
                  long long v160 = *(_OWORD *)(a1 + 32);
                  uint64_t v176 = *(void *)(a1 + 48);
                  long long v174 = v159;
                  long long v175 = v160;
                  long long v173 = v158;
                  uint64_t v161 = v156;
                  do
                  {
                    long long v162 = *(_OWORD *)(v161 + 72);
                    *(_OWORD *)(v161 + 112) = *(_OWORD *)(v161 + 56);
                    *(_OWORD *)(v161 + 128) = v162;
                    *(_OWORD *)(v161 + 144) = *(_OWORD *)(v161 + 88);
                    *(_DWORD *)(v161 + 160) = *(_DWORD *)(v161 + 104);
                    char v163 = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v173, v161);
                    v161 -= 56;
                  }
                  while ((v163 & 1) != 0);
                  long long v164 = v173;
                  long long v165 = v174;
                  long long v166 = v175;
                  *(_DWORD *)(v161 + 160) = v176;
                  *(_OWORD *)(v161 + 128) = v165;
                  *(_OWORD *)(v161 + 144) = v166;
                  *(_OWORD *)(v161 + 112) = v164;
                }
                uint64_t v83 = a1 + 56;
                v156 += 56;
              }
              while (a1 + 56 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v99 = (unint64_t)(v14 - 2) >> 1;
              int64_t v100 = v99;
              do
              {
                int64_t v101 = v100;
                if (v99 >= v100)
                {
                  uint64_t v102 = (2 * v100) | 1;
                  uint64_t v103 = a1 + 56 * v102;
                  if (2 * v100 + 2 < v14
                    && maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a1 + 56 * v102, v103 + 56))
                  {
                    v103 += 56;
                    uint64_t v102 = 2 * v101 + 2;
                  }
                  uint64_t v104 = a1 + 56 * v101;
                  if ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v103, v104) & 1) == 0)
                  {
                    long long v105 = *(_OWORD *)v104;
                    long long v106 = *(_OWORD *)(v104 + 16);
                    long long v107 = *(_OWORD *)(v104 + 32);
                    uint64_t v176 = *(void *)(v104 + 48);
                    long long v174 = v106;
                    long long v175 = v107;
                    long long v173 = v105;
                    do
                    {
                      uint64_t v108 = v103;
                      long long v109 = *(_OWORD *)v103;
                      long long v110 = *(_OWORD *)(v103 + 16);
                      long long v111 = *(_OWORD *)(v103 + 32);
                      *(_DWORD *)(v104 + 48) = *(_DWORD *)(v103 + 48);
                      *(_OWORD *)(v104 + 16) = v110;
                      *(_OWORD *)(v104 + 32) = v111;
                      *(_OWORD *)uint64_t v104 = v109;
                      if (v99 < v102) {
                        break;
                      }
                      uint64_t v112 = (2 * v102) | 1;
                      uint64_t v103 = a1 + 56 * v112;
                      uint64_t v113 = 2 * v102 + 2;
                      if (v113 < v14
                        && maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a1 + 56 * v112, v103 + 56))
                      {
                        v103 += 56;
                        uint64_t v112 = v113;
                      }
                      uint64_t v104 = v108;
                      uint64_t v102 = v112;
                    }
                    while (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v103, (uint64_t)&v173));
                    long long v114 = v173;
                    long long v115 = v174;
                    long long v116 = v175;
                    *(_DWORD *)(v108 + 48) = v176;
                    *(_OWORD *)(v108 + 16) = v115;
                    *(_OWORD *)(v108 + 32) = v116;
                    *(_OWORD *)uint64_t v108 = v114;
                  }
                }
                int64_t v100 = v101 - 1;
              }
              while (v101);
              int64_t v117 = v13 / 0x38uLL;
              unint64_t v118 = v168;
              do
              {
                uint64_t v119 = 0;
                long long v120 = *(_OWORD *)a1;
                long long v121 = *(_OWORD *)(a1 + 16);
                long long v122 = *(_OWORD *)(a1 + 32);
                uint64_t v172 = *(void *)(a1 + 48);
                long long v170 = v121;
                long long v171 = v122;
                long long v169 = v120;
                uint64_t v123 = v117 - 2;
                if (v117 < 2) {
                  uint64_t v123 = v117 - 1;
                }
                uint64_t v124 = v123 >> 1;
                unint64_t v125 = a1;
                do
                {
                  uint64_t v126 = v125 + 56 * v119 + 56;
                  uint64_t v127 = (2 * v119) | 1;
                  uint64_t v128 = 2 * v119 + 2;
                  if (v128 < v117
                    && maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v125 + 56 * v119 + 56, v125 + 56 * v119 + 112))
                  {
                    v126 += 56;
                    uint64_t v127 = v128;
                  }
                  long long v129 = *(_OWORD *)v126;
                  long long v130 = *(_OWORD *)(v126 + 16);
                  long long v131 = *(_OWORD *)(v126 + 32);
                  *(_DWORD *)(v125 + 48) = *(_DWORD *)(v126 + 48);
                  *(_OWORD *)(v125 + 16) = v130;
                  *(_OWORD *)(v125 + 32) = v131;
                  *(_OWORD *)unint64_t v125 = v129;
                  unint64_t v125 = v126;
                  uint64_t v119 = v127;
                }
                while (v127 <= v124);
                v118 -= 56;
                if (v126 == v118)
                {
                  long long v152 = v169;
                  long long v153 = v170;
                  long long v154 = v171;
                  *(_DWORD *)(v126 + 48) = v172;
                  *(_OWORD *)(v126 + 16) = v153;
                  *(_OWORD *)(v126 + 32) = v154;
                  *(_OWORD *)uint64_t v126 = v152;
                  int64_t v139 = v117 - 1;
                }
                else
                {
                  long long v132 = *(_OWORD *)v118;
                  long long v133 = *(_OWORD *)(v118 + 16);
                  long long v134 = *(_OWORD *)(v118 + 32);
                  *(_DWORD *)(v126 + 48) = *(_DWORD *)(v118 + 48);
                  *(_OWORD *)(v126 + 16) = v133;
                  *(_OWORD *)(v126 + 32) = v134;
                  *(_OWORD *)uint64_t v126 = v132;
                  long long v135 = v169;
                  long long v136 = v170;
                  long long v137 = v171;
                  *(_DWORD *)(v118 + 48) = v172;
                  *(_OWORD *)(v118 + 16) = v136;
                  *(_OWORD *)(v118 + 32) = v137;
                  *(_OWORD *)unint64_t v118 = v135;
                  uint64_t v138 = v126 - a1 + 56;
                  int64_t v139 = v117 - 1;
                  if (v138 >= 57)
                  {
                    unint64_t v140 = (v138 / 0x38uLL - 2) >> 1;
                    uint64_t v141 = a1 + 56 * v140;
                    if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v141, v126))
                    {
                      long long v142 = *(_OWORD *)v126;
                      long long v143 = *(_OWORD *)(v126 + 16);
                      long long v144 = *(_OWORD *)(v126 + 32);
                      uint64_t v176 = *(void *)(v126 + 48);
                      long long v174 = v143;
                      long long v175 = v144;
                      long long v173 = v142;
                      do
                      {
                        uint64_t v145 = v141;
                        long long v146 = *(_OWORD *)v141;
                        long long v147 = *(_OWORD *)(v141 + 16);
                        long long v148 = *(_OWORD *)(v141 + 32);
                        *(_DWORD *)(v126 + 48) = *(_DWORD *)(v141 + 48);
                        *(_OWORD *)(v126 + 16) = v147;
                        *(_OWORD *)(v126 + 32) = v148;
                        *(_OWORD *)uint64_t v126 = v146;
                        if (!v140) {
                          break;
                        }
                        unint64_t v140 = (v140 - 1) >> 1;
                        uint64_t v141 = a1 + 56 * v140;
                        uint64_t v126 = v145;
                      }
                      while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v141, (uint64_t)&v173) & 1) != 0);
                      long long v149 = v173;
                      long long v150 = v174;
                      long long v151 = v175;
                      *(_DWORD *)(v145 + 48) = v176;
                      *(_OWORD *)(v145 + 16) = v150;
                      *(_OWORD *)(v145 + 32) = v151;
                      *(_OWORD *)uint64_t v145 = v149;
                    }
                  }
                }
                BOOL v155 = v117 <= 2;
                int64_t v117 = v139;
              }
              while (!v155);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = a1 + 56 * ((unint64_t)v14 >> 1);
          if ((unint64_t)v13 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(v16, a1, v10);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, v16, v10);
            uint64_t v17 = 56 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1 + 56, v17 + a1 - 56, v167);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1 + 112, a1 + 56 + v17, v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(v17 + a1 - 56, v16, a1 + 56 + v17);
            long long v18 = *(_OWORD *)a1;
            long long v19 = *(_OWORD *)(a1 + 16);
            long long v20 = *(_OWORD *)(a1 + 32);
            uint64_t v176 = *(void *)(a1 + 48);
            long long v174 = v19;
            long long v175 = v20;
            long long v173 = v18;
            long long v21 = *(_OWORD *)v16;
            long long v22 = *(_OWORD *)(v16 + 16);
            long long v23 = *(_OWORD *)(v16 + 32);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(v16 + 48);
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 32) = v23;
            *(_OWORD *)a1 = v21;
            long long v24 = v173;
            long long v25 = v174;
            long long v26 = v175;
            *(_DWORD *)(v16 + 48) = v176;
            *(_OWORD *)(v16 + 16) = v25;
            *(_OWORD *)(v16 + 32) = v26;
            *(_OWORD *)uint64_t v16 = v24;
          }
          --a3;
          if ((a4 & 1) != 0
            || (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a1 - 56, a1) & 1) != 0)
          {
            break;
          }
          long long v52 = *(_OWORD *)a1;
          long long v53 = *(_OWORD *)(a1 + 16);
          long long v54 = *(_OWORD *)(a1 + 32);
          uint64_t v172 = *(void *)(a1 + 48);
          long long v170 = v53;
          long long v171 = v54;
          long long v169 = v52;
          if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v169, v10))
          {
            unint64_t v12 = a1;
            a2 = v168;
            do
              v12 += 56;
            while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v169, v12) & 1) == 0);
          }
          else
          {
            unint64_t v55 = a1 + 56;
            a2 = v168;
            do
            {
              unint64_t v12 = v55;
              if (v55 >= v168) {
                break;
              }
              int v56 = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v169, v55);
              unint64_t v55 = v12 + 56;
            }
            while (!v56);
          }
          unint64_t v57 = a2;
          if (v12 < a2)
          {
            unint64_t v57 = a2;
            do
              v57 -= 56;
            while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v169, v57) & 1) != 0);
          }
          while (v12 < v57)
          {
            long long v58 = *(_OWORD *)v12;
            long long v59 = *(_OWORD *)(v12 + 16);
            long long v60 = *(_OWORD *)(v12 + 32);
            uint64_t v176 = *(void *)(v12 + 48);
            long long v174 = v59;
            long long v175 = v60;
            long long v173 = v58;
            long long v61 = *(_OWORD *)v57;
            long long v62 = *(_OWORD *)(v57 + 16);
            long long v63 = *(_OWORD *)(v57 + 32);
            *(_DWORD *)(v12 + 48) = *(_DWORD *)(v57 + 48);
            *(_OWORD *)(v12 + 16) = v62;
            *(_OWORD *)(v12 + 32) = v63;
            *(_OWORD *)unint64_t v12 = v61;
            long long v64 = v173;
            long long v65 = v174;
            long long v66 = v175;
            *(_DWORD *)(v57 + 48) = v176;
            *(_OWORD *)(v57 + 16) = v65;
            *(_OWORD *)(v57 + 32) = v66;
            *(_OWORD *)unint64_t v57 = v64;
            do
              v12 += 56;
            while (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v169, v12));
            do
              v57 -= 56;
            while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v169, v57) & 1) != 0);
          }
          BOOL v67 = (long long *)(v12 - 56);
          BOOL v4 = v12 - 56 >= a1;
          BOOL v5 = v12 - 56 == a1;
          if (v12 - 56 != a1)
          {
            long long v68 = *v67;
            long long v69 = *(_OWORD *)(v12 - 40);
            long long v70 = *(_OWORD *)(v12 - 24);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(v12 - 8);
            *(_OWORD *)(a1 + 16) = v69;
            *(_OWORD *)(a1 + 32) = v70;
            *(_OWORD *)a1 = v68;
          }
          a4 = 0;
          long long v71 = v169;
          long long v72 = v170;
          long long v73 = v171;
          *(_DWORD *)(v12 - 8) = v172;
          *(_OWORD *)(v12 - 40) = v72;
          *(_OWORD *)(v12 - 24) = v73;
          *BOOL v67 = v71;
        }
        uint64_t v27 = 0;
        long long v28 = *(_OWORD *)a1;
        long long v29 = *(_OWORD *)(a1 + 16);
        long long v30 = *(_OWORD *)(a1 + 32);
        uint64_t v172 = *(void *)(a1 + 48);
        long long v170 = v29;
        long long v171 = v30;
        long long v169 = v28;
        do
          v27 += 56;
        while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v27 + a1, (uint64_t)&v169) & 1) != 0);
        unint64_t v31 = a1 + v27;
        unint64_t v32 = v168;
        BOOL v5 = v27 == 56;
        a2 = v168;
        if (v5)
        {
          unint64_t v32 = v168;
          do
          {
            if (v31 >= v32) {
              break;
            }
            v32 -= 56;
          }
          while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v32, (uint64_t)&v169) & 1) == 0);
        }
        else
        {
          do
            v32 -= 56;
          while (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v32, (uint64_t)&v169));
        }
        if (v31 >= v32)
        {
          uint64_t v44 = v31 - 56;
        }
        else
        {
          unint64_t v33 = v31;
          unint64_t v34 = v32;
          do
          {
            long long v35 = *(_OWORD *)v33;
            long long v36 = *(_OWORD *)(v33 + 16);
            long long v37 = *(_OWORD *)(v33 + 32);
            uint64_t v176 = *(void *)(v33 + 48);
            long long v174 = v36;
            long long v175 = v37;
            long long v173 = v35;
            long long v38 = *(_OWORD *)v34;
            long long v39 = *(_OWORD *)(v34 + 16);
            long long v40 = *(_OWORD *)(v34 + 32);
            *(_DWORD *)(v33 + 48) = *(_DWORD *)(v34 + 48);
            *(_OWORD *)(v33 + 16) = v39;
            *(_OWORD *)(v33 + 32) = v40;
            *(_OWORD *)unint64_t v33 = v38;
            long long v41 = v173;
            long long v42 = v174;
            long long v43 = v175;
            *(_DWORD *)(v34 + 48) = v176;
            *(_OWORD *)(v34 + 16) = v42;
            *(_OWORD *)(v34 + 32) = v43;
            *(_OWORD *)unint64_t v34 = v41;
            do
              v33 += 56;
            while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v33, (uint64_t)&v169) & 1) != 0);
            do
              v34 -= 56;
            while (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v34, (uint64_t)&v169));
          }
          while (v33 < v34);
          uint64_t v44 = v33 - 56;
        }
        if (v44 != a1)
        {
          long long v45 = *(_OWORD *)v44;
          long long v46 = *(_OWORD *)(v44 + 16);
          long long v47 = *(_OWORD *)(v44 + 32);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v44 + 48);
          *(_OWORD *)(a1 + 16) = v46;
          *(_OWORD *)(a1 + 32) = v47;
          *(_OWORD *)a1 = v45;
        }
        long long v48 = v169;
        long long v49 = v170;
        long long v50 = v171;
        *(_DWORD *)(v44 + 48) = v172;
        *(_OWORD *)(v44 + 16) = v49;
        *(_OWORD *)(v44 + 32) = v50;
        *(_OWORD *)uint64_t v44 = v48;
        if (v31 >= v32) {
          break;
        }
LABEL_32:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *,false>(a1, v44, a3, a4 & 1);
        a4 = 0;
        unint64_t v12 = v44 + 56;
      }
      BOOL v51 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, v44);
      unint64_t v12 = v44 + 56;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(v44 + 56, v168))
      {
        break;
      }
      if (!v51) {
        goto LABEL_32;
      }
    }
    a2 = v44;
    if (!v51) {
      continue;
    }
    break;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2, a1);
  uint64_t result = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a3, a2);
  if (v6)
  {
    if (result)
    {
      long long v9 = *(_OWORD *)(a1 + 16);
      long long v8 = *(_OWORD *)(a1 + 32);
      long long v10 = *(_OWORD *)a1;
      uint64_t v11 = *(void *)(a1 + 48);
      long long v13 = *(_OWORD *)(a3 + 16);
      long long v12 = *(_OWORD *)(a3 + 32);
      long long v14 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = v12;
      *(_OWORD *)a1 = v14;
    }
    else
    {
      long long v30 = *(_OWORD *)(a1 + 16);
      long long v29 = *(_OWORD *)(a1 + 32);
      long long v31 = *(_OWORD *)a1;
      uint64_t v32 = *(void *)(a1 + 48);
      long long v34 = *(_OWORD *)(a2 + 16);
      long long v33 = *(_OWORD *)(a2 + 32);
      long long v35 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 16) = v34;
      *(_OWORD *)(a1 + 32) = v33;
      *(_OWORD *)a1 = v35;
      *(_DWORD *)(a2 + 48) = v32;
      *(_OWORD *)a2 = v31;
      *(_OWORD *)(a2 + 16) = v30;
      *(_OWORD *)(a2 + 32) = v29;
      uint64_t result = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a3, a2);
      if (!result) {
        return result;
      }
      long long v9 = *(_OWORD *)(a2 + 16);
      long long v8 = *(_OWORD *)(a2 + 32);
      long long v10 = *(_OWORD *)a2;
      uint64_t v11 = *(void *)(a2 + 48);
      long long v37 = *(_OWORD *)(a3 + 16);
      long long v36 = *(_OWORD *)(a3 + 32);
      long long v38 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v37;
      *(_OWORD *)(a2 + 32) = v36;
      *(_OWORD *)a2 = v38;
    }
    *(_DWORD *)(a3 + 48) = v11;
    *(_OWORD *)a3 = v10;
    *(_OWORD *)(a3 + 16) = v9;
    *(_OWORD *)(a3 + 32) = v8;
  }
  else if (result)
  {
    long long v16 = *(_OWORD *)(a2 + 16);
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v17 = *(_OWORD *)a2;
    uint64_t v18 = *(void *)(a2 + 48);
    long long v20 = *(_OWORD *)(a3 + 16);
    long long v19 = *(_OWORD *)(a3 + 32);
    long long v21 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v20;
    *(_OWORD *)(a2 + 32) = v19;
    *(_OWORD *)a2 = v21;
    *(_DWORD *)(a3 + 48) = v18;
    *(_OWORD *)a3 = v17;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v15;
    uint64_t result = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2, a1);
    if (result)
    {
      long long v23 = *(_OWORD *)(a1 + 16);
      long long v22 = *(_OWORD *)(a1 + 32);
      long long v24 = *(_OWORD *)a1;
      uint64_t v25 = *(void *)(a1 + 48);
      long long v27 = *(_OWORD *)(a2 + 16);
      long long v26 = *(_OWORD *)(a2 + 32);
      long long v28 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 16) = v27;
      *(_OWORD *)(a1 + 32) = v26;
      *(_OWORD *)a1 = v28;
      *(_DWORD *)(a2 + 48) = v25;
      *(_OWORD *)a2 = v24;
      *(_OWORD *)(a2 + 16) = v23;
      *(_OWORD *)(a2 + 32) = v22;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v6 = (long long *)(a2 - 56);
      if (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2 - 56, a1)) {
        return 1;
      }
      long long v8 = *(_OWORD *)(a1 + 16);
      long long v7 = *(_OWORD *)(a1 + 32);
      long long v9 = *(_OWORD *)a1;
      uint64_t v10 = *(void *)(a1 + 48);
      long long v12 = v6[1];
      long long v11 = v6[2];
      long long v13 = *v6;
      *(_DWORD *)(a1 + 48) = *((_DWORD *)v6 + 12);
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)a1 = v13;
      *((_DWORD *)v6 + 12) = v10;
      *char v6 = v9;
      v6[1] = v8;
      BOOL result = 1;
      v6[2] = v7;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      uint64_t v14 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112);
      uint64_t v15 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v24 = *(_OWORD *)v15;
      long long v25 = v18;
      long long v26 = *(_OWORD *)(v15 + 32);
      uint64_t v27 = *(void *)(v15 + 48);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 168) = *(_OWORD *)(a1 + v19 + 112);
        *(_OWORD *)(v20 + 184) = v21;
        *(_OWORD *)(v20 + 200) = *(_OWORD *)(a1 + v19 + 144);
        *(_DWORD *)(v20 + 216) = *(_DWORD *)(a1 + v19 + 160);
        if (v19 == -112) {
          break;
        }
        v19 -= 56;
        if ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v24, v20 + 56) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 168;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      long long v23 = v25;
      *(_OWORD *)uint64_t v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_OWORD *)(v22 + 32) = v26;
      *(_DWORD *)(v22 + 48) = v27;
      if (++v17 == 8) {
        return v15 + 56 == a2;
      }
    }
    uint64_t v14 = v15;
    v16 += 56;
    v15 += 56;
    if (v15 == a2) {
      return 1;
    }
  }
}

uint64_t maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 40);
  double v3 = *(double *)(a2 + 40);
  if (v2 < v3) {
    return 1;
  }
  if (v3 >= v2)
  {
    int v5 = *(_DWORD *)(a1 + 48);
    int v6 = *(_DWORD *)(a2 + 48);
    if (v5 >= v6)
    {
      if (v6 < v5) {
        return 0;
      }
      if (*(void *)a1)
      {
        if (*(void *)a1 >= *(void *)a2) {
          return 0;
        }
      }
      else if (*(void *)(a1 + 8) >= *(void *)(a2 + 8))
      {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a2, a3);
  if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a4, a3))
  {
    long long v10 = *(_OWORD *)(a3 + 16);
    long long v9 = *(_OWORD *)(a3 + 32);
    long long v11 = *(_OWORD *)a3;
    uint64_t v12 = *(void *)(a3 + 48);
    long long v14 = *(_OWORD *)(a4 + 16);
    long long v13 = *(_OWORD *)(a4 + 32);
    long long v15 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 16) = v14;
    *(_OWORD *)(a3 + 32) = v13;
    *(_OWORD *)a3 = v15;
    *(_DWORD *)(a4 + 48) = v12;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v10;
    *(_OWORD *)(a4 + 32) = v9;
    if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a3, a2))
    {
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v16 = *(_OWORD *)(a2 + 32);
      long long v18 = *(_OWORD *)a2;
      uint64_t v19 = *(void *)(a2 + 48);
      long long v21 = *(_OWORD *)(a3 + 16);
      long long v20 = *(_OWORD *)(a3 + 32);
      long long v22 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v21;
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)a2 = v22;
      *(_DWORD *)(a3 + 48) = v19;
      *(_OWORD *)a3 = v18;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = v16;
      if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2, a1))
      {
        long long v23 = *(_OWORD *)(a1 + 16);
        __n128 result = *(__n128 *)(a1 + 32);
        long long v24 = *(_OWORD *)a1;
        uint64_t v25 = *(void *)(a1 + 48);
        long long v27 = *(_OWORD *)(a2 + 16);
        long long v26 = *(_OWORD *)(a2 + 32);
        long long v28 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v27;
        *(_OWORD *)(a1 + 32) = v26;
        *(_OWORD *)a1 = v28;
        *(_DWORD *)(a2 + 48) = v25;
        *(_OWORD *)a2 = v24;
        *(_OWORD *)(a2 + 16) = v23;
        *(__n128 *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a2, a3, a4);
  if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a5, a4))
  {
    long long v12 = *(_OWORD *)(a4 + 16);
    long long v11 = *(_OWORD *)(a4 + 32);
    long long v13 = *(_OWORD *)a4;
    uint64_t v14 = *(void *)(a4 + 48);
    long long v16 = *(_OWORD *)(a5 + 16);
    long long v15 = *(_OWORD *)(a5 + 32);
    long long v17 = *(_OWORD *)a5;
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 16) = v16;
    *(_OWORD *)(a4 + 32) = v15;
    *(_OWORD *)a4 = v17;
    *(_DWORD *)(a5 + 48) = v14;
    *(_OWORD *)a5 = v13;
    *(_OWORD *)(a5 + 16) = v12;
    *(_OWORD *)(a5 + 32) = v11;
    if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a4, a3))
    {
      long long v19 = *(_OWORD *)(a3 + 16);
      long long v18 = *(_OWORD *)(a3 + 32);
      long long v20 = *(_OWORD *)a3;
      uint64_t v21 = *(void *)(a3 + 48);
      long long v23 = *(_OWORD *)(a4 + 16);
      long long v22 = *(_OWORD *)(a4 + 32);
      long long v24 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 16) = v23;
      *(_OWORD *)(a3 + 32) = v22;
      *(_OWORD *)a3 = v24;
      *(_DWORD *)(a4 + 48) = v21;
      *(_OWORD *)a4 = v20;
      *(_OWORD *)(a4 + 16) = v19;
      *(_OWORD *)(a4 + 32) = v18;
      if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a3, a2))
      {
        long long v26 = *(_OWORD *)(a2 + 16);
        long long v25 = *(_OWORD *)(a2 + 32);
        long long v27 = *(_OWORD *)a2;
        uint64_t v28 = *(void *)(a2 + 48);
        long long v30 = *(_OWORD *)(a3 + 16);
        long long v29 = *(_OWORD *)(a3 + 32);
        long long v31 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 16) = v30;
        *(_OWORD *)(a2 + 32) = v29;
        *(_OWORD *)a2 = v31;
        *(_DWORD *)(a3 + 48) = v28;
        *(_OWORD *)a3 = v27;
        *(_OWORD *)(a3 + 16) = v26;
        *(_OWORD *)(a3 + 32) = v25;
        if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2, a1))
        {
          long long v32 = *(_OWORD *)(a1 + 16);
          __n128 result = *(__n128 *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          uint64_t v34 = *(void *)(a1 + 48);
          long long v36 = *(_OWORD *)(a2 + 16);
          long long v35 = *(_OWORD *)(a2 + 32);
          long long v37 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 16) = v36;
          *(_OWORD *)(a1 + 32) = v35;
          *(_OWORD *)a1 = v37;
          *(_DWORD *)(a2 + 48) = v34;
          *(_OWORD *)a2 = v33;
          *(_OWORD *)(a2 + 16) = v32;
          *(__n128 *)(a2 + 32) = result;
        }
      }
    }
  }
  return result;
}

double maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(uint64_t a1, uint64_t a2, maps::path_codec *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v32);
  maps::path_codec::snap_point(a3, (uint64_t *)&v33, (uint64_t)v30, v4, v5, v6);
  BOOL v8 = v31 == -1 || v30[3] == 0x7FFFFFFF;
  if (v8 || (v30[0] == -1 ? (BOOL v9 = v30[1] == -1) : (BOOL v9 = 0), v9))
  {
    double v11 = 0.0;
    if (maps::path_codec::Logger::m_log_level <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Could not snap the location onto the road.", 42);
      std::string::basic_string[abi:ne180100]<0>(v25, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/src/path-codec/PathDecoder.cpp");
      std::stringbuf::str();
      maps::path_codec::Logger::log_error((uint64_t)v25, 264, (uint64_t)&__p);
      if (v24 < 0) {
        operator delete(__p);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      v27[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v27[1] = MEMORY[0x1E4FBA470] + 16;
      if (v28 < 0) {
        operator delete((void *)v27[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18C11F4F0](&v29);
    }
  }
  else
  {
    long long v10 = v33;
    double v11 = 0.0;
    if (0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 2) >= 2 && v33 + 12 != v34)
    {
      double v13 = 1.79769313e308;
      double v14 = 0.0;
      double v15 = 0.0;
      do
      {
        maps::path_codec::great_circle_distance_in_m((maps::path_codec *)v10, (const maps::path_codec::Coordinate *)(v10 + 12), (const maps::path_codec::Coordinate *)1, v7);
        double v17 = v16;
        maps::path_codec::great_circle_distance_in_m((maps::path_codec *)v10, (const maps::path_codec::Coordinate *)v30, (const maps::path_codec::Coordinate *)1, v16);
        double v19 = v18;
        maps::path_codec::great_circle_distance_in_m((maps::path_codec *)v30, (const maps::path_codec::Coordinate *)(v10 + 12), (const maps::path_codec::Coordinate *)1, v18);
        double v7 = fmax(v19 + v20 - v17, 0.0);
        if (v7 < v13)
        {
          double v13 = v7;
          double v15 = v14 + v19;
        }
        double v14 = v14 + v17;
        uint64_t v21 = v10 + 24;
        v10 += 12;
      }
      while (v21 != v34);
      double v11 = 0.0;
      if (v14 != 0.0)
      {
        if (v15 / v14 <= 1.0) {
          double v11 = v15 / v14;
        }
        else {
          double v11 = 1.0;
        }
      }
    }
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  return v11;
}

void sub_189EA4ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  maps::path_codec::RoadProperties::~RoadProperties((void **)(v21 - 144));
  _Unwind_Resume(a1);
}

void maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_terminal_fractions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!maps::path_codec::Logger::m_log_level)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Computing origin/destination fractions.", 39);
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    maps::path_codec::Logger::log_trace((uint64_t)v8, 246, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    v10[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v10[1] = MEMORY[0x1E4FBA470] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18C11F4F0](&v12);
  }
  *(double *)a2 = maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(*a1, *(void *)(a2 + 16), *(maps::path_codec **)a3);
  *(double *)(a2 + 8) = maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(*a1, *(void *)(a2 + 24) - 32, (maps::path_codec *)(*(void *)(a3 + 8) - 72));
}

void sub_189EA50FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::build_path(uint64_t a1, uint64_t *a2, uint64_t a3, maps::path_codec **a4)
{
  if (!maps::path_codec::Logger::m_log_level)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v102);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v102, (uint64_t)"Start stitching pathlets", 24);
    std::string::basic_string[abi:ne180100]<0>(v92, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    maps::path_codec::Logger::log_trace((uint64_t)v92, 183, (uint64_t)__p);
    if (v101 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v93) < 0) {
      operator delete(v92[0]);
    }
    uint64_t v102 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&v102 + *(void *)(v102 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v103 = MEMORY[0x1E4FBA470] + 16;
    if (v105 < 0) {
      operator delete(v104);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18C11F4F0](v106);
  }
  uint64_t v97 = 0;
  memset(v96, 0, sizeof(v96));
  *(_OWORD *)uint64_t v95 = 0u;
  long long v93 = 0u;
  memset(v94, 0, sizeof(v94));
  *(_OWORD *)uint64_t v92 = 0u;
  int v98 = 1065353216;
  char v99 = 0;
  if (*((unsigned char *)*a4 + 48))
  {
    double v6 = maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(*a2, **(void **)a3, *a4);
    double v7 = v6;
    uint64_t v8 = (uint64_t)*a4 + 48;
    char v9 = (double *)v95[1];
    if (v95[1] >= (void *)*(void *)&v96[0])
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v95[1] - (char *)v95[0]) >> 4);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0x555555555555555) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*(void *)&v96[0] - (unint64_t)v95[0]) >> 4) > v13) {
        unint64_t v13 = 0x5555555555555556 * ((uint64_t)(*(void *)&v96[0] - (unint64_t)v95[0]) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v96[0] - (unint64_t)v95[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v14 = 0x555555555555555;
      }
      else {
        unint64_t v14 = v13;
      }
      double v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v14);
      double v16 = (double *)&v15[48 * v12];
      double v18 = &v15[48 * v17];
      *double v16 = 0.0;
      v16[1] = v7;
      long long v19 = *(_OWORD *)v8;
      v16[4] = *(double *)(v8 + 16);
      *((_OWORD *)v16 + 1) = v19;
      *((unsigned char *)v16 + 40) = 0;
      char v11 = v16 + 6;
      uint64_t v21 = (char *)v95[0];
      double v20 = (char *)v95[1];
      if (v95[1] != v95[0])
      {
        do
        {
          long long v22 = *((_OWORD *)v20 - 3);
          long long v23 = *((_OWORD *)v20 - 1);
          *((_OWORD *)v16 - 2) = *((_OWORD *)v20 - 2);
          *((_OWORD *)v16 - 1) = v23;
          *((_OWORD *)v16 - 3) = v22;
          v16 -= 6;
          v20 -= 48;
        }
        while (v20 != v21);
        double v20 = (char *)v95[0];
      }
      v95[0] = v16;
      v95[1] = v11;
      *(void *)&v96[0] = v18;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(void *)v95[1] = 0;
      v9[1] = v6;
      long long v10 = *(_OWORD *)v8;
      v9[4] = *(double *)(v8 + 16);
      *((_OWORD *)v9 + 1) = v10;
      *((unsigned char *)v9 + 40) = 0;
      char v11 = v9 + 6;
    }
    v95[1] = v11;
  }
  char v24 = *(uint64_t **)a3;
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
LABEL_89:
    maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_terminal_fractions(a2, (uint64_t)v92, (uint64_t)a4);
    long long v87 = v93;
    *(_OWORD *)a1 = *(_OWORD *)v92;
    *(_OWORD *)(a1 + 16) = v87;
    *(void **)(a1 + 32) = v94[0];
    long long v93 = 0uLL;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)&v94[1];
    *(void **)(a1 + 56) = v94[3];
    memset(v94, 0, sizeof(v94));
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v95;
    *(void *)(a1 + 80) = *(void *)&v96[0];
    v95[0] = 0;
    v95[1] = 0;
    *(void *)&v96[0] = 0;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>>>::__hash_table(a1 + 88, (uint64_t *)v96 + 1);
    *(unsigned char *)(a1 + 128) = v99;
    goto LABEL_90;
  }
  unint64_t v25 = 0;
  while (1)
  {
    char v26 = &v24[3 * v25];
    long long v27 = (char *)*v26;
    long long v30 = (char *)v26[1];
    uint64_t v29 = (char **)(v26 + 1);
    char v28 = v30;
    if (v27 != v30) {
      break;
    }
    ++v25;
LABEL_88:
    char v24 = *(uint64_t **)a3;
    if (v25 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3)) {
      goto LABEL_89;
    }
  }
  if ((void)v93 == *((void *)&v93 + 1))
  {
    uint64_t v32 = (char *)v93;
LABEL_34:
    if (v28 - v27 >= 1)
    {
      uint64_t v34 = (v28 - v27) >> 5;
      uint64_t v35 = (uint64_t)&v32[-v93];
      char v36 = (unsigned char *)(v93 + ((unint64_t)&v32[-v93] & 0xFFFFFFFFFFFFFFE0));
      if (v34 <= ((char *)v94[0] - (char *)v32) >> 5)
      {
        uint64_t v44 = (v32 - v36) >> 5;
        if (v44 >= v34)
        {
          long long v45 = &v27[32 * v34];
          long long v47 = v32;
        }
        else
        {
          long long v45 = &v27[32 * v44];
          int64_t v46 = v28 - v45;
          if (v28 != v45) {
            memmove(v32, &v27[32 * v44], v28 - v45);
          }
          long long v47 = &v32[v46];
          *((void *)&v93 + 1) = &v32[v46];
          if (v32 - v36 < 1) {
            goto LABEL_69;
          }
        }
        long long v48 = &v47[-32 * v34];
        long long v49 = v47;
        while (v48 < v32)
        {
          long long v50 = *(_OWORD *)v48;
          long long v51 = *((_OWORD *)v48 + 1);
          v48 += 32;
          *long long v49 = v50;
          v49[1] = v51;
          v49 += 2;
        }
        long long v52 = &v36[32 * v34];
        *((void *)&v93 + 1) = v49;
        if (v47 != v52) {
          memmove(&v47[-32 * ((v47 - v52) >> 5)], v36, v47 - v52);
        }
        if (v45 != v27) {
          memmove(v36, v27, v45 - v27);
        }
      }
      else
      {
        uint64_t v37 = v35 >> 5;
        unint64_t v38 = (v35 >> 5) + v34;
        if (v38 >> 59) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = (uint64_t)v94[0] - v93;
        if ((uint64_t)((uint64_t)v94[0] - v93) >> 4 > v38) {
          unint64_t v38 = v39 >> 4;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          long long v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)v94, v40);
          uint64_t v43 = v42;
        }
        else
        {
          long long v41 = 0;
          uint64_t v43 = 0;
        }
        long long v53 = &v41[32 * v37];
        long long v54 = &v53[32 * v34];
        uint64_t v55 = 32 * v34;
        int v56 = v53;
        do
        {
          long long v57 = *(_OWORD *)v27;
          long long v58 = *((_OWORD *)v27 + 1);
          v27 += 32;
          *(_OWORD *)int v56 = v57;
          *((_OWORD *)v56 + 1) = v58;
          v56 += 32;
          v55 -= 32;
        }
        while (v55);
        long long v59 = (unsigned char *)v93;
        if ((unsigned char *)v93 == v36)
        {
          long long v62 = v53;
        }
        else
        {
          long long v60 = v36;
          do
          {
            long long v61 = *((_OWORD *)v60 - 1);
            long long v62 = v53 - 32;
            *((_OWORD *)v53 - 2) = *((_OWORD *)v60 - 2);
            *((_OWORD *)v53 - 1) = v61;
            v60 -= 32;
            v53 -= 32;
          }
          while (v60 != v59);
        }
        uint64_t v63 = *((void *)&v93 + 1) - (void)v36;
        if (*((unsigned char **)&v93 + 1) != v36) {
          memmove(v54, v36, *((void *)&v93 + 1) - (void)v36);
        }
        long long v64 = (void *)v93;
        *(void *)&long long v93 = v62;
        *((void *)&v93 + 1) = &v54[v63];
        v94[0] = &v41[32 * v43];
        if (v64) {
          operator delete(v64);
        }
      }
    }
LABEL_69:
    unint64_t v65 = (uint64_t)(*((void *)&v93 + 1) - v93) >> 5;
    if (v65 <= (char *)v94[2] - (char *)v94[1])
    {
      if (v65 < (char *)v94[2] - (char *)v94[1]) {
        v94[2] = (char *)v94[1] + v65;
      }
    }
    else
    {
      std::vector<maps::path_codec::RelativeSide>::__append((unint64_t *)&v94[1], v65 - ((char *)v94[2] - (char *)v94[1]), (unsigned char *)*a4 + 72 * v25 + 45);
    }
    ++v25;
    uint64_t v66 = (uint64_t)*a4 + 72 * v25;
    int v68 = *(unsigned __int8 *)(v66 + 48);
    uint64_t v67 = v66 + 48;
    if (v68)
    {
      double v69 = maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(*a2, *((void *)&v93 + 1) - 32, (maps::path_codec *)((char *)*a4 + 72 * v25));
      double v70 = v69;
      uint64_t v71 = ((uint64_t)(*((void *)&v93 + 1) - v93) >> 5) - 1;
      long long v72 = (double *)v95[1];
      if (v95[1] >= (void *)*(void *)&v96[0])
      {
        unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * (((char *)v95[1] - (char *)v95[0]) >> 4);
        unint64_t v76 = v75 + 1;
        if (v75 + 1 > 0x555555555555555) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*(void *)&v96[0] - (unint64_t)v95[0]) >> 4) > v76) {
          unint64_t v76 = 0x5555555555555556 * ((uint64_t)(*(void *)&v96[0] - (unint64_t)v95[0]) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v96[0] - (unint64_t)v95[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v77 = 0x555555555555555;
        }
        else {
          unint64_t v77 = v76;
        }
        long long v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v77);
        long long v80 = (double *)&v78[48 * v75];
        *(void *)long long v80 = v71;
        v80[1] = v70;
        long long v81 = *(_OWORD *)v67;
        v80[4] = *(double *)(v67 + 16);
        *((_OWORD *)v80 + 1) = v81;
        *((unsigned char *)v80 + 40) = 0;
        uint64_t v83 = (char *)v95[0];
        long long v82 = (char *)v95[1];
        double v84 = v80;
        if (v95[1] != v95[0])
        {
          do
          {
            long long v85 = *((_OWORD *)v82 - 3);
            long long v86 = *((_OWORD *)v82 - 1);
            *((_OWORD *)v84 - 2) = *((_OWORD *)v82 - 2);
            *((_OWORD *)v84 - 1) = v86;
            *((_OWORD *)v84 - 3) = v85;
            v84 -= 6;
            v82 -= 48;
          }
          while (v82 != v83);
          long long v82 = (char *)v95[0];
        }
        long long v74 = v80 + 6;
        v95[0] = v84;
        v95[1] = v80 + 6;
        *(void *)&v96[0] = &v78[48 * v79];
        if (v82) {
          operator delete(v82);
        }
      }
      else
      {
        *(void *)v95[1] = v71;
        v72[1] = v69;
        long long v73 = *(_OWORD *)v67;
        v72[4] = *(double *)(v67 + 16);
        *((_OWORD *)v72 + 1) = v73;
        *((unsigned char *)v72 + 40) = 0;
        long long v74 = v72 + 6;
      }
      v95[1] = v74;
    }
    goto LABEL_88;
  }
  uint64_t v32 = (char *)(*((void *)&v93 + 1) - 32);
  uint64_t v31 = *(void *)(*((void *)&v93 + 1) - 32);
  long long v33 = v27;
  if (!v31)
  {
    uint64_t v31 = *(void *)(*((void *)&v93 + 1) - 24);
    long long v33 = v27 + 8;
  }
  if (v31 == *(void *)v33)
  {
    *((void *)&v93 + 1) -= 32;
    --v94[2];
    char v28 = *v29;
    goto LABEL_34;
  }
  if (maps::path_codec::Logger::m_log_level <= 4u)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v102);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v102, (uint64_t)"Decoded path is disconnected.", 29);
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    maps::path_codec::Logger::log_error((uint64_t)__p, 206, (uint64_t)&v90);
    if (v91 < 0) {
      operator delete(v90);
    }
    if (v101 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v102 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&v102 + *(void *)(v102 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v103 = MEMORY[0x1E4FBA470] + 16;
    if (v105 < 0) {
      operator delete(v104);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18C11F4F0](v106);
  }
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(unsigned char *)(a1 + 128) = 0;
LABEL_90:
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>>>::~__hash_table((uint64_t)v96 + 8);
  if (v95[0])
  {
    v95[1] = v95[0];
    operator delete(v95[0]);
  }
  if (v94[1])
  {
    v94[2] = v94[1];
    operator delete(v94[1]);
  }
  if ((void)v93)
  {
    *((void *)&v93 + 1) = v93;
    operator delete((void *)v93);
  }
}

void sub_189EA5AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  std::ostringstream::~ostringstream((uint64_t)&a46);
  maps::path_codec::RoadNetworkPath<GEOPathMatcherRoadKey>::~RoadNetworkPath(&a20);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<GEOPathMatcherRoadKey>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_189EA5C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t maps::path_codec::estimate_pathlet_length<GEOPathMatcherRoadKey>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3 || (unint64_t)(((v3 - v2) >> 5) - 3) > 0xFFFFFFFFFFFFFFFDLL) {
    return 0;
  }
  LODWORD(v6) = 0;
  unsigned int v7 = 2;
  uint64_t v8 = 1;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 32))(&v12, a1, v2 + 32 * v8, 0);
    int v9 = HIDWORD(v12);
    if (v16 < 0) {
      operator delete(__p);
    }
    if (v13)
    {
      unint64_t v14 = v13;
      operator delete(v13);
    }
    uint64_t v6 = (v9 + v6);
    uint64_t v8 = v7;
    uint64_t v2 = *a2;
  }
  while (((a2[1] - *a2) >> 5) - 1 > (unint64_t)v7++);
  return v6;
}

uint64_t maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  maps::path_codec::estimate_pathlet_length<GEOPathMatcherRoadKey>(*a2, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Pathlet ", 8);
  unsigned int v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" search: ", 9);
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
  if (*a4 == a4[1])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"empty pathlet", 13);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"pathlet (segments:", 18);
    unint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", distance_m:", 13);
    unint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)")", 1);
    double v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"start:", 6);
    char v16 = operator<<(v15, (void *)*a4);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", end:", 6);
    operator<<(v17, (void *)(a4[1] - 32));
  }
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18C11F4F0](&v21);
}

void sub_189EA5F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__init_with_size[abi:ne180100]<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_189EA6000(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void *std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_189EA60D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  int v9 = *(uint64_t **)(a2 + 16);
  size_t v8 = *(uint64_t **)(a2 + 24);
  unint64_t v10 = 0xC066800000000000;
  while (1)
  {
    if (v9 == v8)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      unint64_t v18 = 0xC066800000000000;
      goto LABEL_17;
    }
    (*(void (**)(void **__return_ptr, void *, uint64_t *, uint64_t))(*(void *)a4 + 32))(v150, a4, v9, 1);
    int v11 = HIDWORD(v150[0]);
    if (SHIBYTE(v154) < 0) {
      operator delete(__p[1]);
    }
    if (v150[1])
    {
      *(void **)&long long v151 = v150[1];
      operator delete(v150[1]);
    }
    uint64_t v12 = *(uint64_t **)(a3 + 16);
    unint64_t v13 = *(uint64_t **)(a3 + 24);
    if (v12 != v13)
    {
      while (1)
      {
        unint64_t v14 = v12;
        double v15 = *(double *)v9;
        if (!*v9)
        {
          double v15 = *((double *)v9 + 1);
          unint64_t v14 = v12 + 1;
        }
        if (*(void *)&v15 == *v14) {
          break;
        }
        v12 += 7;
        if (v12 == v13) {
          goto LABEL_15;
        }
      }
    }
    if (v12 != v13
      && (int)llround(*((double *)v9 + 4) * (double)v11) <= (int)llround(*((double *)v12 + 4) * (double)v11))
    {
      break;
    }
LABEL_15:
    v9 += 7;
    size_t v8 = *(uint64_t **)(a2 + 24);
  }
  uint64_t v17 = *v12;
  uint64_t v16 = v12[1];
  unint64_t v18 = v12[2];
  unint64_t v10 = v12[3];
LABEL_17:
  if (v17 | v16)
  {
    if (!maps::path_codec::Logger::m_log_level)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v150);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"Decoded single-segment path.", 28);
      std::string::basic_string[abi:ne180100]<0>(&v135, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_trace((uint64_t)&v135, 155, (uint64_t)v144);
      if (SBYTE7(v145) < 0) {
        operator delete(v144[0]);
      }
      if (SHIBYTE(v137) < 0) {
        operator delete(v135);
      }
      v150[0] = *(void **)MEMORY[0x1E4FBA418];
      *(void **)((char *)v150 + *((void *)v150[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
      v150[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (v157 < 0) {
        operator delete(v156);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18C11F4F0](v158);
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    long long v19 = operator new(0x20uLL);
    a1[1] = v19 + 4;
    a1[2] = v19 + 4;
    *long long v19 = v17;
    v19[1] = v16;
    v19[2] = v18;
    v19[3] = v10;
    *a1 = v19;
    return;
  }
  signed int v124 = maps::path_codec::compute_search_radius<GEOPathMatcherRoadKey>(*(_DWORD *)(a2 + 40), *(_DWORD *)(a3 + 40), a5);
  if (!maps::path_codec::Logger::m_log_level)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v150);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"Max exploration distance: ", 26);
    char v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" m.", 3);
    std::string::basic_string[abi:ne180100]<0>(&v135, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
    std::stringbuf::str();
    maps::path_codec::Logger::log_trace((uint64_t)&v135, 161, (uint64_t)v144);
    if (SBYTE7(v145) < 0) {
      operator delete(v144[0]);
    }
    if (SHIBYTE(v137) < 0) {
      operator delete(v135);
    }
    v150[0] = *(void **)MEMORY[0x1E4FBA418];
    *(void **)((char *)v150 + *((void *)v150[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    v150[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v157 < 0) {
      operator delete(v156);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18C11F4F0](v158);
  }
  long long v147 = 0;
  long long v148 = 0;
  long long v149 = 0;
  long long v145 = 0u;
  long long v146 = 0u;
  *(_OWORD *)long long v144 = 0u;
  uint64_t v21 = *(long long **)(a2 + 24);
  if (v21 == *(long long **)(a2 + 16)) {
    goto LABEL_175;
  }
  do
  {
    uint64_t v21 = (long long *)((char *)v21 - 56);
    (*(void (**)(void *, long long *, void **))(*(void *)a4 + 72))(a4, v21, &v147);
    if (*(unsigned char *)(a2 + 44))
    {
      long long v22 = v148;
    }
    else
    {
      (*(void (**)(void **__return_ptr, void *, long long *))(*(void *)a4 + 8))(v150, a4, v21);
      char v26 = (char *)v147;
      long long v22 = v148;
      if (v147 == v148)
      {
        long long v22 = (char *)v147;
      }
      else
      {
        while (1)
        {
          long long v27 = *(void **)v26;
          if (*(void *)v26)
          {
            char v28 = v150[0];
          }
          else
          {
            long long v27 = (void *)*((void *)v26 + 1);
            char v28 = v150[1];
          }
          if (v27 == v28) {
            break;
          }
          v26 += 32;
          if (v26 == v148) {
            goto LABEL_38;
          }
        }
        if (v26 != v148)
        {
          for (uint64_t i = v26 + 32; i != v22; i += 32)
          {
            long long v30 = *(void **)i;
            if (!*(void *)i) {
              long long v30 = (void *)*((void *)i + 1);
            }
            uint64_t v31 = &v150[1];
            if (*(void *)i) {
              uint64_t v31 = v150;
            }
            if (v30 != *v31)
            {
              long long v32 = *((_OWORD *)i + 1);
              *(_OWORD *)char v26 = *(_OWORD *)i;
              *((_OWORD *)v26 + 1) = v32;
              v26 += 32;
            }
          }
          if (v22 != v26)
          {
            long long v22 = v26;
            long long v148 = v26;
          }
        }
      }
    }
LABEL_38:
    long long v23 = v21[1];
    long long v142 = *v21;
    long long v143 = v23;
    v140[1] = 0;
    uint64_t v141 = 0;
    v140[0] = 0;
    std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(v140, v147, (uint64_t)v22, (v22 - (unsigned char *)v147) >> 5);
    *(_OWORD *)long long v150 = v142;
    long long v151 = v143;
    *(_OWORD *)__p = *(_OWORD *)v140;
    uint64_t v24 = v141;
    v140[0] = 0;
    v140[1] = 0;
    uint64_t v141 = 0;
    uint64_t v153 = v24;
    uint64_t v154 = -1;
    BOOL v155 = 0;
    LODWORD(v156) = 0;
    __n128 v25 = std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::emplace_back<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>(v144, (uint64_t)v150);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v140[0])
    {
      v140[1] = v140[0];
      operator delete(v140[0]);
    }
  }
  while (v21 != *(long long **)(a2 + 16));
  uint64_t v33 = *((void *)&v146 + 1);
  if (!*((void *)&v146 + 1) || !*(_DWORD *)(a5 + 80))
  {
LABEL_175:
    uint64_t v79 = a1;
    goto LABEL_176;
  }
  unint64_t v125 = 0;
  long long v122 = (void *)*MEMORY[0x1E4FBA418];
  long long v121 = *(void **)(MEMORY[0x1E4FBA418] + 24);
  while (1)
  {
    unint64_t v34 = v33 + v146 - 1;
    uint64_t v35 = *((void *)v144[1] + v34 / 0x33);
    unint64_t v36 = v34 % 0x33;
    uint64_t v37 = (void *)(v35 + 80 * (v34 % 0x33));
    uint64_t v39 = (long long **)(v37 + 4);
    unint64_t v38 = (long long *)v37[4];
    long long v41 = v37 + 7;
    uint64_t v40 = v37[7];
    uint64_t v43 = (long long **)(v37 + 5);
    uint64_t v42 = (long long *)v37[5];
    if (v40 == ((char *)v42 - (char *)v38) >> 5)
    {
      std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::pop_back(v144);
      goto LABEL_173;
    }
    if (v40 != -1)
    {
      uint64_t v44 = &v38[2 * v40];
      void *v41 = v40 + 1;
      (*(void (**)(void **__return_ptr, void *, long long *, void, __n128))(*(void *)a4 + 32))(&v135, a4, v44, 0, v25);
      uint64_t v45 = v35 + 80 * v36;
      int v47 = *(_DWORD *)(v45 + 72);
      int64_t v46 = (_DWORD *)(v45 + 72);
      if (v47 + HIDWORD(v135) <= v124)
      {
        (*(void (**)(void *, long long *, void **))(*(void *)a4 + 72))(a4, v44, &v147);
        if (*(void *)(v35 + 80 * v36 + 64)) {
          BOOL v60 = 1;
        }
        else {
          BOOL v60 = *(unsigned char *)(a2 + 44) == 0;
        }
        if (v60)
        {
          (*(void (**)(void **__return_ptr, void *, long long *))(*(void *)a4 + 8))(v150, a4, v44);
          long long v61 = (char *)v147;
          long long v64 = v148;
          if (v147 == v148)
          {
            long long v64 = (char *)v147;
          }
          else
          {
            while (1)
            {
              long long v62 = *(void **)v61;
              if (*(void *)v61)
              {
                uint64_t v63 = v150[0];
              }
              else
              {
                long long v62 = (void *)*((void *)v61 + 1);
                uint64_t v63 = v150[1];
              }
              if (v62 == v63) {
                break;
              }
              v61 += 32;
              if (v61 == v148) {
                goto LABEL_165;
              }
            }
            if (v61 != v148)
            {
              for (j = v61 + 32; j != v64; j += 32)
              {
                long long v73 = *(void **)j;
                if (!*(void *)j) {
                  long long v73 = (void *)*((void *)j + 1);
                }
                long long v74 = &v150[1];
                if (*(void *)j) {
                  long long v74 = v150;
                }
                if (v73 != *v74)
                {
                  long long v75 = *((_OWORD *)j + 1);
                  *(_OWORD *)long long v61 = *(_OWORD *)j;
                  *((_OWORD *)v61 + 1) = v75;
                  v61 += 32;
                }
              }
              if (v64 != v61)
              {
                long long v64 = v61;
                long long v148 = v61;
              }
            }
          }
        }
        else
        {
          long long v64 = v148;
        }
LABEL_165:
        long long v76 = v44[1];
        long long v129 = *v44;
        long long v130 = v76;
        v127[1] = 0;
        uint64_t v128 = 0;
        v127[0] = 0;
        std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(v127, v147, (uint64_t)v64, (v64 - (unsigned char *)v147) >> 5);
        int v77 = *v46 + HIDWORD(v135);
        *(_OWORD *)long long v150 = v129;
        long long v151 = v130;
        *(_OWORD *)__p = *(_OWORD *)v127;
        uint64_t v78 = v128;
        v127[0] = 0;
        v127[1] = 0;
        uint64_t v128 = 0;
        uint64_t v153 = v78;
        uint64_t v154 = -1;
        BOOL v155 = v37;
        LODWORD(v156) = v77;
        __n128 v25 = std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::emplace_back<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>(v144, (uint64_t)v150);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (v127[0])
        {
          v127[1] = v127[0];
          operator delete(v127[0]);
        }
      }
      else if (!maps::path_codec::Logger::m_log_level)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v150);
        long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"Reached max exploration at ", 27);
        operator<<(v48, v44);
        std::string::basic_string[abi:ne180100]<0>(v133, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_trace((uint64_t)v133, 210, (uint64_t)v131);
        if (v132 < 0) {
          operator delete(v131[0]);
        }
        if (v134 < 0) {
          operator delete(v133[0]);
        }
        v150[0] = v122;
        *(void **)((char *)v150 + *((void *)v122 - 3)) = v121;
        v150[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (v157 < 0) {
          operator delete(v156);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18C11F4F0](v158);
      }
      if (v139 < 0) {
        operator delete(v138);
      }
      if (v136)
      {
        long long v137 = v136;
        operator delete(v136);
      }
      goto LABEL_173;
    }
    if (!maps::path_codec::Logger::m_log_level)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v150);
      long long v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"Exploring ", 10);
      operator<<(v49, v37);
      std::string::basic_string[abi:ne180100]<0>(&v135, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_trace((uint64_t)&v135, 233, (uint64_t)v133);
      if (v134 < 0) {
        operator delete(v133[0]);
      }
      if (SHIBYTE(v137) < 0) {
        operator delete(v135);
      }
      v150[0] = v122;
      *(void **)((char *)v150 + *((void *)v122 - 3)) = v121;
      v150[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (v157 < 0) {
        operator delete(v156);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18C11F4F0](v158);
      unint64_t v38 = *v39;
      uint64_t v42 = (long long *)v37[5];
    }
    void *v41 = 0;
    long long v50 = *(void **)(a3 + 16);
    long long v51 = *(void **)(a3 + 24);
    long long v52 = v42;
    if (v50 != v51)
    {
      while (1)
      {
        if (v38 != v42)
        {
          long long v52 = v38;
          while (1)
          {
            uint64_t v53 = *(void *)v52;
            if (*(void *)v52) {
              long long v54 = v50;
            }
            else {
              long long v54 = v50 + 1;
            }
            if (!*(void *)v52) {
              uint64_t v53 = *((void *)v52 + 1);
            }
            if (v53 == *v54) {
              break;
            }
            v52 += 2;
            if (v52 == v42) {
              goto LABEL_99;
            }
          }
          if (v52 != v42) {
            break;
          }
        }
LABEL_99:
        v50 += 7;
        if (v50 == v51)
        {
          long long v52 = v42;
          break;
        }
      }
    }
    if (v42 != v52) {
      break;
    }
    ++v125;
    if ((unint64_t)((char *)v42 - (char *)v38) >= 0x21)
    {
      LOWORD(v131[0]) = (*(uint64_t (**)(void *, void *, __n128))(*(void *)a4 + 56))(a4, v37, v25);
      uint64_t v55 = *v39;
      int v56 = *v43;
      if (*v39 == *v43) {
        goto LABEL_140;
      }
      long long v57 = *v43;
      while (1)
      {
        int v58 = (*(uint64_t (**)(void *, long long *))(*(void *)a4 + 48))(a4, v55);
        int v59 = v58 + 360 * ((unsigned __int16)(LOWORD(v131[0]) + 180) / 0x168u) - (LOWORD(v131[0]) + 180);
        if ((__int16)(v58 + 360 * ((unsigned __int16)(LOWORD(v131[0]) + 180) / 0x168u) - (LOWORD(v131[0]) + 180)) > 180) {
          LOWORD(v59) = v59 - 360;
        }
        if ((__int16)v59 < -179) {
          LOWORD(v59) = v59 + 360;
        }
        int v59 = (__int16)v59;
        if ((v59 & 0x8000u) != 0) {
          int v59 = -(__int16)v59;
        }
        if (v59 > *(__int16 *)(a5 + 84)) {
          break;
        }
        v55 += 2;
        if (v55 == v56) {
          goto LABEL_141;
        }
      }
      if (v55 == v56) {
        goto LABEL_141;
      }
      unint64_t v65 = v55 + 2;
      if (v55 + 2 == v56)
      {
LABEL_140:
        long long v57 = v55;
      }
      else
      {
        long long v57 = v55;
        do
        {
          int v66 = (*(uint64_t (**)(void *, long long *))(*(void *)a4 + 48))(a4, v65);
          int v67 = v66 + 360 * ((unsigned __int16)(LOWORD(v131[0]) + 180) / 0x168u) - (LOWORD(v131[0]) + 180);
          if ((__int16)(v66 + 360 * ((unsigned __int16)(LOWORD(v131[0]) + 180) / 0x168u) - (LOWORD(v131[0]) + 180)) > 180) {
            LOWORD(v67) = v67 - 360;
          }
          if ((__int16)v67 < -179) {
            LOWORD(v67) = v67 + 360;
          }
          int v67 = (__int16)v67;
          if ((v67 & 0x8000u) != 0) {
            int v67 = -(__int16)v67;
          }
          if (v67 <= *(__int16 *)(a5 + 84))
          {
            long long v68 = v65[1];
            *long long v57 = *v65;
            v57[1] = v68;
            v57 += 2;
          }
          v65 += 2;
        }
        while (v65 != v56);
      }
LABEL_141:
      double v69 = *v39;
      if (*v43 != v57) {
        *uint64_t v43 = v57;
      }
      if (v69 == v57)
      {
        std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::pop_back(v144);
        if (!maps::path_codec::Logger::m_log_level)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v150);
          double v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"Segment ", 8);
          uint64_t v71 = operator<<(v70, v37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" does not have any outgoing segments after pruning.", 51);
          std::string::basic_string[abi:ne180100]<0>(&v135, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
          std::stringbuf::str();
          maps::path_codec::Logger::log_trace((uint64_t)&v135, 263, (uint64_t)v133);
          if (v134 < 0) {
            operator delete(v133[0]);
          }
          if (SHIBYTE(v137) < 0) {
            operator delete(v135);
          }
          v150[0] = v122;
          *(void **)((char *)v150 + *((void *)v122 - 3)) = v121;
          v150[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
          if (v157 < 0) {
            operator delete(v156);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18C11F4F0](v158);
        }
      }
      else
      {
        v150[0] = a4;
        v150[1] = v131;
        std::__introsort<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*,false>(v69, v57, v150, 126 - 2 * __clz(((char *)v57 - (char *)v69) >> 5), 1);
      }
    }
LABEL_173:
    uint64_t v33 = *((void *)&v146 + 1);
    if (!*((void *)&v146 + 1) || v125 >= *(unsigned int *)(a5 + 80)) {
      goto LABEL_175;
    }
  }
  *(_OWORD *)long long v150 = *v38;
  long long v80 = *(_OWORD *)v150;
  long long v151 = v38[1];
  long long v81 = v151;
  long long v82 = v52[1];
  *unint64_t v38 = *v52;
  v38[1] = v82;
  *long long v52 = v80;
  v52[1] = v81;
  void *v41 = 1;
  uint64_t v83 = (char *)v147;
  long long v148 = (char *)v147;
  unint64_t v84 = *((void *)v144[1] + (*((void *)&v146 + 1) + (void)v146 - 1) / 0x33uLL)
      + 80 * ((*((void *)&v146 + 1) + (void)v146 - 1) % 0x33uLL);
  do
  {
    unint64_t v85 = v84;
    long long v86 = (_OWORD *)(*(void *)(v84 + 32) + 32 * *(void *)(v84 + 56) - 32);
    if (v83 >= v149)
    {
      uint64_t v88 = (char *)v147;
      uint64_t v89 = (v83 - (unsigned char *)v147) >> 5;
      unint64_t v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 59) {
        goto LABEL_226;
      }
      uint64_t v91 = v149 - (unsigned char *)v147;
      if ((v149 - (unsigned char *)v147) >> 4 > v90) {
        unint64_t v90 = v91 >> 4;
      }
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v92 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v92 = v90;
      }
      if (v92)
      {
        long long v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)&v149, v92);
        uint64_t v88 = (char *)v147;
        uint64_t v83 = v148;
      }
      else
      {
        long long v93 = 0;
      }
      long long v94 = v86[1];
      uint64_t v95 = &v93[32 * v89];
      *(_OWORD *)uint64_t v95 = *v86;
      *((_OWORD *)v95 + 1) = v94;
      if (v83 == v88)
      {
        int v98 = &v93[32 * v89];
      }
      else
      {
        long long v96 = &v93[32 * v89];
        do
        {
          long long v97 = *((_OWORD *)v83 - 1);
          int v98 = v96 - 32;
          *((_OWORD *)v96 - 2) = *((_OWORD *)v83 - 2);
          *((_OWORD *)v96 - 1) = v97;
          v83 -= 32;
          v96 -= 32;
        }
        while (v83 != v88);
      }
      uint64_t v83 = v95 + 32;
      long long v147 = v98;
      long long v148 = v95 + 32;
      long long v149 = &v93[32 * v92];
      if (v88) {
        operator delete(v88);
      }
    }
    else
    {
      long long v87 = *(_OWORD *)(*(void *)(v84 + 32) + 32 * *(void *)(v84 + 56) - 16);
      *(_OWORD *)uint64_t v83 = *v86;
      *((_OWORD *)v83 + 1) = v87;
      v83 += 32;
    }
    long long v148 = v83;
    unint64_t v84 = *(void *)(v85 + 64);
  }
  while (v84);
  if (v83 >= v149)
  {
    uint64_t v102 = (char *)v147;
    uint64_t v103 = (v83 - (unsigned char *)v147) >> 5;
    unint64_t v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 59) {
LABEL_226:
    }
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    uint64_t v105 = v149 - (unsigned char *)v147;
    if ((v149 - (unsigned char *)v147) >> 4 > v104) {
      unint64_t v104 = v105 >> 4;
    }
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v106 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v106 = v104;
    }
    if (v106)
    {
      long long v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)&v149, v106);
      uint64_t v102 = (char *)v147;
      uint64_t v83 = v148;
    }
    else
    {
      long long v107 = 0;
    }
    uint64_t v108 = &v107[32 * v103];
    long long v109 = *(_OWORD *)(v85 + 16);
    long long v110 = &v107[32 * v106];
    *(_OWORD *)uint64_t v108 = *(_OWORD *)v85;
    *((_OWORD *)v108 + 1) = v109;
    int64_t v100 = v108 + 32;
    char v101 = a1;
    if (v83 == v102)
    {
      uint64_t v112 = v108;
    }
    else
    {
      do
      {
        long long v111 = *((_OWORD *)v83 - 1);
        uint64_t v112 = v108 - 32;
        *((_OWORD *)v108 - 2) = *((_OWORD *)v83 - 2);
        *((_OWORD *)v108 - 1) = v111;
        v83 -= 32;
        v108 -= 32;
      }
      while (v83 != v102);
    }
    long long v147 = v112;
    long long v148 = v100;
    long long v149 = v110;
    if (v102) {
      operator delete(v102);
    }
  }
  else
  {
    long long v99 = *(_OWORD *)(v85 + 16);
    *(_OWORD *)uint64_t v83 = *(_OWORD *)v85;
    *((_OWORD *)v83 + 1) = v99;
    int64_t v100 = v83 + 32;
    char v101 = a1;
  }
  long long v148 = v100;
  uint64_t v113 = v147;
  long long v114 = v100 - 32;
  if (v147 != v100 && v114 > v147)
  {
    long long v116 = (char *)v147 + 32;
    do
    {
      *(_OWORD *)long long v150 = *((_OWORD *)v116 - 2);
      long long v117 = *(_OWORD *)v150;
      long long v151 = *((_OWORD *)v116 - 1);
      long long v118 = v151;
      long long v119 = *((_OWORD *)v114 + 1);
      *((_OWORD *)v116 - 2) = *(_OWORD *)v114;
      *((_OWORD *)v116 - 1) = v119;
      *(_OWORD *)long long v114 = v117;
      *((_OWORD *)v114 + 1) = v118;
      v114 -= 32;
      BOOL v120 = v116 >= v114;
      v116 += 32;
    }
    while (!v120);
  }
  *char v101 = v113;
  v101[1] = v100;
  v101[2] = v149;
  uint64_t v79 = &v147;
LABEL_176:
  *uint64_t v79 = 0;
  v79[1] = 0;
  v79[2] = 0;
  std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::~deque[abi:ne180100]((uint64_t)v144);
  if (v147)
  {
    long long v148 = (char *)v147;
    operator delete(v147);
  }
}

void sub_189EA73C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  std::ostringstream::~ostringstream((uint64_t)&a63);
  std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::~deque[abi:ne180100]((uint64_t)&a53);
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  _Unwind_Resume(a1);
}

void sub_189EA753C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a39) {
    operator delete(a39);
  }
  JUMPOUT(0x189EA751CLL);
}

void *maps::path_codec::build_best_score_terminal<GEOPathMatcherRoadKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(double **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  double v6 = v4[5];
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v7 = (uint64_t *)(a1 + 16);
  __n128 result = std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__init_with_size[abi:ne180100]<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*>((void *)(a1 + 16), v4, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - (uint64_t)v4) >> 3));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v9 = *v7;
  uint64_t v10 = *(void *)(a1 + 24);
  if (*v7 != v10)
  {
    while (*(double *)(v9 + 40) <= v6)
    {
      v9 += 56;
      if (v9 == v10) {
        return result;
      }
    }
  }
  if (v9 != v10) {
    *(void *)(a1 + 24) = v9;
  }
  return result;
}

void maps::path_codec::filter_snapped_support_point<GEOPathMatcherRoadKey>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __p = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 72))(a2, a1, &__p);
  uint64_t v5 = *(void **)(a3 + 16);
  uint64_t v4 = *(void **)(a3 + 24);
  double v6 = (char *)__p;
  if (v5 != v4)
  {
    uint64_t v7 = v20;
    if (__p == v20)
    {
LABEL_11:
      if (v5 != v4)
      {
        uint64_t v10 = v5 + 7;
        if (v5 + 7 != v4)
        {
          int v11 = v5;
          do
          {
            uint64_t v12 = v5;
            uint64_t v5 = v10;
            if (v6 != v7)
            {
              uint64_t v13 = v12[8];
              uint64_t v14 = 8 * (*v10 == 0);
              if (*v5) {
                uint64_t v13 = *v5;
              }
              double v15 = v6;
              while (v13 != *(void *)&v15[v14])
              {
                v15 += 32;
                if (v15 == v7) {
                  goto LABEL_22;
                }
              }
              long long v16 = *(_OWORD *)v5;
              long long v17 = *((_OWORD *)v5 + 1);
              long long v18 = *((_OWORD *)v5 + 2);
              *((_DWORD *)v11 + 12) = *((_DWORD *)v5 + 12);
              *((_OWORD *)v11 + 1) = v17;
              *((_OWORD *)v11 + 2) = v18;
              *(_OWORD *)int v11 = v16;
              v11 += 7;
            }
LABEL_22:
            uint64_t v10 = v5 + 7;
          }
          while (v5 + 7 != v4);
          uint64_t v4 = *(void **)(a3 + 24);
          uint64_t v5 = v11;
        }
        if (v4 != v5) {
          *(void *)(a3 + 24) = v5;
        }
      }
    }
    else
    {
      do
      {
        uint64_t v8 = *v5;
        if (!*v5) {
          uint64_t v8 = v5[1];
        }
        uint64_t v9 = (char *)__p;
        while (v8 != *(void *)&v9[8 * (*v5 == 0)])
        {
          v9 += 32;
          if (v9 == v20) {
            goto LABEL_11;
          }
        }
        v5 += 7;
      }
      while (v5 != v4);
    }
  }
  if (v6)
  {
    char v20 = v6;
    operator delete(v6);
  }
}

void sub_189EA77D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t maps::path_codec::align_pathlets<GEOPathMatcherRoadKey>(uint64_t a1, void **a2, void **a3)
{
  uint64_t v5 = (char *)a3[1];
  double v6 = *a2;
  uint64_t v7 = *((void *)v5 - 4);
  if (!v7)
  {
    uint64_t v7 = *((void *)v5 - 3);
    ++v6;
  }
  if (v7 == *v6) {
    return 1;
  }
  unint64_t v9 = v5 - (unsigned char *)*a3;
  if (v9 > 0x3F)
  {
    unint64_t v10 = (unint64_t)*a3 + v9;
    long long v11 = *(_OWORD *)(v10 - 48);
    *(_OWORD *)unint64_t v34 = *(_OWORD *)(v10 - 64);
    long long v35 = v11;
    __p = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    (*(void (**)(uint64_t, void **, void **))(*(void *)a1 + 64))(a1, v34, &__p);
    uint64_t v12 = __p;
    if (__p != v37)
    {
      while (1)
      {
        uint64_t v13 = *v12;
        if (!*v12) {
          uint64_t v13 = v12[1];
        }
        if (v13 == (*a2)[*v12 == 0]) {
          break;
        }
        v12 += 4;
        if (v12 == v37) {
          goto LABEL_24;
        }
      }
    }
    if (v12 == v37)
    {
LABEL_24:
      if (maps::path_codec::Logger::m_log_level <= 4u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Could not align pathlets.", 25);
        std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_error((uint64_t)v32, 344, (uint64_t)&v30);
        if (v31 < 0) {
          operator delete(v30);
        }
        if (v33 < 0) {
          operator delete(v32[0]);
        }
        uint64_t v39 = *MEMORY[0x1E4FBA418];
        *(uint64_t *)((char *)&v39 + *(void *)(v39 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        uint64_t v40 = MEMORY[0x1E4FBA470] + 16;
        if (v42 < 0) {
          operator delete(v41);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18C11F4F0](v43);
      }
      uint64_t v8 = 0;
    }
    else
    {
      unint64_t v14 = (unint64_t)a3[2];
      double v15 = a3[1];
      long long v16 = (char *)(v15 - 2);
      a3[1] = v15 - 2;
      if ((unint64_t)(v15 - 2) >= v14)
      {
        uint64_t v18 = (v16 - (unsigned char *)*a3) >> 5;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 59) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v14 - (void)*a3;
        if (v20 >> 4 > v19) {
          unint64_t v19 = v20 >> 4;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(a3 + 2), v21);
        }
        else {
          long long v22 = 0;
        }
        long long v23 = &v22[32 * v18];
        uint64_t v24 = &v22[32 * v21];
        long long v25 = *((_OWORD *)v12 + 1);
        *(_OWORD *)long long v23 = *(_OWORD *)v12;
        *((_OWORD *)v23 + 1) = v25;
        double v15 = v23 + 32;
        long long v27 = (char *)*a3;
        char v26 = (char *)a3[1];
        if (v26 != *a3)
        {
          do
          {
            long long v28 = *((_OWORD *)v26 - 1);
            *((_OWORD *)v23 - 2) = *((_OWORD *)v26 - 2);
            *((_OWORD *)v23 - 1) = v28;
            v23 -= 32;
            v26 -= 32;
          }
          while (v26 != v27);
          char v26 = (char *)*a3;
        }
        *a3 = v23;
        a3[1] = v15;
        a3[2] = v24;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        long long v17 = *((_OWORD *)v12 + 1);
        *(_OWORD *)long long v16 = *(_OWORD *)v12;
        *(v15 - 1) = v17;
      }
      a3[1] = v15;
      uint64_t v8 = 1;
    }
    if (__p)
    {
      uint64_t v37 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (maps::path_codec::Logger::m_log_level <= 1u)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Previous pathlet is a single-segment pathlet, alignment not possible.", 69);
      std::string::basic_string[abi:ne180100]<0>(v34, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_debug((uint64_t)v34, 331, (uint64_t)&__p);
      if (SHIBYTE(v38) < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v35) < 0) {
        operator delete(v34[0]);
      }
      uint64_t v39 = *MEMORY[0x1E4FBA418];
      *(uint64_t *)((char *)&v39 + *(void *)(v39 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v40 = MEMORY[0x1E4FBA470] + 16;
      if (v42 < 0) {
        operator delete(v41);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18C11F4F0](v43);
    }
    return 0;
  }
  return v8;
}

void sub_189EA7C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::ostringstream::~ostringstream((uint64_t)&a34);
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

unsigned int maps::path_codec::compute_search_radius<GEOPathMatcherRoadKey>(int a1, int a2, uint64_t a3)
{
  if (a1 == 0x7FFFFFFF || a2 == 0x7FFFFFFF) {
    return llround((double)*(int *)(a3 + 56) * 1.2);
  }
  int v5 = a2 - a1;
  if (a2 - a1 < 0) {
    int v5 = a1 - a2;
  }
  signed int v6 = *(_DWORD *)(a3 + 72) + v5;
  signed int v7 = llround(*(double *)(a3 + 64) * (double)v5);
  if (v6 <= v7) {
    return v7;
  }
  else {
    return v6;
  }
}

__n128 std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::emplace_back<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  int v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 51 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x33)
    {
      long long v23 = (char *)a1[3];
      uint64_t v24 = (char *)*a1;
      uint64_t v25 = (uint64_t)&v23[-*a1];
      if (v6 >= v25 >> 3)
      {
        uint64_t v28 = v25 >> 2;
        if (v23 == v24) {
          unint64_t v29 = 1;
        }
        else {
          unint64_t v29 = v28;
        }
        long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v29);
        uint64_t v32 = v31;
        char v33 = operator new(0xFF0uLL);
        unint64_t v34 = &v30[8 * v6];
        long long v35 = &v30[8 * v32];
        if (v6 == v32)
        {
          uint64_t v36 = 8 * v6;
          if (v5 - v4 < 1)
          {
            long long v74 = v33;
            uint64_t v75 = v36 >> 2;
            if (v5 == v4) {
              unint64_t v76 = 1;
            }
            else {
              unint64_t v76 = v75;
            }
            int v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v76);
            unint64_t v34 = &v77[8 * (v76 >> 2)];
            long long v35 = &v77[8 * v78];
            if (v30) {
              operator delete(v30);
            }
            long long v30 = v77;
            char v33 = v74;
          }
          else
          {
            uint64_t v37 = v36 >> 3;
            if (v37 >= -1) {
              unint64_t v38 = v37 + 1;
            }
            else {
              unint64_t v38 = v37 + 2;
            }
            v34 -= 8 * (v38 >> 1);
          }
        }
        *(void *)unint64_t v34 = v33;
        uint64_t v79 = v34 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v34 == v30)
          {
            if (v79 >= v35)
            {
              if (v35 == v30) {
                unint64_t v85 = 1;
              }
              else {
                unint64_t v85 = (v35 - v30) >> 2;
              }
              long long v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v85);
              uint64_t v88 = v86;
              unint64_t v34 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v90 = v79 - v30;
              BOOL v89 = v79 == v30;
              uint64_t v79 = v34;
              if (!v89)
              {
                uint64_t v79 = &v34[v90 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v91 = 8 * (v90 >> 3);
                unint64_t v92 = v34;
                long long v93 = (uint64_t *)v30;
                do
                {
                  uint64_t v94 = *v93++;
                  *(void *)unint64_t v92 = v94;
                  v92 += 8;
                  v91 -= 8;
                }
                while (v91);
              }
              long long v35 = &v86[8 * v87];
              if (v30) {
                operator delete(v30);
              }
              long long v30 = v88;
            }
            else
            {
              uint64_t v81 = (v35 - v79) >> 3;
              if (v81 >= -1) {
                uint64_t v82 = v81 + 1;
              }
              else {
                uint64_t v82 = v81 + 2;
              }
              uint64_t v83 = v82 >> 1;
              unint64_t v34 = &v30[8 * (v82 >> 1)];
              unint64_t v84 = v30;
              if (v79 != v30)
              {
                memmove(v34, v30, v79 - v30);
                unint64_t v84 = v79;
              }
              uint64_t v79 = &v84[8 * v83];
            }
          }
          uint64_t v95 = *(void *)(i - 8);
          *((void *)v34 - 1) = v95;
          v34 -= 8;
        }
        long long v96 = (char *)*a1;
        *a1 = v30;
        a1[1] = v34;
        a1[2] = v79;
        a1[3] = v35;
        if (v96) {
          operator delete(v96);
        }
        goto LABEL_36;
      }
      char v26 = operator new(0xFF0uLL);
      long long v27 = v26;
      if (v23 == v5)
      {
        if (v4 == v24)
        {
          if (v5 == v4) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = (v23 - v4) >> 2;
          }
          uint64_t v53 = 2 * v52;
          long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v52);
          uint64_t v4 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v56 = (uint64_t *)a1[1];
          long long v57 = v4;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            long long v57 = &v4[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            BOOL v60 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v61 = *v56++;
              *(void *)BOOL v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          long long v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v4;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v27;
        uint64_t v63 = (char *)a1[1];
        long long v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            int v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v97);
            int64_t v100 = &v98[8 * (v97 >> 2)];
            char v101 = (uint64_t *)a1[1];
            long long v64 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              long long v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              unint64_t v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)unint64_t v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            unint64_t v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              long long v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v15 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v15) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            long long v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              uint64_t v63 = (char *)a1[1];
            }
            long long v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)long long v64 = v65;
      }
      else
      {
        *(void *)int v5 = v26;
      }
    }
    else
    {
      a1[4] = v8 - 51;
      uint64_t v12 = *(void *)v4;
      unint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v39 = 1;
          }
          else {
            unint64_t v39 = (uint64_t)&v5[-*a1] >> 2;
          }
          uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v39);
          char v42 = &v40[8 * (v39 >> 2)];
          uint64_t v43 = (uint64_t *)a1[1];
          int v5 = v42;
          uint64_t v44 = a1[2] - (void)v43;
          if (v44)
          {
            int v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v45 = 8 * (v44 >> 3);
            int64_t v46 = &v40[8 * (v39 >> 2)];
            do
            {
              uint64_t v47 = *v43++;
              *(void *)int64_t v46 = v47;
              v46 += 8;
              v45 -= 8;
            }
            while (v45);
          }
          long long v48 = (char *)*a1;
          *a1 = v40;
          a1[1] = v42;
          a1[2] = v5;
          a1[3] = &v40[8 * v41];
          if (v48)
          {
            operator delete(v48);
            int v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          uint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            int v5 = (char *)a1[1];
          }
          long long v22 = &v5[8 * v18];
          int v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(void *)int v5 = v11;
    }
    a1[2] += 8;
LABEL_36:
    uint64_t v4 = (char *)a1[1];
    unint64_t v9 = a1[5] + a1[4];
  }
  unint64_t v49 = *(void *)&v4[8 * (v9 / 0x33)] + 80 * (v9 % 0x33);
  long long v50 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v49 = *(_OWORD *)a2;
  *(_OWORD *)(v49 + 16) = v50;
  *(void *)(v49 + 40) = 0;
  *(void *)(v49 + 48) = 0;
  *(void *)(v49 + 32) = 0;
  *(_OWORD *)(v49 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v49 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(_DWORD *)(v49 + 72) = *(_DWORD *)(a2 + 72);
  *(__n128 *)(v49 + 56) = result;
  ++a1[5];
  return result;
}

void sub_189EA82B0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::pop_back(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 8 * (v3 / 0x33));
  unint64_t v6 = *(void **)(v5 + 80 * (v3 % 0x33) + 32);
  if (v6)
  {
    *(void *)(v5 + 80 * (v3 % 0x33) + 40) = v6;
    operator delete(v6);
    uint64_t v2 = a1[5] - 1;
    uint64_t v4 = a1[1];
    unint64_t v3 = a1[4] + v2;
  }
  uint64_t v7 = a1[2];
  a1[5] = v2;
  if (v7 == v4) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 51 * ((v7 - v4) >> 3) - 1;
  }
  if (v8 - v3 >= 0x66)
  {
    operator delete(*(void **)(v7 - 8));
    a1[2] -= 8;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*,false>(long long *a1, long long *a2, void *a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v6 = a2;
    uint64_t v7 = a1;
    long long v214 = a2 - 2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = (char *)v6 - (char *)v7;
          a1 = v7;
          unint64_t v219 = ((char *)v6 - (char *)v7) >> 5;
          if (v219 <= 5)
          {
            switch(v219)
            {
              case 2uLL:
                int v98 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v214);
                int v99 = v98
                    + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                    - (*(unsigned __int16 *)a3[1]
                     + 180);
                if ((__int16)(v98 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                   - (*(_WORD *)a3[1]
                                    + 180)) > 180)
                  LOWORD(v99) = v99 - 360;
                if ((__int16)v99 < -179) {
                  LOWORD(v99) = v99 + 360;
                }
                if ((v99 & 0x8000u) != 0) {
                  int v99 = -(__int16)v99;
                }
                unsigned int v100 = (unsigned __int16)v99;
                int v101 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v7);
                int v102 = v101
                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                     - (*(unsigned __int16 *)a3[1]
                      + 180);
                if ((__int16)(v101
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(_WORD *)a3[1]
                              + 180)) > 180)
                  LOWORD(v102) = v102 - 360;
                if ((__int16)v102 < -179) {
                  LOWORD(v102) = v102 + 360;
                }
                if ((v102 & 0x8000u) != 0) {
                  int v102 = -(__int16)v102;
                }
                if (v100 < (unsigned __int16)v102)
                {
                  long long v103 = v7[1];
                  long long v223 = *v7;
                  long long v224 = v103;
                  long long v104 = *(a2 - 1);
                  *uint64_t v7 = *v214;
                  v7[1] = v104;
                  long long v105 = v224;
                  *long long v214 = v223;
                  *(a2 - 1) = v105;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v7, v7 + 2, v214, a3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>((uint64_t)v7, v7 + 2, v7 + 4, v214, a3);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>((uint64_t)v7, v7 + 2, v7 + 4, v7 + 6, v214, a3);
                break;
              default:
                return;
            }
            return;
          }
          unint64_t v9 = v7;
          if (v8 <= 767)
          {
            unint64_t v106 = v7 + 2;
            BOOL v107 = v7 == v6 || v106 == v6;
            char v108 = v107;
            if (a5)
            {
              if ((v108 & 1) == 0)
              {
                uint64_t v109 = 0;
                long long v110 = v7;
                do
                {
                  long long v111 = v110;
                  long long v110 = v106;
                  int v112 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v106);
                  int v113 = v112
                       + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                       - (*(unsigned __int16 *)a3[1]
                        + 180);
                  if ((__int16)(v112
                               + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                               - (*(_WORD *)a3[1]
                                + 180)) > 180)
                    LOWORD(v113) = v113 - 360;
                  if ((__int16)v113 < -179) {
                    LOWORD(v113) = v113 + 360;
                  }
                  if ((v113 & 0x8000u) != 0) {
                    int v113 = -(__int16)v113;
                  }
                  unsigned int v114 = (unsigned __int16)v113;
                  int v115 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v111);
                  int v116 = v115
                       + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                       - (*(unsigned __int16 *)a3[1]
                        + 180);
                  if ((__int16)(v115
                               + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                               - (*(_WORD *)a3[1]
                                + 180)) > 180)
                    LOWORD(v116) = v116 - 360;
                  if ((__int16)v116 < -179) {
                    LOWORD(v116) = v116 + 360;
                  }
                  if ((v116 & 0x8000u) != 0) {
                    int v116 = -(__int16)v116;
                  }
                  if (v114 < (unsigned __int16)v116)
                  {
                    long long v117 = v110[1];
                    long long v223 = *v110;
                    long long v224 = v117;
                    uint64_t v118 = v109;
                    while (1)
                    {
                      long long v119 = (char *)a1 + v118;
                      long long v120 = *(long long *)((char *)a1 + v118 + 16);
                      *((_OWORD *)v119 + 2) = *(long long *)((char *)a1 + v118);
                      *((_OWORD *)v119 + 3) = v120;
                      if (!v118) {
                        break;
                      }
                      v118 -= 32;
                      int v121 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v223);
                      int v122 = v121
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(unsigned __int16 *)a3[1]
                            + 180);
                      if ((__int16)(v121
                                   + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                   - (*(_WORD *)a3[1]
                                    + 180)) > 180)
                        LOWORD(v122) = v122 - 360;
                      if ((__int16)v122 < -179) {
                        LOWORD(v122) = v122 + 360;
                      }
                      if ((v122 & 0x8000u) != 0) {
                        int v122 = -(__int16)v122;
                      }
                      unsigned int v123 = (unsigned __int16)v122;
                      int v124 = (*(uint64_t (**)(void, char *))(*(void *)*a3 + 48))(*a3, (char *)a1 + v118);
                      int v125 = v124
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(unsigned __int16 *)a3[1]
                            + 180);
                      if ((__int16)(v124
                                   + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                   - (*(_WORD *)a3[1]
                                    + 180)) > 180)
                        LOWORD(v125) = v125 - 360;
                      if ((__int16)v125 < -179) {
                        LOWORD(v125) = v125 + 360;
                      }
                      if ((v125 & 0x8000u) != 0) {
                        int v125 = -(__int16)v125;
                      }
                      if (v123 >= (unsigned __int16)v125)
                      {
                        uint64_t v126 = (long long *)((char *)a1 + v118 + 32);
                        goto LABEL_260;
                      }
                    }
                    uint64_t v126 = a1;
LABEL_260:
                    long long v127 = v224;
                    *uint64_t v126 = v223;
                    v126[1] = v127;
                  }
                  unint64_t v106 = v110 + 2;
                  v109 += 32;
                }
                while (v110 + 2 != a2);
              }
            }
            else if ((v108 & 1) == 0)
            {
              unsigned int v196 = v7 - 2;
              do
              {
                uint64_t v197 = v106;
                int v198 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v106);
                int v199 = v198
                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                     - (*(unsigned __int16 *)a3[1]
                      + 180);
                if ((__int16)(v198
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(_WORD *)a3[1]
                              + 180)) > 180)
                  LOWORD(v199) = v199 - 360;
                if ((__int16)v199 < -179) {
                  LOWORD(v199) = v199 + 360;
                }
                if ((v199 & 0x8000u) != 0) {
                  int v199 = -(__int16)v199;
                }
                unsigned int v200 = (unsigned __int16)v199;
                int v201 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, a1);
                int v202 = v201
                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                     - (*(unsigned __int16 *)a3[1]
                      + 180);
                if ((__int16)(v201
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(_WORD *)a3[1]
                              + 180)) > 180)
                  LOWORD(v202) = v202 - 360;
                if ((__int16)v202 < -179) {
                  LOWORD(v202) = v202 + 360;
                }
                if ((v202 & 0x8000u) != 0) {
                  int v202 = -(__int16)v202;
                }
                a1 = v197;
                if (v200 < (unsigned __int16)v202)
                {
                  long long v203 = v197[1];
                  long long v223 = *v197;
                  long long v224 = v203;
                  long long v204 = v196;
                  do
                  {
                    long long v205 = v204[3];
                    v204[4] = v204[2];
                    v204[5] = v205;
                    int v206 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v223);
                    int v207 = v206
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v206
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v207) = v207 - 360;
                    if ((__int16)v207 < -179) {
                      LOWORD(v207) = v207 + 360;
                    }
                    if ((v207 & 0x8000u) != 0) {
                      int v207 = -(__int16)v207;
                    }
                    unsigned int v208 = (unsigned __int16)v207;
                    int v209 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v204);
                    int v210 = v209
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v209
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v210) = v210 - 360;
                    if ((__int16)v210 < -179) {
                      LOWORD(v210) = v210 + 360;
                    }
                    if ((v210 & 0x8000u) != 0) {
                      int v210 = -(__int16)v210;
                    }
                    v204 -= 2;
                  }
                  while (v208 < (unsigned __int16)v210);
                  long long v211 = v224;
                  v204[4] = v223;
                  v204[5] = v211;
                }
                unint64_t v106 = v197 + 2;
                v196 += 2;
              }
              while (v197 + 2 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (v7 != v6)
            {
              int64_t v128 = (v219 - 2) >> 1;
              int64_t v216 = v128;
              uint64_t v212 = (char *)v6 - (char *)v7;
              do
              {
                int64_t v129 = v128;
                if (v216 >= v128)
                {
                  uint64_t v130 = (2 * v128) | 1;
                  long long v131 = &a1[2 * v130];
                  if (2 * v128 + 2 < (uint64_t)v219)
                  {
                    int v132 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &a1[2 * v130]);
                    int v133 = v132
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v132
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v133) = v133 - 360;
                    if ((__int16)v133 < -179) {
                      LOWORD(v133) = v133 + 360;
                    }
                    if ((v133 & 0x8000u) != 0) {
                      int v133 = -(__int16)v133;
                    }
                    unsigned int v134 = (unsigned __int16)v133;
                    int v135 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v131 + 2);
                    int v136 = v135
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v135
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v136) = v136 - 360;
                    if ((__int16)v136 < -179) {
                      LOWORD(v136) = v136 + 360;
                    }
                    if ((v136 & 0x8000u) != 0) {
                      int v136 = -(__int16)v136;
                    }
                    if (v134 < (unsigned __int16)v136)
                    {
                      v131 += 2;
                      uint64_t v130 = 2 * v129 + 2;
                    }
                  }
                  long long v137 = &a1[2 * v129];
                  int v138 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v131);
                  int v139 = v138
                       + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                       - (*(unsigned __int16 *)a3[1]
                        + 180);
                  if ((__int16)(v138
                               + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                               - (*(_WORD *)a3[1]
                                + 180)) > 180)
                    LOWORD(v139) = v139 - 360;
                  if ((__int16)v139 < -179) {
                    LOWORD(v139) = v139 + 360;
                  }
                  if ((v139 & 0x8000u) != 0) {
                    int v139 = -(__int16)v139;
                  }
                  unsigned int v140 = (unsigned __int16)v139;
                  int v141 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v137);
                  int v142 = v141
                       + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                       - (*(unsigned __int16 *)a3[1]
                        + 180);
                  if ((__int16)(v141
                               + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                               - (*(_WORD *)a3[1]
                                + 180)) > 180)
                    LOWORD(v142) = v142 - 360;
                  if ((__int16)v142 < -179) {
                    LOWORD(v142) = v142 + 360;
                  }
                  if ((v142 & 0x8000u) != 0) {
                    int v142 = -(__int16)v142;
                  }
                  if (v140 >= (unsigned __int16)v142)
                  {
                    long long v143 = v137[1];
                    long long v223 = *v137;
                    long long v224 = v143;
                    do
                    {
                      long long v144 = v131;
                      long long v145 = v131[1];
                      *long long v137 = *v131;
                      v137[1] = v145;
                      if (v216 < v130) {
                        break;
                      }
                      uint64_t v146 = (2 * v130) | 1;
                      long long v131 = &a1[2 * v146];
                      uint64_t v147 = 2 * v130 + 2;
                      if (v147 < (uint64_t)v219)
                      {
                        int v148 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &a1[2 * v146]);
                        int v149 = v148
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(unsigned __int16 *)a3[1]
                              + 180);
                        if ((__int16)(v148
                                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                     - (*(_WORD *)a3[1]
                                      + 180)) > 180)
                          LOWORD(v149) = v149 - 360;
                        if ((__int16)v149 < -179) {
                          LOWORD(v149) = v149 + 360;
                        }
                        if ((v149 & 0x8000u) != 0) {
                          int v149 = -(__int16)v149;
                        }
                        unsigned int v150 = (unsigned __int16)v149;
                        int v151 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v131 + 2);
                        int v152 = v151
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(unsigned __int16 *)a3[1]
                              + 180);
                        if ((__int16)(v151
                                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                     - (*(_WORD *)a3[1]
                                      + 180)) > 180)
                          LOWORD(v152) = v152 - 360;
                        if ((__int16)v152 < -179) {
                          LOWORD(v152) = v152 + 360;
                        }
                        if ((v152 & 0x8000u) != 0) {
                          int v152 = -(__int16)v152;
                        }
                        if (v150 < (unsigned __int16)v152)
                        {
                          v131 += 2;
                          uint64_t v146 = v147;
                        }
                      }
                      int v153 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v131);
                      int v154 = v153
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(unsigned __int16 *)a3[1]
                            + 180);
                      if ((__int16)(v153
                                   + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                   - (*(_WORD *)a3[1]
                                    + 180)) > 180)
                        LOWORD(v154) = v154 - 360;
                      if ((__int16)v154 < -179) {
                        LOWORD(v154) = v154 + 360;
                      }
                      if ((v154 & 0x8000u) != 0) {
                        int v154 = -(__int16)v154;
                      }
                      unsigned int v155 = (unsigned __int16)v154;
                      int v156 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v223);
                      int v157 = v156
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(unsigned __int16 *)a3[1]
                            + 180);
                      if ((__int16)(v156
                                   + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                   - (*(_WORD *)a3[1]
                                    + 180)) > 180)
                        LOWORD(v157) = v157 - 360;
                      if ((__int16)v157 < -179) {
                        LOWORD(v157) = v157 + 360;
                      }
                      if ((v157 & 0x8000u) != 0) {
                        int v157 = -(__int16)v157;
                      }
                      long long v137 = v144;
                      uint64_t v130 = v146;
                    }
                    while (v155 >= (unsigned __int16)v157);
                    long long v158 = v224;
                    *long long v144 = v223;
                    v144[1] = v158;
                    uint64_t v8 = v212;
                  }
                }
                int64_t v128 = v129 - 1;
              }
              while (v129);
              uint64_t v159 = (unint64_t)v8 >> 5;
              do
              {
                uint64_t v160 = 0;
                uint64_t v161 = a1;
                long long v162 = a1[1];
                long long v221 = *a1;
                long long v222 = v162;
                uint64_t v163 = v159 - 2;
                if (v159 < 2) {
                  uint64_t v163 = v159 - 1;
                }
                uint64_t v164 = v163 >> 1;
                uint64_t v220 = v163 >> 1;
                do
                {
                  long long v165 = &v161[2 * v160 + 2];
                  uint64_t v166 = (2 * v160) | 1;
                  uint64_t v167 = 2 * v160 + 2;
                  if (v167 < v159)
                  {
                    int v168 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v165);
                    int v169 = v168
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v168
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v169) = v169 - 360;
                    if ((__int16)v169 < -179) {
                      LOWORD(v169) = v169 + 360;
                    }
                    if ((v169 & 0x8000u) != 0) {
                      int v169 = -(__int16)v169;
                    }
                    unsigned int v170 = (unsigned __int16)v169;
                    int v171 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v165 + 2);
                    int v172 = v171
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v171
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v172) = v172 - 360;
                    uint64_t v164 = v220;
                    if ((__int16)v172 < -179) {
                      LOWORD(v172) = v172 + 360;
                    }
                    if ((v172 & 0x8000u) != 0) {
                      int v172 = -(__int16)v172;
                    }
                    if (v170 < (unsigned __int16)v172)
                    {
                      v165 += 2;
                      uint64_t v166 = v167;
                    }
                  }
                  long long v173 = v165[1];
                  *uint64_t v161 = *v165;
                  v161[1] = v173;
                  uint64_t v161 = v165;
                  uint64_t v160 = v166;
                }
                while (v166 <= v164);
                long long v174 = a2 - 2;
                BOOL v107 = v165 == a2 - 2;
                a2 -= 2;
                if (v107)
                {
                  long long v194 = v222;
                  *long long v165 = v221;
                  v165[1] = v194;
                }
                else
                {
                  long long v175 = v174[1];
                  *long long v165 = *v174;
                  v165[1] = v175;
                  long long v176 = v222;
                  *long long v174 = v221;
                  v174[1] = v176;
                  uint64_t v177 = (char *)v165 - (char *)a1 + 32;
                  if (v177 >= 33)
                  {
                    unint64_t v178 = (((unint64_t)v177 >> 5) - 2) >> 1;
                    uint64_t v179 = &a1[2 * v178];
                    int v180 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v179);
                    int v181 = v180
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v180
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v181) = v181 - 360;
                    if ((__int16)v181 < -179) {
                      LOWORD(v181) = v181 + 360;
                    }
                    if ((v181 & 0x8000u) != 0) {
                      int v181 = -(__int16)v181;
                    }
                    unsigned int v182 = (unsigned __int16)v181;
                    int v183 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v165);
                    int v184 = v183
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v183
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v184) = v184 - 360;
                    if ((__int16)v184 < -179) {
                      LOWORD(v184) = v184 + 360;
                    }
                    if ((v184 & 0x8000u) != 0) {
                      int v184 = -(__int16)v184;
                    }
                    if (v182 < (unsigned __int16)v184)
                    {
                      long long v185 = v165[1];
                      long long v223 = *v165;
                      long long v224 = v185;
                      do
                      {
                        unsigned int v186 = v179;
                        long long v187 = v179[1];
                        *long long v165 = *v179;
                        v165[1] = v187;
                        if (!v178) {
                          break;
                        }
                        unint64_t v178 = (v178 - 1) >> 1;
                        uint64_t v179 = &a1[2 * v178];
                        int v188 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v179);
                        int v189 = v188
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(unsigned __int16 *)a3[1]
                              + 180);
                        if ((__int16)(v188
                                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                     - (*(_WORD *)a3[1]
                                      + 180)) > 180)
                          LOWORD(v189) = v189 - 360;
                        if ((__int16)v189 < -179) {
                          LOWORD(v189) = v189 + 360;
                        }
                        if ((v189 & 0x8000u) != 0) {
                          int v189 = -(__int16)v189;
                        }
                        unsigned int v190 = (unsigned __int16)v189;
                        int v191 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v223);
                        int v192 = v191
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(unsigned __int16 *)a3[1]
                              + 180);
                        if ((__int16)(v191
                                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                     - (*(_WORD *)a3[1]
                                      + 180)) > 180)
                          LOWORD(v192) = v192 - 360;
                        if ((__int16)v192 < -179) {
                          LOWORD(v192) = v192 + 360;
                        }
                        if ((v192 & 0x8000u) != 0) {
                          int v192 = -(__int16)v192;
                        }
                        long long v165 = v186;
                      }
                      while (v190 < (unsigned __int16)v192);
                      long long v193 = v224;
                      *unsigned int v186 = v223;
                      v186[1] = v193;
                    }
                  }
                }
              }
              while (v159-- > 2);
            }
            return;
          }
          unint64_t v10 = v219 >> 1;
          uint64_t v11 = &v7[2 * (v219 >> 1)];
          if ((unint64_t)v8 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(&v7[2 * (v219 >> 1)], v7, v214, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v7, &v7[2 * (v219 >> 1)], v214, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v7 + 2, v11 - 2, a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v7 + 4, &v7[2 * v10 + 2], a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v11 - 2, v11, &v7[2 * v10 + 2], a3);
            long long v12 = v7[1];
            long long v223 = *v7;
            long long v224 = v12;
            long long v13 = v11[1];
            *uint64_t v7 = *v11;
            v7[1] = v13;
            long long v14 = v224;
            *uint64_t v11 = v223;
            v11[1] = v14;
          }
          --a4;
          if (a5) {
            break;
          }
          int v15 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v7 - 2);
          int v16 = v15 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v15 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
            LOWORD(v16) = v16 - 360;
          }
          if ((__int16)v16 < -179) {
            LOWORD(v16) = v16 + 360;
          }
          if ((v16 & 0x8000u) != 0) {
            int v16 = -(__int16)v16;
          }
          unsigned int v17 = (unsigned __int16)v16;
          int v18 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v7);
          int v19 = v18 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v18 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
            LOWORD(v19) = v19 - 360;
          }
          if ((__int16)v19 < -179) {
            LOWORD(v19) = v19 + 360;
          }
          if ((v19 & 0x8000u) != 0) {
            int v19 = -(__int16)v19;
          }
          if (v17 < (unsigned __int16)v19) {
            break;
          }
          long long v59 = v7[1];
          long long v221 = *v7;
          long long v222 = v59;
          int v60 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
          int v61 = v60 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v60 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
            LOWORD(v61) = v61 - 360;
          }
          if ((__int16)v61 < -179) {
            LOWORD(v61) = v61 + 360;
          }
          if ((v61 & 0x8000u) != 0) {
            int v61 = -(__int16)v61;
          }
          unsigned int v62 = (unsigned __int16)v61;
          int v63 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v214);
          int v64 = v63 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v63 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
            LOWORD(v64) = v64 - 360;
          }
          if ((__int16)v64 < -179) {
            LOWORD(v64) = v64 + 360;
          }
          if ((v64 & 0x8000u) != 0) {
            int v64 = -(__int16)v64;
          }
          if (v62 >= (unsigned __int16)v64)
          {
            uint64_t v70 = v7 + 2;
            do
            {
              uint64_t v7 = v70;
              if (v70 >= v6) {
                break;
              }
              int v71 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
              int v72 = v71
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v71 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v72) = v72 - 360;
              }
              if ((__int16)v72 < -179) {
                LOWORD(v72) = v72 + 360;
              }
              if ((v72 & 0x8000u) != 0) {
                int v72 = -(__int16)v72;
              }
              unsigned int v73 = (unsigned __int16)v72;
              int v74 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v7);
              int v75 = v74
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v74 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v75) = v75 - 360;
              }
              if ((__int16)v75 < -179) {
                LOWORD(v75) = v75 + 360;
              }
              if ((v75 & 0x8000u) == 0) {
                LOWORD(v76) = v75;
              }
              else {
                int v76 = -(__int16)v75;
              }
              uint64_t v70 = v7 + 2;
            }
            while (v73 >= (unsigned __int16)v76);
          }
          else
          {
            do
            {
              v7 += 2;
              int v65 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
              int v66 = v65
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v65 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v66) = v66 - 360;
              }
              if ((__int16)v66 < -179) {
                LOWORD(v66) = v66 + 360;
              }
              if ((v66 & 0x8000u) != 0) {
                int v66 = -(__int16)v66;
              }
              unsigned int v67 = (unsigned __int16)v66;
              int v68 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v7);
              int v69 = v68
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v68 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v69) = v69 - 360;
              }
              if ((__int16)v69 < -179) {
                LOWORD(v69) = v69 + 360;
              }
              if ((v69 & 0x8000u) != 0) {
                int v69 = -(__int16)v69;
              }
            }
            while (v67 >= (unsigned __int16)v69);
          }
          if (v7 < v6)
          {
            unint64_t v6 = a2;
            do
            {
              v6 -= 2;
              int v77 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
              int v78 = v77
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v77 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v78) = v78 - 360;
              }
              if ((__int16)v78 < -179) {
                LOWORD(v78) = v78 + 360;
              }
              if ((v78 & 0x8000u) != 0) {
                int v78 = -(__int16)v78;
              }
              unsigned int v79 = (unsigned __int16)v78;
              int v80 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v6);
              int v81 = v80
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v80 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v81) = v81 - 360;
              }
              if ((__int16)v81 < -179) {
                LOWORD(v81) = v81 + 360;
              }
              if ((v81 & 0x8000u) != 0) {
                int v81 = -(__int16)v81;
              }
            }
            while (v79 < (unsigned __int16)v81);
          }
          while (v7 < v6)
          {
            long long v82 = v7[1];
            long long v223 = *v7;
            long long v224 = v82;
            long long v83 = v6[1];
            *uint64_t v7 = *v6;
            v7[1] = v83;
            long long v84 = v224;
            *unint64_t v6 = v223;
            v6[1] = v84;
            do
            {
              v7 += 2;
              int v85 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
              int v86 = v85
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v85 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v86) = v86 - 360;
              }
              if ((__int16)v86 < -179) {
                LOWORD(v86) = v86 + 360;
              }
              if ((v86 & 0x8000u) != 0) {
                int v86 = -(__int16)v86;
              }
              unsigned int v87 = (unsigned __int16)v86;
              int v88 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v7);
              int v89 = v88
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v88 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v89) = v89 - 360;
              }
              if ((__int16)v89 < -179) {
                LOWORD(v89) = v89 + 360;
              }
              if ((v89 & 0x8000u) != 0) {
                int v89 = -(__int16)v89;
              }
            }
            while (v87 >= (unsigned __int16)v89);
            do
            {
              v6 -= 2;
              int v90 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
              int v91 = v90
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v90 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v91) = v91 - 360;
              }
              if ((__int16)v91 < -179) {
                LOWORD(v91) = v91 + 360;
              }
              if ((v91 & 0x8000u) != 0) {
                int v91 = -(__int16)v91;
              }
              unsigned int v92 = (unsigned __int16)v91;
              int v93 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v6);
              int v94 = v93
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v93 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v94) = v94 - 360;
              }
              if ((__int16)v94 < -179) {
                LOWORD(v94) = v94 + 360;
              }
              if ((v94 & 0x8000u) != 0) {
                int v94 = -(__int16)v94;
              }
            }
            while (v92 < (unsigned __int16)v94);
          }
          uint64_t v95 = v7 - 2;
          if (v7 - 2 != v9)
          {
            long long v96 = *(v7 - 1);
            long long *v9 = *v95;
            v9[1] = v96;
          }
          a5 = 0;
          long long v97 = v222;
          *uint64_t v95 = v221;
          *(v7 - 1) = v97;
          unint64_t v6 = a2;
        }
        uint64_t v20 = 0;
        long long v21 = v7[1];
        long long v221 = *v7;
        long long v222 = v21;
        do
        {
          v20 += 2;
          int v22 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v7[v20]);
          int v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
            LOWORD(v23) = v23 - 360;
          }
          if ((__int16)v23 < -179) {
            LOWORD(v23) = v23 + 360;
          }
          if ((v23 & 0x8000u) != 0) {
            int v23 = -(__int16)v23;
          }
          unsigned int v24 = (unsigned __int16)v23;
          int v25 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
          int v26 = v25 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v25 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
            LOWORD(v26) = v26 - 360;
          }
          if ((__int16)v26 < -179) {
            LOWORD(v26) = v26 + 360;
          }
          if ((v26 & 0x8000u) != 0) {
            int v26 = -(__int16)v26;
          }
        }
        while (v24 < (unsigned __int16)v26);
        long long v27 = &v7[v20];
        uint64_t v28 = a2;
        if (v20 == 2)
        {
          uint64_t v28 = a2;
          do
          {
            if (v27 >= v28) {
              break;
            }
            v28 -= 2;
            int v34 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v28);
            int v35 = v34 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v34 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
              LOWORD(v35) = v35 - 360;
            }
            if ((__int16)v35 < -179) {
              LOWORD(v35) = v35 + 360;
            }
            if ((v35 & 0x8000u) != 0) {
              int v35 = -(__int16)v35;
            }
            unsigned int v36 = (unsigned __int16)v35;
            int v37 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
            int v38 = v37 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v37 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
              LOWORD(v38) = v38 - 360;
            }
            if ((__int16)v38 < -179) {
              LOWORD(v38) = v38 + 360;
            }
            if ((v38 & 0x8000u) != 0) {
              int v38 = -(__int16)v38;
            }
          }
          while (v36 >= (unsigned __int16)v38);
        }
        else
        {
          do
          {
            v28 -= 2;
            int v29 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v28);
            int v30 = v29 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v29 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
              LOWORD(v30) = v30 - 360;
            }
            if ((__int16)v30 < -179) {
              LOWORD(v30) = v30 + 360;
            }
            if ((v30 & 0x8000u) != 0) {
              int v30 = -(__int16)v30;
            }
            unsigned int v31 = (unsigned __int16)v30;
            int v32 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
            int v33 = v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
              LOWORD(v33) = v33 - 360;
            }
            if ((__int16)v33 < -179) {
              LOWORD(v33) = v33 + 360;
            }
            if ((v33 & 0x8000u) != 0) {
              int v33 = -(__int16)v33;
            }
          }
          while (v31 >= (unsigned __int16)v33);
        }
        if (v27 >= v28)
        {
          long long v54 = v27 - 2;
        }
        else
        {
          unint64_t v39 = v27;
          uint64_t v40 = v28;
          do
          {
            long long v41 = v39[1];
            long long v223 = *v39;
            long long v224 = v41;
            long long v42 = v40[1];
            *unint64_t v39 = *v40;
            v39[1] = v42;
            long long v43 = v224;
            long long *v40 = v223;
            v40[1] = v43;
            do
            {
              v39 += 2;
              int v44 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v39);
              int v45 = v44
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v44 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v45) = v45 - 360;
              }
              if ((__int16)v45 < -179) {
                LOWORD(v45) = v45 + 360;
              }
              if ((v45 & 0x8000u) != 0) {
                int v45 = -(__int16)v45;
              }
              unsigned int v46 = (unsigned __int16)v45;
              int v47 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
              int v48 = v47
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v47 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v48) = v48 - 360;
              }
              if ((__int16)v48 < -179) {
                LOWORD(v48) = v48 + 360;
              }
              if ((v48 & 0x8000u) != 0) {
                int v48 = -(__int16)v48;
              }
            }
            while (v46 < (unsigned __int16)v48);
            do
            {
              v40 -= 2;
              int v49 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v40);
              int v50 = v49
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v49 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v50) = v50 - 360;
              }
              if ((__int16)v50 < -179) {
                LOWORD(v50) = v50 + 360;
              }
              if ((v50 & 0x8000u) != 0) {
                int v50 = -(__int16)v50;
              }
              unsigned int v51 = (unsigned __int16)v50;
              int v52 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v221);
              int v53 = v52
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v52 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
                LOWORD(v53) = v53 - 360;
              }
              if ((__int16)v53 < -179) {
                LOWORD(v53) = v53 + 360;
              }
              if ((v53 & 0x8000u) != 0) {
                int v53 = -(__int16)v53;
              }
            }
            while (v51 >= (unsigned __int16)v53);
          }
          while (v39 < v40);
          long long v54 = v39 - 2;
        }
        if (v54 != v9)
        {
          long long v55 = v54[1];
          long long *v9 = *v54;
          v9[1] = v55;
        }
        long long v56 = v222;
        *long long v54 = v221;
        v54[1] = v56;
        BOOL v57 = v27 >= v28;
        unint64_t v6 = a2;
        if (v57) {
          break;
        }
LABEL_104:
        std::__introsort<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*,false>(v9, v54, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v7 = v54 + 2;
      }
      BOOL v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v9, v54, a3);
      uint64_t v7 = v54 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v54 + 2, a2, a3))
      {
        break;
      }
      if (!v58) {
        goto LABEL_104;
      }
    }
    a2 = v54;
    if (!v58) {
      continue;
    }
    break;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(long long *a1, long long *a2, long long *a3, void *a4)
{
  int v8 = (*(uint64_t (**)(void))(*(void *)*a4 + 48))();
  int v9 = v8 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v8 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
    LOWORD(v9) = v9 - 360;
  }
  if ((__int16)v9 < -179) {
    LOWORD(v9) = v9 + 360;
  }
  if ((v9 & 0x8000u) != 0) {
    int v9 = -(__int16)v9;
  }
  unsigned int v10 = (unsigned __int16)v9;
  int v11 = (*(uint64_t (**)(void, long long *))(*(void *)*a4 + 48))(*a4, a1);
  int v12 = v11 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v11 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
    LOWORD(v12) = v12 - 360;
  }
  if ((__int16)v12 < -179) {
    LOWORD(v12) = v12 + 360;
  }
  if ((v12 & 0x8000u) == 0) {
    LOWORD(v13) = v12;
  }
  else {
    int v13 = -(__int16)v12;
  }
  int v14 = (*(uint64_t (**)(void, long long *))(*(void *)*a4 + 48))(*a4, a3);
  int v15 = v14 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v14 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
    LOWORD(v15) = v15 - 360;
  }
  if ((__int16)v15 < -179) {
    LOWORD(v15) = v15 + 360;
  }
  if ((v15 & 0x8000u) == 0) {
    LOWORD(v16) = v15;
  }
  else {
    int v16 = -(__int16)v15;
  }
  uint64_t result = (*(uint64_t (**)(void, long long *))(*(void *)*a4 + 48))(*a4, a2);
  int v18 = result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
    LOWORD(v18) = v18 - 360;
  }
  if ((__int16)v18 < -179) {
    LOWORD(v18) = v18 + 360;
  }
  if ((v18 & 0x8000u) != 0) {
    int v18 = -(__int16)v18;
  }
  if (v10 >= (unsigned __int16)v13)
  {
    if ((unsigned __int16)v16 < (unsigned __int16)v18)
    {
      long long v23 = *a2;
      long long v22 = a2[1];
      long long v24 = a3[1];
      *a2 = *a3;
      a2[1] = v24;
      *a3 = v23;
      a3[1] = v22;
      int v25 = (*(uint64_t (**)(void, long long *))(*(void *)*a4 + 48))(*a4, a2);
      int v26 = v25 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
      if ((__int16)(v25 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
        LOWORD(v26) = v26 - 360;
      }
      if ((__int16)v26 < -179) {
        LOWORD(v26) = v26 + 360;
      }
      if ((v26 & 0x8000u) != 0) {
        int v26 = -(__int16)v26;
      }
      unsigned int v27 = (unsigned __int16)v26;
      uint64_t result = (*(uint64_t (**)(void, long long *))(*(void *)*a4 + 48))(*a4, a1);
      int v28 = result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
      if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
        LOWORD(v28) = v28 - 360;
      }
      if ((__int16)v28 < -179) {
        LOWORD(v28) = v28 + 360;
      }
      if ((v28 & 0x8000u) != 0) {
        int v28 = -(__int16)v28;
      }
      if (v27 < (unsigned __int16)v28)
      {
        long long v30 = *a1;
        long long v29 = a1[1];
        long long v31 = a2[1];
        *a1 = *a2;
        a1[1] = v31;
        *a2 = v30;
        a2[1] = v29;
      }
    }
  }
  else
  {
    if ((unsigned __int16)v16 < (unsigned __int16)v18)
    {
      long long v20 = *a1;
      long long v19 = a1[1];
      long long v21 = a3[1];
      *a1 = *a3;
      a1[1] = v21;
LABEL_59:
      *a3 = v20;
      a3[1] = v19;
      return result;
    }
    long long v33 = *a1;
    long long v32 = a1[1];
    long long v34 = a2[1];
    *a1 = *a2;
    a1[1] = v34;
    *a2 = v33;
    a2[1] = v32;
    int v35 = (*(uint64_t (**)(void, long long *))(*(void *)*a4 + 48))(*a4, a3);
    int v36 = v35 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
    if ((__int16)(v35 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
      LOWORD(v36) = v36 - 360;
    }
    if ((__int16)v36 < -179) {
      LOWORD(v36) = v36 + 360;
    }
    if ((v36 & 0x8000u) != 0) {
      int v36 = -(__int16)v36;
    }
    unsigned int v37 = (unsigned __int16)v36;
    uint64_t result = (*(uint64_t (**)(void, long long *))(*(void *)*a4 + 48))(*a4, a2);
    int v38 = result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
    if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
      LOWORD(v38) = v38 - 360;
    }
    if ((__int16)v38 < -179) {
      LOWORD(v38) = v38 + 360;
    }
    if ((v38 & 0x8000u) != 0) {
      int v38 = -(__int16)v38;
    }
    if (v37 < (unsigned __int16)v38)
    {
      long long v20 = *a2;
      long long v19 = a2[1];
      long long v39 = a3[1];
      *a2 = *a3;
      a2[1] = v39;
      goto LABEL_59;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(long long *a1, long long *a2, void *a3)
{
  uint64_t v5 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v7 = a2 - 2;
      int v8 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, a2 - 2);
      int v9 = v8 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v8 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v9) = v9 - 360;
      }
      if ((__int16)v9 < -179) {
        LOWORD(v9) = v9 + 360;
      }
      if ((v9 & 0x8000u) != 0) {
        int v9 = -(__int16)v9;
      }
      unsigned int v10 = (unsigned __int16)v9;
      int v11 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, a1);
      int v12 = v11 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v11 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v12) = v12 - 360;
      }
      if ((__int16)v12 < -179) {
        LOWORD(v12) = v12 + 360;
      }
      if ((v12 & 0x8000u) != 0) {
        int v12 = -(__int16)v12;
      }
      if (v10 < (unsigned __int16)v12)
      {
        long long v14 = *a1;
        long long v13 = a1[1];
        long long v15 = v7[1];
        *a1 = *v7;
        a1[1] = v15;
        *uint64_t v7 = v14;
        v7[1] = v13;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      int v16 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(a1, a1 + 2, a1 + 4, a3);
      unsigned int v17 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v36 = 0;
      break;
  }
  while (1)
  {
    int v19 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v17);
    int v20 = v19 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v19 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v20) = v20 - 360;
    }
    if ((__int16)v20 < -179) {
      LOWORD(v20) = v20 + 360;
    }
    if ((v20 & 0x8000u) != 0) {
      int v20 = -(__int16)v20;
    }
    unsigned int v21 = (unsigned __int16)v20;
    int v22 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, v16);
    int v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v23) = v23 - 360;
    }
    if ((__int16)v23 < -179) {
      LOWORD(v23) = v23 + 360;
    }
    if ((v23 & 0x8000u) != 0) {
      int v23 = -(__int16)v23;
    }
    if (v21 >= (unsigned __int16)v23) {
      goto LABEL_50;
    }
    long long v24 = v17[1];
    long long v38 = *v17;
    long long v39 = v24;
    uint64_t v25 = v18;
    while (1)
    {
      int v26 = (char *)a1 + v25;
      long long v27 = *(long long *)((char *)a1 + v25 + 80);
      *((_OWORD *)v26 + 6) = *(long long *)((char *)a1 + v25 + 64);
      *((_OWORD *)v26 + 7) = v27;
      if (v25 == -64) {
        break;
      }
      int v28 = v26 + 32;
      int v29 = (*(uint64_t (**)(void, long long *))(*(void *)*a3 + 48))(*a3, &v38);
      int v30 = v29 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v29 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v30) = v30 - 360;
      }
      if ((__int16)v30 < -179) {
        LOWORD(v30) = v30 + 360;
      }
      if ((v30 & 0x8000u) != 0) {
        int v30 = -(__int16)v30;
      }
      unsigned int v31 = (unsigned __int16)v30;
      int v32 = (*(uint64_t (**)(void, char *))(*(void *)*a3 + 48))(*a3, v28);
      int v33 = v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v33) = v33 - 360;
      }
      if ((__int16)v33 < -179) {
        LOWORD(v33) = v33 + 360;
      }
      if ((v33 & 0x8000u) != 0) {
        int v33 = -(__int16)v33;
      }
      v25 -= 32;
      if (v31 >= (unsigned __int16)v33)
      {
        long long v34 = (long long *)((char *)a1 + v25 + 96);
        goto LABEL_48;
      }
    }
    long long v34 = a1;
LABEL_48:
    long long v35 = v39;
    *long long v34 = v38;
    v34[1] = v35;
    if (v36 == 7) {
      return v17 + 2 == a2;
    }
    ++v36;
LABEL_50:
    int v16 = v17;
    v18 += 32;
    v17 += 2;
    if (v17 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(uint64_t a1, long long *a2, long long *a3, long long *a4, void *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>((long long *)a1, a2, a3, a5);
  int v10 = (*(uint64_t (**)(void, long long *))(*(void *)*a5 + 48))(*a5, a4);
  int v11 = v10 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
  if ((__int16)(v10 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
    LOWORD(v11) = v11 - 360;
  }
  if ((__int16)v11 < -179) {
    LOWORD(v11) = v11 + 360;
  }
  if ((v11 & 0x8000u) != 0) {
    int v11 = -(__int16)v11;
  }
  unsigned int v12 = (unsigned __int16)v11;
  int v13 = (*(uint64_t (**)(void, long long *))(*(void *)*a5 + 48))(*a5, a3);
  int v15 = v13 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
  if ((__int16)(v13 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
    LOWORD(v15) = v15 - 360;
  }
  if ((__int16)v15 < -179) {
    LOWORD(v15) = v15 + 360;
  }
  if ((v15 & 0x8000u) != 0) {
    int v15 = -(__int16)v15;
  }
  if (v12 < (unsigned __int16)v15)
  {
    long long v17 = *a3;
    long long v16 = a3[1];
    long long v18 = a4[1];
    *a3 = *a4;
    a3[1] = v18;
    *a4 = v17;
    a4[1] = v16;
    int v19 = (*(uint64_t (**)(void, long long *))(*(void *)*a5 + 48))(*a5, a3);
    int v20 = v19 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
    if ((__int16)(v19 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
      LOWORD(v20) = v20 - 360;
    }
    if ((__int16)v20 < -179) {
      LOWORD(v20) = v20 + 360;
    }
    if ((v20 & 0x8000u) != 0) {
      int v20 = -(__int16)v20;
    }
    unsigned int v21 = (unsigned __int16)v20;
    int v22 = (*(uint64_t (**)(void, long long *))(*(void *)*a5 + 48))(*a5, a2);
    int v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
    if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
      LOWORD(v23) = v23 - 360;
    }
    if ((__int16)v23 < -179) {
      LOWORD(v23) = v23 + 360;
    }
    if ((v23 & 0x8000u) != 0) {
      int v23 = -(__int16)v23;
    }
    if (v21 < (unsigned __int16)v23)
    {
      long long v25 = *a2;
      long long v24 = a2[1];
      long long v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      *a3 = v25;
      a3[1] = v24;
      int v27 = (*(uint64_t (**)(void, long long *))(*(void *)*a5 + 48))(*a5, a2);
      int v28 = v27 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
      if ((__int16)(v27 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
        LOWORD(v28) = v28 - 360;
      }
      if ((__int16)v28 < -179) {
        LOWORD(v28) = v28 + 360;
      }
      if ((v28 & 0x8000u) != 0) {
        int v28 = -(__int16)v28;
      }
      unsigned int v29 = (unsigned __int16)v28;
      int v30 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a5 + 48))(*a5, a1);
      int v31 = v30 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
      if ((__int16)(v30 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
        LOWORD(v31) = v31 - 360;
      }
      if ((__int16)v31 < -179) {
        LOWORD(v31) = v31 + 360;
      }
      if ((v31 & 0x8000u) != 0) {
        int v31 = -(__int16)v31;
      }
      if (v29 < (unsigned __int16)v31)
      {
        long long v32 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        long long v33 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v33;
        *a2 = v32;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, void *a6)
{
  __n128 v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(a1, a2, a3, a4, a6);
  int v13 = (*(uint64_t (**)(void, long long *, __n128))(*(void *)*a6 + 48))(*a6, a5, v12);
  int v14 = v13 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
  if ((__int16)(v13 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
    LOWORD(v14) = v14 - 360;
  }
  if ((__int16)v14 < -179) {
    LOWORD(v14) = v14 + 360;
  }
  if ((v14 & 0x8000u) != 0) {
    int v14 = -(__int16)v14;
  }
  unsigned int v15 = (unsigned __int16)v14;
  int v16 = (*(uint64_t (**)(void, long long *))(*(void *)*a6 + 48))(*a6, a4);
  int v18 = v16 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
  if ((__int16)(v16 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
    LOWORD(v18) = v18 - 360;
  }
  if ((__int16)v18 < -179) {
    LOWORD(v18) = v18 + 360;
  }
  if ((v18 & 0x8000u) != 0) {
    int v18 = -(__int16)v18;
  }
  if (v15 < (unsigned __int16)v18)
  {
    long long v20 = *a4;
    long long v19 = a4[1];
    long long v21 = a5[1];
    *a4 = *a5;
    a4[1] = v21;
    *a5 = v20;
    a5[1] = v19;
    int v22 = (*(uint64_t (**)(void, long long *))(*(void *)*a6 + 48))(*a6, a4);
    int v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
    if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
      LOWORD(v23) = v23 - 360;
    }
    if ((__int16)v23 < -179) {
      LOWORD(v23) = v23 + 360;
    }
    if ((v23 & 0x8000u) != 0) {
      int v23 = -(__int16)v23;
    }
    unsigned int v24 = (unsigned __int16)v23;
    int v25 = (*(uint64_t (**)(void, long long *))(*(void *)*a6 + 48))(*a6, a3);
    int v26 = v25 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
    if ((__int16)(v25 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
      LOWORD(v26) = v26 - 360;
    }
    if ((__int16)v26 < -179) {
      LOWORD(v26) = v26 + 360;
    }
    if ((v26 & 0x8000u) != 0) {
      int v26 = -(__int16)v26;
    }
    if (v24 < (unsigned __int16)v26)
    {
      long long v28 = *a3;
      long long v27 = a3[1];
      long long v29 = a4[1];
      *a3 = *a4;
      a3[1] = v29;
      *a4 = v28;
      a4[1] = v27;
      int v30 = (*(uint64_t (**)(void, long long *))(*(void *)*a6 + 48))(*a6, a3);
      int v31 = v30 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
      if ((__int16)(v30 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
        LOWORD(v31) = v31 - 360;
      }
      if ((__int16)v31 < -179) {
        LOWORD(v31) = v31 + 360;
      }
      if ((v31 & 0x8000u) != 0) {
        int v31 = -(__int16)v31;
      }
      unsigned int v32 = (unsigned __int16)v31;
      int v33 = (*(uint64_t (**)(void, long long *))(*(void *)*a6 + 48))(*a6, a2);
      int v34 = v33 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
      if ((__int16)(v33 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
        LOWORD(v34) = v34 - 360;
      }
      if ((__int16)v34 < -179) {
        LOWORD(v34) = v34 + 360;
      }
      if ((v34 & 0x8000u) != 0) {
        int v34 = -(__int16)v34;
      }
      if (v32 < (unsigned __int16)v34)
      {
        long long v36 = *a2;
        long long v35 = a2[1];
        long long v37 = a3[1];
        *a2 = *a3;
        a2[1] = v37;
        *a3 = v36;
        a3[1] = v35;
        int v38 = (*(uint64_t (**)(void, long long *))(*(void *)*a6 + 48))(*a6, a2);
        int v39 = v38 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
        if ((__int16)(v38 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
          LOWORD(v39) = v39 - 360;
        }
        if ((__int16)v39 < -179) {
          LOWORD(v39) = v39 + 360;
        }
        if ((v39 & 0x8000u) != 0) {
          int v39 = -(__int16)v39;
        }
        unsigned int v40 = (unsigned __int16)v39;
        int v41 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a6 + 48))(*a6, a1);
        int v42 = v41 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
        if ((__int16)(v41 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
          LOWORD(v42) = v42 - 360;
        }
        if ((__int16)v42 < -179) {
          LOWORD(v42) = v42 + 360;
        }
        if ((v42 & 0x8000u) != 0) {
          int v42 = -(__int16)v42;
        }
        if (v40 < (unsigned __int16)v42)
        {
          long long v43 = *(_OWORD *)a1;
          __n128 result = *(__n128 *)(a1 + 16);
          long long v44 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v44;
          *a2 = v43;
          a2[1] = (__int128)result;
        }
      }
    }
  }
  return result;
}

uint64_t std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    unint64_t v6 = &v2[v5 / 0x33];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 80 * (v5 % 0x33);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x33] + 80 * ((*(void *)(a1 + 40) + v5) % 0x33);
    if (v8 != v9)
    {
      do
      {
        int v10 = *(void **)(v8 + 32);
        if (v10)
        {
          *(void *)(v8 + 40) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 80;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 25;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 51;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      unsigned int v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t maps::path_codec::p2p_decode_empty_pathlet<GEOPathMatcherRoadKey>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v7 = a5 - a4;
  if (a5 == a4) {
    return 1;
  }
  uint64_t v11 = a4;
  if (v7 == 1) {
    maps::path_codec::CostFunction::get_dfs_cost_function((uint64_t)v65);
  }
  else {
    maps::path_codec::CostFunction::get_default_cost_function((uint64_t)v65);
  }
  uint64_t v15 = *a3 + 72 * v11;
  uint64_t v16 = *a3 + 72 * a5;
  LODWORD(v66[0]) = maps::path_codec::compute_search_radius<GEOPathMatcherRoadKey>(*(_DWORD *)(v15 + 40), *(_DWORD *)(v16 + 40), a6);
  if (!maps::path_codec::Logger::m_log_level)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Max exploration radius: ", 24);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" m.", 3);
    std::string::basic_string[abi:ne180100]<0>(&v75, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
    std::stringbuf::str();
    maps::path_codec::Logger::log_trace((uint64_t)&v75, 46, (uint64_t)__p);
    if (v69 < 0) {
      operator delete(__p[0]);
    }
    if (v77 < 0) {
      operator delete(v75);
    }
    uint64_t v70 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&v70 + *(void *)(v70 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v71 = MEMORY[0x1E4FBA470] + 16;
    if (v73 < 0) {
      operator delete(v72);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18C11F4F0](v74);
  }
  maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::run(a2, v15, v16, (uint64_t)v65, v66, (uint64_t **)&v63);
  int v18 = v63;
  if (v63 != v64)
  {
    uint64_t v70 = 0;
    std::vector<unsigned long>::vector(&v75, v7 + 1, &v70);
    long long v19 = v75;
    *int v75 = 0;
    long long v20 = v63;
    unint64_t v21 = (v64 - (unsigned char *)v63) >> 5;
    int v22 = v76;
    *(v76 - 1) = v21 - 1;
    if (v7 < 2)
    {
LABEL_29:
      if (v19 == v22)
      {
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v59 = a1;
        uint64_t v61 = v22 - v19 - 1;
        if (v22 - v19 != 1)
        {
          uint64_t v33 = 0;
          int v60 = v19;
          do
          {
            uint64_t v34 = v11;
            uint64_t v35 = v33 + v11;
            uint64_t v36 = *a7;
            uint64_t v37 = *a7 + 24 * (v33 + v11);
            int v38 = *(_OWORD **)v37;
            *(void *)(v37 + 8) = *(void *)v37;
            int v39 = (void **)(v37 + 8);
            uint64_t v40 = v19[v33++];
            uint64_t v41 = v19[v33] + 1;
            if (v40 != v41)
            {
              int v42 = (char *)v63 + 32 * v41;
              long long v43 = (char *)v63 + 32 * v40;
              long long v44 = (void *)(v36 + 24 * v35 + 16);
              do
              {
                if ((unint64_t)v38 >= *v44)
                {
                  uint64_t v46 = ((uint64_t)v38 - *(void *)v37) >> 5;
                  if ((unint64_t)(v46 + 1) >> 59) {
                    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v47 = *v44 - *(void *)v37;
                  uint64_t v48 = v47 >> 4;
                  if (v47 >> 4 <= (unint64_t)(v46 + 1)) {
                    uint64_t v48 = v46 + 1;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v49 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v49 = v48;
                  }
                  if (v49) {
                    int v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)v44, v49);
                  }
                  else {
                    int v50 = 0;
                  }
                  unsigned int v51 = &v50[32 * v46];
                  long long v52 = *((_OWORD *)v43 + 1);
                  *(_OWORD *)unsigned int v51 = *(_OWORD *)v43;
                  *((_OWORD *)v51 + 1) = v52;
                  int v53 = *v39;
                  long long v54 = *(_OWORD **)v37;
                  long long v55 = v51;
                  if (*v39 != *(void **)v37)
                  {
                    do
                    {
                      long long v56 = *(v53 - 1);
                      *((_OWORD *)v55 - 2) = *(v53 - 2);
                      *((_OWORD *)v55 - 1) = v56;
                      v55 -= 32;
                      v53 -= 2;
                    }
                    while (v53 != v54);
                    int v53 = *(_OWORD **)v37;
                  }
                  *(void *)uint64_t v37 = v55;
                  int v38 = v51 + 32;
                  *int v39 = v51 + 32;
                  *long long v44 = &v50[32 * v49];
                  if (v53) {
                    operator delete(v53);
                  }
                }
                else
                {
                  long long v45 = *((_OWORD *)v43 + 1);
                  *int v38 = *(_OWORD *)v43;
                  v38[1] = v45;
                  v38 += 2;
                }
                *int v39 = v38;
                v43 += 32;
              }
              while (v43 != v42);
            }
            long long v19 = v60;
            uint64_t v11 = v34;
          }
          while (v33 != v61);
        }
        if (v11) {
          uint64_t v8 = maps::path_codec::align_pathlets<GEOPathMatcherRoadKey>(v59, (void **)(*a7 + 24 * v11), (void **)(*a7 + 24 * v11 - 24));
        }
        else {
          uint64_t v8 = 1;
        }
      }
      operator delete(v19);
    }
    else
    {
      unint64_t v23 = 0;
      uint64_t v24 = *a3;
      int v25 = v75;
      uint64_t v26 = 1;
      while (v23 < v21)
      {
        uint64_t v27 = v24 + 72 * (v26 + v11);
        long long v28 = *(uint64_t **)(v27 + 16);
        long long v29 = *(uint64_t **)(v27 + 24);
        while (v28 == v29)
        {
LABEL_26:
          if (++v23 == v21) {
            goto LABEL_56;
          }
        }
        int v30 = v28;
        while (1)
        {
          uint64_t v31 = *v30;
          if (*v30)
          {
            uint64_t v32 = v20[4 * v23];
          }
          else
          {
            uint64_t v31 = v30[1];
            uint64_t v32 = v20[4 * v23 + 1];
          }
          if (v31 == v32) {
            break;
          }
          v30 += 7;
          if (v30 == v29) {
            goto LABEL_26;
          }
        }
        v25[v26++] = v23;
        if (v26 == v7) {
          goto LABEL_29;
        }
      }
LABEL_56:
      if (maps::path_codec::Logger::m_log_level <= 1u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"No path segment could be matched with any of the segments of point ", 67);
        BOOL v57 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)".", 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_debug((uint64_t)__p, 104, (uint64_t)v66);
        if (v67 < 0) {
          operator delete(v66[0]);
        }
        if (v69 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v70 = *MEMORY[0x1E4FBA418];
        *(uint64_t *)((char *)&v70 + *(void *)(v70 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        uint64_t v71 = MEMORY[0x1E4FBA470] + 16;
        if (v73 < 0) {
          operator delete(v72);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18C11F4F0](v74);
      }
      if (v75)
      {
        int v76 = v75;
        operator delete(v75);
      }
      uint64_t v8 = 0;
    }
    int v18 = v63;
    if (!v63) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  uint64_t v8 = 0;
  if (v63)
  {
LABEL_71:
    int v64 = v18;
    operator delete(v18);
  }
LABEL_72:
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  return v8;
}

void sub_189EABC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  std::ostringstream::~ostringstream((uint64_t)&a38);
  uint64_t v40 = *(void **)(v38 - 112);
  if (v40)
  {
    *(void *)(v38 - 104) = v40;
    operator delete(v40);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

BOOL _GEOConfigRangeCheckEnabled()
{
  if (qword_1EB29FEE0 != -1) {
    dispatch_once(&qword_1EB29FEE0, &__block_literal_global_127);
  }
  return (_MergedGlobals_270 & 1) == 0;
}

uint64_t _GEOConfigRemoveValue(int a1, uint64_t a2)
{
  return _setValue(a1, a2, 0, 0, 0);
}

uint64_t _GEOConfigRemoveValueSync(int a1, uint64_t a2)
{
  return _setValue(a1, a2, 0, 0, 1);
}

id _GEOConfigGetDecodedValueWithSource(int a1, uint64_t a2, void *a3, void *a4)
{
  return _getValue(a1, a2, 1, 0, a3, a4);
}

uint64_t _GEOConfigSetEncodedValue(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t _GEOConfigSetEncodedValueSync(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetStringForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

uint64_t GEOConfigSetString(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncString(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

uint64_t GEOConfigGetValueWithSourceBOOL(int a1, uint64_t a2, void *a3)
{
  unint64_t v3 = _getValue(a1, a2, 1, 0, a3, 0);
  uint64_t v4 = [v3 BOOLValue];

  return v4;
}

void GEOConfigSetSyncBOOL(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithBool:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);
}

uint64_t GEOConfigGetIntegerForCountryCode(int a1, uint64_t a2, void *a3)
{
  unint64_t v3 = _getValue(a1, a2, 1, a3, 0, 0);
  uint64_t v4 = [v3 integerValue];

  return v4;
}

uint64_t GEOConfigGetValueWithSourceInteger(int a1, uint64_t a2, void *a3)
{
  unint64_t v3 = _getValue(a1, a2, 1, 0, a3, 0);
  uint64_t v4 = [v3 integerValue];

  return v4;
}

void GEOConfigSetInteger(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithInteger:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);
}

void GEOConfigSetSyncInteger(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithInteger:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);
}

uint64_t GEOConfigGetUIntegerForCountryCode(int a1, uint64_t a2, void *a3)
{
  unint64_t v3 = _getValue(a1, a2, 1, a3, 0, 0);
  uint64_t v4 = [v3 unsignedIntegerValue];

  return v4;
}

uint64_t GEOConfigGetValueWithSourceUInteger(int a1, uint64_t a2, void *a3)
{
  unint64_t v3 = _getValue(a1, a2, 1, 0, a3, 0);
  uint64_t v4 = [v3 unsignedIntegerValue];

  return v4;
}

void GEOConfigSetUInteger(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithUnsignedInteger:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);
}

void GEOConfigSetSyncUInteger(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithUnsignedInteger:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);
}

uint64_t GEOConfigGetUint64ForCountryCode(int a1, uint64_t a2, void *a3)
{
  unint64_t v3 = _getValue(a1, a2, 1, a3, 0, 0);
  uint64_t v4 = [v3 unsignedLongLongValue];

  return v4;
}

uint64_t GEOConfigGetValueWithSourceUint64(int a1, uint64_t a2, void *a3)
{
  unint64_t v3 = _getValue(a1, a2, 1, 0, a3, 0);
  uint64_t v4 = [v3 unsignedLongLongValue];

  return v4;
}

void GEOConfigSetUint64(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithUnsignedLongLong:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);
}

void GEOConfigSetSyncUint64(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithUnsignedLongLong:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);
}

double GEOConfigGetDoubleForCountryCode(int a1, uint64_t a2, void *a3)
{
  unint64_t v3 = _getValue(a1, a2, 1, a3, 0, 0);
  [v3 doubleValue];
  double v5 = v4;

  return v5;
}

double GEOConfigGetValueWithSourceDouble(int a1, uint64_t a2, void *a3)
{
  unint64_t v3 = _getValue(a1, a2, 1, 0, a3, 0);
  [v3 doubleValue];
  double v5 = v4;

  return v5;
}

void GEOConfigSetDouble(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithDouble:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);
}

void GEOConfigSetSyncDouble(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithDouble:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);
}

id GEOConfigGetArrayForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceArray(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetSyncArray(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetSet(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

id GEOConfigGetSetForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceSet(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetSet(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncSet(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetDictionaryForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceDictionary(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetDictionary(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncDictionary(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetDateForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceDate(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetDate(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncDate(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetBytes(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

id GEOConfigGetBytesForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceBytes(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetBytes(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncBytes(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

void _GEOConfigKeySetExpiry(int a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  unint64_t v9 = v8;
  if (!a1 || !a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      goto LABEL_6;
    }
    *(_WORD *)buf = 0;
    int v10 = MEMORY[0x1E4F14500];
    uint64_t v11 = "Assertion failed: _GEOConfigKeyIsValid(key)";
LABEL_11:
    _os_log_fault_impl(&dword_188D96000, v10, OS_LOG_TYPE_FAULT, v11, buf, 2u);
    goto LABEL_6;
  }
  if (!v7 && ![v8 length])
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      goto LABEL_6;
    }
    *(_WORD *)buf = 0;
    int v10 = MEMORY[0x1E4F14500];
    uint64_t v11 = "Assertion failed: date != ((void *)0) || osVersion.length > 0";
    goto LABEL_11;
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = ___GEOConfigKeySetExpiry_block_invoke;
  v12[3] = &unk_1E53E8478;
  id v13 = v7;
  id v14 = v9;
  GEOConfigGetPropertiesForKey(a1, a2, v12);

LABEL_6:
}

void _GEOConfigKeyClearExpiry(int a1, uint64_t a2)
{
  if (a1 && a2)
  {
    GEOConfigGetPropertiesForKey(a1, a2, &__block_literal_global_103);
  }
  else
  {
    uint64_t v5 = v2;
    uint64_t v6 = v3;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: _GEOConfigKeyIsValid(key)", v4, 2u);
    }
  }
}

uint64_t _GEOConfigKeyGetExpiry(int a1, uint64_t a2, void *a3, void *a4)
{
  if (!a1 || !a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    *(_WORD *)buf = 0;
    id v7 = MEMORY[0x1E4F14500];
    id v8 = "Assertion failed: _GEOConfigKeyIsValid(key)";
LABEL_13:
    _os_log_fault_impl(&dword_188D96000, v7, OS_LOG_TYPE_FAULT, v8, buf, 2u);
    return 0;
  }
  if (!a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    *(_WORD *)buf = 0;
    id v7 = MEMORY[0x1E4F14500];
    id v8 = "Assertion failed: date != ((void *)0)";
    goto LABEL_13;
  }
  if (!a4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    *(_WORD *)buf = 0;
    id v7 = MEMORY[0x1E4F14500];
    id v8 = "Assertion failed: osVersion != ((void *)0)";
    goto LABEL_13;
  }
  *(void *)buf = 0;
  uint64_t v17 = buf;
  uint64_t v18 = 0x3032000000;
  long long v19 = __Block_byref_object_copy__65;
  long long v20 = __Block_byref_object_dispose__65;
  id v21 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x3032000000;
  id v13 = __Block_byref_object_copy__65;
  id v14 = __Block_byref_object_dispose__65;
  id v15 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___GEOConfigKeyGetExpiry_block_invoke;
  v9[3] = &unk_1E53E84C0;
  v9[4] = buf;
  v9[5] = &v10;
  GEOConfigGetPropertiesForKey(a1, a2, v9);
  *a3 = *((id *)v17 + 5);
  *a4 = (id) v11[5];
  _Block_object_dispose(&v10, 8);

  _Block_object_dispose(buf, 8);
  return 0;
}

void sub_189EADD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL _GEOConfigKeyIsExpired(int a1, uint64_t a2)
{
  if (a1 && a2)
  {
    *(void *)buf = 0;
    uint64_t v6 = buf;
    uint64_t v7 = 0x2020000000;
    char v8 = 0;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = ___GEOConfigKeyIsExpired_block_invoke;
    v4[3] = &unk_1E53E84E8;
    void v4[4] = buf;
    GEOConfigGetPropertiesForKey(a1, a2, v4);
    BOOL v2 = v6[24] != 0;
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: _GEOConfigKeyIsValid(key)", buf, 2u);
    }
    return 0;
  }
  return v2;
}

void sub_189EADF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void GEOConfigRemoveBlockListener(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __GEOConfigRemoveBlockListener_block_invoke;
    v4[3] = &unk_1E53E85B0;
    id v5 = v1;
    uint64_t v3 = v4;
    if (qword_1EB29FF28 != -1) {
      dispatch_once(&qword_1EB29FF28, &__block_literal_global_128);
    }
    uint64_t v6 = MEMORY[0x1E4F143A8];
    uint64_t v7 = 3221225472;
    char v8 = ___withKeyListeners_block_invoke;
    unint64_t v9 = &unk_1E53DA028;
    id v10 = v3;
    geo_isolate_sync();
  }
}

void __GEOConfigRemoveBlockListener_block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v22 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v12 + 8));
    if (WeakRetained)
    {
      id v14 = WeakRetained;
      id v15 = [v9 objectForKeyedSubscript:WeakRetained];
      if ([v15 count])
      {
        uint64_t v16 = 0;
        while ([v15 pointerAtIndex:v16] != *(void *)(a1 + 32))
        {
          if (++v16 >= (unint64_t)[v15 count]) {
            goto LABEL_9;
          }
        }
        [v15 removePointerAtIndex:v16];
      }
LABEL_9:
      [v15 compact];
      if (![v15 count])
      {
        [v9 setObject:0 forKeyedSubscript:v14];
        uint64_t v17 = -[_GEOConfigKeyHelper keyString](v14);
        [v10 setObject:0 forKeyedSubscript:v17];

        uint64_t v18 = -[_GEOConfigKeyHelper keyNumber](v14);
        [v11 setObject:0 forKeyedSubscript:v18];

        long long v19 = (void *)MEMORY[0x1E4F1CAD0];
        long long v20 = -[_GEOConfigKeyHelper keyString](v14);
        id v21 = [v19 setWithObject:v20];
        _GEORemoveChangeListenerForKeys(v21);
      }
    }
  }
}

uint64_t __GEOConfigGetPropertiesForKey_block_invoke()
{
  return 0;
}

void ___initKeyChangeListeners_block_invoke_4()
{
  os_log_t v0 = [MEMORY[0x1E4F1CA48] array];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___reconnect_block_invoke;
  v4[3] = &unk_1E53E85B0;
  id v5 = v0;
  id v1 = v4;
  uint64_t v2 = qword_1EB29FF28;
  id v3 = v0;
  if (v2 != -1) {
    dispatch_once(&qword_1EB29FF28, &__block_literal_global_128);
  }
  uint64_t v6 = MEMORY[0x1E4F143A8];
  uint64_t v7 = 3221225472;
  char v8 = ___withKeyListeners_block_invoke;
  id v9 = &unk_1E53DA028;
  id v10 = v1;
  geo_isolate_sync();

  [v3 makeObjectsPerformSelector:sel_callListener];
}

void ___reconnect_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([v9 count])
  {
    id v25 = v8;
    id v10 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v9, "count"));
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v11 = [v9 allValues];
    uint64_t v12 = [v11 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v33;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v33 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v32 + 1) + 8 * v15);
          uint64_t v17 = NSNumber;
          if (v16)
          {
            uint64_t v18 = v16[2];
            if (!v18)
            {
              -[_GEOConfigKeyHelper _lookupKeyProperties](*(void *)(*((void *)&v32 + 1) + 8 * v15));
              uint64_t v18 = v16[2];
            }
          }
          else
          {
            uint64_t v18 = 0;
          }
          long long v19 = [v17 numberWithInteger:v18];
          long long v20 = -[_GEOConfigKeyHelper keyString](v16);
          [v10 setObject:v19 forKeyedSubscript:v20];

          ++v15;
        }
        while (v13 != v15);
        uint64_t v21 = [v11 countByEnumeratingWithState:&v32 objects:v36 count:16];
        uint64_t v13 = v21;
      }
      while (v21);
    }

    _GEOAddChangeListenerForKeys(v10);
    id v8 = v25;
  }
  id v22 = [MEMORY[0x1E4F1CA80] set];
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  void v29[2] = ___reconnect_block_invoke_2;
  v29[3] = &unk_1E53E8690;
  id v23 = v22;
  id v30 = v23;
  id v31 = *(id *)(a1 + 32);
  [v7 enumerateKeysAndObjectsUsingBlock:v29];
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = ___reconnect_block_invoke_3;
  v26[3] = &unk_1E53E86B8;
  id v27 = v23;
  id v28 = *(id *)(a1 + 32);
  id v24 = v23;
  [v8 enumerateKeysAndObjectsUsingBlock:v26];
}

void ___reconnect_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2;
  id v5 = a3;
  if (-[_GEOConfigKeyHelper valueChanged](v6))
  {
    [*(id *)(a1 + 32) addObject:v6];
    [*(id *)(a1 + 40) addObjectsFromArray:v5];
  }
}

void ___reconnect_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (([*(id *)(a1 + 32) containsObject:v8] & 1) != 0
    || -[_GEOConfigKeyHelper valueChanged](v8))
  {
    [v5 compact];
    uint64_t v6 = *(void **)(a1 + 40);
    id v7 = [v5 allObjects];
    [v6 addObjectsFromArray:v7];
  }
}

void __GEOGetAnalyticDataFileLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "AnalyticDataFile");
  id v1 = (void *)_MergedGlobals_271;
  _MergedGlobals_271 = (uint64_t)v0;
}

uint64_t CoreTelephonyLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  id v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = CoreTelephonyLibraryCore_frameworkLibrary;
  uint64_t v5 = CoreTelephonyLibraryCore_frameworkLibrary;
  if (!CoreTelephonyLibraryCore_frameworkLibrary)
  {
    long long v6 = __const__block__paths_3;
    long long v7 = *(_OWORD *)&off_1E53E86E8;
    v3[3] = _sl_dlopen();
    CoreTelephonyLibraryCore_frameworkLibrary = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_189EAEDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CoreTelephonyLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  CoreTelephonyLibraryCore_frameworkLibrary = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t CoreTelephonyLibrary()
{
  uint64_t v0 = CoreTelephonyLibraryCore();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id getCoreTelephonyClientClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCoreTelephonyClientClass_softClass;
  uint64_t v7 = getCoreTelephonyClientClass_softClass;
  if (!getCoreTelephonyClientClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getCoreTelephonyClientClass_block_invoke;
    v3[3] = &unk_1E53DB3C8;
    v3[4] = &v4;
    __getCoreTelephonyClientClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_189EAEFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCoreTelephonyClientClass_block_invoke(uint64_t a1)
{
  CoreTelephonyLibrary();
  Class result = objc_getClass("CoreTelephonyClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCoreTelephonyClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = abort_report_np();
    return (Class)get_CTServerConnectionCreateOnTargetQueueSymbolLoc(v3);
  }
  return result;
}

uint64_t get_CTServerConnectionCreateOnTargetQueueSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = get_CTServerConnectionCreateOnTargetQueueSymbolLoc_ptr;
  uint64_t v6 = get_CTServerConnectionCreateOnTargetQueueSymbolLoc_ptr;
  if (!get_CTServerConnectionCreateOnTargetQueueSymbolLoc_ptr)
  {
    id v1 = (void *)CoreTelephonyLibrary();
    v4[3] = (uint64_t)dlsym(v1, "_CTServerConnectionCreateOnTargetQueue");
    get_CTServerConnectionCreateOnTargetQueueSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_189EAF124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t geo_CTServerConnectionCreateOnTargetQueue(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = (uint64_t (*)(uint64_t, uint64_t, id, id))get_CTServerConnectionCreateOnTargetQueueSymbolLoc();
  if (v9)
  {
    uint64_t v10 = v9(a1, a2, v7, v8);

    return v10;
  }
  else
  {
    dlerror();
    uint64_t v12 = abort_report_np();
    return get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc(v12);
  }
}

uint64_t get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc_ptr;
  uint64_t v6 = get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc_ptr;
  if (!get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc_ptr)
  {
    id v1 = (void *)CoreTelephonyLibrary();
    v4[3] = (uint64_t)dlsym(v1, "_CTServerConnectionGetCellularDataIsEnabled");
    get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_189EAF2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *geo_CTServerConnectionGetCellularDataIsEnabled(uint64_t a1, uint64_t a2)
{
  IsEnabledSymbolLoc = (uint64_t (*)(uint64_t, uint64_t))get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc();
  if (IsEnabledSymbolLoc)
  {
    return (void *)IsEnabledSymbolLoc(a1, a2);
  }
  else
  {
    dlerror();
    uint64_t v6 = abort_report_np();
    return __get_CTServerConnectionCopyISOForMCCSymbolLoc_block_invoke(v6);
  }
}

void sub_189EAF6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_189EB0C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose((const void *)(v17 - 160), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189EB0F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189EB11DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getTMGetKernelMonotonicClockSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTimeLibrary();
  Class result = dlsym(v2, "TMGetKernelMonotonicClock");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getTMGetKernelMonotonicClockSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreTimeLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreTimeLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getTMGetReferenceTimeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CoreTimeLibrary();
  uint64_t result = dlsym(v2, "TMGetReferenceTime");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getTMGetReferenceTimeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id GEOGetCoarseLocationLog()
{
  if (qword_1EB29FF68 != -1) {
    dispatch_once(&qword_1EB29FF68, &__block_literal_global_130);
  }
  uint64_t v0 = (void *)_MergedGlobals_273;

  return v0;
}

void __GEOGetCoarseLocationLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "CoarseLocation");
  id v1 = (void *)_MergedGlobals_273;
  _MergedGlobals_273 = (uint64_t)v0;
}

void sub_189EB2A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189EB2A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189EB2B38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_189EB2CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)GEOAltitudeManifest;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_189EB2DDC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_189EB2F34(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_189EB308C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_189EB3228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_189EB33E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_189EB3518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189EB3620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_189EB3754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_189EB3858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_189EB395C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned int,_GEOAltitudeTriggerData>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }

  return a1;
}

void _GEOAltitudeTriggerData::~_GEOAltitudeTriggerData(_GEOAltitudeTriggerData *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

uint64_t __Block_byref_object_copy__174(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__175(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(a1 + 48);
}

void sub_189EB3C00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRRootReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v8])
    {
      case -3:
        char v7 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        uint64_t v14 = (GEOLPRRegion *)(v10 | (v11 > 1));
        if ((v14 | v7)) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = a3;
        }
        uint64_t v16 = (uint64_t)v14;
        char v67 = (v8 != 0) | v14;
        char v68 = (v15 == 0) | v14;
        uint64_t v17 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        long long v19 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v8;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_103;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      unint64_t v24 = *(void *)(v3 + v23);
      if (v24 == -1 || v24 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0) {
        goto LABEL_23;
      }
      v20 += 7;
      if (v21++ >= 9)
      {
        unint64_t v22 = 0;
        int v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_23:
    int v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_25:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_103:
      if (v16)
      {
        char v55 = 1;
        goto LABEL_114;
      }
      if (v15)
      {
        while (1)
        {
          int v56 = *v15++;
          char v57 = 2;
          switch(v56)
          {
            case 0:
              goto LABEL_115;
            case 1:
              goto LABEL_109;
            case 3:
              char v57 = 1;
              goto LABEL_109;
            case 4:
              char v57 = 4;
LABEL_109:
              *(unsigned char *)(a1 + 52) |= v57;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_115;
    }
    unint64_t v29 = v22 >> 3;
    BOOL v30 = v16;
    if ((v68 & 1) == 0)
    {
      id v31 = v15;
      do
      {
        int v33 = *v31++;
        int v32 = v33;
        BOOL v30 = v33 != 0;
        if (v33) {
          BOOL v34 = v32 == v29;
        }
        else {
          BOOL v34 = 1;
        }
      }
      while (!v34);
    }
    if (v29 == 4)
    {
      if (v30 && (*(unsigned char *)(a1 + 52) & 4) == 0)
      {
        if (!PBReaderPlaceMark()) {
          goto LABEL_110;
        }
        unsigned int v60 = v16;
        if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6)) {
          goto LABEL_112;
        }
        char v61 = 0;
        char v63 = 0;
        uint64_t v16 = 0;
        int v66 = 0;
        while (2)
        {
          if (!*(unsigned char *)(v3 + *v18))
          {
            char v36 = 0;
            unsigned int v37 = 0;
            unint64_t v38 = 0;
            while (1)
            {
              uint64_t v39 = *v17;
              unint64_t v40 = *(void *)(v3 + v39);
              if (v40 == -1 || v40 >= *(void *)(v3 + *v6)) {
                break;
              }
              char v41 = *(unsigned char *)(*(void *)(v3 + *v19) + v40);
              *(void *)(v3 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if ((v41 & 0x80) == 0) {
                goto LABEL_58;
              }
              v36 += 7;
              BOOL v42 = v37++ > 8;
              if (v42) {
                goto LABEL_66;
              }
            }
            *(unsigned char *)(v3 + *v18) = 1;
LABEL_58:
            if (*(unsigned char *)(v3 + *v18)) {
              unint64_t v38 = 0;
            }
            if ((v38 >> 3) != 2)
            {
              if ((v38 >> 3) == 1)
              {
                uint64_t v43 = PBReaderReadString();

                char v63 = 1;
                int v66 = (void *)v43;
                goto LABEL_67;
              }
LABEL_66:
              if (!PBReaderSkipValueWithTag()) {
                goto LABEL_113;
              }
              goto LABEL_67;
            }
            if (!PBReaderPlaceMark()) {
              goto LABEL_113;
            }
            long long v44 = objc_alloc_init(GEOLPRVehicleType);

            if ((GEOLPRVehicleTypeReadAllFrom((uint64_t)v44, (void *)v3, v9 & 1) & 1) == 0)
            {
LABEL_111:
              uint64_t v16 = (uint64_t)v44;
              goto LABEL_113;
            }
            PBReaderRecallMark();
            char v61 = 1;
            uint64_t v16 = (uint64_t)v44;
LABEL_67:
            if (*(void *)(v3 + *v17) < *(void *)(v3 + *v6)) {
              continue;
            }
          }
          break;
        }
        if ((v63 & 1) == 0 || (v61 & 1) == 0) {
          goto LABEL_113;
        }
        long long v45 = (void *)v16;
        int v64 = (void *)v16;
        uint64_t v46 = v66;
        -[GEOLPRRoot _setNoFlagsVehicleTypesValue:forKey:](a1, v45, v66);
        goto LABEL_98;
      }
      goto LABEL_101;
    }
    if (v29 == 3) {
      break;
    }
    if (v29 != 1)
    {
      if (!PBReaderSkipValueWithTag()) {
        goto LABEL_110;
      }
      goto LABEL_102;
    }
    if (!v30 || (*(unsigned char *)(a1 + 52) & 2) != 0) {
      goto LABEL_101;
    }
    if ((PBReaderPlaceMark() & 1) == 0) {
      goto LABEL_110;
    }
    long long v35 = (GEOLPRRegion *)v16;
    uint64_t v16 = objc_alloc_init(GEOLPRRegion);
    if (!GEOLPRRegionReadAllFrom(v16, (void *)v3, v9 & 1))
    {

      char v55 = 0;
      LOBYTE(v16) = (_BYTE)v35;
      goto LABEL_114;
    }
    PBReaderRecallMark();
    -[GEOLPRRoot _addNoFlagsRegions:](a1, (void *)v16);

    uint64_t v16 = (uint64_t)v35;
LABEL_102:
    if ((v67 & 1) == 0) {
      goto LABEL_103;
    }
  }
  if (!v30 || (*(unsigned char *)(a1 + 52) & 1) != 0)
  {
LABEL_101:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_110:
      char v55 = 0;
      goto LABEL_114;
    }
    goto LABEL_102;
  }
  if (!PBReaderPlaceMark()) {
    goto LABEL_110;
  }
  unsigned int v60 = v16;
  if (*(void *)(v3 + *v17) < *(void *)(v3 + *v6))
  {
    char v62 = 0;
    char v65 = 0;
    uint64_t v16 = 0;
    int v66 = 0;
    while (2)
    {
      if (!*(unsigned char *)(v3 + *v18))
      {
        char v47 = 0;
        unsigned int v48 = 0;
        unint64_t v49 = 0;
        while (1)
        {
          uint64_t v50 = *v17;
          unint64_t v51 = *(void *)(v3 + v50);
          if (v51 == -1 || v51 >= *(void *)(v3 + *v6)) {
            break;
          }
          char v52 = *(unsigned char *)(*(void *)(v3 + *v19) + v51);
          *(void *)(v3 + v50) = v51 + 1;
          v49 |= (unint64_t)(v52 & 0x7F) << v47;
          if ((v52 & 0x80) == 0) {
            goto LABEL_85;
          }
          v47 += 7;
          BOOL v42 = v48++ > 8;
          if (v42) {
            goto LABEL_93;
          }
        }
        *(unsigned char *)(v3 + *v18) = 1;
LABEL_85:
        if (*(unsigned char *)(v3 + *v18)) {
          unint64_t v49 = 0;
        }
        if ((v49 >> 3) != 2)
        {
          if ((v49 >> 3) == 1)
          {
            uint64_t v53 = PBReaderReadString();

            char v65 = 1;
            int v66 = (void *)v53;
            goto LABEL_94;
          }
LABEL_93:
          if (!PBReaderSkipValueWithTag()) {
            goto LABEL_113;
          }
          goto LABEL_94;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_113;
        }
        long long v44 = objc_alloc_init(GEOLPRPowerType);

        if ((GEOLPRPowerTypeReadAllFrom((uint64_t)v44, (void *)v3, v9 & 1) & 1) == 0) {
          goto LABEL_111;
        }
        PBReaderRecallMark();
        char v62 = 1;
        uint64_t v16 = (uint64_t)v44;
LABEL_94:
        if (*(void *)(v3 + *v17) < *(void *)(v3 + *v6)) {
          continue;
        }
      }
      break;
    }
    if ((v65 & 1) == 0 || (v62 & 1) == 0) {
      goto LABEL_113;
    }
    long long v54 = (void *)v16;
    int v64 = (void *)v16;
    uint64_t v46 = v66;
    -[GEOLPRRoot _setNoFlagsPowerTypesValue:forKey:](a1, v54, v66);
LABEL_98:
    PBReaderRecallMark();

    uint64_t v16 = v60;
    goto LABEL_102;
  }
LABEL_112:
  int v66 = 0;
  uint64_t v16 = 0;
LABEL_113:

  char v55 = 0;
  LOBYTE(v16) = v60;
LABEL_114:
  *(unsigned char *)(a1 + 52) |= 2u;
  *(unsigned char *)(a1 + 52) |= 1u;
  *(unsigned char *)(a1 + 52) |= 4u;
  if (v55)
  {
LABEL_115:
    unint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
    if ((v16 & 1) == 0) {
      return v3;
    }
    goto LABEL_116;
  }
  unint64_t v3 = 0;
  if (v16)
  {
LABEL_116:
    BOOL v58 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_189EB47DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189EB4C48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189EB5A3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLPRRootCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v2 = a1[3];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v26;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v25 + 1) + 8 * v6++) readAll:1];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v25 objects:v31 count:16];
    }
    while (v4);
  }

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  char v7 = [a1[2] allValues];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v21 objects:v30 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v21 + 1) + 8 * v11++) readAll:1];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v21 objects:v30 count:16];
    }
    while (v9);
  }

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v12 = objc_msgSend(a1[4], "allValues", 0);
  uint64_t v13 = [v12 countByEnumeratingWithState:&v17 objects:v29 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v18;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v18 != v15) {
          objc_enumerationMutation(v12);
        }
        [*(id *)(*((void *)&v17 + 1) + 8 * v16++) readAll:1];
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v17 objects:v29 count:16];
    }
    while (v14);
  }
}

unint64_t GEOLPRRootReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOLPRRootReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOLPRRootReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOLPRRootReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOLPRRootReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOLPRRootCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189EB5E0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRRootReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEOLPRRootReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189EB5E70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRRootIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_83;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v12 = v7++ >= 9;
        if (v12)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v14 = v8 & 7;
      if (v13 || v14 == 4) {
        goto LABEL_83;
      }
      unint64_t v16 = v8 >> 3;
      if ((v8 >> 3) == 4) {
        break;
      }
      if (v16 == 3)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || *(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
          goto LABEL_84;
        }
        char v17 = 0;
        char v18 = 0;
        do
        {
          if (a1[*v4]) {
            break;
          }
          char v27 = 0;
          unsigned int v28 = 0;
          unint64_t v29 = 0;
          while (1)
          {
            uint64_t v30 = *v2;
            unint64_t v31 = *(void *)&a1[v30];
            if (v31 == -1 || v31 >= *(void *)&a1[*v3]) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)&a1[*v5] + v31);
            *(void *)&a1[v30] = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_65;
            }
            v27 += 7;
            BOOL v12 = v28++ >= 9;
            if (v12)
            {
              unint64_t v29 = 0;
              int v33 = a1[*v4];
              goto LABEL_67;
            }
          }
          a1[*v4] = 1;
LABEL_65:
          int v33 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v29 = 0;
          }
LABEL_67:
          if (v33) {
            break;
          }
          int v34 = v29 & 7;
          if ((v29 >> 3) == 2)
          {
            if (v34 != 2 || !GEOLPRPowerTypeIsValid(a1)) {
              goto LABEL_84;
            }
            char v18 = 1;
          }
          else if ((v29 >> 3) == 1)
          {
            if (v34 != 2) {
              goto LABEL_84;
            }
            char v17 = 1;
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_84;
            }
          }
          else if (!PBReaderSkipValueWithTag())
          {
            goto LABEL_84;
          }
        }
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
LABEL_78:
        if ((v17 & 1) == 0 || (v18 & 1) == 0) {
          goto LABEL_84;
        }
        goto LABEL_80;
      }
      if (v16 == 1)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEOLPRRegionIsValid(a1)) {
          goto LABEL_84;
        }
LABEL_80:
        PBReaderRecallMark();
        goto LABEL_82;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_84;
      }
LABEL_82:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_83;
      }
    }
    if (v14 != 2 || !PBReaderPlaceMark() || *(void *)&a1[*v2] >= *(void *)&a1[*v3])
    {
LABEL_84:
      PBReaderRecallMark();
      return 0;
    }
    char v17 = 0;
    char v18 = 0;
    while (!a1[*v4])
    {
      char v19 = 0;
      unsigned int v20 = 0;
      unint64_t v21 = 0;
      while (1)
      {
        uint64_t v22 = *v2;
        unint64_t v23 = *(void *)&a1[v22];
        if (v23 == -1 || v23 >= *(void *)&a1[*v3]) {
          break;
        }
        char v24 = *(unsigned char *)(*(void *)&a1[*v5] + v23);
        *(void *)&a1[v22] = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0) {
          goto LABEL_38;
        }
        v19 += 7;
        BOOL v12 = v20++ >= 9;
        if (v12)
        {
          unint64_t v21 = 0;
          int v25 = a1[*v4];
          goto LABEL_40;
        }
      }
      a1[*v4] = 1;
LABEL_38:
      int v25 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v21 = 0;
      }
LABEL_40:
      if (v25) {
        break;
      }
      int v26 = v21 & 7;
      if ((v21 >> 3) == 2)
      {
        if (v26 != 2 || !GEOLPRVehicleTypeIsValid(a1)) {
          goto LABEL_84;
        }
        char v18 = 1;
      }
      else if ((v21 >> 3) == 1)
      {
        if (v26 != 2) {
          goto LABEL_84;
        }
        char v17 = 1;
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_84;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_84;
      }
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_78;
      }
    }
    goto LABEL_78;
  }
LABEL_83:
  BOOL v35 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v35;
}

void sub_189EB65F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOLPRRootIsDirty(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v2 = *(unsigned char *)(a1 + 52);
  if ((v2 & 0xF) == 0)
  {
    if (*(unsigned char *)(a1 + 52))
    {
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v4 = [*(id *)(a1 + 16) allValues];
      uint64_t v5 = [v4 countByEnumeratingWithState:&v16 objects:v21 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v17;
LABEL_6:
        uint64_t v8 = 0;
        while (1)
        {
          if (*(void *)v17 != v7) {
            objc_enumerationMutation(v4);
          }
          if (GEOLPRPowerTypeIsDirty(*(os_unfair_lock_s **)(*((void *)&v16 + 1) + 8 * v8))) {
            goto LABEL_24;
          }
          if (v6 == ++v8)
          {
            uint64_t v6 = [v4 countByEnumeratingWithState:&v16 objects:v21 count:16];
            if (v6) {
              goto LABEL_6;
            }
            break;
          }
        }
      }

      char v2 = *(unsigned char *)(a1 + 52);
    }
    if ((v2 & 4) == 0) {
      return 0;
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v4 = objc_msgSend(*(id *)(a1 + 32), "allValues", 0);
    uint64_t v3 = [v4 countByEnumeratingWithState:&v12 objects:v20 count:16];
    if (!v3)
    {
LABEL_25:

      return v3;
    }
    uint64_t v9 = *(void *)v13;
LABEL_17:
    uint64_t v10 = 0;
    while (1)
    {
      if (*(void *)v13 != v9) {
        objc_enumerationMutation(v4);
      }
      if (GEOLPRVehicleTypeIsDirty(*(os_unfair_lock_s **)(*((void *)&v12 + 1) + 8 * v10))) {
        break;
      }
      if (v3 == ++v10)
      {
        uint64_t v3 = [v4 countByEnumeratingWithState:&v12 objects:v20 count:16];
        if (v3) {
          goto LABEL_17;
        }
        goto LABEL_25;
      }
    }
LABEL_24:
    uint64_t v3 = 1;
    goto LABEL_25;
  }
  return 1;
}

os_unfair_lock_s *GEOLPRRootIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = result;
    os_unfair_lock_lock_with_options();
    uint64_t IsDirty = _GEOLPRRootIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189EB6FE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double GEOMapRectAreaCoveredByMapRects(uint64_t a1, unint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v8 = 0;
  *(double *)&long long v99 = a3;
  *((double *)&v99 + 1) = a4;
  *(double *)&long long v100 = a3 + a5;
  *((double *)&v100 + 1) = a4 + a6;
  char v9 = 1;
  do
  {
    double v10 = *(double *)&v101[v8 - 2];
    double v11 = *((double *)&v99 + v8);
    if ((v9 & 1) == 0) {
      break;
    }
    char v9 = 0;
    uint64_t v8 = 1;
  }
  while (v10 >= v11);
  double v12 = 0.0;
  if (v10 < v11) {
    return v12;
  }
  if (a2)
  {
    if (a2 >> 59) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    long long v13 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<geo::TransitEdgePiece>>(a2);
    uint64_t v14 = 0;
    long long v16 = &v13[4 * v15];
    long long v17 = v13;
    do
    {
      long long v18 = (double *)(a1 + 32 * v14);
      double v20 = *v18;
      double v19 = v18[1];
      double v21 = *v18 + v18[2];
      double v22 = v19 + v18[3];
      if (v17 >= v16)
      {
        uint64_t v23 = ((char *)v17 - (char *)v13) >> 5;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 59) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v16 - (char *)v13) >> 4 > v24) {
          unint64_t v24 = ((char *)v16 - (char *)v13) >> 4;
        }
        if ((unint64_t)((char *)v16 - (char *)v13) >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<geo::TransitEdgePiece>>(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        char v27 = (double *)(v25 + 32 * v23);
        double *v27 = v20;
        v27[1] = v19;
        v27[2] = v21;
        v27[3] = v22;
        if (v17 == v13)
        {
          unint64_t v29 = (double *)(v25 + 32 * v23);
        }
        else
        {
          unint64_t v28 = v25 + 32 * v23;
          do
          {
            unint64_t v29 = (double *)(v28 - 32);
            long long v30 = *((_OWORD *)v17 - 1);
            *(_OWORD *)(v28 - 32) = *((_OWORD *)v17 - 2);
            *(_OWORD *)(v28 - 16) = v30;
            v17 -= 4;
            v28 -= 32;
          }
          while (v17 != v13);
        }
        long long v16 = (double *)(v25 + 32 * v26);
        long long v17 = v27 + 4;
        if (v13) {
          operator delete(v13);
        }
        long long v13 = v29;
      }
      else
      {
        *long long v17 = v20;
        v17[1] = v19;
        v17[2] = v21;
        v17[3] = v22;
        v17 += 4;
      }
      ++v14;
    }
    while (v14 != a2);
  }
  else
  {
    long long v13 = 0;
    long long v17 = 0;
  }
  long long v108 = 0u;
  memset(v107, 0, sizeof(v107));
  std::deque<gm::Box<double,2>>::__add_back_capacity(v107);
  uint64_t v31 = *((void *)&v108 + 1);
  char v32 = (_OWORD *)(*(void *)(*((void *)&v107[0] + 1)
                             + ((((void)v108 + *((void *)&v108 + 1)) >> 4) & 0xFFFFFFFFFFFFFF8))
                 + 32 * ((v108 + *((void *)&v108 + 1)) & 0x7F));
  long long v33 = v100;
  _OWORD *v32 = v99;
  v32[1] = v33;
  BOOL v34 = __CFADD__(v31, 1);
  uint64_t v35 = v31 + 1;
  *((void *)&v108 + 1) = v35;
  if (v34)
  {
    std::deque<gm::Box<double,2>>::~deque[abi:ne180100]((uint64_t)v107);
    char v36 = 0;
  }
  else
  {
    char v36 = 0;
    unsigned int v37 = 0;
    unint64_t v38 = ((char *)v17 - (char *)v13) >> 5;
    if (v38 <= 1) {
      unint64_t v38 = 1;
    }
    unint64_t v97 = v38;
    unint64_t v96 = 0;
    do
    {
      int v98 = v36;
      uint64_t v39 = *((void *)&v107[0] + 1);
      uint64_t v40 = v108;
      char v41 = (long long *)(*(void *)(*((void *)&v107[0] + 1) + (((unint64_t)v108 >> 4) & 0xFFFFFFFFFFFFFF8))
                       + 32 * (v108 & 0x7F));
      long long v42 = v41[1];
      long long v105 = *v41;
      long long v106 = v42;
      *(void *)&long long v108 = v108 + 1;
      *((void *)&v108 + 1) = v35 - 1;
      if ((unint64_t)v108 >= 0x100)
      {
        operator delete(**((void ***)&v107[0] + 1));
        *((void *)&v107[0] + 1) = v39 + 8;
        *(void *)&long long v108 = v40 - 127;
      }
      int64x2_t v103 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v104 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      if (v17 == v13)
      {
        double v44 = 1.79769313e308;
        double v45 = -1.79769313e308;
        char v36 = v98;
      }
      else
      {
        uint64_t v43 = 0;
        double v44 = 1.79769313e308;
        double v45 = -1.79769313e308;
        char v36 = v98;
        do
        {
          uint64_t v46 = 0;
          char v47 = (char *)&v13[4 * v43];
          unsigned int v48 = v47 + 16;
          char v49 = 1;
          while (*((double *)&v105 + v46) >= *(double *)&v47[8 * v46]
               && *((double *)&v107[-1] + v46) <= *(double *)&v48[8 * v46])
          {
            char v50 = v49;
            char v49 = 0;
            uint64_t v46 = 1;
            if ((v50 & 1) == 0) {
              goto LABEL_100;
            }
          }
          uint64_t v51 = 0;
          char v52 = 1;
          do
          {
            double v53 = *(double *)&v104.i64[v51];
            double v54 = *(double *)&v103.i64[v51];
            if ((v52 & 1) == 0) {
              break;
            }
            char v52 = 0;
            uint64_t v51 = 1;
          }
          while (v53 >= v54);
          if (v53 < v54)
          {
            uint64_t v55 = 0;
            char v56 = 1;
            do
            {
              if (*(double *)&v48[8 * v55] <= *((double *)&v105 + v55)
                || *(double *)&v47[8 * v55] >= *((double *)&v107[-1] + v55))
              {
                *(double *)&uint64_t v63 = 1.79769313e308;
                *(double *)&unint64_t v65 = -1.79769313e308;
                unint64_t v66 = 0xFFEFFFFFFFFFFFFFLL;
                uint64_t v64 = 0x7FEFFFFFFFFFFFFFLL;
                goto LABEL_61;
              }
              char v57 = v56;
              char v56 = 0;
              uint64_t v55 = 1;
            }
            while ((v57 & 1) != 0);
            uint64_t v58 = 0;
            char v59 = 1;
            do
            {
              char v60 = v59;
              double v61 = *(double *)&v47[8 * v58];
              if (v61 < *((double *)&v105 + v58)) {
                double v61 = *((double *)&v105 + v58);
              }
              *((double *)&v109 + v58) = v61;
              double v62 = *((double *)&v107[-1] + v58);
              if (v62 >= *(double *)&v48[8 * v58]) {
                double v62 = *(double *)&v48[8 * v58];
              }
              *((double *)&v111 + v58) = v62;
              uint64_t v58 = 1;
              char v59 = 0;
            }
            while ((v60 & 1) != 0);
            uint64_t v64 = v109;
            uint64_t v63 = v110;
            unint64_t v66 = v111;
            *(double *)&unint64_t v65 = v112;
LABEL_61:
            uint64_t v67 = 0;
            v101[0] = v64;
            v101[1] = v63;
            char v68 = 1;
            v102[0] = v66;
            v102[1] = v65;
            do
            {
              double v69 = *(double *)&v102[v67];
              double v70 = *(double *)&v101[v67];
              if ((v68 & 1) == 0) {
                break;
              }
              char v68 = 0;
              uint64_t v67 = 1;
            }
            while (v69 >= v70);
            if (v69 >= v70)
            {
              v103.i64[0] = v64;
              v103.i64[1] = v63;
              double v45 = *(double *)&v65;
              double v44 = *(double *)&v63;
              v104.i64[0] = v66;
              v104.i64[1] = v65;
            }
          }
          ++v43;
        }
        while (v43 != v97);
      }
      uint64_t v71 = 0;
      char v72 = 1;
      do
      {
        double v73 = *(double *)&v104.i64[v71];
        double v74 = *(double *)&v103.i64[v71];
        if ((v72 & 1) == 0) {
          break;
        }
        char v72 = 0;
        uint64_t v71 = 1;
      }
      while (v73 >= v74);
      if (v73 < v74)
      {
        if ((unint64_t)v37 >= v96)
        {
          uint64_t v79 = ((char *)v37 - (char *)v36) >> 5;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 59) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v96 - (void)v36) >> 4 > v80) {
            unint64_t v80 = (uint64_t)(v96 - (void)v36) >> 4;
          }
          if (v96 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v81 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v80;
          }
          if (v81) {
            unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<geo::TransitEdgePiece>>(v81);
          }
          else {
            uint64_t v82 = 0;
          }
          long long v83 = v106;
          long long v84 = (_OWORD *)(v81 + 32 * v79);
          *long long v84 = v105;
          v84[1] = v83;
          if (v37 == v36)
          {
            int v86 = (double *)(v81 + 32 * v79);
          }
          else
          {
            unint64_t v85 = v81 + 32 * v79;
            do
            {
              int v86 = (double *)(v85 - 32);
              long long v87 = *((_OWORD *)v37 - 1);
              *(_OWORD *)(v85 - 32) = *((_OWORD *)v37 - 2);
              *(_OWORD *)(v85 - 16) = v87;
              v37 -= 4;
              v85 -= 32;
            }
            while (v37 != v36);
          }
          unint64_t v96 = v81 + 32 * v82;
          unsigned int v37 = (double *)(v84 + 2);
          if (v36) {
            operator delete(v36);
          }
          char v36 = v86;
        }
        else
        {
          long long v78 = v106;
          *(_OWORD *)unsigned int v37 = v105;
          *((_OWORD *)v37 + 1) = v78;
          v37 += 4;
        }
      }
      else
      {
        uint64_t v75 = *((uint64_t *)&v105 + 1);
        double v76 = *(double *)v103.i64;
        if (v44 > *((double *)&v105 + 1))
        {
          uint64_t v109 = v103.i64[0];
          uint64_t v110 = *((uint64_t *)&v105 + 1);
          unint64_t v111 = v104.i64[0];
          double v112 = v44;
          std::deque<gm::Box<double,2>>::push_back(v107, (uint64_t)&v109);
        }
        double v77 = *((double *)&v106 + 1);
        if (v45 < *((double *)&v106 + 1))
        {
          uint64_t v109 = *(void *)&v76;
          *(double *)&uint64_t v110 = v45;
          unint64_t v111 = v104.i64[0];
          double v112 = *((double *)&v106 + 1);
          std::deque<gm::Box<double,2>>::push_back(v107, (uint64_t)&v109);
        }
        if (v76 > *(double *)&v105)
        {
          uint64_t v109 = v105;
          uint64_t v110 = v75;
          unint64_t v111 = *(void *)&v76;
          double v112 = v77;
          std::deque<gm::Box<double,2>>::push_back(v107, (uint64_t)&v109);
        }
        if (*(double *)v104.i64 < *(double *)&v106)
        {
          uint64_t v109 = v104.i64[0];
          uint64_t v110 = v75;
          unint64_t v111 = v106;
          double v112 = v77;
          std::deque<gm::Box<double,2>>::push_back(v107, (uint64_t)&v109);
        }
      }
LABEL_100:
      uint64_t v35 = *((void *)&v108 + 1);
    }
    while (*((void *)&v108 + 1));
    std::deque<gm::Box<double,2>>::~deque[abi:ne180100]((uint64_t)v107);
    if (v36 != v37)
    {
      double v88 = 0.0;
      int v89 = v36;
      do
      {
        double v90 = v89[2];
        double v91 = v89[3];
        double v92 = *v89;
        double v93 = v89[1];
        v89 += 4;
        double v88 = v88 + (v90 - v92) * (v91 - v93);
      }
      while (v89 != v37);
      goto LABEL_106;
    }
  }
  double v88 = 0.0;
LABEL_106:
  double v94 = (*(double *)&v100 - *(double *)&v99) * (*((double *)&v100 + 1) - *((double *)&v99 + 1));
  if (v36) {
    operator delete(v36);
  }
  double v12 = v94 - v88;
  if (v13) {
    operator delete(v13);
  }
  return v12;
}

void sub_189EB7AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::deque<gm::Box<double,2>>::~deque[abi:ne180100]((uint64_t)&a29);
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

double GEOMapRectFractionCoveredByMapRects(uint64_t a1, unint64_t a2, double a3, double a4, double a5, double a6)
{
  double v6 = 0.0;
  if (a2)
  {
    unint64_t v7 = a2;
    if (a5 * a6 == 0.0)
    {
      double v13 = fabs(a6);
      if ((fabs(a5) >= 0.00000011920929 || v13 >= 0.00000011920929)
        && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long v18 = 0;
        _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Assertion failed: _EQLF_(mapRect.size.width, 0, FLT_EPSILON) && _EQLF_(mapRect.size.height, 0, FLT_EPSILON)", v18, 2u);
      }
      for (uint64_t i = (double *)(a1 + 16); !GEOMapRectContainsRect(*(i - 2), *(i - 1), *i, i[1], a3, a4, a5, a6); i += 4)
      {
        if (!--v7) {
          return v6;
        }
      }
      return 1.0;
    }
    else
    {
      return GEOMapRectAreaCoveredByMapRects(a1, a2, a3, a4, a5, a6) / (a5 * a6);
    }
  }
  return v6;
}

void std::deque<gm::Box<double,2>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    double v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v38);
      uint64_t v40 = &v39[8 * (v38 >> 2)];
      long long v42 = &v39[8 * v41];
      uint64_t v43 = (uint64_t *)a1[1];
      double v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        double v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    long long v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    double v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  double v20 = (char *)a1[2];
  double v19 = (char *)a1[3];
  double v21 = (char *)*a1;
  double v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    unint64_t v25 = operator new(0x1000uLL);
    uint64_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)double v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v49);
      double v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      double v53 = (uint64_t *)a1[1];
      double v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        double v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        char v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)char v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      char v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        double v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    double v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)double v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v82);
      uint64_t v40 = &v39[8 * (v82 >> 2)];
      long long v42 = &v39[8 * v83];
      long long v84 = (uint64_t *)a1[1];
      double v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        double v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        long long v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)long long v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      unsigned int v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        double v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v28);
  uint64_t v31 = v30;
  char v32 = operator new(0x1000uLL);
  long long v33 = &v29[8 * v23];
  BOOL v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      double v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v61);
      long long v33 = &v62[8 * (v61 >> 2)];
      BOOL v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      unint64_t v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)long long v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v70);
        double v73 = v71;
        long long v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          double v77 = v33;
          long long v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)double v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        BOOL v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        unint64_t v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        long long v33 = &v29[8 * (v67 >> 1)];
        double v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          double v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  unint64_t v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_189EB8074(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

__n128 std::deque<gm::Box<double,2>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<gm::Box<double,2>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *uint64_t v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

uint64_t std::deque<gm::Box<double,2>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 128;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t MapsFeaturesConfig_GetUserDefaultStringKeysForWatchSync()
{
  return MEMORY[0x1E4F1CBF0];
}

void *MapsFeaturesConfig_GetConfigStoreStringKeysForWatchSync()
{
  return &unk_1ED73EEC0;
}

void *_getConfigStoreStringKeysForStateCapture_0()
{
  return &unk_1ED73EED8;
}

void sub_189EB8544(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 36);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 32)];
  char v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  int v10 = ((*(unsigned __int8 *)(a1 + 48) >> 3) & 1) + ((*(unsigned __int8 *)(a1 + 48) >> 2) & 1);
  while (1)
  {
    unsigned int v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      char v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3) {
      break;
    }
    char v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  int v12 = v7 & 1 | v10;
  BOOL v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = a3;
  }
  if (v12) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v14 == 0;
  }
  BOOL v59 = v15;
  uint64_t v16 = (int *)MEMORY[0x1E4F940E8];
  long long v17 = (int *)MEMORY[0x1E4F940C8];
  int64_t v18 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(void *)(v3 + *v16) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v17)) {
      goto LABEL_86;
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v21 = 0;
    while (1)
    {
      uint64_t v22 = *v16;
      unint64_t v23 = *(void *)(v3 + v22);
      if (v23 == -1 || v23 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v24 = *(unsigned char *)(*(void *)(v3 + *v18) + v23);
      *(void *)(v3 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0) {
        goto LABEL_27;
      }
      v19 += 7;
      BOOL v25 = v20++ >= 9;
      if (v25)
      {
        unint64_t v21 = 0;
        int v26 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(unsigned char *)(v3 + *v17) = 1;
LABEL_27:
    int v26 = *(unsigned __int8 *)(v3 + *v17);
    if (*(unsigned char *)(v3 + *v17)) {
      unint64_t v21 = 0;
    }
LABEL_29:
    if (v26 || (v21 & 7) == 4)
    {
LABEL_86:
      if (v13)
      {
        char v53 = 1;
        goto LABEL_97;
      }
      if (!v14)
      {
LABEL_98:
        unint64_t v3 = *(unsigned char *)(v3 + *v17) == 0;
        if (!v13) {
          return v3;
        }
LABEL_99:
        char v57 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;

        return v3;
      }
      while (1)
      {
        int v55 = *v14++;
        int v54 = v55;
        if (v55 == 1) {
          break;
        }
        if (v54 == 3)
        {
          char v56 = 4;
LABEL_95:
          *(unsigned char *)(a1 + 48) |= v56;
        }
        else if (!v54)
        {
          goto LABEL_98;
        }
      }
      char v56 = 8;
      goto LABEL_95;
    }
    unint64_t v28 = v21 >> 3;
    BOOL v29 = v13;
    if (!v59)
    {
      uint64_t v30 = v14;
      do
      {
        int v32 = *v30++;
        int v31 = v32;
        BOOL v29 = v32 != 0;
        if (v32) {
          BOOL v33 = v31 == v28;
        }
        else {
          BOOL v33 = 1;
        }
      }
      while (!v33);
    }
    switch((int)v28)
    {
      case 1:
        if (!v29) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 48) & 8) == 0)
        {
          uint64_t v34 = PBReaderReadString();
          uint64_t v35 = 24;
          goto LABEL_57;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_96;
        }
        char v51 = 16 * *(unsigned char *)(a1 + 48);
        goto LABEL_81;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_66;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        *(unsigned char *)(a1 + 48) |= 1u;
        while (2)
        {
          uint64_t v39 = *v16;
          unint64_t v40 = *(void *)(v3 + v39);
          if (v40 == -1 || v40 >= *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v17) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(v3 + *v18) + v40);
            *(void *)(v3 + v39) = v40 + 1;
            v38 |= (unint64_t)(v41 & 0x7F) << v36;
            if (v41 < 0)
            {
              v36 += 7;
              BOOL v25 = v37++ >= 9;
              if (v25)
              {
                uint64_t v38 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v17)) {
          uint64_t v38 = 0;
        }
LABEL_71:
        BOOL v49 = v38 != 0;
        uint64_t v50 = 44;
        goto LABEL_76;
      case 3:
        if (!v29) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 48) & 4) == 0)
        {
          uint64_t v34 = PBReaderReadString();
          uint64_t v35 = 16;
LABEL_57:
          long long v42 = *(void **)(a1 + v35);
          *(void *)(a1 + v35) = v34;

          --v9;
          goto LABEL_82;
        }
        if (PBReaderSkipValueWithTag())
        {
          char v51 = 32 * *(unsigned char *)(a1 + 48);
LABEL_81:
          v9 += v51 >> 7;
LABEL_82:
          if (v9) {
            char v52 = 1;
          }
          else {
            char v52 = v13;
          }
          if ((v52 & 1) == 0) {
            goto LABEL_86;
          }
          continue;
        }
LABEL_96:
        char v53 = 0;
LABEL_97:
        *(unsigned char *)(a1 + 48) |= 8u;
        *(unsigned char *)(a1 + 48) |= 4u;
        if (v53) {
          goto LABEL_98;
        }
        unint64_t v3 = 0;
        if (v13) {
          goto LABEL_99;
        }
        return v3;
      case 4:
        if (v8)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          *(unsigned char *)(a1 + 48) |= 2u;
          while (1)
          {
            uint64_t v46 = *v16;
            unint64_t v47 = *(void *)(v3 + v46);
            if (v47 == -1 || v47 >= *(void *)(v3 + *v6)) {
              break;
            }
            char v48 = *(unsigned char *)(*(void *)(v3 + *v18) + v47);
            *(void *)(v3 + v46) = v47 + 1;
            v45 |= (unint64_t)(v48 & 0x7F) << v43;
            if ((v48 & 0x80) == 0) {
              goto LABEL_73;
            }
            v43 += 7;
            BOOL v25 = v44++ >= 9;
            if (v25)
            {
              uint64_t v45 = 0;
              goto LABEL_75;
            }
          }
          *(unsigned char *)(v3 + *v17) = 1;
LABEL_73:
          if (*(unsigned char *)(v3 + *v17)) {
            uint64_t v45 = 0;
          }
LABEL_75:
          BOOL v49 = v45 != 0;
          uint64_t v50 = 45;
LABEL_76:
          *(unsigned char *)(a1 + v50) = v49;
        }
        else
        {
LABEL_66:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_96;
          }
        }
        goto LABEL_82;
      default:
        if (!PBReaderSkipValueWithTag()) {
          goto LABEL_96;
        }
        goto LABEL_82;
    }
  }
}

void sub_189EB8C9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189EB9288(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 36))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPPhotoAttributionPreferencesReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = [v8 position];
  *(_DWORD *)(a1 + 36) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEORPPhotoAttributionPreferencesReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEORPPhotoAttributionPreferencesReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPPhotoAttributionPreferencesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189EB9414(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPPhotoAttributionPreferencesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189EB9478(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  unint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    unint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v14 = v8 & 7;
      if (v13 || v14 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v14 != 2) {
            goto LABEL_44;
          }
          goto LABEL_30;
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_44;
          }
          unsigned int v16 = 0;
          while (1)
          {
            uint64_t v17 = *v2;
            unint64_t v18 = *(void *)&a1[v17];
            if (v18 == -1 || v18 >= *(void *)&a1[*v3]) {
              goto LABEL_40;
            }
            unint64_t v19 = v18 + 1;
            int v20 = *(char *)(*(void *)&a1[*v5] + v18);
            *(void *)&a1[v17] = v19;
            if (v20 < 0)
            {
              BOOL v21 = v16++ > 8;
              if (!v21) {
                continue;
              }
            }
            goto LABEL_41;
          }
        case 3u:
          if (v14 == 2) {
            goto LABEL_30;
          }
          goto LABEL_44;
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_44;
          }
          unsigned int v22 = 0;
          break;
        default:
LABEL_30:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_44:
          BOOL v27 = 0;
          goto LABEL_43;
      }
      while (1)
      {
        uint64_t v23 = *v2;
        unint64_t v24 = *(void *)&a1[v23];
        if (v24 == -1 || v24 >= *(void *)&a1[*v3]) {
          break;
        }
        unint64_t v25 = v24 + 1;
        int v26 = *(char *)(*(void *)&a1[*v5] + v24);
        *(void *)&a1[v23] = v25;
        if (v26 < 0)
        {
          BOOL v21 = v22++ > 8;
          if (!v21) {
            continue;
          }
        }
        goto LABEL_41;
      }
LABEL_40:
      a1[*v4] = 1;
LABEL_41:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v27 = a1[*v4] == 0;
LABEL_43:
  PBReaderRecallMark();
  return v27;
}

void sub_189EB98E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesIsDirty(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  BOOL v2 = (*(unsigned char *)(a1 + 48) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_189EB9C4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesUpdateReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    char v6 = (int *)MEMORY[0x1E4F940E8];
    unsigned int v7 = (int *)MEMORY[0x1E4F940E0];
    unint64_t v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          unint64_t v14 = *(void *)&v5[v13];
          if (v14 == -1 || v14 >= *(void *)&v5[*v7]) {
            break;
          }
          char v15 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          if (v11++ >= 9)
          {
            unint64_t v12 = 0;
            int v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v17 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v17 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 3)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_27;
          }
          unint64_t v19 = objc_alloc_init(GEORPPhotoAttributionPreferences);
          if (!GEORPPhotoAttributionPreferencesReadAllFrom((uint64_t)v19, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          int v20 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v19;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v21 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    BOOL v21 = 0;
  }
  objc_sync_exit(v5);

  return v21;
}

void sub_189EBA3F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesUpdateReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEORPPhotoAttributionPreferencesUpdateReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189EBA45C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesUpdateIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    unint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v14 = v8 & 7;
      if (v13 || v14 == 4) {
        break;
      }
      if ((v8 >> 3) == 3)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEORPPhotoAttributionPreferencesIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v16 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v16;
}

void sub_189EBAAA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesUpdateResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1) + (*(unsigned char *)(a1 + 60) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v8])
    {
      case -3:
        char v7 = 1;
        goto LABEL_6;
      case -2:
        uint64_t v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = (v10 & 1 | v11) != 0;
        if (((v10 & 1 | v11) != 0) | v7 & 1) {
          char v15 = 0;
        }
        else {
          char v15 = a3;
        }
        BOOL v16 = (int *)MEMORY[0x1E4F940E8];
        int v17 = (int *)MEMORY[0x1E4F940C8];
        unint64_t v18 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_83;
        }
        if (v15) {
          BOOL v19 = (v10 & 1 | v11) != 0;
        }
        else {
          BOOL v19 = 1;
        }
        BOOL v60 = v19;
        int v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_6:
        uint64_t v12 = v9;
        uint64_t v13 = v10;
LABEL_8:
        ++v8;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  do
  {
    if (*(unsigned char *)(v3 + *v17)) {
      break;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v16;
      unint64_t v25 = *(void *)(v3 + v24);
      if (v25 == -1 || v25 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v26 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v25 + 1;
      v23 |= (unint64_t)(v26 & 0x7F) << v21;
      if ((v26 & 0x80) == 0) {
        goto LABEL_26;
      }
      v21 += 7;
      BOOL v27 = v22++ >= 9;
      if (v27)
      {
        unint64_t v23 = 0;
        int v28 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_28;
      }
    }
    *(unsigned char *)(v3 + *v17) = 1;
LABEL_26:
    int v28 = *(unsigned __int8 *)(v3 + *v17);
    if (*(unsigned char *)(v3 + *v17)) {
      unint64_t v23 = 0;
    }
LABEL_28:
    int v29 = v23 & 7;
    if (v28 || v29 == 4) {
      break;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v14;
    if (!v60)
    {
      BOOL v33 = v15;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 2)
    {
      if (!v32) {
        goto LABEL_63;
      }
      if ((*(unsigned char *)(a1 + v18[707]) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_98:
          char v55 = 0;
LABEL_100:
          int v17 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_85;
        }
        v8 += *(unsigned __int8 *)(a1 + v18[707]) << 30 >> 31;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_98;
        }
        unsigned int v44 = objc_alloc_init(GEORPPhotoAttributionPreferences);
        if (!GEORPPhotoAttributionPreferencesReadAllFrom((uint64_t)v44, (void *)v3, v9 & 1))
        {

          char v55 = 0;
          unint64_t v18 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
          goto LABEL_100;
        }
        PBReaderRecallMark();
        uint64_t v45 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v44;

        --v8;
        unint64_t v18 = &OBJC_IVAR___GEOPDRelatedCollectionSection__collectionIds;
      }
    }
    else
    {
      if (v31 != 1)
      {
        int v46 = PBReaderSkipValueWithTag();
        int v17 = (int *)MEMORY[0x1E4F940C8];
        if (!v46) {
          goto LABEL_97;
        }
        goto LABEL_78;
      }
      if (!v32 || (*(unsigned char *)(a1 + v18[707]) & 1) != 0)
      {
LABEL_63:
        char v47 = PBReaderSkipValueWithTag();
        int v17 = (int *)MEMORY[0x1E4F940C8];
        if ((v47 & 1) == 0)
        {
LABEL_97:
          char v55 = 0;
          goto LABEL_85;
        }
        goto LABEL_78;
      }
      if (v29 == 2)
      {
        if (!PBReaderPlaceMark()) {
          goto LABEL_98;
        }
        while (1)
        {
          unsigned int v37 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v16) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8])) {
            break;
          }
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v40 = 0;
          while (1)
          {
            uint64_t v41 = *v16;
            unint64_t v42 = *(void *)(v3 + v41);
            if (v42 == -1 || v42 >= *(void *)(v3 + *v6)) {
              break;
            }
            char v43 = *(unsigned char *)(*(void *)(v3 + *v20) + v42);
            *(void *)(v3 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              BOOL v27 = v39++ >= 9;
              if (!v27) {
                continue;
              }
            }
            goto LABEL_55;
          }
          *(unsigned char *)(v3 + *v37) = 1;
LABEL_55:
          PBRepeatedInt32Add();
        }
        PBReaderRecallMark();
      }
      else
      {
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        while (1)
        {
          uint64_t v51 = *v16;
          unint64_t v52 = *(void *)(v3 + v51);
          if (v52 == -1 || v52 >= *(void *)(v3 + *v6)) {
            break;
          }
          char v53 = *(unsigned char *)(*(void *)(v3 + *v20) + v52);
          *(void *)(v3 + v51) = v52 + 1;
          v50 |= (unint64_t)(v53 & 0x7F) << v48;
          if (v53 < 0)
          {
            v48 += 7;
            BOOL v27 = v49++ >= 9;
            if (!v27) {
              continue;
            }
          }
          goto LABEL_76;
        }
        *(unsigned char *)(v3 + *v17) = 1;
LABEL_76:
        PBRepeatedInt32Add();
      }
    }
    int v17 = (int *)MEMORY[0x1E4F940C8];
LABEL_78:
    if (v8) {
      int v54 = 1;
    }
    else {
      int v54 = v14;
    }
  }
  while (v54 == 1 && *(void *)(v3 + *v16) < *(void *)(v3 + *v6));
LABEL_83:
  if (!v14)
  {
    if (v15)
    {
      do
      {
        while (1)
        {
          int v57 = *v15++;
          int v56 = v57;
          if (v57 != 1 && v56 != 2) {
            break;
          }
          *(unsigned char *)(a1 + v18[707]) |= v56;
        }
      }
      while (v56);
    }
    goto LABEL_94;
  }
  char v55 = 1;
LABEL_85:
  *(unsigned char *)(a1 + v18[707]) |= 1u;
  *(unsigned char *)(a1 + v18[707]) |= 2u;
  if ((v55 & 1) == 0)
  {
    unint64_t v3 = 0;
    if (!v14) {
      return v3;
    }
    goto LABEL_95;
  }
LABEL_94:
  unint64_t v3 = *(unsigned char *)(v3 + *v17) == 0;
  if (!v14) {
    return v3;
  }
LABEL_95:
  uint64_t v58 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  return v3;
}

void sub_189EBB4E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189EBBB50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPPhotoAttributionPreferencesUpdateResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 40) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189EBBCF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesUpdateResultReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189EBBD58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesUpdateResultIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    unint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_45;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v12 = v7++ >= 9;
        if (v12)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v14 = v8 & 7;
      if (v13 || v14 == 4) {
        goto LABEL_45;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v14 == 2)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_47;
          }
LABEL_34:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v21 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v22 = *v2;
              unint64_t v23 = *(void *)&a1[v22];
              if (v23 == -1 || v23 >= *(void *)&a1[*v3]) {
                break;
              }
              unint64_t v24 = v23 + 1;
              int v25 = *(char *)(*(void *)&a1[*v5] + v23);
              *(void *)&a1[v22] = v24;
              if (v25 < 0)
              {
                BOOL v12 = v21++ >= 9;
                if (!v12) {
                  continue;
                }
              }
              goto LABEL_34;
            }
            a1[*v4] = 1;
          }
LABEL_30:
          PBReaderRecallMark();
          goto LABEL_44;
        }
        if ((v8 & 7) != 0) {
          goto LABEL_47;
        }
        while (1)
        {
          uint64_t v16 = *v2;
          unint64_t v17 = *(void *)&a1[v16];
          if (v17 == -1 || v17 >= *(void *)&a1[*v3]) {
            break;
          }
          unint64_t v18 = v17 + 1;
          int v19 = *(char *)(*(void *)&a1[*v5] + v17);
          *(void *)&a1[v16] = v18;
          if (v19 < 0)
          {
            unsigned int v20 = v14++;
            if (v20 <= 8) {
              continue;
            }
          }
          goto LABEL_44;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_47;
      }
LABEL_44:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_45;
      }
    }
    if (v14 != 2 || !PBReaderPlaceMark() || !GEORPPhotoAttributionPreferencesIsValid(a1))
    {
LABEL_47:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_30;
  }
LABEL_45:
  BOOL v26 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v26;
}

void sub_189EBC1C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEORPPhotoAttributionPreferencesUpdateResultIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(unsigned char *)(a1 + 60) & 5) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 60) & 2) == 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 40);

  return GEORPPhotoAttributionPreferencesIsDirty(v3);
}

os_unfair_lock_s *GEORPPhotoAttributionPreferencesUpdateResultIsDirty(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = result;
    os_unfair_lock_lock_with_options();
    BOOL IsDirty = _GEORPPhotoAttributionPreferencesUpdateResultIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189EBC50C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    unint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    unint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          unint64_t v12 = *(void *)&v3[v11];
          if (v12 == -1 || v12 >= *(void *)&v3[*v5]) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v15 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v15 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v22 = *v4;
            unint64_t v23 = *(void *)&v3[v22];
            if (v23 == -1 || v23 >= *(void *)&v3[*v5]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
            *(void *)&v3[v22] = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_32;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              uint64_t v21 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6]) {
            uint64_t v21 = 0;
          }
LABEL_34:
          *(unsigned char *)(a1 + 16) = v21 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          uint64_t v17 = PBReaderReadString();
          unint64_t v18 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v17;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    BOOL v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_189EBCCFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEORPThirdPartyPhotoSharingPreferenceReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189EBCD60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    unint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v14 = v8 & 7;
      if (v13 || v14 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_37;
        }
        unsigned int v16 = 0;
        while (1)
        {
          uint64_t v17 = *v2;
          unint64_t v18 = *(void *)&a1[v17];
          if (v18 == -1 || v18 >= *(void *)&a1[*v3]) {
            break;
          }
          unint64_t v19 = v18 + 1;
          int v20 = *(char *)(*(void *)&a1[*v5] + v18);
          *(void *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8) {
            continue;
          }
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v14 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          BOOL v22 = 0;
          goto LABEL_36;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v22 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v22;
}

BOOL GEORPThirdPartyPhotoSharingPreferenceUpdateReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    unint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    unint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          unint64_t v12 = *(void *)&v3[v11];
          if (v12 == -1 || v12 >= *(void *)&v3[*v5]) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v15 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v15 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_27;
          }
          uint64_t v17 = objc_alloc_init(GEORPThirdPartyPhotoSharingPreference);
          if (!GEORPThirdPartyPhotoSharingPreferenceReadAllFrom((uint64_t)v17, v3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          unint64_t v18 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v17;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v19 = v3[*v6] == 0;
  }
  else
  {
LABEL_27:
    BOOL v19 = 0;
  }
  objc_sync_exit(v3);

  return v19;
}

void sub_189EBD7AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceUpdateReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  BOOL AllFrom = GEORPThirdPartyPhotoSharingPreferenceUpdateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189EBD810(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceUpdateIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  BOOL v2 = (int *)MEMORY[0x1E4F940E8];
  id v3 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    unint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v14 = v8 & 7;
      if (v13 || v14 == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEORPThirdPartyPhotoSharingPreferenceIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v16 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v16;
}

void sub_189EBDE54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  char v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  int v10 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1) + (*(unsigned char *)(a1 + 60) & 1);
  while (1)
  {
    unsigned int v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      char v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3) {
      break;
    }
    char v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  BOOL v12 = (v9 & 1 | v10) != 0;
  if (((v9 & 1 | v10) != 0) | v7 & 1) {
    int v13 = 0;
  }
  else {
    int v13 = a3;
  }
  int v14 = (int *)MEMORY[0x1E4F940E8];
  int v15 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(v3 + *v6))
  {
    if (v13) {
      BOOL v16 = (v9 & 1 | v10) != 0;
    }
    else {
      BOOL v16 = 1;
    }
    BOOL v54 = v16;
    uint64_t v17 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(v3 + *v15)) {
        goto LABEL_83;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v14;
        unint64_t v22 = *(void *)(v3 + v21);
        if (v22 == -1 || v22 >= *(void *)(v3 + *v6)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(v3 + *v17) + v22);
        *(void *)(v3 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_27;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(v3 + *v15);
          goto LABEL_29;
        }
      }
      *(unsigned char *)(v3 + *v15) = 1;
LABEL_27:
      int v25 = *(unsigned __int8 *)(v3 + *v15);
      if (*(unsigned char *)(v3 + *v15)) {
        unint64_t v20 = 0;
      }
LABEL_29:
      int v26 = v20 & 7;
      if (v25 || v26 == 4) {
        goto LABEL_83;
      }
      unint64_t v28 = v20 >> 3;
      BOOL v29 = v12;
      if (!v54)
      {
        uint64_t v30 = v13;
        do
        {
          int v32 = *v30++;
          int v31 = v32;
          BOOL v29 = v32 != 0;
          if (v32) {
            BOOL v33 = v31 == v28;
          }
          else {
            BOOL v33 = 1;
          }
        }
        while (!v33);
      }
      if (v28 != 2) {
        break;
      }
      if (!v29) {
        goto LABEL_64;
      }
      if ((*(unsigned char *)(a1 + 60) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_97:
          char v49 = 0;
          goto LABEL_85;
        }
        v8 += *(unsigned __int8 *)(a1 + 60) << 30 >> 31;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_97;
        }
        uint64_t v40 = objc_alloc_init(GEORPThirdPartyPhotoSharingPreference);
        if (!GEORPThirdPartyPhotoSharingPreferenceReadAllFrom((uint64_t)v40, (void *)v3))
        {

          char v49 = 0;
          int v15 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_85;
        }
        PBReaderRecallMark();
        uint64_t v41 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v40;

        --v8;
        int v15 = (int *)MEMORY[0x1E4F940C8];
      }
LABEL_65:
      if (v8) {
        int v42 = 1;
      }
      else {
        int v42 = v12;
      }
      if (v42 != 1 || *(void *)(v3 + *v14) >= *(void *)(v3 + *v6)) {
        goto LABEL_83;
      }
    }
    if (v28 != 1)
    {
      if (!PBReaderSkipValueWithTag()) {
        goto LABEL_97;
      }
      goto LABEL_65;
    }
    if (v29 && (*(unsigned char *)(a1 + 60) & 1) == 0)
    {
      if (v26 == 2)
      {
        if (!PBReaderPlaceMark()) {
          goto LABEL_97;
        }
        while (*(void *)(v3 + *v14) < *(void *)(v3 + *v6) && !*(unsigned char *)(v3 + *v15))
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          while (1)
          {
            uint64_t v37 = *v14;
            unint64_t v38 = *(void *)(v3 + v37);
            if (v38 == -1 || v38 >= *(void *)(v3 + *v6)) {
              break;
            }
            char v39 = *(unsigned char *)(*(void *)(v3 + *v17) + v38);
            *(void *)(v3 + v37) = v38 + 1;
            v36 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              BOOL v24 = v35++ >= 9;
              if (!v24) {
                continue;
              }
            }
            goto LABEL_56;
          }
          *(unsigned char *)(v3 + *v15) = 1;
LABEL_56:
          PBRepeatedInt32Add();
        }
        PBReaderRecallMark();
      }
      else
      {
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        while (1)
        {
          uint64_t v46 = *v14;
          unint64_t v47 = *(void *)(v3 + v46);
          if (v47 == -1 || v47 >= *(void *)(v3 + *v6)) {
            break;
          }
          char v48 = *(unsigned char *)(*(void *)(v3 + *v17) + v47);
          *(void *)(v3 + v46) = v47 + 1;
          v45 |= (unint64_t)(v48 & 0x7F) << v43;
          if (v48 < 0)
          {
            v43 += 7;
            BOOL v24 = v44++ >= 9;
            if (!v24) {
              continue;
            }
          }
          goto LABEL_82;
        }
        *(unsigned char *)(v3 + *v15) = 1;
LABEL_82:
        PBRepeatedInt32Add();
      }
      goto LABEL_65;
    }
LABEL_64:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_97;
    }
    goto LABEL_65;
  }
LABEL_83:
  if (!v12)
  {
    if (v13)
    {
      do
      {
        while (1)
        {
          int v51 = *v13++;
          int v50 = v51;
          if (v51 != 1 && v50 != 2) {
            break;
          }
          *(unsigned char *)(a1 + 60) |= v50;
        }
      }
      while (v50);
    }
    goto LABEL_94;
  }
  char v49 = 1;
LABEL_85:
  *(unsigned char *)(a1 + 60) |= 1u;
  *(unsigned char *)(a1 + 60) |= 2u;
  if (v49)
  {
LABEL_94:
    unint64_t v3 = *(unsigned char *)(v3 + *v15) == 0;
    if (v12) {
      goto LABEL_95;
    }
    return v3;
  }
  unint64_t v3 = 0;
  if (!v12) {
    return v3;
  }
LABEL_95:
  unint64_t v52 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  return v3;
}

void sub_189EBE82C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189EBEE8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadAllFrom_initialTag;
  }
  unint64_t Specified = GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    [*(id *)(a1 + 40) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}