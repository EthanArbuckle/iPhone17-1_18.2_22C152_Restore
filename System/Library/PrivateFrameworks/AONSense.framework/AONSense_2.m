Swift::Int CLP_LogEntry_PrivateData_DaemonLocation.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DaemonLocation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DaemonLocation()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_MapMatcherData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MapMatcherData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MapMatcherData.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v3 = v0;
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        goto LABEL_6;
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_6:
        uint64_t v3 = 0;
        break;
      default:
        break;
    }
    uint64_t v0 = v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_MapMatcherData.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MapMatcherData()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MapMatcherData()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MapMatcherData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapMatcherData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MapMatcherData(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapMatcherData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_PressureSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PressureSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PressureSample.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      break;
    }
    if (result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    uint64_t v4 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v7 = result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_PressureSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_PressureSample.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PressureSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PressureSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PressureSample(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PressureSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_ClientSatelliteInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ClientSatelliteInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ClientSatelliteInfo.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
        case 4:
        case 5:
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  v10 = (int *)result;
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ClientSatelliteInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 7;
  uint64_t v6 = a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  *(unsigned char *)(a2 + v13) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_DaemonLocationPrivate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DaemonLocationPrivate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_bridgeObjectRelease();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v2 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v8 = v1;
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 12:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 32:
        case 33:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 50:
        case 51:
          swift_beginAccess();
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_27;
        case 6:
        case 7:
        case 8:
        case 18:
          swift_beginAccess();
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_27;
        case 9:
        case 15:
        case 23:
        case 31:
        case 34:
        case 43:
        case 53:
        case 56:
          swift_beginAccess();
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_27;
        case 10:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType();
          goto LABEL_25;
        case 11:
        case 19:
        case 35:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          goto LABEL_19;
        case 13:
        case 14:
          swift_beginAccess();
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_27;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample;
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample;
          goto LABEL_19;
        case 17:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
          goto LABEL_25;
        case 22:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType();
          goto LABEL_25;
        case 24:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData;
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData;
          goto LABEL_19;
        case 37:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
          goto LABEL_25;
        case 46:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_27;
        case 47:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent();
          goto LABEL_25;
        case 48:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo;
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo;
LABEL_19:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v11, v12);
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_27;
        case 49:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType();
          goto LABEL_25;
        case 52:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType();
          goto LABEL_25;
        case 54:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy();
          goto LABEL_25;
        case 55:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType();
LABEL_25:
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_27:
          uint64_t v8 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(unsigned char **)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((v9[24] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  swift_beginAccess();
  if ((v9[40] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[56] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[72] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[88] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[96] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[104] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[112] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[113] != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[114] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #11 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  uint64_t v10 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse];
  swift_beginAccess();
  if ((v10[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v11 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay];
  swift_beginAccess();
  if ((v11[4] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v12 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass];
  swift_beginAccess();
  if ((v12[4] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v13 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted];
  swift_beginAccess();
  if (*v13 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  closure #16 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v14 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel];
  swift_beginAccess();
  if (*v14 != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v15 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation];
  swift_beginAccess();
  if ((v15[4] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  closure #19 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v16 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy];
  swift_beginAccess();
  if ((v16[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v17 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime];
  swift_beginAccess();
  if ((v17[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v18 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice];
  swift_beginAccess();
  if (*v18 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v19 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates];
  swift_beginAccess();
  if (*v19 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  closure #24 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v20 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope];
  swift_beginAccess();
  if ((v20[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v21 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope];
  swift_beginAccess();
  if ((v21[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v22 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude];
  swift_beginAccess();
  if ((v22[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v23 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty];
  swift_beginAccess();
  if ((v23[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v24 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude];
  swift_beginAccess();
  if ((v24[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v25 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty];
  swift_beginAccess();
  if ((v25[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v26 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed];
  swift_beginAccess();
  if (*v26 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  v27 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy];
  swift_beginAccess();
  if ((v27[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v28 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy];
  swift_beginAccess();
  if ((v28[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v29 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused];
  swift_beginAccess();
  if (*v29 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  closure #35 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v30 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy];
  swift_beginAccess();
  if ((v30[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v31 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame];
  swift_beginAccess();
  if (*v31 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v32 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse];
  swift_beginAccess();
  if ((v32[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v33 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy];
  swift_beginAccess();
  if ((v33[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v34 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError];
  swift_beginAccess();
  if ((v34[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v35 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude];
  swift_beginAccess();
  if ((v35[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v36 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy];
  swift_beginAccess();
  if ((v36[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v37 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl];
  swift_beginAccess();
  if (*v37 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  v38 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude];
  swift_beginAccess();
  if ((v38[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v39 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy];
  swift_beginAccess();
  if ((v39[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v40 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport];
  swift_beginAccess();
  if (*(void *)(*(void *)v40 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  v41 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent];
  swift_beginAccess();
  if (*v41 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #47 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v42 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState];
  swift_beginAccess();
  if (*v42 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v43 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor];
  swift_beginAccess();
  if ((v43[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v44 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor];
  swift_beginAccess();
  if ((v44[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  v45 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType];
  swift_beginAccess();
  if (*v45 != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v46 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching];
  swift_beginAccess();
  if (*v46 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  v47 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy];
  swift_beginAccess();
  if (*v47 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v48 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType];
  swift_beginAccess();
  if (*v48 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v49 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp];
  swift_beginAccess();
  if (*v49 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #11 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t closure #16 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t closure #19 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t closure #24 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t closure #35 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t closure #47 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v330 = *(void *)(v4 - 8);
  uint64_t v331 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v332 = (uint64_t)&v314 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v327 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?, CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?));
  MEMORY[0x270FA5388](v327);
  uint64_t v333 = (uint64_t)&v314 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v329 = (uint64_t)&v314 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v328 = (uint64_t)&v314 - v10;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v320 = *(void *)(v11 - 8);
  uint64_t v321 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v322 = (uint64_t)&v314 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v317 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MapMatcherData?, CLP_LogEntry_PrivateData_MapMatcherData?));
  MEMORY[0x270FA5388](v317);
  uint64_t v323 = (uint64_t)&v314 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v319 = (uint64_t)&v314 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v318 = (uint64_t)&v314 - v17;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  uint64_t v338 = *(void *)(v18 - 8);
  uint64_t v339 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v337 = (uint64_t)&v314 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PressureSample?, CLP_LogEntry_PrivateData_PressureSample?));
  MEMORY[0x270FA5388](v20);
  uint64_t v340 = (uint64_t)&v314 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  v25 = (char *)&v314 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v27 = (char *)&v314 - v26;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v343 = v28;
  uint64_t v344 = v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v341 = (uint64_t)&v314 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v342 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
  uint64_t v31 = MEMORY[0x270FA5388](v342);
  uint64_t v326 = (uint64_t)&v314 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v336 = (uint64_t)&v314 - v34;
  MEMORY[0x270FA5388](v33);
  v36 = (char *)&v314 - v35;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v38 = MEMORY[0x270FA5388](v37 - 8);
  uint64_t v325 = (uint64_t)&v314 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v324 = (uint64_t)&v314 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v334 = (uint64_t)&v314 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v335 = (uint64_t)&v314 - v45;
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  v48 = (char *)&v314 - v47;
  MEMORY[0x270FA5388](v46);
  v50 = (char *)&v314 - v49;
  swift_beginAccess();
  double v51 = *(double *)(a1 + 16);
  uint64_t v346 = a1;
  LOBYTE(a1) = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  uint64_t v345 = a2;
  char v52 = *(unsigned char *)(a2 + 24);
  if (a1)
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (v51 != *(double *)(a2 + 16)) {
      char v52 = 1;
    }
    if (v52) {
      return 0;
    }
  }
  uint64_t v53 = v346;
  swift_beginAccess();
  double v54 = *(double *)(v53 + 32);
  LOBYTE(v53) = *(unsigned char *)(v53 + 40);
  uint64_t v55 = v345;
  v56 = (double *)(v345 + 32);
  swift_beginAccess();
  char v57 = *(unsigned char *)(v55 + 40);
  if (v53)
  {
    if (!*(unsigned char *)(v55 + 40)) {
      return 0;
    }
  }
  else
  {
    if (v54 != *v56) {
      char v57 = 1;
    }
    if (v57) {
      return 0;
    }
  }
  uint64_t v58 = v346;
  swift_beginAccess();
  double v59 = *(double *)(v58 + 48);
  LOBYTE(v58) = *(unsigned char *)(v58 + 56);
  uint64_t v60 = v345;
  v61 = (double *)(v345 + 48);
  swift_beginAccess();
  char v62 = *(unsigned char *)(v60 + 56);
  if (v58)
  {
    if (!*(unsigned char *)(v60 + 56)) {
      return 0;
    }
  }
  else
  {
    if (v59 != *v61) {
      char v62 = 1;
    }
    if (v62) {
      return 0;
    }
  }
  uint64_t v63 = v346;
  swift_beginAccess();
  double v64 = *(double *)(v63 + 64);
  LOBYTE(v63) = *(unsigned char *)(v63 + 72);
  uint64_t v65 = v345;
  v66 = (double *)(v345 + 64);
  swift_beginAccess();
  char v67 = *(unsigned char *)(v65 + 72);
  if (v63)
  {
    if (!*(unsigned char *)(v65 + 72)) {
      return 0;
    }
  }
  else
  {
    if (v64 != *v66) {
      char v67 = 1;
    }
    if (v67) {
      return 0;
    }
  }
  uint64_t v68 = v346;
  swift_beginAccess();
  double v69 = *(double *)(v68 + 80);
  LOBYTE(v68) = *(unsigned char *)(v68 + 88);
  uint64_t v70 = v345;
  v71 = (double *)(v345 + 80);
  swift_beginAccess();
  char v72 = *(unsigned char *)(v70 + 88);
  if (v68)
  {
    if (!*(unsigned char *)(v70 + 88)) {
      return 0;
    }
  }
  else
  {
    if (v69 != *v71) {
      char v72 = 1;
    }
    if (v72) {
      return 0;
    }
  }
  uint64_t v73 = v346;
  swift_beginAccess();
  float v74 = *(float *)(v73 + 92);
  LOBYTE(v73) = *(unsigned char *)(v73 + 96);
  uint64_t v75 = v345;
  v76 = (float *)(v345 + 92);
  swift_beginAccess();
  char v77 = *(unsigned char *)(v75 + 96);
  if (v73)
  {
    if (!*(unsigned char *)(v75 + 96)) {
      return 0;
    }
  }
  else
  {
    if (v74 != *v76) {
      char v77 = 1;
    }
    if (v77) {
      return 0;
    }
  }
  uint64_t v78 = v346;
  swift_beginAccess();
  float v79 = *(float *)(v78 + 100);
  LOBYTE(v78) = *(unsigned char *)(v78 + 104);
  uint64_t v80 = v345;
  v81 = (float *)(v345 + 100);
  swift_beginAccess();
  char v82 = *(unsigned char *)(v80 + 104);
  if (v78)
  {
    if (!*(unsigned char *)(v80 + 104)) {
      return 0;
    }
  }
  else
  {
    if (v79 != *v81) {
      char v82 = 1;
    }
    if (v82) {
      return 0;
    }
  }
  uint64_t v83 = v346;
  swift_beginAccess();
  float v84 = *(float *)(v83 + 108);
  LOBYTE(v83) = *(unsigned char *)(v83 + 112);
  uint64_t v85 = v345;
  v86 = (float *)(v345 + 108);
  swift_beginAccess();
  char v87 = *(unsigned char *)(v85 + 112);
  if (v83)
  {
    if (!*(unsigned char *)(v85 + 112)) {
      return 0;
    }
  }
  else
  {
    if (v84 != *v86) {
      char v87 = 1;
    }
    if (v87) {
      return 0;
    }
  }
  uint64_t v88 = v346;
  swift_beginAccess();
  int v89 = *(unsigned __int8 *)(v88 + 113);
  uint64_t v90 = v345;
  swift_beginAccess();
  int v91 = *(unsigned __int8 *)(v90 + 113);
  if (v89 == 2)
  {
    if (v91 != 2) {
      return 0;
    }
  }
  else if (v91 == 2 || ((((v91 & 1) == 0) ^ v89) & 1) == 0)
  {
    return 0;
  }
  uint64_t v92 = v346;
  swift_beginAccess();
  int v93 = *(unsigned __int8 *)(v92 + 114);
  uint64_t v94 = v345;
  swift_beginAccess();
  int v95 = *(unsigned __int8 *)(v94 + 114);
  if (v93 == 4)
  {
    if (v95 != 4) {
      return 0;
    }
LABEL_59:
    uint64_t v97 = v346
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess();
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, (uint64_t)v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    uint64_t v98 = v345
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess();
    uint64_t v99 = (uint64_t)&v36[*(int *)(v342 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v50, (uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    uint64_t v316 = v99;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, v99, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    uint64_t v100 = v343;
    uint64_t v102 = v344 + 48;
    v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v344 + 48);
    unsigned int v103 = v101(v36, 1, v343);
    uint64_t v344 = v102;
    if (v103 == 1)
    {
      swift_retain();
      uint64_t v104 = v345;
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      unsigned int v105 = v101((char *)v316, 1, v100);
      uint64_t v106 = v346;
      if (v105 == 1)
      {
        v315 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v101;
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
        goto LABEL_67;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, (uint64_t)v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      if (v101((char *)v316, 1, v100) != 1)
      {
        v315 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v101;
        uint64_t v107 = v341;
        outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v316, v341, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        swift_retain();
        uint64_t v108 = v345;
        swift_retain();
        LODWORD(v316) = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)((uint64_t)v48, v107, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v107, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
        uint64_t v109 = (uint64_t)v48;
        uint64_t v104 = v108;
        uint64_t v106 = v346;
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v109, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
        if ((v316 & 1) == 0) {
          goto LABEL_94;
        }
LABEL_67:
        uint64_t v110 = v106
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
        swift_beginAccess();
        double v111 = *(double *)v110;
        char v112 = *(unsigned char *)(v110 + 8);
        uint64_t v113 = v104
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
        swift_beginAccess();
        if (v112)
        {
          if ((*(unsigned char *)(v113 + 8) & 1) == 0) {
            goto LABEL_94;
          }
        }
        else if ((*(unsigned char *)(v113 + 8) & 1) != 0 || v111 != *(double *)v113)
        {
          goto LABEL_94;
        }
        v114 = (int *)(v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
        swift_beginAccess();
        int v115 = *v114;
        char v116 = *((unsigned char *)v114 + 4);
        uint64_t v117 = v345
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
        swift_beginAccess();
        if (v116)
        {
          if ((*(unsigned char *)(v117 + 4) & 1) == 0) {
            goto LABEL_94;
          }
        }
        else if ((*(unsigned char *)(v117 + 4) & 1) != 0 || v115 != *(_DWORD *)v117)
        {
          goto LABEL_94;
        }
        v118 = (int *)(v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
        swift_beginAccess();
        int v119 = *v118;
        char v120 = *((unsigned char *)v118 + 4);
        uint64_t v121 = v345
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
        swift_beginAccess();
        if (v120)
        {
          if ((*(unsigned char *)(v121 + 4) & 1) == 0) {
            goto LABEL_94;
          }
        }
        else if ((*(unsigned char *)(v121 + 4) & 1) != 0 || v119 != *(_DWORD *)v121)
        {
          goto LABEL_94;
        }
        v122 = (unsigned __int8 *)(v346
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
        swift_beginAccess();
        int v123 = *v122;
        v124 = (unsigned __int8 *)(v345
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
        swift_beginAccess();
        int v125 = *v124;
        if (v123 == 2)
        {
          if (v125 != 2) {
            goto LABEL_94;
          }
        }
        else if (v125 == 2 || ((((v125 & 1) == 0) ^ v123) & 1) == 0)
        {
          goto LABEL_94;
        }
        uint64_t v126 = v346
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
        swift_beginAccess();
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v126, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
        uint64_t v127 = v345
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
        swift_beginAccess();
        uint64_t v128 = v340;
        uint64_t v129 = v340 + *(int *)(v20 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v340, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, v129, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
        v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v338 + 48);
        if (v130(v128, 1, v339) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
          if (v130(v129, 1, v339) == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v340, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
            goto LABEL_98;
          }
        }
        else
        {
          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v340, (uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
          if (v130(v129, 1, v339) != 1)
          {
            uint64_t v133 = v337;
            outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v129, v337, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            char v134 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)((uint64_t)v25, v133, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v133, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v340, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
            if ((v134 & 1) == 0) {
              goto LABEL_94;
            }
LABEL_98:
            v135 = (unsigned __int8 *)(v346
                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
            swift_beginAccess();
            int v136 = *v135;
            v137 = (unsigned __int8 *)(v345
                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
            swift_beginAccess();
            int v138 = *v137;
            if (v136 == 4)
            {
              if (v138 != 4) {
                goto LABEL_94;
              }
            }
            else if (v138 == 4 || v136 != v138)
            {
              goto LABEL_94;
            }
            uint64_t v139 = v346
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
            swift_beginAccess();
            float v140 = *(float *)v139;
            char v141 = *(unsigned char *)(v139 + 4);
            uint64_t v142 = v345
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
            swift_beginAccess();
            if (v141)
            {
              if ((*(unsigned char *)(v142 + 4) & 1) == 0) {
                goto LABEL_94;
              }
            }
            else if ((*(unsigned char *)(v142 + 4) & 1) != 0 || v140 != *(float *)v142)
            {
              goto LABEL_94;
            }
            uint64_t v143 = v346
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
            swift_beginAccess();
            uint64_t v144 = v335;
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, v335, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
            uint64_t v145 = v345
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
            swift_beginAccess();
            uint64_t v146 = v336;
            uint64_t v147 = v336 + *(int *)(v342 + 48);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, v336, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v145, v147, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
            if (v315(v146, 1, v343) == 1)
            {
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v335, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
              if (v315(v147, 1, v343) == 1)
              {
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v336, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                goto LABEL_115;
              }
            }
            else
            {
              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v336, v334, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
              if (v315(v147, 1, v343) != 1)
              {
                uint64_t v148 = v341;
                outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v147, v341, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                uint64_t v149 = v334;
                char v150 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v334, v148, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v148, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v335, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v149, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v336, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                if ((v150 & 1) == 0) {
                  goto LABEL_94;
                }
LABEL_115:
                uint64_t v151 = v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                swift_beginAccess();
                double v152 = *(double *)v151;
                char v153 = *(unsigned char *)(v151 + 8);
                uint64_t v154 = v345
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                swift_beginAccess();
                if (v153)
                {
                  if ((*(unsigned char *)(v154 + 8) & 1) == 0) {
                    goto LABEL_94;
                  }
                }
                else if ((*(unsigned char *)(v154 + 8) & 1) != 0 || v152 != *(double *)v154)
                {
                  goto LABEL_94;
                }
                uint64_t v155 = v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                swift_beginAccess();
                double v156 = *(double *)v155;
                char v157 = *(unsigned char *)(v155 + 8);
                uint64_t v158 = v345
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                swift_beginAccess();
                if (v157)
                {
                  if ((*(unsigned char *)(v158 + 8) & 1) == 0) {
                    goto LABEL_94;
                  }
                }
                else if ((*(unsigned char *)(v158 + 8) & 1) != 0 || v156 != *(double *)v158)
                {
                  goto LABEL_94;
                }
                v159 = (unsigned __int8 *)(v346
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                swift_beginAccess();
                int v160 = *v159;
                v161 = (unsigned __int8 *)(v345
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                swift_beginAccess();
                int v162 = *v161;
                if (v160 == 3)
                {
                  if (v162 != 3) {
                    goto LABEL_94;
                  }
                }
                else if (v162 == 3 || v160 != v162)
                {
                  goto LABEL_94;
                }
                v163 = (unsigned __int8 *)(v346
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                swift_beginAccess();
                int v164 = *v163;
                v165 = (unsigned __int8 *)(v345
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                swift_beginAccess();
                int v166 = *v165;
                if (v164 == 2)
                {
                  if (v166 != 2) {
                    goto LABEL_94;
                  }
                }
                else if (v166 == 2 || ((((v166 & 1) == 0) ^ v164) & 1) == 0)
                {
                  goto LABEL_94;
                }
                uint64_t v167 = v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                swift_beginAccess();
                uint64_t v168 = v318;
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v167, v318, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                uint64_t v169 = v345
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                swift_beginAccess();
                uint64_t v170 = v323;
                uint64_t v171 = v323 + *(int *)(v317 + 48);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v168, v323, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v169, v171, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                v172 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v320 + 48);
                if (v172(v170, 1, v321) == 1)
                {
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v318, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                  if (v172(v171, 1, v321) == 1)
                  {
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v323, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                    goto LABEL_142;
                  }
                }
                else
                {
                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v323, v319, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                  if (v172(v171, 1, v321) != 1)
                  {
                    uint64_t v173 = v322;
                    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v171, v322, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                    uint64_t v174 = v319;
                    char v175 = specialized static CLP_LogEntry_PrivateData_MapMatcherData.== infix(_:_:)(v319, v173);
                    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v173, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v318, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v174, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v323, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                    if ((v175 & 1) == 0) {
                      goto LABEL_94;
                    }
LABEL_142:
                    uint64_t v176 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                    swift_beginAccess();
                    double v177 = *(double *)v176;
                    char v178 = *(unsigned char *)(v176 + 8);
                    uint64_t v179 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                    swift_beginAccess();
                    if (v178)
                    {
                      if ((*(unsigned char *)(v179 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v179 + 8) & 1) != 0 || v177 != *(double *)v179)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v180 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                    swift_beginAccess();
                    double v181 = *(double *)v180;
                    char v182 = *(unsigned char *)(v180 + 8);
                    uint64_t v183 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                    swift_beginAccess();
                    if (v182)
                    {
                      if ((*(unsigned char *)(v183 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v183 + 8) & 1) != 0 || v181 != *(double *)v183)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v184 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                    swift_beginAccess();
                    double v185 = *(double *)v184;
                    char v186 = *(unsigned char *)(v184 + 8);
                    uint64_t v187 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                    swift_beginAccess();
                    if (v186)
                    {
                      if ((*(unsigned char *)(v187 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v187 + 8) & 1) != 0 || v185 != *(double *)v187)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v188 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                    swift_beginAccess();
                    double v189 = *(double *)v188;
                    char v190 = *(unsigned char *)(v188 + 8);
                    uint64_t v191 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                    swift_beginAccess();
                    if (v190)
                    {
                      if ((*(unsigned char *)(v191 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v191 + 8) & 1) != 0 || v189 != *(double *)v191)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v192 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                    swift_beginAccess();
                    double v193 = *(double *)v192;
                    char v194 = *(unsigned char *)(v192 + 8);
                    uint64_t v195 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                    swift_beginAccess();
                    if (v194)
                    {
                      if ((*(unsigned char *)(v195 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v195 + 8) & 1) != 0 || v193 != *(double *)v195)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v196 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                    swift_beginAccess();
                    double v197 = *(double *)v196;
                    char v198 = *(unsigned char *)(v196 + 8);
                    uint64_t v199 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                    swift_beginAccess();
                    if (v198)
                    {
                      if ((*(unsigned char *)(v199 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v199 + 8) & 1) != 0 || v197 != *(double *)v199)
                    {
                      goto LABEL_94;
                    }
                    v200 = (unsigned __int8 *)(v346
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                    swift_beginAccess();
                    int v201 = *v200;
                    v202 = (unsigned __int8 *)(v345
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                    swift_beginAccess();
                    int v203 = *v202;
                    if (v201 == 2)
                    {
                      if (v203 != 2) {
                        goto LABEL_94;
                      }
                    }
                    else if (v203 == 2 || ((((v203 & 1) == 0) ^ v201) & 1) == 0)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v204 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                    swift_beginAccess();
                    double v205 = *(double *)v204;
                    char v206 = *(unsigned char *)(v204 + 8);
                    uint64_t v207 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                    swift_beginAccess();
                    if (v206)
                    {
                      if ((*(unsigned char *)(v207 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v207 + 8) & 1) != 0 || v205 != *(double *)v207)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v208 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                    swift_beginAccess();
                    double v209 = *(double *)v208;
                    char v210 = *(unsigned char *)(v208 + 8);
                    uint64_t v211 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                    swift_beginAccess();
                    if (v210)
                    {
                      if ((*(unsigned char *)(v211 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v211 + 8) & 1) != 0 || v209 != *(double *)v211)
                    {
                      goto LABEL_94;
                    }
                    v212 = (unsigned __int8 *)(v346
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                    swift_beginAccess();
                    int v213 = *v212;
                    v214 = (unsigned __int8 *)(v345
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                    swift_beginAccess();
                    int v215 = *v214;
                    if (v213 == 2)
                    {
                      if (v215 != 2) {
                        goto LABEL_94;
                      }
                    }
                    else if (v215 == 2 || ((((v215 & 1) == 0) ^ v213) & 1) == 0)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v216 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                    swift_beginAccess();
                    uint64_t v217 = v324;
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v216, v324, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                    uint64_t v218 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                    swift_beginAccess();
                    uint64_t v219 = v326;
                    uint64_t v220 = v326 + *(int *)(v342 + 48);
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v217, v326, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v218, v220, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                    if (v315(v219, 1, v343) == 1)
                    {
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v324, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                      if (v315(v220, 1, v343) == 1)
                      {
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v326, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
LABEL_199:
                        uint64_t v224 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                        swift_beginAccess();
                        double v225 = *(double *)v224;
                        char v226 = *(unsigned char *)(v224 + 8);
                        uint64_t v227 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                        swift_beginAccess();
                        if (v226)
                        {
                          if ((*(unsigned char *)(v227 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v227 + 8) & 1) != 0 || v225 != *(double *)v227)
                        {
                          goto LABEL_94;
                        }
                        v228 = (unsigned __int8 *)(v346
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                        swift_beginAccess();
                        int v229 = *v228;
                        v230 = (unsigned __int8 *)(v345
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                        swift_beginAccess();
                        int v231 = *v230;
                        if (v229 == 3)
                        {
                          if (v231 != 3) {
                            goto LABEL_94;
                          }
                        }
                        else if (v231 == 3 || v229 != v231)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v232 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                        swift_beginAccess();
                        double v233 = *(double *)v232;
                        char v234 = *(unsigned char *)(v232 + 8);
                        uint64_t v235 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                        swift_beginAccess();
                        if (v234)
                        {
                          if ((*(unsigned char *)(v235 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v235 + 8) & 1) != 0 || v233 != *(double *)v235)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v236 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                        swift_beginAccess();
                        double v237 = *(double *)v236;
                        char v238 = *(unsigned char *)(v236 + 8);
                        uint64_t v239 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                        swift_beginAccess();
                        if (v238)
                        {
                          if ((*(unsigned char *)(v239 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v239 + 8) & 1) != 0 || v237 != *(double *)v239)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v240 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                        swift_beginAccess();
                        double v241 = *(double *)v240;
                        char v242 = *(unsigned char *)(v240 + 8);
                        uint64_t v243 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                        swift_beginAccess();
                        if (v242)
                        {
                          if ((*(unsigned char *)(v243 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v243 + 8) & 1) != 0 || v241 != *(double *)v243)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v244 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                        swift_beginAccess();
                        double v245 = *(double *)v244;
                        char v246 = *(unsigned char *)(v244 + 8);
                        uint64_t v247 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                        swift_beginAccess();
                        if (v246)
                        {
                          if ((*(unsigned char *)(v247 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v247 + 8) & 1) != 0 || v245 != *(double *)v247)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v248 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                        swift_beginAccess();
                        double v249 = *(double *)v248;
                        char v250 = *(unsigned char *)(v248 + 8);
                        uint64_t v251 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                        swift_beginAccess();
                        if (v250)
                        {
                          if ((*(unsigned char *)(v251 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v251 + 8) & 1) != 0 || v249 != *(double *)v251)
                        {
                          goto LABEL_94;
                        }
                        v252 = (unsigned __int8 *)(v346
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                        swift_beginAccess();
                        int v253 = *v252;
                        v254 = (unsigned __int8 *)(v345
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                        swift_beginAccess();
                        int v255 = *v254;
                        if (v253 == 2)
                        {
                          if (v255 != 2) {
                            goto LABEL_94;
                          }
                        }
                        else if (v255 == 2 || ((((v255 & 1) == 0) ^ v253) & 1) == 0)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v256 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                        swift_beginAccess();
                        double v257 = *(double *)v256;
                        char v258 = *(unsigned char *)(v256 + 8);
                        uint64_t v259 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                        swift_beginAccess();
                        if (v258)
                        {
                          if ((*(unsigned char *)(v259 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v259 + 8) & 1) != 0 || v257 != *(double *)v259)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v260 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                        swift_beginAccess();
                        double v261 = *(double *)v260;
                        char v262 = *(unsigned char *)(v260 + 8);
                        uint64_t v263 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                        swift_beginAccess();
                        if (v262)
                        {
                          if ((*(unsigned char *)(v263 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v263 + 8) & 1) != 0 || v261 != *(double *)v263)
                        {
                          goto LABEL_94;
                        }
                        v264 = (uint64_t *)(v346
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                        swift_beginAccess();
                        uint64_t v265 = *v264;
                        v266 = (uint64_t *)(v345
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                        swift_beginAccess();
                        uint64_t v267 = *v266;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        char v268 = specialized static Array<A>.== infix(_:_:)(v265, v267, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_ClientSatelliteInfo.== infix(_:_:));
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v268 & 1) == 0) {
                          goto LABEL_94;
                        }
                        v269 = (unsigned __int8 *)(v346
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                        swift_beginAccess();
                        int v270 = *v269;
                        v271 = (unsigned __int8 *)(v345
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                        swift_beginAccess();
                        int v272 = *v271;
                        if (v270 == 3)
                        {
                          if (v272 != 3) {
                            goto LABEL_94;
                          }
                        }
                        else if (v272 == 3 || v270 != v272)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v273 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                        swift_beginAccess();
                        uint64_t v274 = v328;
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v273, v328, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                        uint64_t v275 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                        swift_beginAccess();
                        uint64_t v276 = v333;
                        uint64_t v277 = v333 + *(int *)(v327 + 48);
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v274, v333, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v275, v277, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                        v278 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v330 + 48);
                        if (v278(v276, 1, v331) == 1)
                        {
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v328, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                          if (v278(v277, 1, v331) == 1)
                          {
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v333, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
LABEL_262:
                            v282 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                            swift_beginAccess();
                            int v283 = *v282;
                            v284 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                            swift_beginAccess();
                            int v285 = *v284;
                            if (v283 == 3)
                            {
                              if (v285 != 3) {
                                goto LABEL_94;
                              }
                            }
                            else if (v285 == 3 || v283 != v285)
                            {
                              goto LABEL_94;
                            }
                            uint64_t v286 = v346
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                            swift_beginAccess();
                            double v287 = *(double *)v286;
                            char v288 = *(unsigned char *)(v286 + 8);
                            uint64_t v289 = v345
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                            swift_beginAccess();
                            if (v288)
                            {
                              if ((*(unsigned char *)(v289 + 8) & 1) == 0) {
                                goto LABEL_94;
                              }
                            }
                            else if ((*(unsigned char *)(v289 + 8) & 1) != 0 || v287 != *(double *)v289)
                            {
                              goto LABEL_94;
                            }
                            uint64_t v290 = v346
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                            swift_beginAccess();
                            double v291 = *(double *)v290;
                            char v292 = *(unsigned char *)(v290 + 8);
                            uint64_t v293 = v345
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                            swift_beginAccess();
                            if (v292)
                            {
                              if ((*(unsigned char *)(v293 + 8) & 1) == 0) {
                                goto LABEL_94;
                              }
                            }
                            else if ((*(unsigned char *)(v293 + 8) & 1) != 0 || v291 != *(double *)v293)
                            {
                              goto LABEL_94;
                            }
                            v294 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                            swift_beginAccess();
                            int v295 = *v294;
                            v296 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                            swift_beginAccess();
                            int v297 = *v296;
                            if (v295 == 4)
                            {
                              if (v297 != 4) {
                                goto LABEL_94;
                              }
                            }
                            else if (v297 == 4 || v295 != v297)
                            {
                              goto LABEL_94;
                            }
                            v298 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                            swift_beginAccess();
                            int v299 = *v298;
                            v300 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                            swift_beginAccess();
                            int v301 = *v300;
                            if (v299 == 2)
                            {
                              if (v301 != 2) {
                                goto LABEL_94;
                              }
                            }
                            else if (v301 == 2 || ((((v301 & 1) == 0) ^ v299) & 1) == 0)
                            {
                              goto LABEL_94;
                            }
                            v302 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                            swift_beginAccess();
                            int v303 = *v302;
                            v304 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                            swift_beginAccess();
                            int v305 = *v304;
                            if (v303 == 3)
                            {
                              if (v305 != 3) {
                                goto LABEL_94;
                              }
                            }
                            else if (v305 == 3 || v303 != v305)
                            {
                              goto LABEL_94;
                            }
                            v306 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                            swift_beginAccess();
                            int v307 = *v306;
                            v308 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                            swift_beginAccess();
                            int v309 = *v308;
                            if (v307 != 5)
                            {
                              if (v309 == 5 || v307 != v309) {
                                goto LABEL_94;
                              }
LABEL_297:
                              v310 = (unsigned __int8 *)(v346
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                              swift_beginAccess();
                              int v311 = *v310;
                              swift_release();
                              v312 = (unsigned __int8 *)(v345
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                              swift_beginAccess();
                              int v313 = *v312;
                              swift_release();
                              if (v311 == 2)
                              {
                                if (v313 != 2) {
                                  return 0;
                                }
                              }
                              else if (v313 == 2 || ((((v313 & 1) == 0) ^ v311) & 1) == 0)
                              {
                                return 0;
                              }
                              return 1;
                            }
                            if (v309 == 5) {
                              goto LABEL_297;
                            }
LABEL_94:
                            swift_release();
                            swift_release();
                            return 0;
                          }
                        }
                        else
                        {
                          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v333, v329, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                          if (v278(v277, 1, v331) != 1)
                          {
                            uint64_t v279 = v332;
                            outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v277, v332, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                            uint64_t v280 = v329;
                            char v281 = specialized static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.== infix(_:_:)(v329, v279);
                            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v279, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v328, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v280, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v333, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                            if ((v281 & 1) == 0) {
                              goto LABEL_94;
                            }
                            goto LABEL_262;
                          }
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v328, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                          outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v329, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                        }
                        v131 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?, CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                        uint64_t v132 = v333;
LABEL_93:
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v132, v131);
                        goto LABEL_94;
                      }
                    }
                    else
                    {
                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v326, v325, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                      if (v315(v220, 1, v343) != 1)
                      {
                        uint64_t v221 = v341;
                        outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v220, v341, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        uint64_t v222 = v325;
                        char v223 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v325, v221, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v221, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v324, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v222, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v326, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                        if ((v223 & 1) == 0) {
                          goto LABEL_94;
                        }
                        goto LABEL_199;
                      }
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v324, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v325, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                    }
                    v131 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                    uint64_t v132 = v326;
                    goto LABEL_93;
                  }
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v318, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v319, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                }
                v131 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MapMatcherData?, CLP_LogEntry_PrivateData_MapMatcherData?);
                uint64_t v132 = v323;
                goto LABEL_93;
              }
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v335, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
              outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v334, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
            }
            v131 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
            uint64_t v132 = v336;
            goto LABEL_93;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
          outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
        }
        v131 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PressureSample?, CLP_LogEntry_PrivateData_PressureSample?);
        uint64_t v132 = v340;
        goto LABEL_93;
      }
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v48, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
    goto LABEL_94;
  }
  uint64_t result = 0;
  if (v95 != 4 && v93 == v95) {
    goto LABEL_59;
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DaemonLocationPrivate.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap, a1);
}

uint64_t *CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName;
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.getter()
{
  return static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a2 + v8) = 4;
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(a1, a2, &one-time initialization token for protoMessageName, &static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_TechnologyStatus.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TechnologyStatus.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TechnologyStatus.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 14)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_TechnologyStatus.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus(a1, 14, 2, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TechnologyStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_VehicleSpeed.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_VehicleSpeed.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_VehicleSpeed.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_VehicleSpeed.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_VehicleSpeed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_VehicleSpeed@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_VehicleSpeed(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_VehicleSpeed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_VehicleHeading.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_VehicleHeading.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_VehicleHeading.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t static CLP_LogEntry_PrivateData_VehicleHeading.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_VehicleHeading.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_VehicleHeading(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_VehicleHeading@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_VehicleHeading(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_VehicleHeading(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_XtraFileAvailable.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_XtraFileAvailable.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_XtraFileAvailable.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(void *)(v0 + *(int *)(v3 + 24) + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_XtraFileAvailable.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_XtraFileAvailable@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_XtraFileAvailable@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_LocationDerivedSpeed.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_LocationDerivedSpeed.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_LocationDerivedSpeed.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeStamp.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v7 = result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 28) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_LocationDerivedSpeed.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Location.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Location.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Location.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t CLP_LogEntry_PrivateData_Location._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Location._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v84 = (uint64_t)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v83 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v82 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v81 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v80 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v76 = (uint64_t)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v72 = (uint64_t)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v22 = 0;
  *(unsigned char *)(v22 + 4) = 1;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  uint64_t v69 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  uint64_t v70 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v71 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active) = 2;
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(void *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + 8) = 1;
  uint64_t v73 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality) = 3;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  uint64_t v74 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  uint64_t v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  uint64_t v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  uint64_t v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
  uint64_t v78 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  uint64_t v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  uint64_t v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v19, v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  LODWORD(v19) = *(_DWORD *)v39;
  LOBYTE(v39) = *(unsigned char *)(v39 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v22 = v19;
  *(unsigned char *)(v22 + 4) = v39;
  uint64_t v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  uint64_t v41 = v72;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v41, v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  swift_endAccess();
  uint64_t v42 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  uint64_t v43 = v76;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  uint64_t v44 = v69;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v43, v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  swift_endAccess();
  uint64_t v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  uint64_t v46 = v80;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  uint64_t v47 = v70;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v46, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  swift_endAccess();
  v48 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  LOBYTE(v48) = *v48;
  uint64_t v49 = v71;
  swift_beginAccess();
  unsigned char *v49 = (_BYTE)v48;
  v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
  swift_beginAccess();
  uint64_t v51 = *v50;
  LOBYTE(v50) = *((unsigned char *)v50 + 8);
  swift_beginAccess();
  *(void *)uint64_t v29 = v51;
  *(unsigned char *)(v29 + 8) = (_BYTE)v50;
  char v52 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  LOBYTE(v52) = *v52;
  uint64_t v53 = v73;
  swift_beginAccess();
  *uint64_t v53 = (_BYTE)v52;
  uint64_t v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  uint64_t v55 = v81;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  uint64_t v56 = v74;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v55, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  swift_endAccess();
  uint64_t v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  uint64_t v58 = v82;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  uint64_t v59 = v75;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v58, v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  swift_endAccess();
  uint64_t v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  uint64_t v61 = v83;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  uint64_t v62 = v77;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v61, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  swift_endAccess();
  uint64_t v63 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  LOBYTE(v63) = *v63;
  double v64 = v78;
  swift_beginAccess();
  *double v64 = (_BYTE)v63;
  uint64_t v65 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  uint64_t v66 = v84;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  swift_release();
  uint64_t v67 = v79;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v66, v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_Location._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_Location.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v10 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_21;
        case 2:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_22;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation;
          goto LABEL_21;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate;
          goto LABEL_21;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus;
          goto LABEL_21;
        case 6:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_22;
        case 7:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_22;
        case 8:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType();
          goto LABEL_19;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed;
          goto LABEL_21;
        case 10:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading;
          goto LABEL_21;
        case 11:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable;
          goto LABEL_21;
        case 12:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType();
LABEL_19:
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_22;
        case 13:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed;
LABEL_21:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_22:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v11 = v9
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((*(unsigned char *)(v11 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  if (*v13 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  if (*v15 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #9 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #10 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #11 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  if (*v16 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #13 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t closure #9 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t closure #10 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t closure #11 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t closure #13 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t static CLP_LogEntry_PrivateData_Location.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_Location.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_Location.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v229 = a2;
  uint64_t v184 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  uint64_t v181 = *(void *)(v184 - 8);
  MEMORY[0x270FA5388](v184);
  uint64_t v178 = (uint64_t)&v177 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LocationDerivedSpeed?, CLP_LogEntry_PrivateData_LocationDerivedSpeed?));
  MEMORY[0x270FA5388](v180);
  uint64_t v185 = (uint64_t)&v177 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v179 = (uint64_t)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v183 = (uint64_t)&v177 - v8;
  uint64_t v193 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v189 = *(void *)(v193 - 8);
  MEMORY[0x270FA5388](v193);
  uint64_t v182 = (uint64_t)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_XtraFileAvailable?, CLP_LogEntry_PrivateData_XtraFileAvailable?));
  MEMORY[0x270FA5388](v188);
  uint64_t v194 = (uint64_t)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v187 = (uint64_t)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v192 = (uint64_t)&v177 - v14;
  uint64_t v196 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  uint64_t v198 = *(void *)(v196 - 8);
  MEMORY[0x270FA5388](v196);
  uint64_t v186 = (uint64_t)&v177 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_VehicleHeading?, CLP_LogEntry_PrivateData_VehicleHeading?));
  MEMORY[0x270FA5388](v195);
  uint64_t v199 = (char *)&v177 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v190 = (uint64_t)&v177 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  double v197 = (char *)&v177 - v20;
  uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  uint64_t v202 = *(void *)(v21 - 8);
  uint64_t v203 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v191 = (uint64_t)&v177 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_VehicleSpeed?, CLP_LogEntry_PrivateData_VehicleSpeed?));
  MEMORY[0x270FA5388](v201);
  uint64_t v204 = (uint64_t)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v200 = (uint64_t)&v177 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v206 = (uint64_t)&v177 - v27;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  uint64_t v210 = *(void *)(v28 - 8);
  uint64_t v211 = v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v205 = (uint64_t)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TechnologyStatus?, CLP_LogEntry_PrivateData_TechnologyStatus?));
  MEMORY[0x270FA5388](v209);
  uint64_t v212 = (uint64_t)&v177 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v207 = (uint64_t)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v223 = (uint64_t)&v177 - v34;
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  uint64_t v216 = *(void *)(v35 - 8);
  uint64_t v217 = v35;
  MEMORY[0x270FA5388](v35);
  uint64_t v208 = (uint64_t)&v177 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocationPrivate?, CLP_LogEntry_PrivateData_DaemonLocationPrivate?));
  MEMORY[0x270FA5388](v215);
  uint64_t v218 = (uint64_t)&v177 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  uint64_t v39 = MEMORY[0x270FA5388](v38 - 8);
  uint64_t v213 = (uint64_t)&v177 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v219 = (uint64_t)&v177 - v41;
  uint64_t v221 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  uint64_t v227 = *(void *)(v221 - 8);
  MEMORY[0x270FA5388](v221);
  uint64_t v214 = (uint64_t)&v177 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocation?, CLP_LogEntry_PrivateData_DaemonLocation?));
  MEMORY[0x270FA5388](v220);
  uint64_t v222 = (uint64_t)&v177 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  uint64_t v45 = MEMORY[0x270FA5388](v44 - 8);
  char v226 = (char *)&v177 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  uint64_t v224 = (uint64_t)&v177 - v47;
  uint64_t v48 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v49 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v225 = (uint64_t)&v177 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v52 = v51 - 8;
  MEMORY[0x270FA5388](v51);
  uint64_t v54 = (char *)&v177 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v56 = MEMORY[0x270FA5388](v55 - 8);
  uint64_t v228 = (uint64_t)&v177 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v56);
  uint64_t v59 = (char *)&v177 - v58;
  uint64_t v60 = a1;
  uint64_t v61 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, (uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v62 = v229;
  uint64_t v63 = v229
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v64 = (uint64_t)&v54[*(int *)(v52 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, (uint64_t)v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v65((uint64_t)v54, 1, v48) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    int v66 = v65(v64, 1, v48);
    uint64_t v67 = v60;
    if (v66 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v70 = (uint64_t)v54;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v69);
    goto LABEL_8;
  }
  uint64_t v68 = v60;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v54, v228, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v65(v64, 1, v48) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v228, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v72 = v225;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v64, v225, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v67 = v68;
  swift_retain();
  swift_retain();
  uint64_t v73 = v228;
  char v74 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v228, v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v74 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v75 = (int *)(v67
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v76 = *v75;
  char v77 = *((unsigned char *)v75 + 4);
  uint64_t v78 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if (v77)
  {
    uint64_t v80 = (uint64_t)v226;
    uint64_t v79 = v227;
    if ((*(unsigned char *)(v78 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v80 = (uint64_t)v226;
    uint64_t v79 = v227;
    if ((*(unsigned char *)(v78 + 4) & 1) != 0 || v76 != *(_DWORD *)v78) {
      goto LABEL_8;
    }
  }
  uint64_t v81 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  uint64_t v82 = v224;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, v224, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  uint64_t v83 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  uint64_t v84 = v222;
  uint64_t v85 = v222 + *(int *)(v220 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, v222, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  uint64_t v86 = v83;
  uint64_t v87 = v84;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  uint64_t v89 = v84;
  uint64_t v90 = v221;
  if (v88(v89, 1, v221) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
    int v91 = v88(v85, 1, v90);
    uint64_t v92 = v223;
    uint64_t v93 = v219;
    if (v91 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
      goto LABEL_23;
    }
LABEL_21:
    uint64_t v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocation?, CLP_LogEntry_PrivateData_DaemonLocation?);
LABEL_36:
    uint64_t v70 = v87;
    goto LABEL_7;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  int v94 = v88(v85, 1, v90);
  uint64_t v95 = v223;
  if (v94 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v224, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v80, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
    goto LABEL_21;
  }
  uint64_t v96 = v214;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v85, v214, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  char v97 = specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(v80, v96, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v96, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v224, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v80, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  uint64_t v92 = v95;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  uint64_t v93 = v219;
  if ((v97 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_23:
  uint64_t v98 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, v93, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  uint64_t v99 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  uint64_t v100 = v218;
  uint64_t v101 = v218 + *(int *)(v215 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v93, v218, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  uint64_t v102 = v99;
  uint64_t v87 = v100;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  unsigned int v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48);
  uint64_t v104 = v100;
  uint64_t v105 = v217;
  if (v103(v104, 1, v217) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v93, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
    if (v103(v101, 1, v105) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  uint64_t v106 = v213;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v213, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  if (v103(v101, 1, v105) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v219, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v106, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
LABEL_28:
    uint64_t v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocationPrivate?, CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
    goto LABEL_36;
  }
  uint64_t v107 = v208;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v101, v208, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  char v108 = specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(v106, v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v219, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v106, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  if ((v108 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_30:
  uint64_t v109 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v109, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  uint64_t v110 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  uint64_t v111 = v212;
  uint64_t v112 = v212 + *(int *)(v209 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v92, v212, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  uint64_t v113 = v110;
  uint64_t v87 = v111;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v114 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v210 + 48);
  uint64_t v115 = v111;
  uint64_t v116 = v211;
  if (v114(v115, 1, v211) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
    if (v114(v112, 1, v116) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  uint64_t v117 = v207;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v207, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  if (v114(v112, 1, v116) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v223, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v117, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
LABEL_35:
    uint64_t v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TechnologyStatus?, CLP_LogEntry_PrivateData_TechnologyStatus?);
    goto LABEL_36;
  }
  uint64_t v118 = v205;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v112, v205, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  char v119 = specialized static CLP_LogEntry_PrivateData_TechnologyStatus.== infix(_:_:)(v117, v118);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v118, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v223, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v117, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  if ((v119 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_38:
  char v120 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  int v121 = *v120;
  v122 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  int v123 = *v122;
  if (v121 == 2)
  {
    uint64_t v124 = v206;
    if (v123 != 2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v124 = v206;
    if (v123 == 2 || ((((v123 & 1) == 0) ^ v121) & 1) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v125 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  double v126 = *(double *)v125;
  char v127 = *(unsigned char *)(v125 + 8);
  uint64_t v128 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  if (v127)
  {
    if ((*(unsigned char *)(v128 + 8) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(v128 + 8) & 1) != 0 || v126 != *(double *)v128)
  {
    goto LABEL_8;
  }
  uint64_t v129 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  int v130 = *v129;
  v131 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  int v132 = *v131;
  if (v130 == 3)
  {
    if (v132 != 3) {
      goto LABEL_8;
    }
  }
  else if (v132 == 3 || v130 != v132)
  {
    goto LABEL_8;
  }
  uint64_t v133 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v133, v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  uint64_t v134 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  uint64_t v135 = v204;
  uint64_t v136 = v204 + *(int *)(v201 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v124, v204, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  uint64_t v137 = v134;
  uint64_t v87 = v135;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v137, v136, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  int v138 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v202 + 48);
  uint64_t v139 = v135;
  uint64_t v140 = v203;
  if (v138(v139, 1, v203) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
    if (v138(v136, 1, v140) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
      uint64_t v142 = v198;
      uint64_t v141 = (uint64_t)v199;
      uint64_t v143 = (uint64_t)v197;
      goto LABEL_60;
    }
    goto LABEL_58;
  }
  uint64_t v144 = v200;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  if (v138(v136, 1, v140) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v206, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
LABEL_58:
    uint64_t v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_VehicleSpeed?, CLP_LogEntry_PrivateData_VehicleSpeed?);
    goto LABEL_36;
  }
  uint64_t v145 = v191;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v136, v191, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  char v146 = specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(v144, v145, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v145, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v206, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  uint64_t v142 = v198;
  uint64_t v141 = (uint64_t)v199;
  uint64_t v143 = (uint64_t)v197;
  if ((v146 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_60:
  uint64_t v147 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v147, v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  uint64_t v148 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  uint64_t v149 = v141 + *(int *)(v195 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, v141, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v148, v149, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  char v150 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48);
  uint64_t v151 = v196;
  if (v150(v141, 1, v196) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
    if (v150(v149, 1, v151) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v141, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
      goto LABEL_67;
    }
    goto LABEL_65;
  }
  uint64_t v152 = v190;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v141, v190, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  if (v150(v149, 1, v151) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
LABEL_65:
    uint64_t v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_VehicleHeading?, CLP_LogEntry_PrivateData_VehicleHeading?);
    uint64_t v70 = v141;
    goto LABEL_7;
  }
  uint64_t v153 = v186;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v149, v186, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  char v154 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v152, v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v141, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  if ((v154 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_67:
  uint64_t v155 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  uint64_t v156 = v192;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v155, v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  uint64_t v157 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  uint64_t v158 = v194;
  uint64_t v159 = v194 + *(int *)(v188 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v157, v159, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  int v160 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
  if (v160(v158, 1, v193) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
    if (v160(v159, 1, v193) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
      goto LABEL_74;
    }
    goto LABEL_72;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v194, v187, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  if (v160(v159, 1, v193) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v187, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
LABEL_72:
    uint64_t v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_XtraFileAvailable?, CLP_LogEntry_PrivateData_XtraFileAvailable?);
    uint64_t v70 = v194;
    goto LABEL_7;
  }
  uint64_t v161 = v182;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v159, v182, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  uint64_t v162 = v187;
  char v163 = specialized static CLP_LogEntry_PrivateData_XtraFileAvailable.== infix(_:_:)(v187, v161);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v161, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v162, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  if ((v163 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_74:
  int v164 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  int v165 = *v164;
  int v166 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  int v167 = *v166;
  if (v165 == 3)
  {
    if (v167 == 3) {
      goto LABEL_79;
    }
LABEL_8:
    swift_release();
    swift_release();
    return 0;
  }
  if (v167 == 3 || v165 != v167) {
    goto LABEL_8;
  }
LABEL_79:
  uint64_t v168 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  uint64_t v169 = v183;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v168, v183, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  uint64_t v170 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  uint64_t v171 = v185;
  uint64_t v172 = v185 + *(int *)(v180 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v169, v185, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v170, v172, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  uint64_t v173 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48);
  if (v173(v171, 1, v184) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v183, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
    if (v173(v172, 1, v184) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v185, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
      return 1;
    }
LABEL_84:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v185, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LocationDerivedSpeed?, CLP_LogEntry_PrivateData_LocationDerivedSpeed?));
    return 0;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v185, v179, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  if (v173(v172, 1, v184) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v183, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v179, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
    goto LABEL_84;
  }
  uint64_t v174 = v178;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v172, v178, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  uint64_t v175 = v179;
  char v176 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v179, v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v183, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v175, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v185, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  return (v176 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_Location.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Location@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_Location._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Location()
{
  return CLP_LogEntry_PrivateData_Location.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Location(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Location@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Location(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Location.SignalQualityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_BatchedLocations.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BatchedLocations.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BatchedLocations.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0),
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0),
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_BatchedLocations.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_BatchedLocations@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v1;
  return UnknownStorage.init()();
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CLP_LogEntry_PrivateData_BatchedLocations())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_BatchedLocations()
{
  return CLP_LogEntry_PrivateData_BatchedLocations.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_BatchedLocations()
{
  return CLP_LogEntry_PrivateData_BatchedLocations.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BatchedLocations@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation();
          goto LABEL_11;
        case 2:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode();
LABEL_11:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  uint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + v3[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 3;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 5;
  uint64_t v7 = a2 + v6;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_RhythmicStreamingControl.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_RhythmicStreamingControl.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_RhythmicStreamingControl.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_RhythmicStreamingControl.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  *(unsigned char *)(a2 + *(int *)(a1 + 20)) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MotionActivity.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionActivity.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionActivity.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v38 = (uint64_t)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[0] = v1 + 17;
  *(_DWORD *)(v1 + 16) = 67306568;
  v29[1] = v1 + 18;
  v29[2] = v1 + 19;
  *(unsigned char *)(v1 + 20) = 2;
  *(_DWORD *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 28) = 1;
  *(void *)(v1 + 32) = 0;
  uint64_t v30 = (void *)(v1 + 32);
  *(_WORD *)(v1 + 41) = 1026;
  *(unsigned char *)(v1 + 40) = 1;
  uint64_t v31 = (unsigned char *)(v1 + 41);
  uint64_t v32 = v1 + 42;
  *(void *)(v1 + 48) = 0;
  uint64_t v33 = (void *)(v1 + 48);
  *(unsigned char *)(v1 + 56) = 1;
  *(void *)(v1 + 64) = 0;
  uint64_t v34 = (void *)(v1 + 64);
  *(unsigned char *)(v1 + 72) = 1;
  *(_WORD *)(v1 + 73) = 1096;
  uint64_t v35 = (unsigned char *)(v1 + 73);
  uint64_t v36 = v1 + 74;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, v6);
  uint64_t v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v7();
  swift_beginAccess();
  char v8 = *(unsigned char *)(a1 + 16);
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v8;
  swift_beginAccess();
  char v9 = *(unsigned char *)(a1 + 17);
  swift_beginAccess();
  *(unsigned char *)(v1 + 17) = v9;
  swift_beginAccess();
  char v10 = *(unsigned char *)(a1 + 18);
  swift_beginAccess();
  *(unsigned char *)(v1 + 18) = v10;
  swift_beginAccess();
  char v11 = *(unsigned char *)(a1 + 19);
  swift_beginAccess();
  *(unsigned char *)(v1 + 19) = v11;
  swift_beginAccess();
  char v12 = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  *(unsigned char *)(v1 + 20) = v12;
  swift_beginAccess();
  int v13 = *(_DWORD *)(a1 + 24);
  char v14 = *(unsigned char *)(a1 + 28);
  swift_beginAccess();
  *(_DWORD *)(v1 + 24) = v13;
  *(unsigned char *)(v1 + 28) = v14;
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 32);
  char v16 = *(unsigned char *)(a1 + 40);
  uint64_t v17 = v30;
  swift_beginAccess();
  void *v17 = v15;
  *(unsigned char *)(v1 + 40) = v16;
  swift_beginAccess();
  LOBYTE(v15) = *(unsigned char *)(a1 + 41);
  uint64_t v18 = v31;
  swift_beginAccess();
  unsigned char *v18 = v15;
  swift_beginAccess();
  LOBYTE(v15) = *(unsigned char *)(a1 + 42);
  swift_beginAccess();
  *(unsigned char *)(v1 + 42) = v15;
  swift_beginAccess();
  uint64_t v19 = *(void *)(a1 + 48);
  LOBYTE(v18) = *(unsigned char *)(a1 + 56);
  uint64_t v20 = v33;
  swift_beginAccess();
  void *v20 = v19;
  *(unsigned char *)(v1 + 56) = (_BYTE)v18;
  swift_beginAccess();
  uint64_t v21 = *(void *)(a1 + 64);
  LOBYTE(v18) = *(unsigned char *)(a1 + 72);
  uint64_t v22 = v34;
  swift_beginAccess();
  void *v22 = v21;
  *(unsigned char *)(v1 + 72) = (_BYTE)v18;
  swift_beginAccess();
  LOBYTE(v21) = *(unsigned char *)(a1 + 73);
  uint64_t v23 = v35;
  swift_beginAccess();
  unsigned char *v23 = v21;
  swift_beginAccess();
  LOBYTE(v21) = *(unsigned char *)(a1 + 74);
  swift_beginAccess();
  *(unsigned char *)(v1 + 74) = v21;
  uint64_t v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  uint64_t v25 = v38;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v24, v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v25, v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_release();
  uint64_t v27 = v37;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v25, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity._StorageClass.__deallocating_deinit()
{
  return CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v4 + *a1, a2);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v4 + *a3, a4);
  uint64_t v7 = *(unsigned int *)(*(void *)v4 + 48);
  uint64_t v8 = *(unsigned __int16 *)(*(void *)v4 + 52);
  return MEMORY[0x270FA0228](v4, v7, v8);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 12:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
          goto LABEL_14;
        case 2:
        case 4:
        case 13:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
          goto LABEL_14;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType();
          goto LABEL_14;
        case 5:
        case 8:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_15;
        case 6:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_15;
        case 7:
        case 10:
        case 11:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_15;
        case 9:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType();
LABEL_14:
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_15;
        case 14:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_15:
          uint64_t v2 = v9;
          swift_endAccess();
          break;
        case 15:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(unsigned char **)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_retain();
  swift_beginAccess();
  if (v9[16] != 72)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  swift_beginAccess();
  if (v9[17] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[18] != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[19] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[20] != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[28] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[40] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[41] != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[42] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[56] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[72] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[73] != 72)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[74] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #14 in closure #1 in CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #15 in closure #1 in CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #14 in closure #1 in CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #15 in closure #1 in CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionActivity.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_MotionActivity.== infix(_:_:)(uint64_t a1, float *a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v70 = v4;
  uint64_t v71 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v68 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v69 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v65 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v65 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v65 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v65 - v22;
  swift_beginAccess();
  uint64_t v24 = *(char *)(a1 + 16);
  swift_beginAccess();
  uint64_t v25 = *((char *)a2 + 16);
  if (v24 == 72)
  {
    if (v25 != 72) {
      return 0;
    }
  }
  else if (v25 == 72 || qword_24711E0C0[v24] != qword_24711E0C0[v25])
  {
    return 0;
  }
  swift_beginAccess();
  int v26 = *(unsigned __int8 *)(a1 + 17);
  swift_beginAccess();
  int v27 = *((unsigned __int8 *)a2 + 17);
  if (v26 == 4)
  {
    if (v27 != 4) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v27 == 4 || v26 != v27) {
      return result;
    }
  }
  swift_beginAccess();
  int v29 = *(unsigned __int8 *)(a1 + 18);
  swift_beginAccess();
  int v30 = *((unsigned __int8 *)a2 + 18);
  if (v29 == 3)
  {
    if (v30 != 3) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v30 == 3 || v29 != v30) {
      return result;
    }
  }
  swift_beginAccess();
  int v31 = *(unsigned __int8 *)(a1 + 19);
  swift_beginAccess();
  int v32 = *((unsigned __int8 *)a2 + 19);
  if (v31 == 4)
  {
    if (v32 != 4) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v32 == 4 || v31 != v32) {
      return result;
    }
  }
  swift_beginAccess();
  int v33 = *(unsigned __int8 *)(a1 + 20);
  swift_beginAccess();
  int v34 = *((unsigned __int8 *)a2 + 20);
  if (v33 == 2)
  {
    if (v34 != 2) {
      return 0;
    }
  }
  else if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess();
  float v35 = *(float *)(a1 + 24);
  char v36 = *(unsigned char *)(a1 + 28);
  uint64_t v67 = a2 + 6;
  swift_beginAccess();
  char v37 = *((unsigned char *)a2 + 28);
  if (v36)
  {
    if (!*((unsigned char *)a2 + 28)) {
      return 0;
    }
  }
  else
  {
    if (v35 != *v67) {
      char v37 = 1;
    }
    if (v37) {
      return 0;
    }
  }
  swift_beginAccess();
  double v38 = *(double *)(a1 + 32);
  char v39 = *(unsigned char *)(a1 + 40);
  uint64_t v67 = a2 + 8;
  swift_beginAccess();
  char v40 = *((unsigned char *)a2 + 40);
  if (v39)
  {
    if (!*((unsigned char *)a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (v38 != *(double *)v67) {
      char v40 = 1;
    }
    if (v40) {
      return 0;
    }
  }
  swift_beginAccess();
  int v41 = *(unsigned __int8 *)(a1 + 41);
  swift_beginAccess();
  int v42 = *((unsigned __int8 *)a2 + 41);
  if (v41 == 2)
  {
    if (v42 != 2) {
      return 0;
    }
  }
  else if (v42 == 2 || ((((v42 & 1) == 0) ^ v41) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess();
  int v43 = *(unsigned __int8 *)(a1 + 42);
  swift_beginAccess();
  int v44 = *((unsigned __int8 *)a2 + 42);
  if (v43 == 4)
  {
    if (v44 != 4) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v44 == 4 || v43 != v44) {
      return result;
    }
  }
  swift_beginAccess();
  double v45 = *(double *)(a1 + 48);
  char v46 = *(unsigned char *)(a1 + 56);
  uint64_t v67 = a2 + 12;
  swift_beginAccess();
  char v47 = *((unsigned char *)a2 + 56);
  if (v46)
  {
    if (!*((unsigned char *)a2 + 56)) {
      return 0;
    }
  }
  else
  {
    if (v45 != *(double *)v67) {
      char v47 = 1;
    }
    if (v47) {
      return 0;
    }
  }
  swift_beginAccess();
  double v48 = *(double *)(a1 + 64);
  char v49 = *(unsigned char *)(a1 + 72);
  uint64_t v67 = a2 + 16;
  swift_beginAccess();
  char v50 = *((unsigned char *)a2 + 72);
  if (v49)
  {
    if (!*((unsigned char *)a2 + 72)) {
      return 0;
    }
  }
  else
  {
    if (v48 != *(double *)v67) {
      char v50 = 1;
    }
    if (v50) {
      return 0;
    }
  }
  swift_beginAccess();
  uint64_t v51 = *(char *)(a1 + 73);
  swift_beginAccess();
  uint64_t v52 = *((char *)a2 + 73);
  if (v51 == 72)
  {
    if (v52 != 72) {
      return 0;
    }
  }
  else if (v52 == 72 || qword_24711E0C0[v51] != qword_24711E0C0[v52])
  {
    return 0;
  }
  swift_beginAccess();
  int v53 = *(unsigned __int8 *)(a1 + 74);
  swift_beginAccess();
  int v54 = *((unsigned __int8 *)a2 + 74);
  if (v53 == 4)
  {
    if (v54 != 4) {
      return 0;
    }
LABEL_70:
    uint64_t v55 = a1
        + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
    swift_beginAccess();
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v67 = (float *)((char *)a2
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
    swift_beginAccess();
    uint64_t v56 = (uint64_t)&v11[*(int *)(v7 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v66 = v56;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v67, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v57 = *(float **)(v71 + 48);
    v71 += 48;
    uint64_t v67 = v57;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v57)(v11, 1, v70) == 1)
    {
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v66, 1, v70) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_78:
        uint64_t v59 = a1
            + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
        swift_beginAccess();
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        uint64_t v60 = (uint64_t)a2
            + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
        swift_beginAccess();
        uint64_t v61 = v69;
        uint64_t v62 = v69 + *(int *)(v7 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v61, 1, v70) == 1)
        {
          swift_release();
          swift_release();
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v62, 1, v70) == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
            return 1;
          }
          goto LABEL_83;
        }
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v62, 1, v70) == 1)
        {
          swift_release();
          swift_release();
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
          outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_83:
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
          return 0;
        }
        uint64_t v63 = v68;
        outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v62, v68, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        char v64 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v15, v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_release();
        swift_release();
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        return (v64 & 1) != 0;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v66, 1, v70) != 1)
      {
        uint64_t v58 = v68;
        outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v66, v68, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_retain();
        swift_retain();
        LODWORD(v66) = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v21, v58, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v58, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        if (v66) {
          goto LABEL_78;
        }
LABEL_76:
        swift_release();
        swift_release();
        return 0;
      }
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_76;
  }
  BOOL result = 0;
  if (v54 != 4 && v53 == v54) {
    goto LABEL_70;
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_MotionActivity.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionActivity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionActivity()
{
  return CLP_LogEntry_PrivateData_MotionActivity.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionActivity@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_MotionState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionState.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity;
    uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

Swift::Int CLP_LogEntry_PrivateData_MotionState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionState()
{
  return CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_WorkoutUpdate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WorkoutUpdate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WorkoutUpdate.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v10 = result;
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 72)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    closure #3 in CLP_LogEntry_PrivateData_WorkoutUpdate.traverse<A>(visitor:)(v5, a1, a2, a3);
    if (*(unsigned char *)(v5 + *(int *)(v10 + 32)) != 72)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_WorkoutUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_WorkoutUpdate.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WorkoutUpdate@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 72;
  uint64_t v5 = a2 + v4;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + a1[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(unsigned char *)(a2 + a1[8]) = 72;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MotionStateObserver.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionStateObserver.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionStateObserver.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
    type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate;
    uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_MotionStateObserver.traverse<A>(visitor:));
}

uint64_t CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v6;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v10, a1, a2, a3, a4);
  if (!v7)
  {
    if ((*(unsigned char *)(v10 + *(int *)(a5(0) + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    a6(v10, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_MotionStateObserver.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

Swift::Int CLP_LogEntry_PrivateData_MotionStateObserver.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionStateObserver@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a2);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState@<X0>(int *a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + a1[5];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1[7];
  uint64_t v9 = a3 + a1[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a3 + v8;
  uint64_t v11 = a2(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 1, 1, v11);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return CLP_LogEntry_PrivateData_MotionStateObserver.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionStateObserver@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_WorkoutSettings.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WorkoutSettings.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WorkoutSettings.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode();
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v3 = (int *)result;
  if (*(void *)(v0 + *(int *)(result + 20) + 8)) {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(void *)(v0 + v3[6] + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 67)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 3)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_WorkoutSettings.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WorkoutSettings@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = (void *)(a2 + a1[5]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 67;
  *(unsigned char *)(a2 + v8) = 5;
  *(unsigned char *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return CLP_LogEntry_PrivateData_WorkoutSettings.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return CLP_LogEntry_PrivateData_WorkoutSettings.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_WorkoutEvent.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WorkoutEvent.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WorkoutEvent.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          goto LABEL_6;
        case 2:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings;
LABEL_5:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
LABEL_6:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(v5, a1, a2, a3);
    if (*(unsigned char *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28)) != 19)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #4 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, 4);
    closure #5 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

Swift::Int CLP_LogEntry_PrivateData_WorkoutEvent.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WorkoutEvent@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(a2 + a1[6], 1, 1, v5);
  uint64_t v7 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 19;
  v6(a2 + v7, 1, 1, v5);
  uint64_t v8 = a2 + a1[9];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_MotionStateMediator.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionStateMediator.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionStateMediator.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v8, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v16 = *v15;
  LOBYTE(v15) = *((unsigned char *)v15 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v11 = v16;
  *(unsigned char *)(v11 + 4) = (_BYTE)v15;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  swift_release();
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.__deallocating_deinit()
{
  return CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v7) {
        return swift_release();
      }
      if (v6 == 3)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
        uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent;
        uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent;
        goto LABEL_7;
      }
      if (v6 == 2) {
        break;
      }
      if (v6 == 1)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v10 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
LABEL_7:
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v10, v9);
        uint64_t v11 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
        uint64_t v2 = v11;
        swift_endAccess();
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    uint64_t v11 = v2;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:), &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in closure #1 in CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:));
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a2;
  uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t v54 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v48 = (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutEvent?, CLP_LogEntry_PrivateData_WorkoutEvent?));
  MEMORY[0x270FA5388](v49);
  uint64_t v51 = (uint64_t)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  int v53 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v52 = (char *)&v48 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  int v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v55 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v22 = a1;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = v56;
  uint64_t v25 = v56
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v26 = (uint64_t)&v16[*(int *)(v14 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v27((uint64_t)v16, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v28 = v22;
    if (v27(v26, 1, v9) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  uint64_t v28 = v22;
  uint64_t v29 = v55;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v27(v26, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v26, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  char v31 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v29, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v31 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  int v32 = (int *)(v28
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v33 = *v32;
  char v34 = *((unsigned char *)v32 + 4);
  uint64_t v35 = v24
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((v34 & 1) == 0)
  {
    uint64_t v36 = v54;
    uint64_t v37 = (uint64_t)v53;
    uint64_t v38 = (uint64_t)v52;
    if ((*(unsigned char *)(v35 + 4) & 1) == 0 && v33 == *(_DWORD *)v35) {
      goto LABEL_16;
    }
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  uint64_t v36 = v54;
  uint64_t v37 = (uint64_t)v53;
  uint64_t v38 = (uint64_t)v52;
  if ((*(unsigned char *)(v35 + 4) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_16:
  uint64_t v39 = v28
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  uint64_t v40 = v24
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  uint64_t v41 = v51;
  uint64_t v42 = v51 + *(int *)(v49 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  uint64_t v43 = v41;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  int v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  uint64_t v45 = v50;
  if (v44(v43, 1, v50) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
    if (v44(v42, 1, v45) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
      return 1;
    }
    goto LABEL_21;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  if (v44(v42, 1, v45) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v37, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
LABEL_21:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutEvent?, CLP_LogEntry_PrivateData_WorkoutEvent?));
    return 0;
  }
  uint64_t v46 = v48;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v42, v48, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  char v47 = specialized static CLP_LogEntry_PrivateData_WorkoutEvent.== infix(_:_:)(v37, v46);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v46, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v37, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  return (v47 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_MotionStateMediator.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionStateMediator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return CLP_LogEntry_PrivateData_MotionStateMediator.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionStateMediator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionStateMediator@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionStateMediator(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionStateMediator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_BodyMetrics.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BodyMetrics.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BodyMetrics.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType();
          goto LABEL_7;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 11:
          type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType();
LABEL_7:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v10 = (int *)result;
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    closure #7 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    closure #8 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    closure #9 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5);
    closure #10 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5);
    closure #11 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 52) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #10 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 56)) != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #11 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 60) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_BodyMetrics.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_BodyMetrics@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 3;
  uint64_t v6 = a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1[12];
  uint64_t v14 = a2 + a1[11];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = a1[14];
  uint64_t v17 = a2 + a1[13];
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  *(unsigned char *)(a2 + v16) = 8;
  uint64_t v18 = a2 + a1[15];
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_BodyMetrics()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_Natalimetry.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Natalimetry.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Natalimetry.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
    type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics;
    uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_Natalimetry.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_Natalimetry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Int CLP_LogEntry_PrivateData_Natalimetry.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Natalimetry@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Natalimetry()
{
  return CLP_LogEntry_PrivateData_Natalimetry.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Natalimetry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Timer.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Timer.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Timer.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_PrivateData_Timer._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Timer.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Timer.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t CLP_LogEntry_PrivateData_Timer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Timer.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t static CLP_LogEntry_PrivateData_Timer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_Timer.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Timer) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Timer.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Timer, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Timer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Timer(a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Timer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Timer(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_DigitalElevationModel.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DigitalElevationModel.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DigitalElevationModel.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
        case 5:
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  if (!v4)
  {
    uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
    if ((*(unsigned char *)(v5 + v10[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    closure #7 in CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DigitalElevationModel.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DigitalElevationModel@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1[9];
  uint64_t v11 = a2 + a1[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1[11];
  uint64_t v14 = a2 + a1[10];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DigitalElevationModel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_DirectionOfTravel.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DirectionOfTravel.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DirectionOfTravel.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 11:
        case 12:
        case 13:
        case 14:
          type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  if (!v4)
  {
    uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
    if ((*(unsigned char *)(v5 + v10[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    closure #6 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    closure #7 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    closure #8 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    closure #9 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #10 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #11 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #12 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #13 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #14 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 52) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #10 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 56) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #11 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 60)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #12 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 64)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #13 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 68)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #14 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 72)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DirectionOfTravel.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DirectionOfTravel@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1[9];
  uint64_t v11 = a2 + a1[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1[11];
  uint64_t v14 = a2 + a1[10];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = a1[13];
  uint64_t v17 = a2 + a1[12];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  uint64_t v19 = a1[15];
  uint64_t v20 = a2 + a1[14];
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  *(unsigned char *)(a2 + v19) = 2;
  uint64_t v21 = a1[17];
  *(unsigned char *)(a2 + a1[16]) = 2;
  *(unsigned char *)(a2 + v21) = 2;
  *(unsigned char *)(a2 + a1[18]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DirectionOfTravel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MapVector.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MapVector.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MapVector.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v8, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v16 = *v15;
  LOBYTE(v15) = *((unsigned char *)v15 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v11 = v16;
  *(unsigned char *)(v11 + 4) = (_BYTE)v15;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  swift_release();
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MapVector._StorageClass.__deallocating_deinit()
{
  return CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
}

uint64_t CLP_LogEntry_PrivateData_MapVector.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v7) {
        return swift_release();
      }
      if (v6 == 3)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
        uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel;
        uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel;
        goto LABEL_7;
      }
      if (v6 == 2) {
        break;
      }
      if (v6 == 1)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v10 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
LABEL_7:
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v10, v9);
        uint64_t v11 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
        uint64_t v2 = v11;
        swift_endAccess();
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    uint64_t v11 = v2;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #1 in CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:), &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in closure #1 in CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:));
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), void *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = v7;
  uint64_t v16 = *(void *)(v12 + *(int *)(a4(0) + 20));
  uint64_t v17 = swift_retain();
  a5(v17, a1, a2, a3);
  if (v8) {
    return swift_release();
  }
  uint64_t v18 = v16 + *a6;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  a7(v16, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t static CLP_LogEntry_PrivateData_MapVector.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MapVector.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_MapVector.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a2;
  uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v54 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v48 = (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DirectionOfTravel?, CLP_LogEntry_PrivateData_DirectionOfTravel?));
  MEMORY[0x270FA5388](v49);
  uint64_t v51 = (uint64_t)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  int v53 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v52 = (char *)&v48 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v55 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v22 = a1;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = v56;
  uint64_t v25 = v56
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v26 = (uint64_t)&v16[*(int *)(v14 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v27((uint64_t)v16, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v28 = v22;
    if (v27(v26, 1, v9) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  uint64_t v28 = v22;
  uint64_t v29 = v55;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v27(v26, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v26, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  char v31 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v29, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v31 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  int v32 = (int *)(v28
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v33 = *v32;
  char v34 = *((unsigned char *)v32 + 4);
  uint64_t v35 = v24
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((v34 & 1) == 0)
  {
    uint64_t v36 = v54;
    uint64_t v37 = (uint64_t)v53;
    uint64_t v38 = (uint64_t)v52;
    if ((*(unsigned char *)(v35 + 4) & 1) == 0 && v33 == *(_DWORD *)v35) {
      goto LABEL_16;
    }
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  uint64_t v36 = v54;
  uint64_t v37 = (uint64_t)v53;
  uint64_t v38 = (uint64_t)v52;
  if ((*(unsigned char *)(v35 + 4) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_16:
  uint64_t v39 = v28
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  uint64_t v40 = v24
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  uint64_t v41 = v51;
  uint64_t v42 = v51 + *(int *)(v49 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  uint64_t v43 = v41;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  int v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  uint64_t v45 = v50;
  if (v44(v43, 1, v50) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
    if (v44(v42, 1, v45) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
      return 1;
    }
    goto LABEL_21;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  if (v44(v42, 1, v45) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v37, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
LABEL_21:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DirectionOfTravel?, CLP_LogEntry_PrivateData_DirectionOfTravel?));
    return 0;
  }
  uint64_t v46 = v48;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v42, v48, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  char v47 = specialized static CLP_LogEntry_PrivateData_DirectionOfTravel.== infix(_:_:)(v37, v46);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v46, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v37, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  return (v47 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_MapVector.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MapVector@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MapVector._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MapVector()
{
  return CLP_LogEntry_PrivateData_MapVector.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MapVector(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapVector@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MapVector(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapVector(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_TunnelBridgeAssistance.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TunnelBridgeAssistance.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TunnelBridgeAssistance.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_8;
        case 5:
        case 6:
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  if (!v4)
  {
    uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
    if ((*(unsigned char *)(v5 + v10[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    closure #6 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 44)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 48)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1[9];
  uint64_t v11 = a2 + a1[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(unsigned char *)(a2 + v10) = 2;
  uint64_t v12 = a1[11];
  *(unsigned char *)(a2 + a1[10]) = 2;
  *(unsigned char *)(a2 + v12) = 2;
  *(unsigned char *)(a2 + a1[12]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_TunnelBridgeNotification.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TunnelBridgeNotification.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TunnelBridgeNotification.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance;
    uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_TunnelBridgeNotification.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_TunnelBridgeNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Int CLP_LogEntry_PrivateData_TunnelBridgeNotification.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return CLP_LogEntry_PrivateData_TunnelBridgeNotification.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_TunnelEndPointAssistance.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 10:
        case 12:
        case 13:
        case 14:
        case 15:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_11;
        case 7:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_11;
        case 11:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_11:
          uint64_t v2 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_TunnelEndPointAssistance.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v17 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  if (*v17 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  if ((*(unsigned char *)(v20 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v21 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  if (*v21 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v22 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v23 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  if ((*(unsigned char *)(v24 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  if ((*(unsigned char *)(v25 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_TunnelEndPointAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, closure #1 in static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v74 = (uint64_t)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v75 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v74 - v13;
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v15, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = v76;
  uint64_t v17 = v76
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  uint64_t v18 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v9, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    int v20 = v19(v18, 1, v3);
    uint64_t v21 = a1;
    if (v20 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_10;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  uint64_t v22 = v75;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v19(v18, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v22, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v24 = v74;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v18, v74, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v21 = a1;
  swift_retain();
  swift_retain();
  char v25 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v22, v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v22, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v25 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_10:
  uint64_t v26 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  double v27 = *(double *)v26;
  LOBYTE(v26) = *(unsigned char *)(v26 + 8);
  uint64_t v28 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  if (v26)
  {
    if ((*(unsigned char *)(v28 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v28 + 8) & 1) != 0 || v27 != *(double *)v28)
  {
    goto LABEL_7;
  }
  uint64_t v29 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  double v30 = *(double *)v29;
  LOBYTE(v29) = *(unsigned char *)(v29 + 8);
  uint64_t v31 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  if (v29)
  {
    if ((*(unsigned char *)(v31 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v31 + 8) & 1) != 0 || v30 != *(double *)v31)
  {
    goto LABEL_7;
  }
  uint64_t v32 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  double v33 = *(double *)v32;
  LOBYTE(v32) = *(unsigned char *)(v32 + 8);
  uint64_t v34 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  if (v32)
  {
    if ((*(unsigned char *)(v34 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v34 + 8) & 1) != 0 || v33 != *(double *)v34)
  {
    goto LABEL_7;
  }
  uint64_t v35 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  double v36 = *(double *)v35;
  LOBYTE(v35) = *(unsigned char *)(v35 + 8);
  uint64_t v37 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  if (v35)
  {
    if ((*(unsigned char *)(v37 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v37 + 8) & 1) != 0 || v36 != *(double *)v37)
  {
    goto LABEL_7;
  }
  uint64_t v38 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  double v39 = *(double *)v38;
  LOBYTE(v38) = *(unsigned char *)(v38 + 8);
  uint64_t v40 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  if (v38)
  {
    if ((*(unsigned char *)(v40 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v40 + 8) & 1) != 0 || v39 != *(double *)v40)
  {
    goto LABEL_7;
  }
  uint64_t v41 = (unsigned __int8 *)(v21
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v42 = *v41;
  uint64_t v43 = (unsigned __int8 *)(v16
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v44 = *v43;
  if (v42 == 3)
  {
    if (v44 != 3) {
      goto LABEL_7;
    }
  }
  else if (v44 == 3 || v42 != v44)
  {
    goto LABEL_7;
  }
  uint64_t v45 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  double v46 = *(double *)v45;
  LOBYTE(v45) = *(unsigned char *)(v45 + 8);
  uint64_t v47 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  if (v45)
  {
    if ((*(unsigned char *)(v47 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v47 + 8) & 1) != 0 || v46 != *(double *)v47)
  {
    goto LABEL_7;
  }
  uint64_t v48 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  double v49 = *(double *)v48;
  LOBYTE(v48) = *(unsigned char *)(v48 + 8);
  uint64_t v50 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  if (v48)
  {
    if ((*(unsigned char *)(v50 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v50 + 8) & 1) != 0 || v49 != *(double *)v50)
  {
    goto LABEL_7;
  }
  uint64_t v51 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  double v52 = *(double *)v51;
  LOBYTE(v51) = *(unsigned char *)(v51 + 8);
  uint64_t v53 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  if (v51)
  {
    if (*(unsigned char *)(v53 + 8)) {
      goto LABEL_55;
    }
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(unsigned char *)(v53 + 8) & 1) != 0 || v52 != *(double *)v53) {
    goto LABEL_7;
  }
LABEL_55:
  uint64_t v54 = (unsigned __int8 *)(v21
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  int v55 = *v54;
  uint64_t v56 = (unsigned __int8 *)(v16
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  int v57 = *v56;
  if (v55 == 2)
  {
    if (v57 != 2) {
      goto LABEL_7;
    }
  }
  else if (v57 == 2 || ((((v57 & 1) == 0) ^ v55) & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v58 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  double v59 = *(double *)v58;
  LOBYTE(v58) = *(unsigned char *)(v58 + 8);
  uint64_t v60 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  if (v58)
  {
    if ((*(unsigned char *)(v60 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v60 + 8) & 1) != 0 || v59 != *(double *)v60)
  {
    goto LABEL_7;
  }
  uint64_t v61 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  double v62 = *(double *)v61;
  LOBYTE(v61) = *(unsigned char *)(v61 + 8);
  uint64_t v63 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  if (v61)
  {
    if ((*(unsigned char *)(v63 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v63 + 8) & 1) != 0 || v62 != *(double *)v63)
  {
    goto LABEL_7;
  }
  uint64_t v64 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  double v65 = *(double *)v64;
  LOBYTE(v64) = *(unsigned char *)(v64 + 8);
  uint64_t v66 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  if (v64)
  {
    if ((*(unsigned char *)(v66 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v66 + 8) & 1) != 0 || v65 != *(double *)v66)
  {
    goto LABEL_7;
  }
  uint64_t v67 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  double v68 = *(double *)v67;
  char v69 = *(unsigned char *)(v67 + 8);
  swift_release();
  uint64_t v70 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  double v71 = *(double *)v70;
  int v72 = *(unsigned __int8 *)(v70 + 8);
  swift_release();
  if (v69)
  {
    if (!v72) {
      return 0;
    }
  }
  else
  {
    if (v68 == v71) {
      char v73 = v72;
    }
    else {
      char v73 = 1;
    }
    if (v73) {
      return 0;
    }
  }
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_TunnelEndPoint.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TunnelEndPoint.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TunnelEndPoint.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance;
    uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_TunnelEndPoint.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_TunnelEndPoint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

Swift::Int CLP_LogEntry_PrivateData_TunnelEndPoint.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TunnelEndPoint@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return CLP_LogEntry_PrivateData_TunnelEndPoint.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TunnelEndPoint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MapsRouteHintData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MapsRouteHintData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MapsRouteHintData.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
        break;
      case 2:
      case 3:
      case 4:
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[9] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_MapsRouteHintData.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return CLP_LogEntry_PrivateData_MapsRouteHintData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return CLP_LogEntry_PrivateData_MapsRouteHintData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MapsRouteHintData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapsRouteHintData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MapsRouteHintData(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapsRouteHintData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MapMatchingRouteHint.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MapMatchingRouteHint.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MapMatchingRouteHint.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(v3, a1, a2, a3);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
    uint64_t v10 = v9;
    if (*(unsigned char *)(v3 + *(int *)(v9 + 32)) != 7)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3 + *(int *)(v10 + 36)) != 7)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_MapMatchingRouteHint.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a2 + a1[7], 1, 1, v5);
  uint64_t v8 = a1[9];
  *((unsigned char *)a2 + a1[8]) = 7;
  *((unsigned char *)a2 + v8) = 7;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return CLP_LogEntry_PrivateData_MapMatchingRouteHint.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.protoMessageName.getter()
{
  return 0xD00000000000003ALL;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_12;
        case 3:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_12;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType();
          goto LABEL_11;
        case 6:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
          goto LABEL_12;
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_12;
        case 9:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType();
LABEL_11:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_12:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    closure #4 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, 2);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
    uint64_t v10 = v9;
    if ((*((unsigned char *)v3 + *(int *)(v9 + 36) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    if (*((unsigned char *)v3 + *(int *)(v10 + 40)) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #7 in CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
    if (*(void *)(*v3 + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(v3[1] + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
    closure #7 in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)((uint64_t)v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  v17[0] = a6;
  v17[1] = a3;
  v17[3] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a5(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v15 + 32), (uint64_t)v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, (uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 52)) != 2)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = v4;
  UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + a1[7];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v7)((char *)a2 + a1[8], 1, 1, v6);
  uint64_t v9 = a1[10];
  uint64_t v10 = (char *)a2 + a1[9];
  *(_DWORD *)uint64_t v10 = 0;
  v10[4] = 1;
  *((unsigned char *)a2 + v9) = 5;
  uint64_t v11 = a1[12];
  uint64_t v12 = (char *)a2 + a1[11];
  *(_DWORD *)uint64_t v12 = 0;
  v12[4] = 1;
  *((unsigned char *)a2 + v11) = 2;
  *((unsigned char *)a2 + a1[13]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_ReachabilityState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReachabilityState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReachabilityState.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  uint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + v3[6]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReachabilityState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReachabilityState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 5;
  *(unsigned char *)(a2 + v5) = 5;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReachabilityState()
{
  return CLP_LogEntry_PrivateData_ReachabilityState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReachabilityState()
{
  return CLP_LogEntry_PrivateData_ReachabilityState.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReachabilityState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReachabilityState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReachabilityState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReachabilityState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Battery.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Battery.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Battery.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t CLP_LogEntry_PrivateData_Battery._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Battery.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 2:
        case 3:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Battery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v4)
  {
    if (*(unsigned char *)(v5 + v10[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
    closure #6 in CLP_LogEntry_PrivateData_Battery.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 36)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_Battery.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_Battery.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Battery, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Battery@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v7 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v7) = 5;
  uint64_t v8 = a1[10];
  *(unsigned char *)(a2 + a1[9]) = 2;
  uint64_t v9 = a2 + v8;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Battery()
{
  return CLP_LogEntry_PrivateData_Battery.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Battery.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Battery@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Battery(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_DeviceStatus.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DeviceStatus.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DeviceStatus.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_11;
        case 2:
        case 11:
        case 12:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_14;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_14;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState;
          goto LABEL_11;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery;
LABEL_11:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v11, v10);
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_14;
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 13:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_14:
          uint64_t v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  if (*v13 != 20)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v14 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  if (*v14 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  if (*v15 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  if (*v16 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v17 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  if (*v17 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v18 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  if (*v18 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  if ((*(unsigned char *)(v20 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v21 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  if (*v21 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, closure #1 in static CLP_LogEntry_PrivateData_DeviceStatus.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_DeviceStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v125 = a2;
  uint64_t v113 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v123 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  uint64_t v109 = (uint64_t)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Battery?, CLP_LogEntry_PrivateData_Battery?));
  MEMORY[0x270FA5388](v112);
  uint64_t v114 = (uint64_t)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v110 = (uint64_t)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v116 = (uint64_t)&v109 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  uint64_t v118 = *(void *)(v9 - 8);
  uint64_t v119 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v111 = (uint64_t)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReachabilityState?, CLP_LogEntry_PrivateData_ReachabilityState?));
  MEMORY[0x270FA5388](v117);
  uint64_t v120 = (uint64_t)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v115 = (uint64_t)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v121 = (uint64_t)&v109 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v122 = (uint64_t)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v124 = (uint64_t)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  double v27 = (char *)&v109 - v26;
  uint64_t v28 = a1;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v29, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = v125;
  uint64_t v31 = v125
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v32 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  double v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v33((uint64_t)v22, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    int v34 = v33(v32, 1, v16);
    uint64_t v35 = v30;
    uint64_t v36 = v28;
    if (v34 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v37 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v38 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v37);
    goto LABEL_8;
  }
  uint64_t v36 = v28;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v33(v32, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v124, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v40 = v122;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v32, v122, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  uint64_t v35 = v30;
  swift_retain();
  uint64_t v41 = v124;
  char v42 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v124, v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v42 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v43 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v44 = *v43;
  char v45 = *((unsigned char *)v43 + 4);
  uint64_t v46 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if (v45)
  {
    uint64_t v47 = v123;
    if ((*(unsigned char *)(v46 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v47 = v123;
    if ((*(unsigned char *)(v46 + 4) & 1) != 0 || v44 != *(_DWORD *)v46) {
      goto LABEL_8;
    }
  }
  uint64_t v48 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  int v49 = *v48;
  uint64_t v50 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  int v51 = *v50;
  if (v49 == 20)
  {
    uint64_t v52 = v121;
    if (v51 != 20) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v52 = v121;
    if (v51 == 20 || v49 != v51) {
      goto LABEL_8;
    }
  }
  uint64_t v53 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  uint64_t v54 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  uint64_t v55 = v120;
  uint64_t v56 = v120 + *(int *)(v117 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v120, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  uint64_t v57 = v54;
  uint64_t v58 = v55;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  double v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
  uint64_t v60 = v55;
  uint64_t v61 = v119;
  if (v59(v60, 1, v119) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
    if (v59(v56, 1, v61) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
      goto LABEL_28;
    }
LABEL_26:
    uint64_t v37 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReachabilityState?, CLP_LogEntry_PrivateData_ReachabilityState?);
LABEL_34:
    uint64_t v38 = v58;
    goto LABEL_7;
  }
  uint64_t v62 = v115;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  if (v59(v56, 1, v61) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v121, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
    goto LABEL_26;
  }
  uint64_t v63 = v111;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v56, v111, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  char v64 = specialized static CLP_LogEntry_PrivateData_ReachabilityState.== infix(_:_:)(v62, v63);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v63, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v121, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  if ((v64 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_28:
  uint64_t v65 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  uint64_t v66 = v116;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  uint64_t v67 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  uint64_t v68 = v114;
  uint64_t v69 = v114 + *(int *)(v112 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  uint64_t v70 = v67;
  uint64_t v58 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  double v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  uint64_t v72 = v68;
  uint64_t v73 = v113;
  if (v71(v72, 1, v113) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
    if (v71(v69, 1, v73) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  uint64_t v74 = v110;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  if (v71(v69, 1, v73) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v74, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
LABEL_33:
    uint64_t v37 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Battery?, CLP_LogEntry_PrivateData_Battery?);
    goto LABEL_34;
  }
  uint64_t v75 = v109;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v69, v109, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  char v76 = specialized static CLP_LogEntry_PrivateData_Battery.== infix(_:_:)(v74, v75);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v75, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v74, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  if ((v76 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_36:
  char v77 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  int v78 = *v77;
  uint64_t v79 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  int v80 = *v79;
  if (v78 == 2)
  {
    if (v80 != 2) {
      goto LABEL_8;
    }
  }
  else if (v80 == 2 || ((((v80 & 1) == 0) ^ v78) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v81 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  int v82 = *v81;
  uint64_t v83 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  int v84 = *v83;
  if (v82 == 2)
  {
    if (v84 != 2) {
      goto LABEL_8;
    }
  }
  else if (v84 == 2 || ((((v84 & 1) == 0) ^ v82) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v85 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  int v86 = *v85;
  uint64_t v87 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  int v88 = *v87;
  if (v86 == 2)
  {
    if (v88 != 2) {
      goto LABEL_8;
    }
  }
  else if (v88 == 2 || ((((v88 & 1) == 0) ^ v86) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v89 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  int v90 = *v89;
  int v91 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  int v92 = *v91;
  if (v90 == 2)
  {
    if (v92 != 2) {
      goto LABEL_8;
    }
  }
  else if (v92 == 2 || ((((v92 & 1) == 0) ^ v90) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v93 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  int v94 = *v93;
  uint64_t v95 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  int v96 = *v95;
  if (v94 == 2)
  {
    if (v96 == 2) {
      goto LABEL_61;
    }
LABEL_8:
    swift_release();
    swift_release();
    return 0;
  }
  if (v96 == 2 || ((((v96 & 1) == 0) ^ v94) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_61:
  char v97 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
  swift_beginAccess();
  int v98 = *v97;
  char v99 = *((unsigned char *)v97 + 4);
  uint64_t v100 = v35
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  if (v99)
  {
    if ((*(unsigned char *)(v100 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(v100 + 4) & 1) != 0 || v98 != *(_DWORD *)v100)
  {
    goto LABEL_8;
  }
  uint64_t v101 = (int *)(v36
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
  swift_beginAccess();
  int v102 = *v101;
  char v103 = *((unsigned char *)v101 + 4);
  uint64_t v104 = v35
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  if (v103)
  {
    if ((*(unsigned char *)(v104 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(v104 + 4) & 1) != 0 || v102 != *(_DWORD *)v104)
  {
    goto LABEL_8;
  }
  uint64_t v105 = (unsigned __int8 *)(v36
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  int v106 = *v105;
  swift_release();
  uint64_t v107 = (unsigned __int8 *)(v35
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  int v108 = *v107;
  swift_release();
  if (v106 == 2)
  {
    if (v108 != 2) {
      return 0;
    }
  }
  else if (v108 == 2 || ((((v108 & 1) == 0) ^ v106) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_DeviceStatus.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DeviceStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DeviceStatus()
{
  return CLP_LogEntry_PrivateData_DeviceStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DeviceStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_SignalEnvironment.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SignalEnvironment.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SignalEnvironment.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
  if (!v4)
  {
    uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
    if (*(unsigned char *)(v3 + v6[6]) != 8)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3 + v6[7]) != 8)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + v6[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SignalEnvironment.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SignalEnvironment@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  *(unsigned char *)(a2 + a1[6]) = 8;
  *(unsigned char *)(a2 + v7) = 8;
  uint64_t v8 = a2 + a1[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return CLP_LogEntry_PrivateData_SignalEnvironment.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SignalEnvironment.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironment@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_SignalEnvironmentInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SignalEnvironmentInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SignalEnvironmentInfo.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel();
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SignalEnvironmentInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus(a1, 8, 4, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MagSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MagSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MagSample.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v7 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          a4(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
          a4(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MagSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MagSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MagSample.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MagSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MagSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MagSample(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MagSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Magnetometer.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Magnetometer.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Magnetometer.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_Magnetometer.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Magnetometer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_Magnetometer.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Magnetometer()
{
  return CLP_LogEntry_PrivateData_Magnetometer.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Magnetometer.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Magnetometer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Reset.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Reset.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Reset.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_PrivateData_Reset._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Reset.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Timer.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t CLP_LogEntry_PrivateData_Timer.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v7 & 1) == 0)
    {
      if (result == 1)
      {
        a4(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Reset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Timer.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t CLP_LogEntry_PrivateData_Timer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v4, a1, a2, a3, a4);
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_Reset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_Timer.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Reset) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Reset.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Reset, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Timer@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1 + 20);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Reset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Reset@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Reset(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Reset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_AccelerometerPace.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_AccelerometerPace.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_AccelerometerPace.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeStamp.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t static CLP_LogEntry_PrivateData_AccelerometerPace.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_AccelerometerPace.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_AccelerometerPace(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccelerometerPace@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_AccelerometerPace(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccelerometerPace(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_FalseStepDetectorState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_FalseStepDetectorState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_FalseStepDetectorState.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
        type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t v10 = (int *)result;
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v4)
  {
    if (*(unsigned char *)(v5 + v10[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    closure #6 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 40)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_FalseStepDetectorState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  uint64_t v7 = a1[10];
  *(unsigned char *)(a2 + a1[9]) = 2;
  *(unsigned char *)(a2 + v7) = 2;
  uint64_t v8 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  *(unsigned char *)(a2 + v8) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return CLP_LogEntry_PrivateData_FalseStepDetectorState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_FalseStepDetectorState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_StepCountEntry.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_StepCountEntry.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_StepCountEntry.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v110 = (uint64_t)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v108 = (uint64_t)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v89 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1, 1, v11);
  uint64_t v90 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v12();
  uint64_t v91 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  v12();
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  uint64_t v92 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  uint64_t v93 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  uint64_t v94 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  uint64_t v95 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  uint64_t v96 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 4) = 1;
  uint64_t v22 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  char v97 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  void *v22 = 0;
  v22[1] = 0;
  int v98 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  uint64_t v23 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  unsigned char *v23 = 2;
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  char v99 = v23;
  uint64_t v100 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  uint64_t v101 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 4) = 1;
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  uint64_t v102 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 4) = 1;
  uint64_t v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  uint64_t v103 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 4) = 1;
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  uint64_t v104 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + 4) = 1;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  uint64_t v105 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)uint64_t v30 = 0;
  *(unsigned char *)(v30 + 4) = 1;
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  uint64_t v106 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)uint64_t v31 = 0;
  *(unsigned char *)(v31 + 4) = 1;
  uint64_t v107 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  uint64_t v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  uint64_t v109 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v35 = v89;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v37 = v90;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v39 = v91;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  LODWORD(v39) = *(_DWORD *)v40;
  LOBYTE(v40) = *(unsigned char *)(v40 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v13 = v39;
  *(unsigned char *)(v13 + 4) = v40;
  uint64_t v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
  swift_beginAccess();
  uint64_t v42 = *v41;
  LOBYTE(v41) = *((unsigned char *)v41 + 8);
  swift_beginAccess();
  *(void *)uint64_t v14 = v42;
  *(unsigned char *)(v14 + 8) = (_BYTE)v41;
  uint64_t v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
  swift_beginAccess();
  uint64_t v44 = *v43;
  LOBYTE(v43) = *((unsigned char *)v43 + 8);
  swift_beginAccess();
  *(void *)uint64_t v15 = v44;
  *(unsigned char *)(v15 + 8) = (_BYTE)v43;
  uint64_t v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  LODWORD(v44) = *(_DWORD *)v45;
  LOBYTE(v45) = *(unsigned char *)(v45 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v44;
  *(unsigned char *)(v16 + 4) = v45;
  uint64_t v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  LODWORD(v44) = *(_DWORD *)v46;
  LOBYTE(v46) = *(unsigned char *)(v46 + 4);
  uint64_t v47 = v92;
  swift_beginAccess();
  *(_DWORD *)uint64_t v47 = v44;
  *(unsigned char *)(v47 + 4) = v46;
  uint64_t v48 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
  swift_beginAccess();
  uint64_t v49 = *v48;
  LOBYTE(v48) = *((unsigned char *)v48 + 8);
  uint64_t v50 = v93;
  swift_beginAccess();
  *(void *)uint64_t v50 = v49;
  *(unsigned char *)(v50 + 8) = (_BYTE)v48;
  int v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
  swift_beginAccess();
  uint64_t v52 = *v51;
  LOBYTE(v51) = *((unsigned char *)v51 + 8);
  uint64_t v53 = v94;
  swift_beginAccess();
  *(void *)uint64_t v53 = v52;
  *(unsigned char *)(v53 + 8) = (_BYTE)v51;
  uint64_t v54 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
  swift_beginAccess();
  uint64_t v55 = *v54;
  LOBYTE(v54) = *((unsigned char *)v54 + 8);
  uint64_t v56 = v95;
  swift_beginAccess();
  *(void *)uint64_t v56 = v55;
  *(unsigned char *)(v56 + 8) = (_BYTE)v54;
  uint64_t v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  LODWORD(v55) = *(_DWORD *)v57;
  LOBYTE(v57) = *(unsigned char *)(v57 + 4);
  uint64_t v58 = v96;
  swift_beginAccess();
  *(_DWORD *)uint64_t v58 = v55;
  *(unsigned char *)(v58 + 4) = v57;
  double v59 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  uint64_t v62 = v97;
  swift_beginAccess();
  *uint64_t v62 = v61;
  v62[1] = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  LOBYTE(v63) = *v63;
  char v64 = v98;
  swift_beginAccess();
  *char v64 = (_BYTE)v63;
  uint64_t v65 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  LOBYTE(v65) = *v65;
  uint64_t v66 = v99;
  swift_beginAccess();
  unsigned char *v66 = (_BYTE)v65;
  uint64_t v67 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  uint64_t v68 = v108;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  uint64_t v69 = v100;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v68, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  swift_endAccess();
  uint64_t v70 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v70;
  LOBYTE(v70) = *(unsigned char *)(v70 + 4);
  uint64_t v71 = v101;
  swift_beginAccess();
  *(_DWORD *)uint64_t v71 = v68;
  *(unsigned char *)(v71 + 4) = v70;
  uint64_t v72 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v72;
  LOBYTE(v72) = *(unsigned char *)(v72 + 4);
  uint64_t v73 = v102;
  swift_beginAccess();
  *(_DWORD *)uint64_t v73 = v68;
  *(unsigned char *)(v73 + 4) = v72;
  uint64_t v74 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v74;
  LOBYTE(v74) = *(unsigned char *)(v74 + 4);
  uint64_t v75 = v103;
  swift_beginAccess();
  *(_DWORD *)uint64_t v75 = v68;
  *(unsigned char *)(v75 + 4) = v74;
  uint64_t v76 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v76;
  LOBYTE(v76) = *(unsigned char *)(v76 + 4);
  uint64_t v77 = v104;
  swift_beginAccess();
  *(_DWORD *)uint64_t v77 = v68;
  *(unsigned char *)(v77 + 4) = v76;
  uint64_t v78 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v78;
  LOBYTE(v78) = *(unsigned char *)(v78 + 4);
  uint64_t v79 = v105;
  swift_beginAccess();
  *(_DWORD *)uint64_t v79 = v68;
  *(unsigned char *)(v79 + 4) = v78;
  uint64_t v80 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v80;
  LOBYTE(v80) = *(unsigned char *)(v80 + 4);
  uint64_t v81 = v106;
  swift_beginAccess();
  *(_DWORD *)uint64_t v81 = v68;
  *(unsigned char *)(v81 + 4) = v80;
  int v82 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  LOBYTE(v82) = *v82;
  uint64_t v83 = v107;
  swift_beginAccess();
  *uint64_t v83 = (_BYTE)v82;
  uint64_t v84 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  uint64_t v85 = v110;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84, v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  swift_release();
  uint64_t v86 = v109;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v85, v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_bridgeObjectRelease();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v10 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_16;
        case 4:
        case 7:
        case 8:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_17;
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_17;
        case 12:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_17;
        case 13:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_17;
        case 14:
        case 15:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_17;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace;
          goto LABEL_16;
        case 23:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_17;
        case 24:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState;
LABEL_16:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_17:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  if ((*(unsigned char *)(v20 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID;
  swift_beginAccess();
  if (*(void *)(v21 + 8))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  if (*v22 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v23 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  if (*v23 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  closure #16 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  if ((*(unsigned char *)(v24 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  if ((*(unsigned char *)(v25 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v26 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  if ((*(unsigned char *)(v26 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v27 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  if ((*(unsigned char *)(v27 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v28 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  if ((*(unsigned char *)(v28 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v29 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  if ((*(unsigned char *)(v29 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v30 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  if (*v30 != 6)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #24 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #16 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t closure #24 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t static CLP_LogEntry_PrivateData_StepCountEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_StepCountEntry.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_StepCountEntry.== infix(_:_:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t v176 = *(void *)(v4 - 8);
  uint64_t v177 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v178 = &v171[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FalseStepDetectorState?, CLP_LogEntry_PrivateData_FalseStepDetectorState?));
  MEMORY[0x270FA5388](v173);
  uint64_t v179 = &v171[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v175 = &v171[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v174 = &v171[-v10];
  uint64_t v185 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  uint64_t v183 = *(void *)(v185 - 8);
  MEMORY[0x270FA5388](v185);
  uint64_t v180 = &v171[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_AccelerometerPace?, CLP_LogEntry_PrivateData_AccelerometerPace?));
  MEMORY[0x270FA5388](v182);
  uint64_t v186 = &v171[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v181 = &v171[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v184 = &v171[-v16];
  uint64_t v196 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v17 = *(void *)(v196 - 8);
  MEMORY[0x270FA5388](v196);
  uint64_t v192 = &v171[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v188 = &v171[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v191 = &v171[-v23];
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = &v171[-v24];
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v187 = &v171[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v190 = &v171[-v30];
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v189 = &v171[-v32];
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v194 = &v171[-v34];
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v195 = &v171[-v36];
  MEMORY[0x270FA5388](v35);
  uint64_t v38 = &v171[-v37];
  uint64_t v197 = a1;
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, (uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v40 = a2;
  uint64_t v41 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp];
  swift_beginAccess();
  uint64_t v193 = v19;
  uint64_t v42 = (uint64_t)&v25[*(int *)(v19 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, (uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v44 = v196;
  if (((unsigned int (*)(unsigned char *, uint64_t))v43)(v25, 1) == 1)
  {
    uint64_t v45 = v197;
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v46 = v40;
    uint64_t v47 = v45;
    if (v43(v42, 1, v44) == 1)
    {
      uint64_t v48 = v44;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v51 = (uint64_t)v25;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_15;
  }
  uint64_t v49 = v197;
  uint64_t v50 = v40;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, (uint64_t)v195, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v43(v42, 1, v44) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v195, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v52 = v42;
  uint64_t v53 = v192;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v52, (uint64_t)v192, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v47 = v49;
  swift_retain();
  swift_retain();
  uint64_t v54 = v195;
  int v172 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v195, (uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v55 = (uint64_t)v54;
  uint64_t v46 = v50;
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v48 = v196;
  if ((v172 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v56 = v47
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  uint64_t v57 = v194;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, (uint64_t)v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v58 = (uint64_t)&v46[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime];
  swift_beginAccess();
  double v59 = v191;
  uint64_t v60 = (uint64_t)&v191[*(int *)(v193 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v57, (uint64_t)v191, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v43((uint64_t)v59, 1, v48) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    unsigned int v61 = v43(v60, 1, v48);
    uint64_t v62 = v197;
    if (v61 == 1)
    {
      uint64_t v195 = v46;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  uint64_t v63 = v189;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, (uint64_t)v189, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v43(v60, 1, v48) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    uint64_t v51 = (uint64_t)v59;
    goto LABEL_14;
  }
  uint64_t v195 = v46;
  uint64_t v65 = v192;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v60, (uint64_t)v192, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v66 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v63, (uint64_t)v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v62 = v197;
  if ((v66 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v67 = v62
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  uint64_t v68 = v190;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, (uint64_t)v190, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v69 = (uint64_t)&v195[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime];
  swift_beginAccess();
  uint64_t v70 = v188;
  uint64_t v71 = (uint64_t)&v188[*(int *)(v193 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v68, (uint64_t)v188, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v43((uint64_t)v70, 1, v48) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v43(v71, 1, v48) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v70, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_26;
    }
LABEL_23:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v70, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_15;
  }
  uint64_t v72 = v187;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v70, (uint64_t)v187, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v43(v71, 1, v48) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v190, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_23;
  }
  uint64_t v73 = v192;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v71, (uint64_t)v192, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v74 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v72, (uint64_t)v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v190, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v70, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v74 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_26:
  uint64_t v75 = (int *)(v62
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
  swift_beginAccess();
  int v76 = *v75;
  char v77 = *((unsigned char *)v75 + 4);
  uint64_t v78 = &v195[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count];
  swift_beginAccess();
  if (v77)
  {
    if ((v78[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v78[4] & 1) != 0 || v76 != *(_DWORD *)v78)
  {
    goto LABEL_15;
  }
  uint64_t v79 = v62
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  double v80 = *(double *)v79;
  char v81 = *(unsigned char *)(v79 + 8);
  int v82 = v195;
  uint64_t v83 = (double *)&v195[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM];
  swift_beginAccess();
  if (v81)
  {
    if (((_BYTE)v83[1] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (((_BYTE)v83[1] & 1) != 0 || v80 != *v83)
  {
    goto LABEL_15;
  }
  uint64_t v84 = v62
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  double v85 = *(double *)v84;
  char v86 = *(unsigned char *)(v84 + 8);
  uint64_t v87 = (double *)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM];
  swift_beginAccess();
  if (v86)
  {
    if (((_BYTE)v87[1] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (((_BYTE)v87[1] & 1) != 0 || v85 != *v87)
  {
    goto LABEL_15;
  }
  uint64_t v88 = (int *)(v62
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
  swift_beginAccess();
  int v89 = *v88;
  char v90 = *((unsigned char *)v88 + 4);
  uint64_t v91 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended];
  swift_beginAccess();
  if (v90)
  {
    if ((v91[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v91[4] & 1) != 0 || v89 != *(_DWORD *)v91)
  {
    goto LABEL_15;
  }
  uint64_t v92 = (int *)(v62
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
  swift_beginAccess();
  int v93 = *v92;
  char v94 = *((unsigned char *)v92 + 4);
  uint64_t v95 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended];
  swift_beginAccess();
  if (v94)
  {
    if ((v95[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v95[4] & 1) != 0 || v93 != *(_DWORD *)v95)
  {
    goto LABEL_15;
  }
  uint64_t v96 = v62
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  double v97 = *(double *)v96;
  char v98 = *(unsigned char *)(v96 + 8);
  char v99 = (double *)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm];
  swift_beginAccess();
  if (v98)
  {
    if ((_BYTE)v99[1]) {
      goto LABEL_56;
    }
LABEL_15:
    swift_release();
    swift_release();
    return 0;
  }
  if (((_BYTE)v99[1] & 1) != 0 || v97 != *v99) {
    goto LABEL_15;
  }
LABEL_56:
  uint64_t v100 = v62
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  double v101 = *(double *)v100;
  char v102 = *(unsigned char *)(v100 + 8);
  uint64_t v103 = (double *)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence];
  swift_beginAccess();
  if (v102)
  {
    if (((_BYTE)v103[1] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (((_BYTE)v103[1] & 1) != 0 || v101 != *v103)
  {
    goto LABEL_15;
  }
  uint64_t v104 = v62
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  double v105 = *(double *)v104;
  char v106 = *(unsigned char *)(v104 + 8);
  uint64_t v107 = (double *)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime];
  swift_beginAccess();
  if (v106)
  {
    if (((_BYTE)v107[1] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (((_BYTE)v107[1] & 1) != 0 || v105 != *v107)
  {
    goto LABEL_15;
  }
  uint64_t v108 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
  swift_beginAccess();
  int v109 = *v108;
  char v110 = *((unsigned char *)v108 + 4);
  uint64_t v111 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID];
  swift_beginAccess();
  if (v110)
  {
    if ((v111[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v111[4] & 1) != 0 || v109 != *(_DWORD *)v111)
  {
    goto LABEL_15;
  }
  uint64_t v112 = (uint64_t *)(v62
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  uint64_t v113 = *v112;
  uint64_t v114 = v112[1];
  uint64_t v115 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID];
  swift_beginAccess();
  uint64_t v116 = v115[1];
  if (v114)
  {
    if (!v116 || (v113 != *v115 || v114 != v116) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (v116)
  {
    goto LABEL_15;
  }
  uint64_t v117 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  int v118 = *v117;
  uint64_t v119 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance];
  swift_beginAccess();
  int v120 = *v119;
  if (v118 == 2)
  {
    if (v120 != 2) {
      goto LABEL_15;
    }
  }
  else if (v120 == 2 || ((((v120 & 1) == 0) ^ v118) & 1) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v121 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  int v122 = *v121;
  uint64_t v123 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace];
  swift_beginAccess();
  int v124 = *v123;
  if (v122 == 2)
  {
    if (v124 != 2) {
      goto LABEL_15;
    }
  }
  else if (v124 == 2 || ((((v124 & 1) == 0) ^ v122) & 1) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v125 = v62
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  double v126 = v184;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v125, (uint64_t)v184, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  uint64_t v127 = (uint64_t)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace];
  swift_beginAccess();
  uint64_t v128 = v186;
  uint64_t v129 = (uint64_t)&v186[*(int *)(v182 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v126, (uint64_t)v186, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, v129, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  int v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v183 + 48);
  if (v130((uint64_t)v128, 1, v185) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v184, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
    if (v130(v129, 1, v185) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v186, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
      goto LABEL_96;
    }
    goto LABEL_94;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v186, (uint64_t)v181, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  if (v130(v129, 1, v185) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v184, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v181, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
LABEL_94:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v186, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_AccelerometerPace?, CLP_LogEntry_PrivateData_AccelerometerPace?));
    goto LABEL_15;
  }
  v131 = v180;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v129, (uint64_t)v180, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  int v132 = v181;
  char v133 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v181, (uint64_t)v131, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v131, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v184, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v132, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v186, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  if ((v133 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_96:
  uint64_t v134 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
  swift_beginAccess();
  int v135 = *v134;
  char v136 = *((unsigned char *)v134 + 4);
  uint64_t v137 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount];
  swift_beginAccess();
  if (v136)
  {
    if ((v137[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v137[4] & 1) != 0 || v135 != *(_DWORD *)v137)
  {
    goto LABEL_15;
  }
  int v138 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
  swift_beginAccess();
  int v139 = *v138;
  char v140 = *((unsigned char *)v138 + 4);
  uint64_t v141 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType];
  swift_beginAccess();
  if (v140)
  {
    if ((v141[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v141[4] & 1) != 0 || v139 != *(_DWORD *)v141)
  {
    goto LABEL_15;
  }
  uint64_t v142 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
  swift_beginAccess();
  int v143 = *v142;
  char v144 = *((unsigned char *)v142 + 4);
  uint64_t v145 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState];
  swift_beginAccess();
  if (v144)
  {
    if ((v145[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v145[4] & 1) != 0 || v143 != *(_DWORD *)v145)
  {
    goto LABEL_15;
  }
  char v146 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
  swift_beginAccess();
  int v147 = *v146;
  char v148 = *((unsigned char *)v146 + 4);
  uint64_t v149 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm];
  swift_beginAccess();
  if (v148)
  {
    if ((v149[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v149[4] & 1) != 0 || v147 != *(_DWORD *)v149)
  {
    goto LABEL_15;
  }
  char v150 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
  swift_beginAccess();
  int v151 = *v150;
  char v152 = *((unsigned char *)v150 + 4);
  uint64_t v153 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm];
  swift_beginAccess();
  if (v152)
  {
    if ((v153[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v153[4] & 1) != 0 || v151 != *(_DWORD *)v153)
  {
    goto LABEL_15;
  }
  char v154 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
  swift_beginAccess();
  int v155 = *v154;
  char v156 = *((unsigned char *)v154 + 4);
  uint64_t v157 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed];
  swift_beginAccess();
  if (v156)
  {
    if ((v157[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v157[4] & 1) != 0 || v155 != *(_DWORD *)v157)
  {
    goto LABEL_15;
  }
  uint64_t v158 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  int v159 = *v158;
  int v160 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource];
  swift_beginAccess();
  int v161 = *v160;
  if (v159 == 6)
  {
    if (v161 != 6) {
      goto LABEL_15;
    }
  }
  else if (v161 == 6 || v159 != v161)
  {
    goto LABEL_15;
  }
  uint64_t v162 = v62
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  char v163 = v174;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v162, (uint64_t)v174, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  uint64_t v164 = (uint64_t)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState];
  swift_beginAccess();
  int v165 = v179;
  uint64_t v166 = (uint64_t)&v179[*(int *)(v173 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v163, (uint64_t)v179, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v164, v166, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  int v167 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48);
  if (v167((uint64_t)v165, 1, v177) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v174, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
    if (v167(v166, 1, v177) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v179, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
      return 1;
    }
LABEL_137:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v179, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FalseStepDetectorState?, CLP_LogEntry_PrivateData_FalseStepDetectorState?));
    return 0;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v179, (uint64_t)v175, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  if (v167(v166, 1, v177) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v174, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v175, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    goto LABEL_137;
  }
  uint64_t v168 = v178;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v166, (uint64_t)v178, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  uint64_t v169 = v175;
  char v170 = specialized static CLP_LogEntry_PrivateData_FalseStepDetectorState.== infix(_:_:)((uint64_t)v175, (uint64_t)v168);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v168, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v174, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v169, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v179, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  return (v170 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_StepCountEntry.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_StepCountEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_StepCountEntry()
{
  return CLP_LogEntry_PrivateData_StepCountEntry.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_StepCountEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_StepCount.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_StepCount.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_StepCount.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry;
    uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_StepCount.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_StepCount.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_StepCount.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

Swift::Int CLP_LogEntry_PrivateData_StepCount.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_StepCount@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_StepCount()
{
  return CLP_LogEntry_PrivateData_StepCount.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_StepCount@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_StepCount(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MotionTypeVector3.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeVector3.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeVector3.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeVector3.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return CLP_LogEntry_PrivateData_MotionTypeVector3.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return CLP_LogEntry_PrivateData_MotionTypeVector3.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeVector3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeVector3@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeVector3(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeVector3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.protoMessageName.getter()
{
  return 0xD000000000000030;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        a4(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  char v7 = (int *)result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + v7[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v4 + v7[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v4 + v7[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MotionTypeCompass.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeCompass.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeCompass.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v46 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  v10(v1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, 1, 1, v9);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v40 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  uint64_t v15 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  unsigned char *v15 = 2;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  uint64_t v41 = v15;
  uint64_t v42 = v16;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  uint64_t v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  uint64_t v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v45 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v21, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  LODWORD(v22) = *(_DWORD *)v23;
  LOBYTE(v23) = *(unsigned char *)(v23 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v22;
  *(unsigned char *)(v12 + 4) = v23;
  uint64_t v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  LODWORD(v23) = *(_DWORD *)v24;
  LOBYTE(v24) = *(unsigned char *)(v24 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v13 = v23;
  *(unsigned char *)(v13 + 4) = v24;
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  LODWORD(v13) = *(_DWORD *)v25;
  LOBYTE(v25) = *(unsigned char *)(v25 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v14 = v13;
  *(unsigned char *)(v14 + 4) = v25;
  uint64_t v26 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  LOBYTE(v26) = *v26;
  uint64_t v27 = v40;
  swift_beginAccess();
  unsigned char *v27 = (_BYTE)v26;
  uint64_t v28 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  LOBYTE(v28) = *v28;
  uint64_t v29 = v41;
  swift_beginAccess();
  unsigned char *v29 = (_BYTE)v28;
  uint64_t v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  LODWORD(v29) = *(_DWORD *)v30;
  LOBYTE(v30) = *(unsigned char *)(v30 + 4);
  uint64_t v31 = v42;
  swift_beginAccess();
  *(_DWORD *)uint64_t v31 = v29;
  *(unsigned char *)(v31 + 4) = v30;
  uint64_t v32 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  LODWORD(v29) = *(_DWORD *)v32;
  LOBYTE(v32) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = v43;
  swift_beginAccess();
  *(_DWORD *)uint64_t v33 = v29;
  *(unsigned char *)(v33 + 4) = v32;
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  LODWORD(v29) = *(_DWORD *)v34;
  LOBYTE(v34) = *(unsigned char *)(v34 + 4);
  uint64_t v35 = v44;
  swift_beginAccess();
  *(_DWORD *)uint64_t v35 = v29;
  *(unsigned char *)(v35 + 4) = v34;
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  uint64_t v37 = v46;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_release();
  uint64_t v38 = v45;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v37, v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3;
          goto LABEL_12;
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
        case 10:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_13;
        case 6:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 7:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_13;
        case 11:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
LABEL_12:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_13:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  if (*v15 != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  if (*v16 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  closure #11 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t closure #11 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeCompass.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionTypeCompass.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_MotionTypeCompass.== infix(_:_:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v104 = *(void *)(v4 - 8);
  uint64_t v105 = v4;
  MEMORY[0x270FA5388](v4);
  double v101 = &v96[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?));
  MEMORY[0x270FA5388](v103);
  uint64_t v107 = &v96[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  char v102 = &v96[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  char v106 = &v96[-v10];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v109 = &v96[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v111 = &v96[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = &v96[-v17];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v108 = &v96[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v112 = &v96[-v23];
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v114 = &v96[-v25];
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = &v96[-v26];
  uint64_t v113 = a1;
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v29 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField];
  swift_beginAccess();
  uint64_t v110 = v14;
  uint64_t v30 = (uint64_t)&v18[*(int *)(v14 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v29, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v32 = v11;
  uint64_t v33 = v11;
  uint64_t v34 = v12 + 48;
  if (v31((uint64_t)v18, 1, v33) == 1)
  {
    uint64_t v35 = v113;
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    uint64_t v36 = a2;
    if (v31(v30, 1, v32) != 1) {
      goto LABEL_14;
    }
    uint64_t v100 = v34;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    uint64_t v37 = v31;
    uint64_t v38 = v113;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, (uint64_t)v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    char v99 = v37;
    if (v37(v30, 1, v32) == 1)
    {
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v114, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
      goto LABEL_14;
    }
    uint64_t v100 = v34;
    uint64_t v98 = v32;
    uint64_t v39 = v109;
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v30, (uint64_t)v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    swift_retain();
    uint64_t v36 = a2;
    swift_retain();
    uint64_t v40 = v114;
    int v97 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)((uint64_t)v114, (uint64_t)v39);
    uint64_t v32 = v98;
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v39, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    uint64_t v41 = (uint64_t)v40;
    uint64_t v35 = v38;
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v41, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    uint64_t v31 = v99;
    if ((v97 & 1) == 0) {
      goto LABEL_59;
    }
  }
  uint64_t v42 = v35;
  uint64_t v43 = v35
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  uint64_t v44 = v112;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, (uint64_t)v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v114 = v36;
  uint64_t v45 = (uint64_t)&v36[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField];
  swift_beginAccess();
  uint64_t v18 = v111;
  uint64_t v46 = (uint64_t)&v111[*(int *)(v110 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, (uint64_t)v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v47 = v42;
  if (v31((uint64_t)v18, 1, v32) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    unsigned int v48 = v31(v46, 1, v32);
    uint64_t v49 = v114;
    if (v48 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      goto LABEL_16;
    }
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
    goto LABEL_59;
  }
  uint64_t v50 = v108;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, (uint64_t)v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v31(v46, 1, v32) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_14;
  }
  uint64_t v51 = v109;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v46, (uint64_t)v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v52 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)((uint64_t)v50, (uint64_t)v51);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v51, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v49 = v114;
  if ((v52 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_16:
  uint64_t v53 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  float v54 = *(float *)v53;
  char v55 = *(unsigned char *)(v53 + 4);
  uint64_t v56 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading];
  swift_beginAccess();
  if (v55)
  {
    if (((_BYTE)v56[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v56[1] & 1) != 0 || v54 != *v56)
  {
    goto LABEL_59;
  }
  uint64_t v57 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  float v58 = *(float *)v57;
  char v59 = *(unsigned char *)(v57 + 4);
  uint64_t v60 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading];
  swift_beginAccess();
  if (v59)
  {
    if (((_BYTE)v60[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v60[1] & 1) != 0 || v58 != *v60)
  {
    goto LABEL_59;
  }
  uint64_t v61 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  float v62 = *(float *)v61;
  char v63 = *(unsigned char *)(v61 + 4);
  char v64 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy];
  swift_beginAccess();
  if (v63)
  {
    if (((_BYTE)v64[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v64[1] & 1) != 0 || v62 != *v64)
  {
    goto LABEL_59;
  }
  uint64_t v65 = (unsigned __int8 *)(v47
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  int v66 = *v65;
  uint64_t v67 = &v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel];
  swift_beginAccess();
  int v68 = *v67;
  if (v66 == 8)
  {
    if (v68 != 8) {
      goto LABEL_59;
    }
  }
  else if (v68 == 8 || v66 != v68)
  {
    goto LABEL_59;
  }
  uint64_t v69 = (unsigned __int8 *)(v47
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  int v70 = *v69;
  uint64_t v71 = &v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias];
  swift_beginAccess();
  int v72 = *v71;
  if (v70 == 2)
  {
    if (v72 != 2) {
      goto LABEL_59;
    }
  }
  else if (v72 == 2 || ((((v72 & 1) == 0) ^ v70) & 1) == 0)
  {
    goto LABEL_59;
  }
  uint64_t v73 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  float v74 = *(float *)v73;
  char v75 = *(unsigned char *)(v73 + 4);
  int v76 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude];
  swift_beginAccess();
  if (v75)
  {
    if (((_BYTE)v76[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v76[1] & 1) != 0 || v74 != *v76)
  {
    goto LABEL_59;
  }
  uint64_t v77 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  float v78 = *(float *)v77;
  char v79 = *(unsigned char *)(v77 + 4);
  double v80 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination];
  swift_beginAccess();
  if (v79)
  {
    if (((_BYTE)v80[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v80[1] & 1) != 0 || v78 != *v80)
  {
    goto LABEL_59;
  }
  uint64_t v81 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  float v82 = *(float *)v81;
  char v83 = *(unsigned char *)(v81 + 4);
  uint64_t v84 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal];
  swift_beginAccess();
  if (v83)
  {
    if ((_BYTE)v84[1]) {
      goto LABEL_56;
    }
LABEL_59:
    swift_release();
    swift_release();
    return 0;
  }
  if (((_BYTE)v84[1] & 1) != 0 || v82 != *v84) {
    goto LABEL_59;
  }
LABEL_56:
  uint64_t v85 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  char v86 = v106;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85, (uint64_t)v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v87 = (uint64_t)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion];
  swift_beginAccess();
  uint64_t v88 = v107;
  uint64_t v89 = (uint64_t)&v107[*(int *)(v103 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v86, (uint64_t)v107, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v89, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v90 = v105;
  uint64_t v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
  if (v91((uint64_t)v88, 1, v105) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v107, (uint64_t)v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
    if (v91(v89, 1, v90) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v102, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
      goto LABEL_63;
    }
    int v93 = v101;
    outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v89, (uint64_t)v101, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    char v94 = v102;
    char v95 = specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)((uint64_t)v102, (uint64_t)v93, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v93, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v94, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v107, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
    return (v95 & 1) != 0;
  }
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if (v91(v89, 1, v90) != 1)
  {
LABEL_63:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v107, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?));
    return 0;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v107, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeCompass.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionTypeCompass@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeCompass@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_CompassTypeSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_CompassTypeSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_CompassTypeSample.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v5 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v6 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_11;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
          uint64_t v5 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass;
          uint64_t v6 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass;
LABEL_11:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v6, v5);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_CompassTypeSample.traverse<A>(visitor:)(v5, a1, a2, a3);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
    uint64_t v11 = v10;
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + *(int *)(v11 + 32) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + *(int *)(v11 + 36)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_CompassTypeSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

Swift::Int CLP_LogEntry_PrivateData_CompassTypeSample.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_CompassTypeSample@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = a1[8];
  uint64_t v10 = a2 + a1[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a2 + v9;
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return CLP_LogEntry_PrivateData_CompassTypeSample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_CompassTypeSample.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_CompassTypeSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_Compass.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Compass.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Compass.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t CLP_LogEntry_PrivateData_Compass._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Compass.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Compass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_Compass.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Compass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_Compass.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Compass, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Compass()
{
  return CLP_LogEntry_PrivateData_Compass.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Compass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Compass.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Compass(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Compass@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Compass(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Compass(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          goto LABEL_9;
        case 2:
        case 3:
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3;
LABEL_9:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v11, v10);
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_13;
        case 5:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 6:
        case 7:
        case 8:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_13;
        case 9:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
LABEL_13:
          uint64_t v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v12 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  if (*v12 != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  if (*v13 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v14 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  if (*v14 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  if (*v15 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, closure #1 in static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v121 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v116 = *(void *)(v3 - 8);
  uint64_t v117 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v110 = (uint64_t)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
  uint64_t v5 = MEMORY[0x270FA5388](v120);
  uint64_t v107 = (uint64_t)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v109 = (uint64_t)&v106 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v115 = (uint64_t)&v106 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v106 = (uint64_t)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v111 = (uint64_t)&v106 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v108 = (uint64_t)&v106 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v113 = (uint64_t)&v106 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v112 = (uint64_t)&v106 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v119 = (uint64_t)&v106 - v21;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v114 = (uint64_t)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?));
  uint64_t v26 = v25 - 8;
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v106 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  uint64_t v118 = (uint64_t)&v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v106 - v32;
  uint64_t v34 = a1;
  uint64_t v35 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v35, (uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v36 = v121;
  uint64_t v37 = v121
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  uint64_t v38 = (uint64_t)&v28[*(int *)(v26 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, (uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v40 = v39(v28, 1, v22);
  uint64_t v122 = v34;
  if (v40 == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
    int v41 = v39((char *)v38, 1, v22);
    uint64_t v42 = v36;
    if (v41 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?));
    goto LABEL_52;
  }
  uint64_t v43 = v118;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if (v39((char *)v38, 1, v22) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    goto LABEL_6;
  }
  uint64_t v44 = v114;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v38, v114, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  swift_retain();
  uint64_t v42 = v36;
  swift_retain();
  char v45 = specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(v43, v44, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v44, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((v45 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_8:
  uint64_t v46 = v122
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  uint64_t v47 = v119;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v48 = v42
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  uint64_t v49 = v115;
  uint64_t v50 = v115 + *(int *)(v120 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v51 = v117;
  char v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  if (v52(v49, 1, v117) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    if (v52(v50, 1, v51) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      goto LABEL_15;
    }
LABEL_13:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
    goto LABEL_52;
  }
  uint64_t v53 = v112;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v52(v50, 1, v51) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_13;
  }
  uint64_t v54 = v49;
  uint64_t v55 = v110;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v50, v110, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v56 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(v53, v55);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v55, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((v56 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_15:
  uint64_t v57 = v122
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  uint64_t v58 = v57;
  uint64_t v59 = v42;
  uint64_t v60 = v113;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v61 = v59
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  uint64_t v62 = v109;
  uint64_t v63 = v109 + *(int *)(v120 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v109, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v64 = v62;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v52(v62, 1, v51) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    unsigned int v65 = v52(v63, 1, v51);
    uint64_t v66 = v111;
    uint64_t v67 = v121;
    if (v65 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      goto LABEL_22;
    }
LABEL_20:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
    goto LABEL_52;
  }
  uint64_t v68 = v108;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  unsigned int v69 = v52(v63, 1, v51);
  uint64_t v66 = v111;
  if (v69 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v68, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_20;
  }
  uint64_t v70 = v63;
  uint64_t v71 = v68;
  uint64_t v72 = v110;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v70, v110, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v73 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(v71, v72);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v72, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v71, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v67 = v121;
  if ((v73 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_22:
  uint64_t v74 = v122
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v75 = v67
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  uint64_t v76 = v66;
  uint64_t v77 = v107;
  uint64_t v78 = v107 + *(int *)(v120 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76, v107, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v78, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v52(v77, 1, v51) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    if (v52(v78, 1, v51) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      goto LABEL_29;
    }
LABEL_27:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
    goto LABEL_52;
  }
  uint64_t v79 = v106;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v52(v78, 1, v51) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v79, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_27;
  }
  uint64_t v80 = v110;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v78, v110, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v81 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(v79, v80);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v80, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v79, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((v81 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_29:
  float v82 = (unsigned __int8 *)(v122
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  int v83 = *v82;
  uint64_t v84 = (unsigned __int8 *)(v67
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  int v85 = *v84;
  if (v83 == 8)
  {
    if (v85 != 8) {
      goto LABEL_52;
    }
  }
  else if (v85 == 8 || v83 != v85)
  {
    goto LABEL_52;
  }
  char v86 = (unsigned __int8 *)(v122
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  int v87 = *v86;
  uint64_t v88 = (unsigned __int8 *)(v67
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  int v89 = *v88;
  if (v87 == 2)
  {
    if (v89 != 2) {
      goto LABEL_52;
    }
  }
  else if (v89 == 2 || ((((v89 & 1) == 0) ^ v87) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v90 = (unsigned __int8 *)(v122
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  int v91 = *v90;
  uint64_t v92 = (unsigned __int8 *)(v67
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  int v93 = *v92;
  if (v91 == 2)
  {
    if (v93 != 2) {
      goto LABEL_52;
    }
  }
  else if (v93 == 2 || ((((v93 & 1) == 0) ^ v91) & 1) == 0)
  {
    goto LABEL_52;
  }
  char v94 = (unsigned __int8 *)(v122
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  int v95 = *v94;
  uint64_t v96 = (unsigned __int8 *)(v67
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  int v97 = *v96;
  if (v95 == 2)
  {
    if (v97 == 2) {
      goto LABEL_49;
    }
LABEL_52:
    swift_release();
    swift_release();
    return 0;
  }
  if (v97 == 2 || ((((v97 & 1) == 0) ^ v95) & 1) == 0) {
    goto LABEL_52;
  }
LABEL_49:
  uint64_t v98 = v122
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  float v99 = *(float *)v98;
  char v100 = *(unsigned char *)(v98 + 4);
  swift_release();
  uint64_t v101 = v67
       + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  float v102 = *(float *)v101;
  int v103 = *(unsigned __int8 *)(v101 + 4);
  swift_release();
  if (v100)
  {
    if (!v103) {
      return 0;
    }
  }
  else
  {
    if (v99 == v102) {
      char v105 = v103;
    }
    else {
      char v105 = 1;
    }
    if (v105) {
      return 0;
    }
  }
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SensorFusionStatus.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SensorFusionStatus.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SensorFusionStatus.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v1) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SensorFusionStatus.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SensorFusionStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return CLP_LogEntry_PrivateData_SensorFusionStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return CLP_LogEntry_PrivateData_SensorFusionStatus.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SensorFusionStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_DeviceMotionSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DeviceMotionSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DeviceMotionSample.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_11;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion;
          goto LABEL_11;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus;
LABEL_11:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(v5, a1, a2, a3);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
    uint64_t v11 = v10;
    if (*(unsigned char *)(v5 + *(int *)(v10 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + *(int *)(v11 + 32) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(v5);
    closure #6 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #7 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    closure #8 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 36)) != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 48) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DeviceMotionSample.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DeviceMotionSample@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  uint64_t v9 = a2 + v8;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1[10];
  *(unsigned char *)(a2 + a1[9]) = 5;
  uint64_t v11 = a2 + v10;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v14 = a1[12];
  uint64_t v15 = a2 + a1[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DeviceMotionSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_DeviceMotion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DeviceMotion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DeviceMotion.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_DeviceMotion.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_DeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_DeviceMotion.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DeviceMotion()
{
  return CLP_LogEntry_PrivateData_DeviceMotion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DeviceMotion.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DeviceMotion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.protoMessageName.getter()
{
  return 0xD000000000000037;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    closure #6 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    closure #7 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    closure #8 in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 48), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1[12];
  uint64_t v14 = a2 + a1[11];
  *(void *)uint64_t v14 = 0;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  return v17(v15, 1, 1, v16);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GeomagneticModelData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GeomagneticModelData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GeomagneticModelData.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v10 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
              - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_24710FE80;
  unint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11) = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = *a5;
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
        type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_GeomagneticModelData.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_GeomagneticModelData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Int CLP_LogEntry_PrivateData_GeomagneticModelData.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GeomagneticModelData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Timer(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return CLP_LogEntry_PrivateData_GeomagneticModelData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GeomagneticModelData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GeomagneticModelData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_WifiAccessPoint.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WifiAccessPoint.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WifiAccessPoint.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    if (*(void *)(v5 + v10[6] + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(v5);
    closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    closure #9 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(v5);
    closure #10 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 52)) != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #10 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 56) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_WifiAccessPoint.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPoint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_WifiAssociationState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WifiAssociationState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WifiAssociationState.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_WifiAssociationState.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_WifiAssociationState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Int CLP_LogEntry_PrivateData_WifiAssociationState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WifiAssociationState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiAssociationState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_WifiScanResult.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WifiScanResult.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WifiScanResult.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_WifiScanResult.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_WifiScanResult.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_WifiScanResult.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WifiScanResult.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiScanResult@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_WifiNotification.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WifiNotification.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WifiNotification.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  unint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  if (*v13 != 15)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v14 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  if (*v14 != 15)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  if (*v15 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #7 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  if (*v16 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v17 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  if (*v17 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v18 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  if (*v18 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v19 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  if (*v19 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t closure #7 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t static CLP_LogEntry_PrivateData_WifiNotification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_WifiNotification.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_WifiNotification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v110 = a2;
  uint64_t v97 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v108 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  char v94 = (uint64_t *)((char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiScanResult?, CLP_LogEntry_PrivateData_WifiScanResult?));
  MEMORY[0x270FA5388](v96);
  uint64_t v98 = (uint64_t)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v107 = (uint64_t *)((char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v106 = (char *)&v94 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  uint64_t v101 = *(void *)(v9 - 8);
  uint64_t v102 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v95 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiAssociationState?, CLP_LogEntry_PrivateData_WifiAssociationState?));
  MEMORY[0x270FA5388](v100);
  uint64_t v103 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v99 = (uint64_t)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v104 = (uint64_t)&v94 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v105 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v109 = (uint64_t)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v94 - v26;
  uint64_t v28 = a1;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v29, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = v110;
  uint64_t v31 = v110
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v32 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v33((uint64_t)v22, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v34 = v28;
    if (v33(v32, 1, v16) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v36 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v37 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, v36);
    goto LABEL_8;
  }
  uint64_t v34 = v28;
  uint64_t v35 = v109;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v109, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v33(v32, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v39 = v105;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v32, v105, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  char v40 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v35, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v40 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  int v41 = (int *)(v34
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v42 = *v41;
  char v43 = *((unsigned char *)v41 + 4);
  uint64_t v44 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if (v43)
  {
    uint64_t v46 = v107;
    uint64_t v45 = v108;
    uint64_t v47 = (uint64_t)v106;
    if ((*(unsigned char *)(v44 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v46 = v107;
    uint64_t v45 = v108;
    uint64_t v47 = (uint64_t)v106;
    if ((*(unsigned char *)(v44 + 4) & 1) != 0 || v42 != *(_DWORD *)v44) {
      goto LABEL_8;
    }
  }
  uint64_t v48 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v49 = *v48;
  uint64_t v50 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v51 = *v50;
  if (v49 == 15)
  {
    uint64_t v52 = v104;
    if (v51 != 15) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v52 = v104;
    if (v51 == 15 || v49 != v51) {
      goto LABEL_8;
    }
  }
  uint64_t v53 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  int v54 = *v53;
  uint64_t v55 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  int v56 = *v55;
  if (v54 == 15)
  {
    if (v56 != 15) {
      goto LABEL_8;
    }
  }
  else if (v56 == 15 || v54 != v56)
  {
    goto LABEL_8;
  }
  uint64_t v57 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  int v58 = *v57;
  uint64_t v59 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  int v60 = *v59;
  if (v58 == 2)
  {
    if (v60 != 2) {
      goto LABEL_8;
    }
  }
  else if (v60 == 2 || ((((v60 & 1) == 0) ^ v58) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v61 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  uint64_t v62 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  uint64_t v63 = v103;
  uint64_t v64 = v103 + *(int *)(v100 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  uint64_t v109 = v64;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  uint64_t v65 = v102;
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  if (v66(v63, 1, v102) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
    if (v66(v109, 1, v65) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v99, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  if (v66(v109, 1, v65) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v99, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
LABEL_36:
    uint64_t v36 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiAssociationState?, CLP_LogEntry_PrivateData_WifiAssociationState?);
    uint64_t v37 = v63;
    goto LABEL_7;
  }
  uint64_t v67 = v95;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v109, v95, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  uint64_t v68 = v99;
  LODWORD(v109) = specialized static CLP_LogEntry_PrivateData_WifiAssociationState.== infix(_:_:)(v99, v67);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v67, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v68, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  if ((v109 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_38:
  uint64_t v69 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v70 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  uint64_t v71 = v98;
  uint64_t v72 = v98 + *(int *)(v96 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v98, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v73 = v71;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  uint64_t v75 = v97;
  if (v74(v73, 1, v97) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
    if (v74(v72, 1, v75) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
      goto LABEL_45;
    }
    goto LABEL_43;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, (uint64_t)v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  if (v74(v72, 1, v75) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v46, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
LABEL_43:
    uint64_t v36 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiScanResult?, CLP_LogEntry_PrivateData_WifiScanResult?);
    uint64_t v37 = v73;
    goto LABEL_7;
  }
  uint64_t v76 = v94;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v72, (uint64_t)v94, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  char v77 = specialized static CLP_LogEntry_PrivateData_WifiScanResult.== infix(_:_:)(v46, v76);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v76, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v46, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  if ((v77 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_45:
  uint64_t v78 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  int v79 = *v78;
  uint64_t v80 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  int v81 = *v80;
  if (v79 == 2)
  {
    if (v81 != 2) {
      goto LABEL_8;
    }
  }
  else if (v81 == 2 || ((((v81 & 1) == 0) ^ v79) & 1) == 0)
  {
    goto LABEL_8;
  }
  float v82 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  int v83 = *v82;
  uint64_t v84 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  int v85 = *v84;
  if (v83 == 2)
  {
    if (v85 != 2) {
      goto LABEL_8;
    }
  }
  else if (v85 == 2 || ((((v85 & 1) == 0) ^ v83) & 1) == 0)
  {
    goto LABEL_8;
  }
  char v86 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  int v87 = *v86;
  uint64_t v88 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  int v89 = *v88;
  if (v87 == 2)
  {
    if (v89 == 2) {
      goto LABEL_60;
    }
LABEL_8:
    swift_release();
    swift_release();
    return 0;
  }
  if (v89 == 2 || ((((v89 & 1) == 0) ^ v87) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_60:
  uint64_t v90 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  int v91 = *v90;
  swift_release();
  uint64_t v92 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  int v93 = *v92;
  swift_release();
  if (v91 != 2) {
    return v93 != 2 && ((((v93 & 1) == 0) ^ v91) & 1) != 0;
  }
  return v93 == 2;
}

Swift::Int CLP_LogEntry_PrivateData_WifiNotification.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiNotification@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.protoMessageName.getter()
{
  return 0xD000000000000033;
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability();
          goto LABEL_12;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource();
LABEL_12:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  if (!v4)
  {
    uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
    if (*(unsigned char *)(v3 + v6[6]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + v6[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3 + v6[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  *(unsigned char *)(a2 + a1[6]) = 4;
  uint64_t v8 = a2 + v7;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(a2 + a1[8]) = 4;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.protoMessageName.getter()
{
  return 0xD000000000000030;
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.protoMessageName.getter()
{
  return 0xD000000000000035;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_8;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(*(void *)v5 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0),
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
    uint64_t v10 = (int *)result;
    if ((*(unsigned char *)(v5 + *(int *)(result + 24) + 8) & 1) == 0) {
      uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (!v4)
    {
      if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
      }
      if (*(unsigned char *)(v5 + v10[8]) != 2) {
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      }
      if ((*(unsigned char *)(v5 + v10[9] + 8) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
      }
      closure #6 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      closure #7 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      closure #8 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 48) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[7];
  uint64_t v6 = (char *)a2 + a1[6];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = a1[9];
  *((unsigned char *)a2 + a1[8]) = 2;
  uint64_t v9 = (char *)a2 + v8;
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = a1[11];
  uint64_t v11 = (char *)a2 + a1[10];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  uint64_t v13 = (char *)a2 + a1[12];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0),
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
    uint64_t v3 = result;
    if ((*(unsigned char *)(v0 + *(int *)(result + 24) + 8) & 1) == 0) {
      uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if (!v1)
    {
      if ((*(unsigned char *)(v0 + *(int *)(v3 + 28) + 8) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
      }
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 28);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 24);
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GEOMapBuildingData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapBuildingData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapBuildingData.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v4 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v5 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
          uint64_t v6 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 3:
          uint64_t v6 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_6;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          uint64_t v4 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D;
          uint64_t v5 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D;
LABEL_5:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v5, v4);
          uint64_t v6 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_6:
          uint64_t v3 = v6;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    if (*(void *)(v3[1] + 16)) {
      dispatch thunk of Visitor.visitRepeatedUInt64Field(value:fieldNumber:)();
    }
    closure #2 in CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapBuildingData.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = v4;
  UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v7, 1, 1, v8);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CLP_LogEntry_PrivateData_BatchedLocations@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return CLP_LogEntry_PrivateData_GEOMapBuildingData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.protoMessageName.getter()
{
  return 0xD00000000000003BLL;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0),
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
    uint64_t v3 = (int *)result;
    if (*(unsigned char *)(v0 + *(int *)(result + 24)) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType();
      uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (!v1)
    {
      if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      }
      if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      }
      if ((*(unsigned char *)(v0 + v3[9] + 4) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      }
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[7];
  *((unsigned char *)a2 + a1[6]) = 4;
  uint64_t v6 = (char *)a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = a1[9];
  uint64_t v8 = (char *)a2 + a1[8];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  uint64_t v9 = (char *)a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.protoMessageName.getter()
{
  return 0xD000000000000040;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 24) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[9] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(*(void *)v0 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[7];
  uint64_t v6 = (char *)a2 + a1[6];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = a1[9];
  uint64_t v9 = (char *)a2 + a1[8];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = (char *)a2 + v8;
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.protoMessageName.getter()
{
  return 0xD000000000000035;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox;
          goto LABEL_10;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures;
          uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures;
LABEL_10:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
    if ((*(unsigned char *)(v3 + v9[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3 + v9[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + v9[9] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #6 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1[8];
  uint64_t v7 = (char *)a2 + a1[7];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  *((unsigned char *)a2 + v6) = 4;
  uint64_t v8 = a1[10];
  uint64_t v9 = (char *)a2 + a1[9];
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v13 = (char *)a2 + a1[11];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap, a1);
}

uint64_t *CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName;
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName.getter()
{
  return static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus(a1, 2, 2, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(a1, a2, &one-time initialization token for protoMessageName, &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.protoMessageName.getter()
{
  return 0xD000000000000032;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *((unsigned char *)a2 + *(int *)(a1 + 28)) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_WatchOrientation.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WatchOrientation.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WatchOrientation.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_WatchOrientation.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WatchOrientation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus(a1, 4, 4, a2);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus@<X0>(uint64_t a1@<X0>, char a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v9 = *(int *)(a1 + 24);
  *(unsigned char *)(a4 + *(int *)(a1 + 20)) = a2;
  *(unsigned char *)(a4 + v9) = a3;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WatchOrientation()
{
  return CLP_LogEntry_PrivateData_WatchOrientation.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WatchOrientation()
{
  return CLP_LogEntry_PrivateData_WatchOrientation.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WatchOrientation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WatchOrientation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_WristState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WristState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WristState.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_WristState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WristState.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType();
          goto LABEL_8;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType();
LABEL_8:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 5:
        case 6:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WristState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  if (!v4)
  {
    uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
    if (*(unsigned char *)(v5 + v10[6]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[7]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    closure #6 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_WristState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WristState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WristState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  *(unsigned char *)(a2 + a1[6]) = 4;
  *(unsigned char *)(a2 + v7) = 4;
  uint64_t v8 = a1[9];
  *(unsigned char *)(a2 + a1[8]) = 4;
  *(unsigned char *)(a2 + v8) = 2;
  uint64_t v9 = a1[11];
  *(unsigned char *)(a2 + a1[10]) = 2;
  *(unsigned char *)(a2 + v9) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WristState()
{
  return CLP_LogEntry_PrivateData_WristState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WristState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WristState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WristState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_WatchState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WatchState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WatchState.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation;
          goto LABEL_12;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState;
LABEL_12:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v4, v3);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    closure #3 in CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #4 in CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  v16[3] = a4;
  v16[1] = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a5(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v14 + 20), (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

Swift::Int CLP_LogEntry_PrivateData_WatchState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WatchState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1[7];
  uint64_t v7 = a2 + a1[6];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a2 + a1[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 1, 1, v11);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WatchState()
{
  return CLP_LogEntry_PrivateData_WatchState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WatchState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WatchState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_PlaceInference.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PlaceInference.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PlaceInference.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType();
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  uint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + v3[6]) != 3)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(void *)(v0 + v3[7] + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    if (*(void *)(v0 + v3[8] + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_PlaceInference.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_PlaceInference@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 5;
  *(unsigned char *)(a2 + v5) = 3;
  uint64_t v6 = a1[8];
  uint64_t v7 = (void *)(a2 + a1[7]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = (void *)(a2 + v6);
  *uint64_t v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_PlaceInference()
{
  return CLP_LogEntry_PrivateData_PlaceInference.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_PlaceInference()
{
  return CLP_LogEntry_PrivateData_PlaceInference.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PlaceInference@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_RoutineVisit.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_RoutineVisit.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_RoutineVisit.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_10;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference;
          goto LABEL_10;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate;
LABEL_10:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v11, v10);
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_11;
        case 7:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_11:
          uint64_t v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20));
  uint64_t v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t static CLP_LogEntry_PrivateData_RoutineVisit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_RoutineVisit.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_RoutineVisit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v146 = *(void *)(v4 - 8);
  uint64_t v147 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v142 = (uint64_t)&v141 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
  MEMORY[0x270FA5388](v145);
  uint64_t v148 = (uint64_t)&v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v143 = (uint64_t)&v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v156 = (uint64_t)&v141 - v10;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  uint64_t v151 = *(void *)(v11 - 8);
  uint64_t v152 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v144 = (uint64_t)&v141 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PlaceInference?, CLP_LogEntry_PrivateData_PlaceInference?));
  MEMORY[0x270FA5388](v150);
  uint64_t v153 = (uint64_t)&v141 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v149 = (uint64_t)&v141 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v157 = (uint64_t)&v141 - v17;
  uint64_t v169 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v18 = *(void *)(v169 - 8);
  MEMORY[0x270FA5388](v169);
  uint64_t v165 = (uint64_t)&v141 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v155 = (uint64_t)&v141 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v160 = (uint64_t)&v141 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v164 = (uint64_t)&v141 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v141 - v27;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  uint64_t v154 = (uint64_t)&v141 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v159 = (uint64_t)&v141 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v158 = (uint64_t)&v141 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v163 = (uint64_t)&v141 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v161 = (uint64_t)&v141 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v168 = (uint64_t)&v141 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v166 = (uint64_t)&v141 - v43;
  MEMORY[0x270FA5388](v42);
  uint64_t v45 = (char *)&v141 - v44;
  uint64_t v46 = a1;
  uint64_t v47 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, (uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v48 = a2
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  uint64_t v167 = v20;
  uint64_t v49 = (uint64_t)&v28[*(int *)(v20 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, (uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v50 = v48;
  uint64_t v51 = v169;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v52 = *(unsigned int (**)(void, void, void))(v18 + 48);
  if (v52(v28, 1, v51) == 1)
  {
    uint64_t v53 = v46;
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v54 = a2;
    if (v52(v49, 1, v51) == 1)
    {
      uint64_t v162 = v52;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    int v56 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v57 = (uint64_t)v28;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v56);
    goto LABEL_15;
  }
  uint64_t v53 = v46;
  uint64_t v55 = v166;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, v166, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v52(v49, 1, v51) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v162 = v52;
  uint64_t v58 = v49;
  uint64_t v59 = v165;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v58, v165, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  char v60 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v55, v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v61 = v55;
  uint64_t v54 = a2;
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v61, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v60 & 1) == 0)
  {
LABEL_15:
    swift_release();
LABEL_16:
    swift_release();
    return 0;
  }
LABEL_8:
  uint64_t v62 = v53
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  uint64_t v63 = v168;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v168, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v64 = v54
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  uint64_t v65 = v164;
  uint64_t v66 = v164 + *(int *)(v167 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v164, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v67 = v64;
  uint64_t v68 = v65;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v69 = v65;
  uint64_t v70 = v169;
  uint64_t v71 = v162;
  if (v162(v69, 1, v169) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v71(v66, 1, v70) == 1)
    {
      uint64_t v166 = v53;
      uint64_t v162 = v71;
      uint64_t v72 = v70;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  uint64_t v73 = v161;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, v161, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v71(v66, 1, v70) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v168, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    int v56 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v57 = v68;
    goto LABEL_14;
  }
  uint64_t v166 = v53;
  uint64_t v162 = v71;
  uint64_t v72 = v70;
  uint64_t v75 = v165;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v66, v165, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v76 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v73, v75, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v75, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v168, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v76 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_19:
  uint64_t v77 = v166
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  uint64_t v78 = v77;
  uint64_t v79 = v54;
  uint64_t v80 = v163;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, v163, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v168 = v79;
  uint64_t v81 = v79
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  uint64_t v82 = v167;
  uint64_t v83 = v160;
  uint64_t v84 = v160 + *(int *)(v167 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v160, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v85 = v72;
  uint64_t v86 = v72;
  int v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v162;
  if (v162(v83, 1, v86) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    int v88 = v87(v84, 1, v85);
    uint64_t v89 = v166;
    if (v88 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      uint64_t v90 = v168;
      goto LABEL_26;
    }
LABEL_24:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    swift_release();
    goto LABEL_16;
  }
  uint64_t v91 = v158;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, v158, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v87(v84, 1, v85) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v163, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v91, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_24;
  }
  uint64_t v92 = v165;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v84, v165, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v93 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v91, v92, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v92, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v163, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v91, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v89 = v166;
  uint64_t v90 = v168;
  if ((v93 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_26:
  uint64_t v166 = v89;
  uint64_t v94 = v89
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  uint64_t v95 = v94;
  uint64_t v96 = v82;
  uint64_t v97 = v159;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, v159, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v98 = v90
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  uint64_t v99 = v155;
  uint64_t v100 = v155 + *(int *)(v96 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, v155, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v101 = v99;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v102 = v99;
  uint64_t v103 = v169;
  if (v87(v102, 1, v169) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    int v104 = v87(v100, 1, v103);
    uint64_t v106 = v156;
    uint64_t v105 = v157;
    if (v104 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  uint64_t v107 = v154;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, v154, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v108 = v87(v100, 1, v103);
  uint64_t v106 = v156;
  uint64_t v105 = v157;
  if (v108 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v159, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v107, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_31:
    int v56 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v57 = v101;
    goto LABEL_14;
  }
  uint64_t v109 = v165;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v100, v165, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v110 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v107, v109, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v109, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v159, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v107, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v110 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_33:
  uint64_t v111 = v166
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  uint64_t v112 = v90
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  uint64_t v113 = v153;
  uint64_t v114 = v153 + *(int *)(v150 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, v153, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  uint64_t v115 = v112;
  uint64_t v116 = v113;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v115, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  uint64_t v117 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
  uint64_t v118 = v113;
  uint64_t v119 = v152;
  if (v117(v118, 1, v152) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
    if (v117(v114, 1, v119) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
      goto LABEL_40;
    }
LABEL_38:
    int v56 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PlaceInference?, CLP_LogEntry_PrivateData_PlaceInference?);
LABEL_46:
    uint64_t v57 = v116;
    goto LABEL_14;
  }
  uint64_t v120 = v149;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, v149, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  if (v117(v114, 1, v119) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v157, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v120, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
    goto LABEL_38;
  }
  uint64_t v121 = v144;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v114, v144, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  char v122 = specialized static CLP_LogEntry_PrivateData_PlaceInference.== infix(_:_:)(v120, v121);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v121, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v157, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v120, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  if ((v122 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_40:
  uint64_t v123 = v166
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v123, v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v124 = v90
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  uint64_t v125 = v148;
  uint64_t v126 = v148 + *(int *)(v145 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106, v148, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v127 = v124;
  uint64_t v116 = v125;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, v126, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v128 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
  uint64_t v129 = v125;
  uint64_t v130 = v147;
  if (v128(v129, 1, v147) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    if (v128(v126, 1, v130) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      goto LABEL_48;
    }
    goto LABEL_45;
  }
  uint64_t v131 = v143;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if (v128(v126, 1, v130) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v131, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
LABEL_45:
    int v56 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    goto LABEL_46;
  }
  uint64_t v132 = v142;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v126, v142, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  char v133 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v131, v132, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v132, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v131, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((v133 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_48:
  uint64_t v134 = v166
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  swift_beginAccess();
  double v135 = *(double *)v134;
  char v136 = *(unsigned char *)(v134 + 8);
  swift_release();
  uint64_t v137 = v90
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  swift_beginAccess();
  double v138 = *(double *)v137;
  int v139 = *(unsigned __int8 *)(v137 + 8);
  swift_release();
  if ((v136 & 1) == 0)
  {
    if (v135 == v138) {
      char v140 = v139;
    }
    else {
      char v140 = 1;
    }
    return (v140 & 1) == 0;
  }
  return v139 != 0;
}

Swift::Int CLP_LogEntry_PrivateData_RoutineVisit.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_RoutineVisit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_RoutineVisit()
{
  return CLP_LogEntry_PrivateData_RoutineVisit.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_RoutineVisit@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_OutdoorUpdate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_OutdoorUpdate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_OutdoorUpdate.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType();
          goto LABEL_8;
        case 4:
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence();
LABEL_8:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  uint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[7]) != 3)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    closure #6 in CLP_LogEntry_PrivateData_OutdoorUpdate.traverse<A>(visitor:)(v5);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    closure #8 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_OutdoorUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 40)) != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_OutdoorUpdate.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_OutdoorUpdate@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 3;
  *(unsigned char *)(a2 + v8) = 4;
  uint64_t v9 = a1[10];
  uint64_t v10 = a2 + a1[9];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(a2 + v9) = 4;
  uint64_t v11 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  uint64_t v12 = a2 + v11;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return CLP_LogEntry_PrivateData_OutdoorUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_OutdoorUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_OutdoorUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_InertialOdometrySample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_InertialOdometrySample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_InertialOdometrySample.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 133, 7);
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v0 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_11;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_11;
        case 14:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_11;
        case 15:
        case 16:
        case 17:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_11:
          uint64_t v2 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.traverse<A>(visitor:)()
{
  uint64_t v2 = *(unsigned char **)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((v2[24] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (v1) {
    return swift_release();
  }
  swift_beginAccess();
  if ((v2[40] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[48] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[56] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[64] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[72] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[80] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[88] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[96] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[104] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[112] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[120] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v2[128] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v2[129] != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v2[130] != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v2[131] != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v2[132] != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int CLP_LogEntry_PrivateData_InertialOdometrySample.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

Swift::Int CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_InertialOdometrySample@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return CLP_LogEntry_PrivateData_InertialOdometrySample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return CLP_LogEntry_PrivateData_InertialOdometrySample.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap, a1);
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v9 = a3(0) - 8;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t (*)(void))((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 == *(void *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      char v20 = 1;
    }
    else
    {
      unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v18 = *(void *)(v13 + 72);
      uint64_t v19 = v16 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a1 + v17, (uint64_t)v15, a4);
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a2 + v17, (uint64_t)v12, a4);
        char v20 = specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)((uint64_t)v15, v12, a5);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v12, a4);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v15, a4);
        BOOL v22 = v19-- != 0;
        if ((v20 & 1) == 0) {
          break;
        }
        v17 += v18;
      }
      while (v22);
    }
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *))
{
  uint64_t v9 = a3(0) - 8;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 == *(void *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      char v20 = 1;
    }
    else
    {
      unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v18 = *(void *)(v13 + 72);
      uint64_t v19 = v16 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a1 + v17, (uint64_t)v15, a4);
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a2 + v17, (uint64_t)v12, a4);
        char v20 = a5(v15, v12);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v12, a4);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v15, a4);
        BOOL v22 = v19-- != 0;
        if ((v20 & 1) == 0) {
          break;
        }
        v17 += v18;
      }
      while (v22);
    }
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v22;
  uint64_t v24;

  uint64_t v9 = a3(0) - 8;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 == *(void *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      char v20 = 1;
    }
    else
    {
      unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v18 = *(void *)(v13 + 72);
      uint64_t v19 = v16 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a1 + v17, (uint64_t)v15, a4);
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a2 + v17, (uint64_t)v12, a4);
        char v20 = a5(v15, v12);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v12, a4);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v15, a4);
        BOOL v22 = v19-- != 0;
        if ((v20 & 1) == 0) {
          break;
        }
        v17 += v18;
      }
      while (v22);
    }
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v22;
  uint64_t v24;

  uint64_t v9 = a3(0) - 8;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 == *(void *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      char v20 = 1;
    }
    else
    {
      unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v18 = *(void *)(v13 + 72);
      uint64_t v19 = v16 - 1;
      do
      {
        outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a1 + v17, (uint64_t)v15, a4);
        outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a2 + v17, (uint64_t)v12, a4);
        char v20 = a5(v15, v12);
        outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v12, a4);
        outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v15, a4);
        BOOL v22 = v19-- != 0;
        if ((v20 & 1) == 0) {
          break;
        }
        v17 += v18;
      }
      while (v22);
    }
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v22;
  uint64_t v24;

  uint64_t v9 = a3(0) - 8;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 == *(void *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      char v20 = 1;
    }
    else
    {
      unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v18 = *(void *)(v13 + 72);
      uint64_t v19 = v16 - 1;
      do
      {
        outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a1 + v17, (uint64_t)v15, a4);
        outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a2 + v17, (uint64_t)v12, a4);
        char v20 = a5(v15, v12);
        outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v12, a4);
        outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v15, a4);
        BOOL v22 = v19-- != 0;
        if ((v20 & 1) == 0) {
          break;
        }
        v17 += v18;
      }
      while (v22);
    }
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = a1 + 5;
  uint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_LocationType.init(rawValue:)(unint64_t result)
{
  if (result >= 0xE) {
    return 14;
  }
  return result;
}

uint64_t specialized CLP_LogEntry_PrivateData_DominantMotionModeType.init(rawValue:)(uint64_t a1)
{
  if (a1 <= 11804)
  {
    if (a1 <= 2009)
    {
      uint64_t result = 0;
      switch(a1)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = 1;
          break;
        case 2:
          uint64_t result = 2;
          break;
        case 3:
          uint64_t result = 3;
          break;
        case 4:
          uint64_t result = 4;
          break;
        case 5:
          uint64_t result = 5;
          break;
        case 6:
          uint64_t result = 6;
          break;
        case 7:
          uint64_t result = 7;
          break;
        case 8:
          uint64_t result = 8;
          break;
        case 9:
          uint64_t result = 9;
          break;
        case 10:
          uint64_t result = 10;
          break;
        case 11:
          uint64_t result = 11;
          break;
        case 41:
          uint64_t result = 12;
          break;
        case 52:
          uint64_t result = 13;
          break;
        case 56:
          uint64_t result = 14;
          break;
        case 61:
          uint64_t result = 15;
          break;
        case 62:
          uint64_t result = 16;
          break;
        case 63:
          uint64_t result = 39;
          break;
        case 64:
          uint64_t result = 46;
          break;
        case 65:
          uint64_t result = 47;
          break;
        case 66:
          uint64_t result = 60;
          break;
        case 100:
          uint64_t result = 17;
          break;
        default:
          return 72;
      }
      return result;
    }
    if (a1 <= 2149)
    {
      switch(a1)
      {
        case 2010:
          uint64_t result = 18;
          break;
        case 2020:
          uint64_t result = 19;
          break;
        case 2022:
          uint64_t result = 35;
          break;
        case 2024:
          uint64_t result = 37;
          break;
        case 2048:
          uint64_t result = 20;
          break;
        case 2061:
          uint64_t result = 21;
          break;
        case 2065:
          uint64_t result = 22;
          break;
        case 2068:
          uint64_t result = 69;
          break;
        case 2071:
          uint64_t result = 23;
          break;
        case 2101:
          uint64_t result = 36;
          break;
        case 2105:
          uint64_t result = 24;
          break;
        default:
          return 72;
      }
      return result;
    }
    switch(a1)
    {
      case 2150:
        return 25;
      case 3015:
        return 26;
      case 3016:
        return 71;
    }
    return 72;
  }
  if (a1 <= 15651)
  {
    if (a1 > 15254)
    {
      if (a1 <= 15459)
      {
        if (a1 > 15349)
        {
          if (a1 == 15350) {
            return 55;
          }
          if (a1 == 15360) {
            return 54;
          }
        }
        else
        {
          if (a1 == 15255) {
            return 29;
          }
          if (a1 == 15330) {
            return 63;
          }
        }
      }
      else if (a1 <= 15591)
      {
        if (a1 == 15460) {
          return 51;
        }
        if (a1 == 15562) {
          return 50;
        }
      }
      else
      {
        switch(a1)
        {
          case 15592:
            return 52;
          case 15610:
            return 45;
          case 15620:
            return 65;
        }
      }
    }
    else if (a1 <= 15099)
    {
      if (a1 > 15029)
      {
        if (a1 == 15030) {
          return 58;
        }
        if (a1 == 15055) {
          return 56;
        }
      }
      else
      {
        if (a1 == 11805) {
          return 27;
        }
        if (a1 == 12150) {
          return 28;
        }
      }
    }
    else if (a1 <= 15149)
    {
      if (a1 == 15100) {
        return 70;
      }
      if (a1 == 15110) {
        return 40;
      }
    }
    else
    {
      switch(a1)
      {
        case 15150:
          return 67;
        case 15230:
          return 48;
        case 15240:
          return 49;
      }
    }
    return 72;
  }
  if (a1 > 18224)
  {
    if (a1 <= 19149)
    {
      if (a1 > 19029)
      {
        if (a1 == 19030) {
          return 53;
        }
        if (a1 == 19090) {
          return 42;
        }
      }
      else
      {
        if (a1 == 18225) {
          return 44;
        }
        if (a1 == 18240) {
          return 32;
        }
      }
    }
    else if (a1 <= 90602)
    {
      if (a1 == 19150) {
        return 34;
      }
      if (a1 == 19160) {
        return 43;
      }
    }
    else
    {
      switch(a1)
      {
        case 90603:
          return 33;
        case 515621:
          return 66;
        case 515652:
          return 59;
      }
    }
    return 72;
  }
  if (a1 > 15732)
  {
    if (a1 > 18069)
    {
      if (a1 == 18070) {
        return 41;
      }
      if (a1 == 18200) {
        return 31;
      }
    }
    else
    {
      if (a1 == 15733) {
        return 64;
      }
      if (a1 == 17150) {
        return 30;
      }
    }
    return 72;
  }
  switch(a1)
  {
    case 15652:
      uint64_t result = 62;
      break;
    case 15653:
    case 15654:
    case 15655:
    case 15656:
    case 15657:
    case 15658:
    case 15659:
    case 15661:
    case 15662:
    case 15663:
    case 15664:
    case 15665:
    case 15666:
    case 15667:
    case 15668:
    case 15669:
    case 15671:
    case 15672:
    case 15673:
    case 15674:
      return 72;
    case 15660:
      uint64_t result = 68;
      break;
    case 15670:
      uint64_t result = 38;
      break;
    case 15675:
      uint64_t result = 57;
      break;
    default:
      if (a1 != 15710) {
        return 72;
      }
      uint64_t result = 61;
      break;
  }
  return result;
}

uint64_t specialized CLP_LogEntry_PrivateData_ReachabilityType.init(rawValue:)(uint64_t a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 1;
      break;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    default:
      if (a1 == 1001) {
        uint64_t result = 4;
      }
      else {
        uint64_t result = 5;
      }
      break;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Accel(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Accel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Gyro(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Baro(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Baro);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v76 = (uint64_t)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v1 + 16) = 4;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, v6);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  uint64_t v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  uint64_t v80 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  uint64_t v81 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v82 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  uint64_t v83 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  uint64_t v84 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  unsigned char *v18 = 14;
  uint64_t v85 = v18;
  uint64_t v86 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  v7();
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  uint64_t v87 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  uint64_t v88 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  *(_DWORD *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 4) = 1;
  uint64_t v89 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity) = 5;
  uint64_t v90 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  uint64_t v91 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame) = 3;
  char v93 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType) = 8;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  uint64_t v92 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController) = 2;
  swift_beginAccess();
  char v22 = *(unsigned char *)(a1 + 16);
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v22;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  uint64_t v24 = v76;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v25 = v75;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v24, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  uint64_t v26 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
  swift_beginAccess();
  uint64_t v27 = *v26;
  LOBYTE(v26) = *((unsigned char *)v26 + 8);
  swift_beginAccess();
  *(void *)uint64_t v8 = v27;
  *(unsigned char *)(v8 + 8) = (_BYTE)v26;
  uint64_t v28 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
  swift_beginAccess();
  uint64_t v29 = *v28;
  LOBYTE(v28) = *((unsigned char *)v28 + 8);
  swift_beginAccess();
  *(void *)uint64_t v9 = v29;
  *(unsigned char *)(v9 + 8) = (_BYTE)v28;
  uint64_t v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
  swift_beginAccess();
  uint64_t v31 = *v30;
  LOBYTE(v30) = *((unsigned char *)v30 + 8);
  uint64_t v32 = v77;
  swift_beginAccess();
  *(void *)uint64_t v32 = v31;
  *(unsigned char *)(v32 + 8) = (_BYTE)v30;
  uint64_t v33 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
  swift_beginAccess();
  uint64_t v34 = *v33;
  LOBYTE(v33) = *((unsigned char *)v33 + 8);
  uint64_t v35 = v78;
  swift_beginAccess();
  *(void *)uint64_t v35 = v34;
  *(unsigned char *)(v35 + 8) = (_BYTE)v33;
  uint64_t v36 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
  swift_beginAccess();
  uint64_t v37 = *v36;
  LOBYTE(v36) = *((unsigned char *)v36 + 8);
  uint64_t v38 = v79;
  swift_beginAccess();
  *(void *)uint64_t v38 = v37;
  *(unsigned char *)(v38 + 8) = (_BYTE)v36;
  uint64_t v39 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
  swift_beginAccess();
  uint64_t v40 = *v39;
  LOBYTE(v39) = *((unsigned char *)v39 + 8);
  uint64_t v41 = v80;
  swift_beginAccess();
  *(void *)uint64_t v41 = v40;
  *(unsigned char *)(v41 + 8) = (_BYTE)v39;
  uint64_t v42 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
  swift_beginAccess();
  uint64_t v43 = *v42;
  LOBYTE(v42) = *((unsigned char *)v42 + 8);
  uint64_t v44 = v81;
  swift_beginAccess();
  *(void *)uint64_t v44 = v43;
  *(unsigned char *)(v44 + 8) = (_BYTE)v42;
  uint64_t v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
  swift_beginAccess();
  uint64_t v46 = *v45;
  LOBYTE(v45) = *((unsigned char *)v45 + 8);
  uint64_t v47 = v82;
  swift_beginAccess();
  *(void *)uint64_t v47 = v46;
  *(unsigned char *)(v47 + 8) = (_BYTE)v45;
  uint64_t v48 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  LODWORD(v46) = *(_DWORD *)v48;
  LOBYTE(v48) = *(unsigned char *)(v48 + 4);
  uint64_t v49 = v83;
  swift_beginAccess();
  *(_DWORD *)uint64_t v49 = v46;
  *(unsigned char *)(v49 + 4) = v48;
  uint64_t v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
  swift_beginAccess();
  uint64_t v51 = *v50;
  LOBYTE(v50) = *((unsigned char *)v50 + 8);
  uint64_t v52 = v84;
  swift_beginAccess();
  *(void *)uint64_t v52 = v51;
  *(unsigned char *)(v52 + 8) = (_BYTE)v50;
  uint64_t v53 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  LOBYTE(v53) = *v53;
  uint64_t v54 = v85;
  swift_beginAccess();
  *uint64_t v54 = (_BYTE)v53;
  uint64_t v55 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v56 = v86;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v24, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  uint64_t v57 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
  swift_beginAccess();
  uint64_t v58 = *v57;
  LOBYTE(v57) = *((unsigned char *)v57 + 8);
  uint64_t v59 = v87;
  swift_beginAccess();
  *(void *)uint64_t v59 = v58;
  *(unsigned char *)(v59 + 8) = (_BYTE)v57;
  uint64_t v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  LODWORD(v58) = *(_DWORD *)v60;
  LOBYTE(v60) = *(unsigned char *)(v60 + 4);
  uint64_t v61 = v88;
  swift_beginAccess();
  *(_DWORD *)uint64_t v61 = v58;
  *(unsigned char *)(v61 + 4) = v60;
  uint64_t v62 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  LOBYTE(v62) = *v62;
  uint64_t v63 = v89;
  swift_beginAccess();
  *uint64_t v63 = (_BYTE)v62;
  uint64_t v64 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  LOBYTE(v64) = *v64;
  uint64_t v65 = v90;
  swift_beginAccess();
  *uint64_t v65 = (_BYTE)v64;
  uint64_t v66 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  LOBYTE(v66) = *v66;
  uint64_t v67 = v91;
  swift_beginAccess();
  *uint64_t v67 = (_BYTE)v66;
  uint64_t v68 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  LOBYTE(v68) = *v68;
  uint64_t v69 = v93;
  swift_beginAccess();
  *uint64_t v69 = (_BYTE)v68;
  uint64_t v70 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
  swift_beginAccess();
  uint64_t v71 = *v70;
  LOBYTE(v70) = *((unsigned char *)v70 + 8);
  swift_beginAccess();
  *(void *)uint64_t v21 = v71;
  *(unsigned char *)(v21 + 8) = (_BYTE)v70;
  uint64_t v72 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  LOBYTE(v72) = *v72;
  uint64_t v73 = v92;
  swift_beginAccess();
  *uint64_t v73 = (_BYTE)v72;
  return v1;
}

uint64_t outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.init(rawValue:)(uint64_t result)
{
  if (result <= 1)
  {
    if ((unint64_t)result <= 1) {
      return result;
    }
    return 4;
  }
  if (result != 2)
  {
    if (result == 0xFFFF) {
      return 3;
    }
    return 4;
  }
  return result;
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.init(rawValue:)(uint64_t a1)
{
  if (a1 <= 24)
  {
    if (a1 == -1) {
      return 0;
    }
    if (!a1) {
      return 1;
    }
  }
  else
  {
    switch(a1)
    {
      case 25:
        return 2;
      case 50:
        return 3;
      case 75:
        return 4;
    }
  }
  return 5;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v235 = (uint64_t)&v177 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v215 = (uint64_t)&v177 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v200 = (uint64_t)&v177 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v191 = (uint64_t)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  uint64_t v178 = (void *)(v1 + 16);
  *(unsigned char *)(v1 + 24) = 1;
  *(void *)(v1 + 32) = 0;
  uint64_t v179 = (void *)(v1 + 32);
  *(void *)(v1 + 48) = 0;
  uint64_t v180 = (void *)(v1 + 48);
  *(unsigned char *)(v1 + 40) = 1;
  *(unsigned char *)(v1 + 56) = 1;
  *(void *)(v1 + 64) = 0;
  uint64_t v181 = (void *)(v1 + 64);
  *(unsigned char *)(v1 + 72) = 1;
  *(void *)(v1 + 80) = 0;
  uint64_t v182 = (void *)(v1 + 80);
  *(_DWORD *)(v1 + 92) = 0;
  uint64_t v183 = (_DWORD *)(v1 + 92);
  *(unsigned char *)(v1 + 88) = 1;
  *(unsigned char *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 0;
  uint64_t v184 = (_DWORD *)(v1 + 100);
  *(_DWORD *)(v1 + 108) = 0;
  uint64_t v185 = (_DWORD *)(v1 + 108);
  *(_WORD *)(v1 + 113) = 1026;
  *(unsigned char *)(v1 + 104) = 1;
  uint64_t v186 = (unsigned char *)(v1 + 113);
  uint64_t v187 = v1 + 114;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  uint64_t v188 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  *(unsigned char *)(v1 + 112) = 1;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v13 = *(void (**)(void))(*(void *)(v12 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1, v12);
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  uint64_t v189 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  uint64_t v190 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  uint64_t v192 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v193 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted) = 2;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  uint64_t v194 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v195 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel) = 4;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  uint64_t v196 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  *(_DWORD *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 4) = 1;
  uint64_t v197 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  v13();
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  uint64_t v198 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  uint64_t v199 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  uint64_t v201 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice) = 3;
  uint64_t v202 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates) = 2;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  uint64_t v203 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  uint64_t v204 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 8) = 1;
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  uint64_t v205 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  *(void *)uint64_t v25 = 0;
  *(unsigned char *)(v25 + 8) = 1;
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  uint64_t v206 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  *(void *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 8) = 1;
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  uint64_t v207 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  *(void *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 8) = 1;
  uint64_t v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  uint64_t v208 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 8) = 1;
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  uint64_t v209 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  *(void *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + 8) = 1;
  uint64_t v210 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed) = 2;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  uint64_t v211 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  *(void *)uint64_t v30 = 0;
  *(unsigned char *)(v30 + 8) = 1;
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  uint64_t v212 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  *(void *)uint64_t v31 = 0;
  *(unsigned char *)(v31 + 8) = 1;
  uint64_t v214 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused) = 2;
  uint64_t v216 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  v13();
  uint64_t v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  uint64_t v217 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  *(void *)uint64_t v32 = 0;
  *(unsigned char *)(v32 + 8) = 1;
  uint64_t v218 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame) = 3;
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  uint64_t v219 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  *(void *)uint64_t v33 = 0;
  *(unsigned char *)(v33 + 8) = 1;
  uint64_t v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  uint64_t v220 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  *(void *)uint64_t v34 = 0;
  *(unsigned char *)(v34 + 8) = 1;
  uint64_t v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  uint64_t v221 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  *(void *)uint64_t v35 = 0;
  *(unsigned char *)(v35 + 8) = 1;
  uint64_t v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  uint64_t v222 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  *(void *)uint64_t v36 = 0;
  *(unsigned char *)(v36 + 8) = 1;
  uint64_t v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  uint64_t v223 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  *(void *)uint64_t v37 = 0;
  *(unsigned char *)(v37 + 8) = 1;
  uint64_t v224 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl) = 2;
  uint64_t v38 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  uint64_t v225 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  *(void *)uint64_t v38 = 0;
  *(unsigned char *)(v38 + 8) = 1;
  uint64_t v39 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  uint64_t v226 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  *(void *)uint64_t v39 = 0;
  *(unsigned char *)(v39 + 8) = 1;
  uint64_t v227 = (void *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport) = MEMORY[0x263F8EE78];
  uint64_t v229 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent) = 3;
  uint64_t v40 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  uint64_t v230 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
  int v231 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState) = 3;
  uint64_t v42 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  uint64_t v232 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  *(void *)uint64_t v42 = 0;
  *(unsigned char *)(v42 + 8) = 1;
  uint64_t v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  *(void *)uint64_t v43 = 0;
  *(unsigned char *)(v43 + 8) = 1;
  char v234 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType) = 4;
  uint64_t v213 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching) = 2;
  uint64_t v228 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy) = 3;
  double v233 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType) = 5;
  uint64_t v44 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp) = 2;
  swift_beginAccess();
  uint64_t v45 = *(void *)(a1 + 16);
  char v46 = *(unsigned char *)(a1 + 24);
  uint64_t v47 = v178;
  swift_beginAccess();
  void *v47 = v45;
  *(unsigned char *)(v1 + 24) = v46;
  swift_beginAccess();
  uint64_t v48 = *(void *)(a1 + 32);
  LOBYTE(v45) = *(unsigned char *)(a1 + 40);
  uint64_t v49 = v179;
  swift_beginAccess();
  void *v49 = v48;
  *(unsigned char *)(v1 + 40) = v45;
  swift_beginAccess();
  uint64_t v50 = *(void *)(a1 + 48);
  LOBYTE(v45) = *(unsigned char *)(a1 + 56);
  uint64_t v51 = v180;
  swift_beginAccess();
  *uint64_t v51 = v50;
  *(unsigned char *)(v1 + 56) = v45;
  swift_beginAccess();
  uint64_t v52 = *(void *)(a1 + 64);
  LOBYTE(v45) = *(unsigned char *)(a1 + 72);
  uint64_t v53 = v181;
  swift_beginAccess();
  *uint64_t v53 = v52;
  *(unsigned char *)(v1 + 72) = v45;
  swift_beginAccess();
  uint64_t v54 = *(void *)(a1 + 80);
  LOBYTE(v45) = *(unsigned char *)(a1 + 88);
  uint64_t v55 = v182;
  swift_beginAccess();
  *uint64_t v55 = v54;
  *(unsigned char *)(v1 + 88) = v45;
  swift_beginAccess();
  LODWORD(v54) = *(_DWORD *)(a1 + 92);
  LOBYTE(v45) = *(unsigned char *)(a1 + 96);
  uint64_t v56 = v183;
  swift_beginAccess();
  _DWORD *v56 = v54;
  *(unsigned char *)(v1 + 96) = v45;
  swift_beginAccess();
  LODWORD(v54) = *(_DWORD *)(a1 + 100);
  LOBYTE(v45) = *(unsigned char *)(a1 + 104);
  uint64_t v57 = v184;
  swift_beginAccess();
  *uint64_t v57 = v54;
  *(unsigned char *)(v1 + 104) = v45;
  swift_beginAccess();
  LODWORD(v54) = *(_DWORD *)(a1 + 108);
  LOBYTE(v45) = *(unsigned char *)(a1 + 112);
  uint64_t v58 = v185;
  swift_beginAccess();
  *uint64_t v58 = v54;
  *(unsigned char *)(v1 + 112) = v45;
  swift_beginAccess();
  LOBYTE(v54) = *(unsigned char *)(a1 + 113);
  uint64_t v59 = v186;
  swift_beginAccess();
  *uint64_t v59 = v54;
  swift_beginAccess();
  LOBYTE(v54) = *(unsigned char *)(a1 + 114);
  swift_beginAccess();
  *(unsigned char *)(v1 + 114) = v54;
  uint64_t v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  uint64_t v61 = v191;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v191, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v62 = v188;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v61, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  uint64_t v63 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
  swift_beginAccess();
  uint64_t v64 = *v63;
  LOBYTE(v63) = *((unsigned char *)v63 + 8);
  uint64_t v65 = v189;
  swift_beginAccess();
  *(void *)uint64_t v65 = v64;
  *(unsigned char *)(v65 + 8) = (_BYTE)v63;
  uint64_t v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  swift_beginAccess();
  LODWORD(v64) = *(_DWORD *)v66;
  LOBYTE(v66) = *(unsigned char *)(v66 + 4);
  uint64_t v67 = v190;
  swift_beginAccess();
  *(_DWORD *)uint64_t v67 = v64;
  *(unsigned char *)(v67 + 4) = v66;
  uint64_t v68 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  swift_beginAccess();
  LODWORD(v64) = *(_DWORD *)v68;
  LOBYTE(v68) = *(unsigned char *)(v68 + 4);
  uint64_t v69 = v192;
  swift_beginAccess();
  *(_DWORD *)uint64_t v69 = v64;
  *(unsigned char *)(v69 + 4) = v68;
  uint64_t v70 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess();
  LOBYTE(v70) = *v70;
  uint64_t v71 = v193;
  swift_beginAccess();
  unsigned char *v71 = (_BYTE)v70;
  uint64_t v72 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  uint64_t v73 = v200;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  uint64_t v74 = v194;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v73, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  swift_endAccess();
  uint64_t v75 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess();
  LOBYTE(v75) = *v75;
  uint64_t v76 = v195;
  swift_beginAccess();
  unsigned char *v76 = (_BYTE)v75;
  uint64_t v77 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess();
  LODWORD(v76) = *(_DWORD *)v77;
  LOBYTE(v77) = *(unsigned char *)(v77 + 4);
  uint64_t v78 = v196;
  swift_beginAccess();
  *(_DWORD *)uint64_t v78 = v76;
  *(unsigned char *)(v78 + 4) = v77;
  uint64_t v79 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v80 = v197;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v61, v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  uint64_t v81 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
  swift_beginAccess();
  uint64_t v82 = *v81;
  LOBYTE(v81) = *((unsigned char *)v81 + 8);
  uint64_t v83 = v198;
  swift_beginAccess();
  *(void *)uint64_t v83 = v82;
  *(unsigned char *)(v83 + 8) = (_BYTE)v81;
  uint64_t v84 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
  swift_beginAccess();
  uint64_t v85 = *v84;
  LOBYTE(v84) = *((unsigned char *)v84 + 8);
  uint64_t v86 = v199;
  swift_beginAccess();
  *(void *)uint64_t v86 = v85;
  *(unsigned char *)(v86 + 8) = (_BYTE)v84;
  uint64_t v87 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess();
  LOBYTE(v87) = *v87;
  uint64_t v88 = v201;
  swift_beginAccess();
  *uint64_t v88 = (_BYTE)v87;
  uint64_t v89 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess();
  LOBYTE(v89) = *v89;
  uint64_t v90 = v202;
  swift_beginAccess();
  *uint64_t v90 = (_BYTE)v89;
  uint64_t v91 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  uint64_t v92 = v215;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, v215, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  uint64_t v93 = v203;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v92, v93, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  swift_endAccess();
  uint64_t v94 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
  swift_beginAccess();
  uint64_t v95 = *v94;
  LOBYTE(v94) = *((unsigned char *)v94 + 8);
  uint64_t v96 = v204;
  swift_beginAccess();
  *(void *)uint64_t v96 = v95;
  *(unsigned char *)(v96 + 8) = (_BYTE)v94;
  uint64_t v97 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
  swift_beginAccess();
  uint64_t v98 = *v97;
  LOBYTE(v97) = *((unsigned char *)v97 + 8);
  uint64_t v99 = v205;
  swift_beginAccess();
  *(void *)uint64_t v99 = v98;
  *(unsigned char *)(v99 + 8) = (_BYTE)v97;
  uint64_t v100 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
  swift_beginAccess();
  uint64_t v101 = *v100;
  LOBYTE(v100) = *((unsigned char *)v100 + 8);
  uint64_t v102 = v206;
  swift_beginAccess();
  *(void *)uint64_t v102 = v101;
  *(unsigned char *)(v102 + 8) = (_BYTE)v100;
  uint64_t v103 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
  swift_beginAccess();
  uint64_t v104 = *v103;
  LOBYTE(v103) = *((unsigned char *)v103 + 8);
  uint64_t v105 = v207;
  swift_beginAccess();
  *(void *)uint64_t v105 = v104;
  *(unsigned char *)(v105 + 8) = (_BYTE)v103;
  uint64_t v106 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
  swift_beginAccess();
  uint64_t v107 = *v106;
  LOBYTE(v106) = *((unsigned char *)v106 + 8);
  uint64_t v108 = v208;
  swift_beginAccess();
  *(void *)uint64_t v108 = v107;
  *(unsigned char *)(v108 + 8) = (_BYTE)v106;
  uint64_t v109 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
  swift_beginAccess();
  uint64_t v110 = *v109;
  LOBYTE(v109) = *((unsigned char *)v109 + 8);
  uint64_t v111 = v209;
  swift_beginAccess();
  *(void *)uint64_t v111 = v110;
  *(unsigned char *)(v111 + 8) = (_BYTE)v109;
  uint64_t v112 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess();
  LOBYTE(v112) = *v112;
  uint64_t v113 = v210;
  swift_beginAccess();
  *uint64_t v113 = (_BYTE)v112;
  uint64_t v114 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
  swift_beginAccess();
  uint64_t v115 = *v114;
  LOBYTE(v114) = *((unsigned char *)v114 + 8);
  uint64_t v116 = v211;
  swift_beginAccess();
  *(void *)uint64_t v116 = v115;
  *(unsigned char *)(v116 + 8) = (_BYTE)v114;
  uint64_t v117 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
  swift_beginAccess();
  uint64_t v118 = *v117;
  LOBYTE(v117) = *((unsigned char *)v117 + 8);
  uint64_t v119 = v212;
  swift_beginAccess();
  *(void *)uint64_t v119 = v118;
  *(unsigned char *)(v119 + 8) = (_BYTE)v117;
  uint64_t v120 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess();
  LOBYTE(v120) = *v120;
  uint64_t v121 = v214;
  swift_beginAccess();
  *uint64_t v121 = (_BYTE)v120;
  uint64_t v122 = a1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v122, v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  uint64_t v123 = v216;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v61, v123, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  uint64_t v124 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
  swift_beginAccess();
  uint64_t v125 = *v124;
  LOBYTE(v124) = *((unsigned char *)v124 + 8);
  uint64_t v126 = v217;
  swift_beginAccess();
  *(void *)uint64_t v126 = v125;
  *(unsigned char *)(v126 + 8) = (_BYTE)v124;
  uint64_t v127 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess();
  LOBYTE(v127) = *v127;
  uint64_t v128 = v218;
  swift_beginAccess();
  *uint64_t v128 = (_BYTE)v127;
  uint64_t v129 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
  swift_beginAccess();
  uint64_t v130 = *v129;
  LOBYTE(v129) = *((unsigned char *)v129 + 8);
  uint64_t v131 = v219;
  swift_beginAccess();
  *(void *)uint64_t v131 = v130;
  *(unsigned char *)(v131 + 8) = (_BYTE)v129;
  uint64_t v132 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
  swift_beginAccess();
  uint64_t v133 = *v132;
  LOBYTE(v132) = *((unsigned char *)v132 + 8);
  uint64_t v134 = v220;
  swift_beginAccess();
  *(void *)uint64_t v134 = v133;
  *(unsigned char *)(v134 + 8) = (_BYTE)v132;
  double v135 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
  swift_beginAccess();
  uint64_t v136 = *v135;
  LOBYTE(v135) = *((unsigned char *)v135 + 8);
  uint64_t v137 = v221;
  swift_beginAccess();
  *(void *)uint64_t v137 = v136;
  *(unsigned char *)(v137 + 8) = (_BYTE)v135;
  double v138 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
  swift_beginAccess();
  uint64_t v139 = *v138;
  LOBYTE(v138) = *((unsigned char *)v138 + 8);
  uint64_t v140 = v222;
  swift_beginAccess();
  *(void *)uint64_t v140 = v139;
  *(unsigned char *)(v140 + 8) = (_BYTE)v138;
  uint64_t v141 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
  swift_beginAccess();
  uint64_t v142 = *v141;
  LOBYTE(v141) = *((unsigned char *)v141 + 8);
  uint64_t v143 = v223;
  swift_beginAccess();
  *(void *)uint64_t v143 = v142;
  *(unsigned char *)(v143 + 8) = (_BYTE)v141;
  uint64_t v144 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess();
  LOBYTE(v144) = *v144;
  uint64_t v145 = v224;
  swift_beginAccess();
  *uint64_t v145 = (_BYTE)v144;
  uint64_t v146 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
  swift_beginAccess();
  uint64_t v147 = *v146;
  LOBYTE(v146) = *((unsigned char *)v146 + 8);
  uint64_t v148 = v225;
  swift_beginAccess();
  *(void *)uint64_t v148 = v147;
  *(unsigned char *)(v148 + 8) = (_BYTE)v146;
  uint64_t v149 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
  swift_beginAccess();
  uint64_t v150 = *v149;
  LOBYTE(v149) = *((unsigned char *)v149 + 8);
  uint64_t v151 = v226;
  swift_beginAccess();
  *(void *)uint64_t v151 = v150;
  *(unsigned char *)(v151 + 8) = (_BYTE)v149;
  uint64_t v152 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess();
  uint64_t v153 = *v152;
  uint64_t v154 = v227;
  swift_beginAccess();
  *uint64_t v154 = v153;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v155 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess();
  LOBYTE(v155) = *v155;
  uint64_t v156 = v229;
  swift_beginAccess();
  *uint64_t v156 = (_BYTE)v155;
  uint64_t v157 = a1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  uint64_t v158 = v235;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v157, v235, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  uint64_t v159 = v230;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v158, v159, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  swift_endAccess();
  uint64_t v160 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess();
  LOBYTE(v160) = *v160;
  uint64_t v161 = v231;
  swift_beginAccess();
  unsigned char *v161 = (_BYTE)v160;
  uint64_t v162 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
  swift_beginAccess();
  uint64_t v163 = *v162;
  LOBYTE(v162) = *((unsigned char *)v162 + 8);
  uint64_t v164 = v232;
  swift_beginAccess();
  *(void *)uint64_t v164 = v163;
  *(unsigned char *)(v164 + 8) = (_BYTE)v162;
  uint64_t v165 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
  swift_beginAccess();
  uint64_t v166 = *v165;
  LOBYTE(v165) = *((unsigned char *)v165 + 8);
  swift_beginAccess();
  *(void *)uint64_t v43 = v166;
  *(unsigned char *)(v43 + 8) = (_BYTE)v165;
  uint64_t v167 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess();
  LOBYTE(v167) = *v167;
  uint64_t v168 = v234;
  swift_beginAccess();
  *uint64_t v168 = (_BYTE)v167;
  uint64_t v169 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess();
  LOBYTE(v169) = *v169;
  char v170 = v213;
  swift_beginAccess();
  *char v170 = (_BYTE)v169;
  uint64_t v171 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess();
  LOBYTE(v171) = *v171;
  int v172 = v228;
  swift_beginAccess();
  *int v172 = (_BYTE)v171;
  uint64_t v173 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess();
  LOBYTE(v173) = *v173;
  uint64_t v174 = v233;
  swift_beginAccess();
  *uint64_t v174 = (_BYTE)v173;
  uint64_t v175 = (unsigned char *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess();
  LOBYTE(v175) = *v175;
  swift_beginAccess();
  unsigned char *v44 = (_BYTE)v175;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.init(rawValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 4) {
    return a1 + 1;
  }
  else {
    return 4;
  }
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Location(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Location);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Location._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionActivity._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WorkoutSettings);
}

unint64_t specialized CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.init(rawValue:)(unint64_t result)
{
  if (result >= 0x43) {
    return 67;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WorkoutEvent);
}

unint64_t specialized CLP_LogEntry_PrivateData_WorkoutEvent.EventType.init(rawValue:)(unint64_t result)
{
  if (result >= 0x13) {
    return 19;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BodyMetrics);
}

unint64_t specialized CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.init(rawValue:)(unint64_t result)
{
  if (result >= 8) {
    return 8;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Timer(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Timer);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapVector(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapVector._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  uint64_t v60 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  *uint64_t v13 = 3;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  uint64_t v61 = v13;
  uint64_t v62 = v14;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  uint64_t v63 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  uint64_t v64 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  unsigned char *v17 = 2;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  uint64_t v65 = v17;
  uint64_t v66 = v18;
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  uint64_t v67 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  uint64_t v68 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  uint64_t v69 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  *(unsigned char *)(v21 + 8) = 1;
  *(void *)uint64_t v21 = 0;
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v23 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
  swift_beginAccess();
  uint64_t v24 = *v23;
  LOBYTE(v23) = *((unsigned char *)v23 + 8);
  swift_beginAccess();
  *(void *)uint64_t v8 = v24;
  *(unsigned char *)(v8 + 8) = (_BYTE)v23;
  uint64_t v25 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
  swift_beginAccess();
  uint64_t v26 = *v25;
  LOBYTE(v25) = *((unsigned char *)v25 + 8);
  swift_beginAccess();
  *(void *)uint64_t v9 = v26;
  *(unsigned char *)(v9 + 8) = (_BYTE)v25;
  uint64_t v27 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
  swift_beginAccess();
  uint64_t v28 = *v27;
  LOBYTE(v27) = *((unsigned char *)v27 + 8);
  swift_beginAccess();
  *(void *)uint64_t v10 = v28;
  *(unsigned char *)(v10 + 8) = (_BYTE)v27;
  uint64_t v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
  swift_beginAccess();
  uint64_t v30 = *v29;
  LOBYTE(v29) = *((unsigned char *)v29 + 8);
  swift_beginAccess();
  *(void *)uint64_t v11 = v30;
  *(unsigned char *)(v11 + 8) = (_BYTE)v29;
  uint64_t v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
  swift_beginAccess();
  uint64_t v32 = *v31;
  LOBYTE(v31) = *((unsigned char *)v31 + 8);
  uint64_t v33 = v60;
  swift_beginAccess();
  *(void *)uint64_t v33 = v32;
  *(unsigned char *)(v33 + 8) = (_BYTE)v31;
  uint64_t v34 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  LOBYTE(v34) = *v34;
  uint64_t v35 = v61;
  swift_beginAccess();
  unsigned char *v35 = (_BYTE)v34;
  uint64_t v36 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
  swift_beginAccess();
  uint64_t v37 = *v36;
  LOBYTE(v36) = *((unsigned char *)v36 + 8);
  uint64_t v38 = v62;
  swift_beginAccess();
  *(void *)uint64_t v38 = v37;
  *(unsigned char *)(v38 + 8) = (_BYTE)v36;
  uint64_t v39 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
  swift_beginAccess();
  uint64_t v40 = *v39;
  LOBYTE(v39) = *((unsigned char *)v39 + 8);
  uint64_t v41 = v63;
  swift_beginAccess();
  *(void *)uint64_t v41 = v40;
  *(unsigned char *)(v41 + 8) = (_BYTE)v39;
  uint64_t v42 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
  swift_beginAccess();
  uint64_t v43 = *v42;
  LOBYTE(v42) = *((unsigned char *)v42 + 8);
  uint64_t v44 = v64;
  swift_beginAccess();
  *(void *)uint64_t v44 = v43;
  *(unsigned char *)(v44 + 8) = (_BYTE)v42;
  uint64_t v45 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  LOBYTE(v45) = *v45;
  char v46 = v65;
  swift_beginAccess();
  unsigned char *v46 = (_BYTE)v45;
  uint64_t v47 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
  swift_beginAccess();
  uint64_t v48 = *v47;
  LOBYTE(v47) = *((unsigned char *)v47 + 8);
  uint64_t v49 = v66;
  swift_beginAccess();
  *(void *)uint64_t v49 = v48;
  *(unsigned char *)(v49 + 8) = (_BYTE)v47;
  uint64_t v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
  swift_beginAccess();
  uint64_t v51 = *v50;
  LOBYTE(v50) = *((unsigned char *)v50 + 8);
  uint64_t v52 = v67;
  swift_beginAccess();
  *(void *)uint64_t v52 = v51;
  *(unsigned char *)(v52 + 8) = (_BYTE)v50;
  uint64_t v53 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
  swift_beginAccess();
  uint64_t v54 = *v53;
  LOBYTE(v53) = *((unsigned char *)v53 + 8);
  uint64_t v55 = v68;
  swift_beginAccess();
  *(void *)uint64_t v55 = v54;
  *(unsigned char *)(v55 + 8) = (_BYTE)v53;
  uint64_t v56 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
  swift_beginAccess();
  uint64_t v57 = *v56;
  LOBYTE(v56) = *((unsigned char *)v56 + 8);
  uint64_t v58 = v69;
  swift_beginAccess();
  *(void *)uint64_t v58 = v57;
  *(unsigned char *)(v58 + 8) = (_BYTE)v56;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Battery(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Battery);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v51 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v47 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData) = 20;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  uint64_t v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v45 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode) = 2;
  char v46 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn) = 2;
  uint64_t v48 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen) = 2;
  uint64_t v49 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled) = 2;
  uint64_t v50 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected) = 2;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  uint64_t v52 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  *(_DWORD *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 4) = 1;
  uint64_t v53 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode) = 2;
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v20, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  LODWORD(v20) = *(_DWORD *)v21;
  LOBYTE(v21) = *(unsigned char *)(v21 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v20;
  *(unsigned char *)(v12 + 4) = v21;
  uint64_t v22 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  LOBYTE(v22) = *v22;
  swift_beginAccess();
  *uint64_t v13 = (_BYTE)v22;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  uint64_t v24 = v47;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v24, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  swift_endAccess();
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  uint64_t v26 = v51;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  uint64_t v27 = v44;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v26, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  swift_endAccess();
  uint64_t v28 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  LOBYTE(v28) = *v28;
  uint64_t v29 = v45;
  swift_beginAccess();
  unsigned char *v29 = (_BYTE)v28;
  uint64_t v30 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  LOBYTE(v30) = *v30;
  uint64_t v31 = v46;
  swift_beginAccess();
  unsigned char *v31 = (_BYTE)v30;
  uint64_t v32 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  LOBYTE(v32) = *v32;
  uint64_t v33 = v48;
  swift_beginAccess();
  unsigned char *v33 = (_BYTE)v32;
  uint64_t v34 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  LOBYTE(v34) = *v34;
  uint64_t v35 = v49;
  swift_beginAccess();
  unsigned char *v35 = (_BYTE)v34;
  uint64_t v36 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  LOBYTE(v36) = *v36;
  uint64_t v37 = v50;
  swift_beginAccess();
  unsigned char *v37 = (_BYTE)v36;
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  LODWORD(v37) = *(_DWORD *)v38;
  LOBYTE(v38) = *(unsigned char *)(v38 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v18 = v37;
  *(unsigned char *)(v18 + 4) = v38;
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  LODWORD(v37) = *(_DWORD *)v39;
  LOBYTE(v39) = *(unsigned char *)(v39 + 4);
  uint64_t v40 = v52;
  swift_beginAccess();
  *(_DWORD *)uint64_t v40 = v37;
  *(unsigned char *)(v40 + 4) = v39;
  uint64_t v41 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  LOBYTE(v41) = *v41;
  uint64_t v42 = v53;
  swift_beginAccess();
  unsigned char *v42 = (_BYTE)v41;
  return v1;
}

unint64_t specialized CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.init(rawValue:)(unint64_t result)
{
  if (result >= 0x14) {
    return 20;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t specialized CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.init(rawValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 8) {
    return a1 + 1;
  }
  else {
    return 8;
  }
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MagSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Reset(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Reset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCount(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Compass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Compass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v13 = *(void (**)(void))(*(void *)(v12 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1, v12);
  uint64_t v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  v13();
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  v13();
  uint64_t v34 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel) = 8;
  uint64_t v35 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection) = 2;
  uint64_t v36 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation) = 2;
  uint64_t v37 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p) = 2;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v15, (uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v8, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  uint64_t v16 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v16, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v18 = v32;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  uint64_t v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v19, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  uint64_t v20 = v33;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  uint64_t v21 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  LOBYTE(v21) = *v21;
  uint64_t v22 = v34;
  swift_beginAccess();
  unsigned char *v22 = (_BYTE)v21;
  uint64_t v23 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  LOBYTE(v23) = *v23;
  uint64_t v24 = v35;
  swift_beginAccess();
  unsigned char *v24 = (_BYTE)v23;
  uint64_t v25 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  LOBYTE(v25) = *v25;
  uint64_t v26 = v36;
  swift_beginAccess();
  unsigned char *v26 = (_BYTE)v25;
  uint64_t v27 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  LOBYTE(v27) = *v27;
  uint64_t v28 = v37;
  swift_beginAccess();
  unsigned char *v28 = (_BYTE)v27;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  LODWORD(v27) = *(_DWORD *)v29;
  LOBYTE(v29) = *(unsigned char *)(v29 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v14 = v27;
  *(unsigned char *)(v14 + 4) = v29;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WristState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WristState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WatchState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v35 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v34 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  v12(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, 1, 1, v11);
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  v12(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, 1, 1, v11);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  v12(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, 1, 1, v11);
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v21, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v24, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  uint64_t v26 = v34;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  uint64_t v27 = v33;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v26, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  swift_endAccess();
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  uint64_t v29 = v35;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v29, v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  uint64_t v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
  swift_beginAccess();
  uint64_t v31 = *v30;
  LOBYTE(v30) = *((unsigned char *)v30 + 8);
  swift_beginAccess();
  *(void *)uint64_t v20 = v31;
  *(unsigned char *)(v20 + 8) = (_BYTE)v30;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass()
{
  return self;
}

uint64_t specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 1;
  *(_DWORD *)(v1 + 44) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  *(unsigned char *)(v1 + 48) = 1;
  *(unsigned char *)(v1 + 56) = 1;
  *(_DWORD *)(v1 + 60) = 0;
  *(unsigned char *)(v1 + 64) = 1;
  *(_DWORD *)(v1 + 68) = 0;
  *(_DWORD *)(v1 + 76) = 0;
  *(unsigned char *)(v1 + 72) = 1;
  *(unsigned char *)(v1 + 80) = 1;
  *(_DWORD *)(v1 + 84) = 0;
  *(unsigned char *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 92) = 0;
  *(_DWORD *)(v1 + 100) = 0;
  *(unsigned char *)(v1 + 96) = 1;
  *(unsigned char *)(v1 + 104) = 1;
  *(_DWORD *)(v1 + 108) = 0;
  *(unsigned char *)(v1 + 112) = 1;
  *(_DWORD *)(v1 + 116) = 0;
  *(unsigned char *)(v1 + 120) = 1;
  *(unsigned char *)(v1 + 128) = 1;
  *(_DWORD *)(v1 + 129) = 33686019;
  *(_DWORD *)(v1 + 124) = 0;
  swift_beginAccess();
  uint64_t v3 = *(void *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 24) = v4;
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 32);
  LOBYTE(v3) = *(unsigned char *)(a1 + 40);
  swift_beginAccess();
  *(void *)(v1 + 32) = v5;
  *(unsigned char *)(v1 + 40) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 44);
  LOBYTE(v3) = *(unsigned char *)(a1 + 48);
  swift_beginAccess();
  *(_DWORD *)(v1 + 44) = v5;
  *(unsigned char *)(v1 + 48) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 52);
  LOBYTE(v3) = *(unsigned char *)(a1 + 56);
  swift_beginAccess();
  *(_DWORD *)(v1 + 52) = v5;
  *(unsigned char *)(v1 + 56) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 60);
  LOBYTE(v3) = *(unsigned char *)(a1 + 64);
  swift_beginAccess();
  *(_DWORD *)(v1 + 60) = v5;
  *(unsigned char *)(v1 + 64) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 68);
  LOBYTE(v3) = *(unsigned char *)(a1 + 72);
  swift_beginAccess();
  *(_DWORD *)(v1 + 68) = v5;
  *(unsigned char *)(v1 + 72) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 76);
  LOBYTE(v3) = *(unsigned char *)(a1 + 80);
  swift_beginAccess();
  *(_DWORD *)(v1 + 76) = v5;
  *(unsigned char *)(v1 + 80) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 84);
  LOBYTE(v3) = *(unsigned char *)(a1 + 88);
  swift_beginAccess();
  *(_DWORD *)(v1 + 84) = v5;
  *(unsigned char *)(v1 + 88) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 92);
  LOBYTE(v3) = *(unsigned char *)(a1 + 96);
  swift_beginAccess();
  *(_DWORD *)(v1 + 92) = v5;
  *(unsigned char *)(v1 + 96) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 100);
  LOBYTE(v3) = *(unsigned char *)(a1 + 104);
  swift_beginAccess();
  *(_DWORD *)(v1 + 100) = v5;
  *(unsigned char *)(v1 + 104) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 108);
  LOBYTE(v3) = *(unsigned char *)(a1 + 112);
  swift_beginAccess();
  *(_DWORD *)(v1 + 108) = v5;
  *(unsigned char *)(v1 + 112) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 116);
  LOBYTE(v3) = *(unsigned char *)(a1 + 120);
  swift_beginAccess();
  *(_DWORD *)(v1 + 116) = v5;
  *(unsigned char *)(v1 + 120) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 124);
  LOBYTE(v3) = *(unsigned char *)(a1 + 128);
  swift_beginAccess();
  *(_DWORD *)(v1 + 124) = v5;
  *(unsigned char *)(v1 + 128) = v3;
  swift_beginAccess();
  LOBYTE(v5) = *(unsigned char *)(a1 + 129);
  swift_beginAccess();
  *(unsigned char *)(v1 + 129) = v5;
  swift_beginAccess();
  LOBYTE(v5) = *(unsigned char *)(a1 + 130);
  swift_beginAccess();
  *(unsigned char *)(v1 + 130) = v5;
  swift_beginAccess();
  LOBYTE(v5) = *(unsigned char *)(a1 + 131);
  swift_beginAccess();
  *(unsigned char *)(v1 + 131) = v5;
  swift_beginAccess();
  LOBYTE(a1) = *(unsigned char *)(a1 + 132);
  swift_beginAccess();
  *(unsigned char *)(v1 + 132) = a1;
  return v1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v36 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  int v14 = *((unsigned __int8 *)a1 + v13);
  int v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 4)
  {
    if (v15 != 4) {
      goto LABEL_24;
    }
  }
  else if (v15 == 4 || v14 != v15)
  {
    goto LABEL_24;
  }
  uint64_t v17 = v11[7];
  uint64_t v18 = (_DWORD *)((char *)a1 + v17);
  char v19 = *((unsigned char *)a1 + v17 + 4);
  uint64_t v20 = (_DWORD *)((char *)a2 + v17);
  int v21 = *((unsigned __int8 *)a2 + v17 + 4);
  if (v19)
  {
    if (!v21) {
      goto LABEL_24;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_24;
    }
  }
  uint64_t v22 = v11[8];
  uint64_t v23 = (_DWORD *)((char *)a1 + v22);
  char v24 = *((unsigned char *)a1 + v22 + 4);
  uint64_t v25 = (_DWORD *)((char *)a2 + v22);
  int v26 = *((unsigned __int8 *)a2 + v22 + 4);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_24;
    }
LABEL_22:
    uint64_t v27 = v11[9];
    uint64_t v28 = (_DWORD *)((char *)a1 + v27);
    char v29 = *((unsigned char *)a1 + v27 + 4);
    uint64_t v30 = (_DWORD *)((char *)a2 + v27);
    int v31 = *((unsigned __int8 *)a2 + v27 + 4);
    if (v29)
    {
      if (!v31) {
        goto LABEL_24;
      }
    }
    else
    {
      if (*v28 != *v30) {
        LOBYTE(v31) = 1;
      }
      if (v31) {
        goto LABEL_24;
      }
    }
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v34(v10, (char *)a1 + v11[5], v4);
    v34(v8, (char *)a2 + v12[5], v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    v35(v10, v4);
    return v32 & 1;
  }
  if (v26) {
    goto LABEL_22;
  }
LABEL_24:
  char v32 = 0;
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v81 = *(void *)(v4 - 8);
  uint64_t v82 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v80 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v79 = (char *)&v79 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v92 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v84 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v87 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v79 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v83 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v91 = (uint64_t)&v79 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v86 = (uint64_t)&v79 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  char v24 = (char *)&v79 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v27 = (char *)&v79 - v26;
  MEMORY[0x270FA5388](v25);
  char v29 = (char *)&v79 - v28;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  uint64_t v31 = *(int *)(v30 + 28);
  uint64_t v89 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a1 + v31, (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v88 = (int *)v30;
  uint64_t v32 = *(int *)(v30 + 28);
  uint64_t v90 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v32, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v85 = v10;
  uint64_t v33 = *(int *)(v10 + 48);
  uint64_t v34 = v8;
  uint64_t v35 = v92;
  uint64_t v36 = (uint64_t)&v14[v33];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v37((uint64_t)v14, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v37(v36, 1, v34) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v38 = (uint64_t)v14;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v37(v36, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v39 = v84;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v36, v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  LODWORD(v92) = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v24, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v92 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v41 = v88;
  uint64_t v40 = v89;
  uint64_t v42 = v86;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v89 + v88[8], v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v43 = v91;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v90 + v41[8], v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v44 = v87;
  uint64_t v45 = v87 + *(int *)(v85 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v37(v44, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v37(v45, 1, v34) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  uint64_t v46 = v83;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v37(v45, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v46, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    uint64_t v38 = v44;
    goto LABEL_14;
  }
  uint64_t v49 = v84;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v45, v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v50 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v46, v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v46, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v50 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v51 = v41[9];
  uint64_t v52 = (_DWORD *)((char *)v40 + v51);
  char v53 = *((unsigned char *)v40 + v51 + 4);
  uint64_t v54 = v90;
  uint64_t v55 = (_DWORD *)((char *)v90 + v51);
  int v56 = *((unsigned __int8 *)v90 + v51 + 4);
  if (v53)
  {
    if (!v56) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v52 != *v55) {
      LOBYTE(v56) = 1;
    }
    if (v56) {
      goto LABEL_15;
    }
  }
  uint64_t v57 = v41[10];
  int v58 = *((unsigned __int8 *)v40 + v57);
  int v59 = *((unsigned __int8 *)v90 + v57);
  if (v58 == 5)
  {
    if (v59 != 5) {
      goto LABEL_15;
    }
  }
  else
  {
    char v47 = 0;
    if (v59 == 5 || v58 != v59) {
      return v47 & 1;
    }
  }
  uint64_t v60 = v41[11];
  uint64_t v61 = (_DWORD *)((char *)v40 + v60);
  char v62 = *((unsigned char *)v40 + v60 + 4);
  uint64_t v63 = (_DWORD *)((char *)v90 + v60);
  int v64 = *((unsigned __int8 *)v90 + v60 + 4);
  if (v62)
  {
    if (!v64) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v61 != *v63) {
      LOBYTE(v64) = 1;
    }
    if (v64) {
      goto LABEL_15;
    }
  }
  if (!specialized static Array<A>.== infix(_:_:)(*v40, *v90)
    || !specialized static Array<A>.== infix(_:_:)(v40[1], v54[1]))
  {
    goto LABEL_15;
  }
  uint64_t v65 = v41[12];
  int v66 = *((unsigned __int8 *)v40 + v65);
  int v67 = *((unsigned __int8 *)v54 + v65);
  if (v66 != 2)
  {
    if (v67 != 2 && ((((v67 & 1) == 0) ^ v66) & 1) != 0) {
      goto LABEL_42;
    }
LABEL_15:
    char v47 = 0;
    return v47 & 1;
  }
  if (v67 != 2) {
    goto LABEL_15;
  }
LABEL_42:
  uint64_t v68 = v41[13];
  int v69 = *((unsigned __int8 *)v40 + v68);
  int v70 = *((unsigned __int8 *)v54 + v68);
  if (v69 == 2)
  {
    if (v70 == 2)
    {
LABEL_47:
      uint64_t v71 = (char *)v40 + v41[6];
      uint64_t v73 = v81;
      uint64_t v72 = v82;
      uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
      uint64_t v75 = v79;
      v74(v79, v71, v82);
      uint64_t v76 = (char *)v54 + v41[6];
      uint64_t v77 = v80;
      v74(v80, v76, v72);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v78 = *(void (**)(char *, uint64_t))(v73 + 8);
      v78(v77, v72);
      v78(v75, v72);
      return v47 & 1;
    }
    goto LABEL_15;
  }
  char v47 = 0;
  if (v70 != 2 && ((v70 ^ v69) & 1) == 0) {
    goto LABEL_47;
  }
  return v47 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_12;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v15 = *(int *)(v11 + 24);
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
    {
LABEL_12:
      char v19 = 0;
      return v19 & 1;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, a1, v4);
  v18(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v55 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v54 = (char *)&v53 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v58 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v53 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v53 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v59 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (int *)v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = v27[5];
  uint64_t v60 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_21:
    char v37 = 0;
    return v37 & 1;
  }
  uint64_t v31 = v58;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v58, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  uint64_t v33 = v27[6];
  uint64_t v34 = v60;
  int v35 = *(unsigned __int8 *)(v59 + v33);
  int v36 = *(unsigned __int8 *)(v60 + v33);
  if (v35 == 4)
  {
    if (v36 != 4) {
      goto LABEL_21;
    }
  }
  else
  {
    char v37 = 0;
    if (v36 == 4 || v35 != v36) {
      return v37 & 1;
    }
  }
  uint64_t v38 = v27[7];
  uint64_t v39 = (double *)(v59 + v38);
  char v40 = *(unsigned char *)(v59 + v38 + 8);
  uint64_t v41 = (double *)(v60 + v38);
  int v42 = *(unsigned __int8 *)(v60 + v38 + 8);
  if (v40)
  {
    if (!v42) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v39 != *v41) {
      LOBYTE(v42) = 1;
    }
    if (v42) {
      goto LABEL_21;
    }
  }
  uint64_t v43 = v27[8];
  int v44 = *(unsigned __int8 *)(v59 + v43);
  int v45 = *(unsigned __int8 *)(v60 + v43);
  if (v44 == 4)
  {
    if (v45 != 4) {
      goto LABEL_21;
    }
LABEL_25:
    uint64_t v48 = v56;
    uint64_t v47 = v57;
    uint64_t v49 = *(void (**)(char *))(v56 + 16);
    char v50 = v54;
    v49(v54);
    uint64_t v51 = v55;
    ((void (*)(char *, uint64_t, uint64_t))v49)(v55, v34, v47);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v52 = *(void (**)(char *, uint64_t))(v48 + 8);
    v52(v51, v47);
    v52(v50, v47);
    return v37 & 1;
  }
  char v37 = 0;
  if (v45 != 4 && v44 == v45) {
    goto LABEL_25;
  }
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_TunnelBridgeNotification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v65 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  int v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v63 = (char *)&v62 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v62 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, CLP_LogEntry_PrivateData_TunnelBridgeAssistance?));
  MEMORY[0x270FA5388](v68);
  uint64_t v72 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v67 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v73 = (uint64_t)&v62 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v69 = (uint64_t)&v62 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v62 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v62 - v30;
  char v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v32[5], (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75 + v32[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    int v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v39 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v26, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v39 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v40 = v32[6];
  uint64_t v41 = v74;
  uint64_t v42 = v75;
  uint64_t v43 = (_DWORD *)(v74 + v40);
  char v44 = *(unsigned char *)(v74 + v40 + 4);
  int v45 = (_DWORD *)(v75 + v40);
  int v46 = *(unsigned __int8 *)(v75 + v40 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_8;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_8;
    }
  }
  uint64_t v47 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v32[7], v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  uint64_t v48 = v73;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42 + v32[7], v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  uint64_t v49 = v72;
  uint64_t v50 = v72 + *(int *)(v68 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  uint64_t v51 = v71;
  uint64_t v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (v52(v49, 1, v71) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    if (v52(v50, 1, v51) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
LABEL_24:
      uint64_t v57 = v65;
      uint64_t v56 = v66;
      uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
      uint64_t v59 = v63;
      v58(v63, v41, v66);
      uint64_t v60 = v64;
      v58(v64, v42, v56);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v61 = *(void (**)(char *, uint64_t))(v57 + 8);
      v61(v60, v56);
      v61(v59, v56);
      return v37 & 1;
    }
    goto LABEL_22;
  }
  uint64_t v53 = v67;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  if (v52(v50, 1, v51) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
LABEL_22:
    int v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    uint64_t v36 = v49;
    goto LABEL_7;
  }
  uint64_t v54 = v62;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v50, v62, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  char v55 = specialized static CLP_LogEntry_PrivateData_TunnelBridgeAssistance.== infix(_:_:)(v53, v54);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v54, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  if (v55) {
    goto LABEL_24;
  }
LABEL_8:
  char v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_RhythmicStreamingControl.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20);
  int v12 = *(unsigned __int8 *)(a1 + v11);
  int v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 == 2)
  {
    if (v13 != 2)
    {
LABEL_7:
      char v15 = 0;
      return v15 & 1;
    }
  }
  else if (v13 == 2 || ((((v13 & 1) == 0) ^ v12) & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1, v4);
  v14(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3) {
      goto LABEL_34;
    }
  }
  else if (v14 == 3 || v13 != v14)
  {
    goto LABEL_34;
  }
  uint64_t v16 = v11[6];
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2) {
      goto LABEL_34;
    }
  }
  else if (v18 == 2 || ((((v18 & 1) == 0) ^ v17) & 1) == 0)
  {
    goto LABEL_34;
  }
  uint64_t v19 = v11[7];
  int v20 = *(unsigned __int8 *)(a1 + v19);
  int v21 = *(unsigned __int8 *)(a2 + v19);
  if (v20 == 5)
  {
    if (v21 != 5) {
      goto LABEL_34;
    }
  }
  else if (v21 == 5 || v20 != v21)
  {
    goto LABEL_34;
  }
  uint64_t v23 = v11[8];
  uint64_t v24 = (_DWORD *)(a1 + v23);
  char v25 = *(unsigned char *)(a1 + v23 + 4);
  uint64_t v26 = (_DWORD *)(a2 + v23);
  int v27 = *(unsigned __int8 *)(a2 + v23 + 4);
  if (v25)
  {
    if (!v27) {
      goto LABEL_34;
    }
  }
  else
  {
    if (*v24 != *v26) {
      LOBYTE(v27) = 1;
    }
    if (v27) {
      goto LABEL_34;
    }
  }
  uint64_t v28 = v11[9];
  int v29 = *(unsigned __int8 *)(a1 + v28);
  int v30 = *(unsigned __int8 *)(a2 + v28);
  if (v29 == 2)
  {
    if (v30 == 2) {
      goto LABEL_33;
    }
LABEL_34:
    char v32 = 0;
    return v32 & 1;
  }
  if (v30 == 2 || ((((v30 & 1) == 0) ^ v29) & 1) == 0) {
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31(v10, a1, v4);
  v31(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  v33(v8, v4);
  v33(v10, v4);
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_TunnelBridgeAssistance.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v72 = *(void *)(v4 - 8);
  uint64_t v73 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v71 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v70 = (char *)&v69 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v74 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  int v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  int v21 = (char *)&v69 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v69 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v75 = a1;
  uint64_t v26 = a1 + v25;
  int v27 = (int *)v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = v27[5];
  uint64_t v76 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) != 1)
    {
      uint64_t v33 = v74;
      outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v74, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v34 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v34 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_10:
  uint64_t v35 = v27[6];
  uint64_t v36 = v76;
  char v37 = (double *)(v75 + v35);
  char v38 = *(unsigned char *)(v75 + v35 + 8);
  char v39 = (double *)(v76 + v35);
  int v40 = *(unsigned __int8 *)(v76 + v35 + 8);
  if (v38)
  {
    if (!v40) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_7;
    }
  }
  uint64_t v41 = v27[7];
  uint64_t v42 = (double *)(v75 + v41);
  char v43 = *(unsigned char *)(v75 + v41 + 8);
  char v44 = (double *)(v76 + v41);
  int v45 = *(unsigned __int8 *)(v76 + v41 + 8);
  if (v43)
  {
    if (!v45) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_7;
    }
  }
  uint64_t v46 = v27[8];
  uint64_t v47 = (double *)(v75 + v46);
  char v48 = *(unsigned char *)(v75 + v46 + 8);
  uint64_t v49 = (double *)(v76 + v46);
  int v50 = *(unsigned __int8 *)(v76 + v46 + 8);
  if (v48)
  {
    if (!v50) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v47 != *v49) {
      LOBYTE(v50) = 1;
    }
    if (v50) {
      goto LABEL_7;
    }
  }
  uint64_t v51 = v27[9];
  int v52 = *(unsigned __int8 *)(v75 + v51);
  int v53 = *(unsigned __int8 *)(v76 + v51);
  if (v52 == 2)
  {
    if (v53 != 2) {
      goto LABEL_7;
    }
  }
  else if (v53 == 2 || ((((v53 & 1) == 0) ^ v52) & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v54 = v27[10];
  int v55 = *(unsigned __int8 *)(v75 + v54);
  int v56 = *(unsigned __int8 *)(v76 + v54);
  if (v55 == 2)
  {
    if (v56 != 2) {
      goto LABEL_7;
    }
  }
  else if (v56 == 2 || ((((v56 & 1) == 0) ^ v55) & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v57 = v27[11];
  int v58 = *(unsigned __int8 *)(v75 + v57);
  int v59 = *(unsigned __int8 *)(v76 + v57);
  if (v58 == 2)
  {
    if (v59 != 2) {
      goto LABEL_7;
    }
  }
  else if (v59 == 2 || ((((v59 & 1) == 0) ^ v58) & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v60 = v27[12];
  int v61 = *(unsigned __int8 *)(v75 + v60);
  int v62 = *(unsigned __int8 *)(v76 + v60);
  if (v61 == 2)
  {
    if (v62 == 2)
    {
LABEL_48:
      uint64_t v64 = v72;
      uint64_t v63 = v73;
      uint64_t v65 = *(void (**)(char *))(v72 + 16);
      uint64_t v66 = v70;
      v65(v70);
      uint64_t v67 = v71;
      ((void (*)(char *, uint64_t, uint64_t))v65)(v71, v36, v63);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v68 = *(void (**)(char *, uint64_t))(v64 + 8);
      v68(v67, v63);
      v68(v66, v63);
      return v31 & 1;
    }
  }
  else if (v62 != 2 && ((((v62 & 1) == 0) ^ v61) & 1) != 0)
  {
    goto LABEL_48;
  }
LABEL_7:
  char v31 = 0;
  return v31 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_InertialOdometrySample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v67 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0);
  uint64_t v12 = a1;
  uint64_t v13 = *(int *)(v11 + 20);
  uint64_t v14 = *(void *)(a1 + v13);
  uint64_t v15 = *(void *)(a2 + v13);
  if (v14 == v15) {
    goto LABEL_100;
  }
  v67[0] = a1;
  swift_beginAccess();
  double v16 = *(double *)(v14 + 16);
  char v17 = *(unsigned char *)(v14 + 24);
  swift_beginAccess();
  char v18 = *(unsigned char *)(v15 + 24);
  if (v17)
  {
    if (!*(unsigned char *)(v15 + 24)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v16 != *(double *)(v15 + 16)) {
      char v18 = 1;
    }
    if (v18) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  double v19 = *(double *)(v14 + 32);
  char v20 = *(unsigned char *)(v14 + 40);
  swift_beginAccess();
  char v21 = *(unsigned char *)(v15 + 40);
  if (v20)
  {
    if (!*(unsigned char *)(v15 + 40)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v19 != *(double *)(v15 + 32)) {
      char v21 = 1;
    }
    if (v21) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v22 = *(float *)(v14 + 44);
  char v23 = *(unsigned char *)(v14 + 48);
  swift_beginAccess();
  char v24 = *(unsigned char *)(v15 + 48);
  if (v23)
  {
    if (!*(unsigned char *)(v15 + 48)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v22 != *(float *)(v15 + 44)) {
      char v24 = 1;
    }
    if (v24) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v25 = *(float *)(v14 + 52);
  char v26 = *(unsigned char *)(v14 + 56);
  swift_beginAccess();
  char v27 = *(unsigned char *)(v15 + 56);
  if (v26)
  {
    if (!*(unsigned char *)(v15 + 56)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v25 != *(float *)(v15 + 52)) {
      char v27 = 1;
    }
    if (v27) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v28 = *(float *)(v14 + 60);
  char v29 = *(unsigned char *)(v14 + 64);
  swift_beginAccess();
  char v30 = *(unsigned char *)(v15 + 64);
  if (v29)
  {
    if (!*(unsigned char *)(v15 + 64)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v28 != *(float *)(v15 + 60)) {
      char v30 = 1;
    }
    if (v30) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v31 = *(float *)(v14 + 68);
  char v32 = *(unsigned char *)(v14 + 72);
  swift_beginAccess();
  char v33 = *(unsigned char *)(v15 + 72);
  if (v32)
  {
    if (!*(unsigned char *)(v15 + 72)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v31 != *(float *)(v15 + 68)) {
      char v33 = 1;
    }
    if (v33) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v34 = *(float *)(v14 + 76);
  char v35 = *(unsigned char *)(v14 + 80);
  swift_beginAccess();
  char v36 = *(unsigned char *)(v15 + 80);
  if (v35)
  {
    if (!*(unsigned char *)(v15 + 80)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v34 != *(float *)(v15 + 76)) {
      char v36 = 1;
    }
    if (v36) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v37 = *(float *)(v14 + 84);
  char v38 = *(unsigned char *)(v14 + 88);
  swift_beginAccess();
  char v39 = *(unsigned char *)(v15 + 88);
  if (v38)
  {
    if (!*(unsigned char *)(v15 + 88)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v37 != *(float *)(v15 + 84)) {
      char v39 = 1;
    }
    if (v39) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v40 = *(float *)(v14 + 92);
  char v41 = *(unsigned char *)(v14 + 96);
  swift_beginAccess();
  char v42 = *(unsigned char *)(v15 + 96);
  if (v41)
  {
    if (!*(unsigned char *)(v15 + 96)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v40 != *(float *)(v15 + 92)) {
      char v42 = 1;
    }
    if (v42) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v43 = *(float *)(v14 + 100);
  char v44 = *(unsigned char *)(v14 + 104);
  swift_beginAccess();
  char v45 = *(unsigned char *)(v15 + 104);
  if (v44)
  {
    if (!*(unsigned char *)(v15 + 104)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v43 != *(float *)(v15 + 100)) {
      char v45 = 1;
    }
    if (v45) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v46 = *(float *)(v14 + 108);
  char v47 = *(unsigned char *)(v14 + 112);
  swift_beginAccess();
  char v48 = *(unsigned char *)(v15 + 112);
  if (v47)
  {
    if (!*(unsigned char *)(v15 + 112)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v46 != *(float *)(v15 + 108)) {
      char v48 = 1;
    }
    if (v48) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v49 = *(float *)(v14 + 116);
  char v50 = *(unsigned char *)(v14 + 120);
  swift_beginAccess();
  char v51 = *(unsigned char *)(v15 + 120);
  if (v50)
  {
    if (!*(unsigned char *)(v15 + 120)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v49 != *(float *)(v15 + 116)) {
      char v51 = 1;
    }
    if (v51) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  float v52 = *(float *)(v14 + 124);
  char v53 = *(unsigned char *)(v14 + 128);
  swift_beginAccess();
  char v54 = *(unsigned char *)(v15 + 128);
  if (v53)
  {
    if (!*(unsigned char *)(v15 + 128)) {
      goto LABEL_101;
    }
  }
  else
  {
    if (v52 != *(float *)(v15 + 124)) {
      char v54 = 1;
    }
    if (v54) {
      goto LABEL_101;
    }
  }
  swift_beginAccess();
  int v55 = *(unsigned __int8 *)(v14 + 129);
  swift_beginAccess();
  int v56 = *(unsigned __int8 *)(v15 + 129);
  if (v55 == 3)
  {
    if (v56 != 3) {
      goto LABEL_101;
    }
    goto LABEL_85;
  }
  char v57 = 0;
  if (v56 != 3 && v55 == v56)
  {
LABEL_85:
    swift_beginAccess();
    int v58 = *(unsigned __int8 *)(v14 + 130);
    swift_beginAccess();
    int v59 = *(unsigned __int8 *)(v15 + 130);
    if (v58 == 2)
    {
      if (v59 != 2) {
        goto LABEL_101;
      }
    }
    else if (v59 == 2 || ((v58 ^ ((v59 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_101;
    }
    swift_beginAccess();
    int v60 = *(unsigned __int8 *)(v14 + 131);
    swift_beginAccess();
    int v61 = *(unsigned __int8 *)(v15 + 131);
    if (v60 == 2)
    {
      if (v61 != 2) {
        goto LABEL_101;
      }
    }
    else if (v61 == 2 || ((v60 ^ ((v61 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_101;
    }
    swift_beginAccess();
    int v62 = *(unsigned __int8 *)(v14 + 132);
    swift_beginAccess();
    int v63 = *(unsigned __int8 *)(v15 + 132);
    if (v62 == 2)
    {
      uint64_t v12 = v67[0];
      if (v63 == 2)
      {
LABEL_100:
        uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v64(v10, v12, v4);
        v64(v8, a2, v4);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v65 = *(void (**)(char *, uint64_t))(v5 + 8);
        v65(v8, v4);
        v65(v10, v4);
        return v57 & 1;
      }
    }
    else if (v63 != 2)
    {
      uint64_t v12 = v67[0];
      if ((v62 ^ ((v63 & 1) == 0))) {
        goto LABEL_100;
      }
    }
LABEL_101:
    char v57 = 0;
  }
  return v57 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_FalseStepDetectorState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_42;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_42;
  }
  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_42;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_42;
  }
  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2) {
      goto LABEL_42;
    }
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_42;
  }
  uint64_t v21 = v11[8];
  int v22 = *(unsigned __int8 *)(a1 + v21);
  int v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2) {
      goto LABEL_42;
    }
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_42;
  }
  uint64_t v24 = v11[9];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2) {
      goto LABEL_42;
    }
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_42;
  }
  uint64_t v27 = v11[10];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2) {
      goto LABEL_42;
    }
  }
  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_42;
  }
  uint64_t v30 = v11[11];
  int v31 = *(unsigned __int8 *)(a1 + v30);
  int v32 = *(unsigned __int8 *)(a2 + v30);
  if (v31 == 2)
  {
    if (v32 != 2) {
      goto LABEL_42;
    }
  }
  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    goto LABEL_42;
  }
  uint64_t v33 = v11[12];
  int v34 = *(unsigned __int8 *)(a1 + v33);
  int v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 == 2) {
      goto LABEL_41;
    }
LABEL_42:
    char v37 = 0;
    return v37 & 1;
  }
  if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0) {
    goto LABEL_42;
  }
LABEL_41:
  char v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v36(v10, a1, v4);
  v36(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v38 = *(void (**)(char *, uint64_t))(v5 + 8);
  v38(v8, v4);
  v38(v10, v4);
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SignalEnvironmentInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 8)
  {
    if (v14 != 8) {
      goto LABEL_16;
    }
  }
  else if (v14 == 8 || v13 != v14)
  {
    goto LABEL_16;
  }
  uint64_t v16 = *(int *)(v11 + 24);
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 != 4)
  {
    if (v18 != 4 && v17 == v18) {
      goto LABEL_11;
    }
LABEL_16:
    char v20 = 0;
    return v20 & 1;
  }
  if (v18 != 4) {
    goto LABEL_16;
  }
LABEL_11:
  int v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v27 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.== infix(_:_:)) & 1) == 0)goto LABEL_10; {
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  }
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  int v14 = (uint64_t *)((char *)a1 + v13);
  char v15 = *((unsigned char *)a1 + v13 + 8);
  uint64_t v16 = (uint64_t *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if (v15)
  {
    if (!v17) {
      goto LABEL_10;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_10;
    }
  }
  uint64_t v18 = v11[7];
  int v19 = (uint64_t *)((char *)a1 + v18);
  char v20 = *((unsigned char *)a1 + v18 + 8);
  uint64_t v21 = (uint64_t *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) == 0)
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if (v22) {
      goto LABEL_10;
    }
LABEL_15:
    int v25 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v25(v10, (char *)a1 + v11[5], v4);
    v25(v8, (char *)a2 + v12[5], v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v8, v4);
    v26(v10, v4);
    return v23 & 1;
  }
  if (v22) {
    goto LABEL_15;
  }
LABEL_10:
  char v23 = 0;
  return v23 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_DigitalElevationModel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v76 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v74 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v73 = (char *)&v72 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v77 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v72 - v20;
  MEMORY[0x270FA5388](v19);
  char v23 = (char *)&v72 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v78 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (int *)v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = v27[5];
  uint64_t v79 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) != 1)
    {
      uint64_t v33 = v77;
      outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v77, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v34 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v34 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_10:
  uint64_t v35 = v27[6];
  uint64_t v36 = v79;
  char v37 = (double *)(v78 + v35);
  char v38 = *(unsigned char *)(v78 + v35 + 8);
  char v39 = (double *)(v79 + v35);
  int v40 = *(unsigned __int8 *)(v79 + v35 + 8);
  if (v38)
  {
    if (!v40) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_7;
    }
  }
  uint64_t v41 = v27[7];
  char v42 = (double *)(v78 + v41);
  char v43 = *(unsigned char *)(v78 + v41 + 8);
  char v44 = (double *)(v79 + v41);
  int v45 = *(unsigned __int8 *)(v79 + v41 + 8);
  if (v43)
  {
    if (!v45) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_7;
    }
  }
  uint64_t v46 = v27[8];
  char v47 = (float *)(v78 + v46);
  char v48 = *(unsigned char *)(v78 + v46 + 4);
  float v49 = (float *)(v79 + v46);
  int v50 = *(unsigned __int8 *)(v79 + v46 + 4);
  if (v48)
  {
    if (!v50) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v47 != *v49) {
      LOBYTE(v50) = 1;
    }
    if (v50) {
      goto LABEL_7;
    }
  }
  uint64_t v51 = v27[9];
  float v52 = (float *)(v78 + v51);
  char v53 = *(unsigned char *)(v78 + v51 + 4);
  char v54 = (float *)(v79 + v51);
  int v55 = *(unsigned __int8 *)(v79 + v51 + 4);
  if (v53)
  {
    if (!v55) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v52 != *v54) {
      LOBYTE(v55) = 1;
    }
    if (v55) {
      goto LABEL_7;
    }
  }
  uint64_t v56 = v27[10];
  char v57 = (float *)(v78 + v56);
  char v58 = *(unsigned char *)(v78 + v56 + 4);
  int v59 = (float *)(v79 + v56);
  int v60 = *(unsigned __int8 *)(v79 + v56 + 4);
  if (v58)
  {
    if (!v60) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v57 != *v59) {
      LOBYTE(v60) = 1;
    }
    if (v60) {
      goto LABEL_7;
    }
  }
  uint64_t v61 = v27[11];
  int v62 = (_DWORD *)(v78 + v61);
  char v63 = *(unsigned char *)(v78 + v61 + 4);
  uint64_t v64 = (_DWORD *)(v79 + v61);
  int v65 = *(unsigned __int8 *)(v79 + v61 + 4);
  if (v63)
  {
    if (v65)
    {
LABEL_46:
      uint64_t v67 = v75;
      uint64_t v66 = v76;
      uint64_t v68 = *(void (**)(char *))(v75 + 16);
      uint64_t v69 = v73;
      v68(v73);
      uint64_t v70 = v74;
      ((void (*)(char *, uint64_t, uint64_t))v68)(v74, v36, v66);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v71 = *(void (**)(char *, uint64_t))(v67 + 8);
      v71(v70, v66);
      v71(v69, v66);
      return v31 & 1;
    }
  }
  else
  {
    if (*v62 != *v64) {
      LOBYTE(v65) = 1;
    }
    if ((v65 & 1) == 0) {
      goto LABEL_46;
    }
  }
LABEL_7:
  char v31 = 0;
  return v31 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MapMatchingRouteHint.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v69 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v68 = (char *)&v68 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v81 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v73 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v76 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v68 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v72 = (uint64_t)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v79 = (uint64_t)&v68 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v80 = (uint64_t)&v68 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v68 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v27 = (char *)&v68 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v68 - v28;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  uint64_t v31 = *(int *)(v30 + 24);
  uint64_t v77 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a1 + v31, (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v75 = (int *)v30;
  uint64_t v32 = *(int *)(v30 + 24);
  uint64_t v78 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v32, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v74 = v10;
  uint64_t v33 = *(int *)(v10 + 48);
  uint64_t v34 = v8;
  uint64_t v35 = v81;
  uint64_t v36 = (uint64_t)&v14[v33];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  char v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v37((uint64_t)v14, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v37(v36, 1, v34) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v38 = (uint64_t)v14;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v37(v36, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v39 = v36;
  uint64_t v40 = v73;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v39, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v41 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v24, v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v41 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  char v42 = v75;
  char v43 = v77;
  uint64_t v44 = v80;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v77 + v75[7], v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v45 = v79;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v78 + v42[7], v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v46 = v76;
  uint64_t v47 = v76 + *(int *)(v74 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v37(v46, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v37(v47, 1, v34) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  uint64_t v48 = v72;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v37(v47, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    uint64_t v38 = v46;
    goto LABEL_14;
  }
  uint64_t v51 = v73;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v47, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v52 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v48, v51, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v51, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v52 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v53 = v42[8];
  int v54 = *((unsigned __int8 *)v43 + v53);
  int v55 = v78;
  int v56 = *((unsigned __int8 *)v78 + v53);
  if (v54 == 7)
  {
    if (v56 != 7) {
      goto LABEL_15;
    }
  }
  else
  {
    char v49 = 0;
    if (v56 == 7 || v54 != v56) {
      return v49 & 1;
    }
  }
  uint64_t v57 = v42[9];
  int v58 = *((unsigned __int8 *)v43 + v57);
  int v59 = *((unsigned __int8 *)v78 + v57);
  if (v58 == 7)
  {
    if (v59 == 7) {
      goto LABEL_28;
    }
LABEL_15:
    char v49 = 0;
    return v49 & 1;
  }
  char v49 = 0;
  if (v59 != 7 && v58 == v59)
  {
LABEL_28:
    if (specialized static Array<A>.== infix(_:_:)(*v43, *v78, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_MapsRouteHintData.== infix(_:_:)))
    {
      int v60 = (char *)v43 + v42[5];
      uint64_t v62 = v70;
      uint64_t v61 = v71;
      char v63 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
      uint64_t v64 = v68;
      v63(v68, v60, v71);
      int v65 = (char *)v55 + v42[5];
      uint64_t v66 = v69;
      v63(v69, v65, v61);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v67 = *(void (**)(char *, uint64_t))(v62 + 8);
      v67(v66, v61);
      v67(v64, v61);
      return v49 & 1;
    }
    goto LABEL_15;
  }
  return v49 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MotionStateObserver.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v65 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  char v63 = (char *)&v62 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v62 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutUpdate?, CLP_LogEntry_PrivateData_WorkoutUpdate?));
  MEMORY[0x270FA5388](v68);
  uint64_t v72 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v67 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v73 = (uint64_t)&v62 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v69 = (uint64_t)&v62 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v62 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v62 - v30;
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v32[5], (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75 + v32[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v39 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v26, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v39 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v40 = v32[6];
  uint64_t v41 = v74;
  uint64_t v42 = v75;
  char v43 = (_DWORD *)(v74 + v40);
  char v44 = *(unsigned char *)(v74 + v40 + 4);
  uint64_t v45 = (_DWORD *)(v75 + v40);
  int v46 = *(unsigned __int8 *)(v75 + v40 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_8;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_8;
    }
  }
  uint64_t v47 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v32[7], v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  uint64_t v48 = v73;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42 + v32[7], v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  uint64_t v49 = v72;
  uint64_t v50 = v72 + *(int *)(v68 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  uint64_t v51 = v71;
  char v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (v52(v49, 1, v71) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    if (v52(v50, 1, v51) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
LABEL_24:
      uint64_t v57 = v65;
      uint64_t v56 = v66;
      int v58 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
      int v59 = v63;
      v58(v63, v41, v66);
      int v60 = v64;
      v58(v64, v42, v56);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v61 = *(void (**)(char *, uint64_t))(v57 + 8);
      v61(v60, v56);
      v61(v59, v56);
      return v37 & 1;
    }
    goto LABEL_22;
  }
  uint64_t v53 = v67;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  if (v52(v50, 1, v51) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
LABEL_22:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutUpdate?, CLP_LogEntry_PrivateData_WorkoutUpdate?);
    uint64_t v36 = v49;
    goto LABEL_7;
  }
  uint64_t v54 = v62;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v50, v62, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  char v55 = specialized static CLP_LogEntry_PrivateData_WorkoutUpdate.== infix(_:_:)(v53, v54);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v54, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  if (v55) {
    goto LABEL_24;
  }
LABEL_8:
  char v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ClientSatelliteInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 7)
  {
    if (v14 != 7) {
      goto LABEL_50;
    }
  }
  else if (v14 == 7 || v13 != v14)
  {
    goto LABEL_50;
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = (_DWORD *)(a1 + v16);
  char v18 = *(unsigned char *)(a1 + v16 + 4);
  uint64_t v19 = (_DWORD *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 4);
  if (v18)
  {
    if (!v20) {
      goto LABEL_50;
    }
  }
  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if (v20) {
      goto LABEL_50;
    }
  }
  uint64_t v21 = v11[7];
  uint64_t v22 = (float *)(a1 + v21);
  char v23 = *(unsigned char *)(a1 + v21 + 4);
  uint64_t v24 = (float *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if (v23)
  {
    if (!v25) {
      goto LABEL_50;
    }
  }
  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if (v25) {
      goto LABEL_50;
    }
  }
  uint64_t v26 = v11[8];
  uint64_t v27 = (float *)(a1 + v26);
  char v28 = *(unsigned char *)(a1 + v26 + 4);
  uint64_t v29 = (float *)(a2 + v26);
  int v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if (v28)
  {
    if (!v30) {
      goto LABEL_50;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_50;
    }
  }
  uint64_t v31 = v11[9];
  uint64_t v32 = (float *)(a1 + v31);
  char v33 = *(unsigned char *)(a1 + v31 + 4);
  uint64_t v34 = (float *)(a2 + v31);
  int v35 = *(unsigned __int8 *)(a2 + v31 + 4);
  if (v33)
  {
    if (!v35) {
      goto LABEL_50;
    }
  }
  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if (v35) {
      goto LABEL_50;
    }
  }
  uint64_t v36 = v11[10];
  char v37 = (float *)(a1 + v36);
  char v38 = *(unsigned char *)(a1 + v36 + 4);
  char v39 = (float *)(a2 + v36);
  int v40 = *(unsigned __int8 *)(a2 + v36 + 4);
  if (v38)
  {
    if (!v40) {
      goto LABEL_50;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_50;
    }
  }
  uint64_t v41 = v11[11];
  int v42 = *(unsigned __int8 *)(a1 + v41);
  int v43 = *(unsigned __int8 *)(a2 + v41);
  if (v42 == 2)
  {
    if (v43 != 2) {
      goto LABEL_50;
    }
  }
  else if (v43 == 2 || ((((v43 & 1) == 0) ^ v42) & 1) == 0)
  {
    goto LABEL_50;
  }
  uint64_t v44 = v11[12];
  int v45 = *(unsigned __int8 *)(a1 + v44);
  int v46 = *(unsigned __int8 *)(a2 + v44);
  if (v45 == 2)
  {
    if (v46 == 2) {
      goto LABEL_49;
    }
LABEL_50:
    char v48 = 0;
    return v48 & 1;
  }
  if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0) {
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v47(v10, a1, v4);
  v47(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v5 + 8);
  v49(v8, v4);
  v49(v10, v4);
  return v48 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_XtraFileAvailable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_16;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_16;
    }
  }
  uint64_t v17 = *(int *)(v11 + 24);
  char v18 = (void *)(a1 + v17);
  uint64_t v19 = *(void *)(a1 + v17 + 8);
  int v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  if (!v19)
  {
    if (!v21)
    {
LABEL_17:
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v24(v10, a1, v4);
      v24(v8, a2, v4);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v25 = *(void (**)(char *, uint64_t))(v5 + 8);
      v25(v8, v4);
      v25(v10, v4);
      return v23 & 1;
    }
LABEL_16:
    char v23 = 0;
    return v23 & 1;
  }
  if (!v21) {
    goto LABEL_16;
  }
  if (*v18 == *v20 && v19 == v21) {
    goto LABEL_17;
  }
  char v23 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_17;
  }
  return v23 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SignalEnvironment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  char v55 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v54 = (char *)&v53 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v60 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  char v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v53 - v20;
  MEMORY[0x270FA5388](v19);
  char v23 = (char *)&v53 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v58 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (int *)v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = v27[5];
  uint64_t v59 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_10;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  uint64_t v31 = (uint64_t)v60;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v34 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v34 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_10:
  uint64_t v35 = v27[6];
  uint64_t v36 = v59;
  int v37 = *(unsigned __int8 *)(v58 + v35);
  int v38 = *(unsigned __int8 *)(v59 + v35);
  if (v37 == 8)
  {
    if (v38 != 8) {
      goto LABEL_7;
    }
  }
  else
  {
    char v32 = 0;
    if (v38 == 8 || v37 != v38) {
      return v32 & 1;
    }
  }
  uint64_t v39 = v27[7];
  int v40 = *(unsigned __int8 *)(v58 + v39);
  int v41 = *(unsigned __int8 *)(v59 + v39);
  if (v40 == 8)
  {
    if (v41 == 8) {
      goto LABEL_20;
    }
LABEL_7:
    char v32 = 0;
    return v32 & 1;
  }
  char v32 = 0;
  if (v41 != 8 && v40 == v41)
  {
LABEL_20:
    uint64_t v42 = v27[8];
    int v43 = (_DWORD *)(v58 + v42);
    char v44 = *(unsigned char *)(v58 + v42 + 4);
    int v45 = (_DWORD *)(v59 + v42);
    int v46 = *(unsigned __int8 *)(v59 + v42 + 4);
    if (v44)
    {
      if (v46)
      {
LABEL_26:
        uint64_t v48 = v56;
        uint64_t v47 = v57;
        uint64_t v49 = *(void (**)(char *))(v56 + 16);
        uint64_t v50 = v54;
        v49(v54);
        uint64_t v51 = v55;
        ((void (*)(char *, uint64_t, uint64_t))v49)(v55, v36, v47);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v52 = *(void (**)(char *, uint64_t))(v48 + 8);
        v52(v51, v47);
        v52(v50, v47);
        return v32 & 1;
      }
    }
    else
    {
      if (*v43 != *v45) {
        LOBYTE(v46) = 1;
      }
      if ((v46 & 1) == 0) {
        goto LABEL_26;
      }
    }
    goto LABEL_7;
  }
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WifiAssociationState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  char v44 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int v43 = (char *)&v40 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v46 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiAccessPoint?, CLP_LogEntry_PrivateData_WifiAccessPoint?));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v40 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v40 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  int v25 = *(unsigned __int8 *)(a1 + v24);
  uint64_t v47 = a2;
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2) {
      goto LABEL_12;
    }
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v41 = v4;
  uint64_t v27 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v22 + 24), (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  uint64_t v28 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  if (v29((uint64_t)v12, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    if (v29(v28, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
LABEL_15:
      uint64_t v34 = v45;
      uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
      uint64_t v36 = v43;
      uint64_t v37 = v41;
      v35(v43, v27, v41);
      int v38 = v44;
      v35(v44, v47, v37);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
      v39(v38, v37);
      v39(v36, v37);
      return v30 & 1;
    }
    goto LABEL_11;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  if (v29(v28, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
LABEL_11:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v12, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiAccessPoint?, CLP_LogEntry_PrivateData_WifiAccessPoint?));
    goto LABEL_12;
  }
  uint64_t v32 = v42;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v28, v42, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  char v33 = specialized static CLP_LogEntry_PrivateData_WifiAccessPoint.== infix(_:_:)((uint64_t)v16, v32);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v32, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  if (v33) {
    goto LABEL_15;
  }
LABEL_12:
  char v30 = 0;
  return v30 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_TechnologyStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 14)
  {
    if (v14 != 14) {
      goto LABEL_15;
    }
  }
  else if (v14 == 14 || v13 != v14)
  {
    goto LABEL_15;
  }
  uint64_t v16 = *(int *)(v11 + 24);
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2)
    {
LABEL_15:
      char v20 = 0;
      return v20 & 1;
    }
  }
  else if (v18 == 2 || ((((v18 & 1) == 0) ^ v17) & 1) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_BatchedLocations.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:)) & 1) != 0&& (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1], type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:)))
  {
    uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 24), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WifiAccessPoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v61 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v12 = (int *)v11;
  uint64_t v13 = *(int *)(v11 + 20);
  int v14 = (void *)(a1 + v13);
  char v15 = *(unsigned char *)(a1 + v13 + 8);
  uint64_t v16 = (void *)(a2 + v13);
  int v17 = *(unsigned __int8 *)(a2 + v13 + 8);
  if (v15)
  {
    if (!v17) {
      goto LABEL_59;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_59;
    }
  }
  uint64_t v18 = *(int *)(v11 + 24);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = *(void *)(a1 + v18 + 8);
  uint64_t v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  if (!v20)
  {
    if (v22) {
      goto LABEL_59;
    }
LABEL_16:
    uint64_t v25 = v12[7];
    int v26 = (_DWORD *)(a1 + v25);
    char v27 = *(unsigned char *)(a1 + v25 + 4);
    uint64_t v28 = (_DWORD *)(a2 + v25);
    int v29 = *(unsigned __int8 *)(a2 + v25 + 4);
    if (v27)
    {
      if (!v29) {
        goto LABEL_59;
      }
    }
    else
    {
      if (*v26 != *v28) {
        LOBYTE(v29) = 1;
      }
      if (v29) {
        goto LABEL_59;
      }
    }
    uint64_t v30 = v12[8];
    int v31 = *(unsigned __int8 *)(a1 + v30);
    int v32 = *(unsigned __int8 *)(a2 + v30);
    if (v31 == 4)
    {
      if (v32 != 4) {
        goto LABEL_59;
      }
    }
    else if (v32 == 4 || v31 != v32)
    {
      goto LABEL_59;
    }
    uint64_t v34 = v12[9];
    uint64_t v35 = (_DWORD *)(a1 + v34);
    char v36 = *(unsigned char *)(a1 + v34 + 4);
    uint64_t v37 = (_DWORD *)(a2 + v34);
    int v38 = *(unsigned __int8 *)(a2 + v34 + 4);
    if (v36)
    {
      if (!v38) {
        goto LABEL_59;
      }
    }
    else
    {
      if (*v35 != *v37) {
        LOBYTE(v38) = 1;
      }
      if (v38) {
        goto LABEL_59;
      }
    }
    uint64_t v39 = v12[10];
    uint64_t v40 = (float *)(a1 + v39);
    char v41 = *(unsigned char *)(a1 + v39 + 4);
    uint64_t v42 = (float *)(a2 + v39);
    int v43 = *(unsigned __int8 *)(a2 + v39 + 4);
    if (v41)
    {
      if (!v43) {
        goto LABEL_59;
      }
    }
    else
    {
      if (*v40 != *v42) {
        LOBYTE(v43) = 1;
      }
      if (v43) {
        goto LABEL_59;
      }
    }
    uint64_t v44 = v12[11];
    int v45 = *(unsigned __int8 *)(a1 + v44);
    int v46 = *(unsigned __int8 *)(a2 + v44);
    if (v45 == 2)
    {
      if (v46 != 2) {
        goto LABEL_59;
      }
    }
    else if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0)
    {
      goto LABEL_59;
    }
    uint64_t v47 = v12[12];
    int v48 = *(unsigned __int8 *)(a1 + v47);
    int v49 = *(unsigned __int8 *)(a2 + v47);
    if (v48 == 2)
    {
      if (v49 != 2) {
        goto LABEL_59;
      }
    }
    else if (v49 == 2 || ((((v49 & 1) == 0) ^ v48) & 1) == 0)
    {
      goto LABEL_59;
    }
    uint64_t v50 = v12[13];
    int v51 = *(unsigned __int8 *)(a1 + v50);
    int v52 = *(unsigned __int8 *)(a2 + v50);
    if (v51 != 4)
    {
      char v24 = 0;
      if (v52 == 4 || v51 != v52) {
        return v24 & 1;
      }
LABEL_57:
      uint64_t v53 = v12[14];
      uint64_t v54 = (_DWORD *)(a1 + v53);
      char v55 = *(unsigned char *)(a1 + v53 + 4);
      uint64_t v56 = (_DWORD *)(a2 + v53);
      int v57 = *(unsigned __int8 *)(a2 + v53 + 4);
      if (v55)
      {
        if (!v57) {
          goto LABEL_59;
        }
      }
      else
      {
        if (*v54 != *v56) {
          LOBYTE(v57) = 1;
        }
        if (v57) {
          goto LABEL_59;
        }
      }
      uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v59(v10, a1, v4);
      v59(v8, a2, v4);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v60 = *(void (**)(char *, uint64_t))(v5 + 8);
      v60(v8, v4);
      v60(v10, v4);
      return v24 & 1;
    }
    if (v52 == 4) {
      goto LABEL_57;
    }
LABEL_59:
    char v24 = 0;
    return v24 & 1;
  }
  if (!v22) {
    goto LABEL_59;
  }
  if (*v19 == *v21 && v20 == v22) {
    goto LABEL_16;
  }
  char v24 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_16;
  }
  return v24 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WifiScanResult.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  int v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = *(int *)(v27 + 24);
  int v51 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_10:
    char v41 = 0;
    return v41 & 1;
  }
  uint64_t v31 = v49;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  char v33 = v50;
  uint64_t v34 = v51;
  if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_WifiAccessPoint.== infix(_:_:)) & 1) == 0)goto LABEL_10; {
  uint64_t v36 = v47;
  }
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  int v38 = v45;
  v37(v45, (char *)v33 + *(int *)(v27 + 20), v48);
  uint64_t v39 = (char *)v34 + *(int *)(v27 + 20);
  uint64_t v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_TunnelEndPoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = a1;
  uint64_t v78 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v66 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v65 = (char *)&v63 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v64 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, CLP_LogEntry_PrivateData_TunnelEndPointAssistance?));
  MEMORY[0x270FA5388](v70);
  uint64_t v74 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v69 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v75 = (uint64_t)&v63 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v71 = (uint64_t)&v63 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v63 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v32 + 20), (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v76 = v32;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78 + *(int *)(v32 + 20), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v39 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v26, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v39 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v40 = v76;
  uint64_t v41 = v77;
  uint64_t v42 = *(int *)(v76 + 24);
  int v43 = (_DWORD *)(v77 + v42);
  char v44 = *(unsigned char *)(v77 + v42 + 4);
  uint64_t v45 = v78;
  int v46 = (_DWORD *)(v78 + v42);
  int v47 = *(unsigned __int8 *)(v78 + v42 + 4);
  if (v44)
  {
    if (!v47) {
      goto LABEL_8;
    }
  }
  else
  {
    if (*v43 != *v46) {
      LOBYTE(v47) = 1;
    }
    if (v47) {
      goto LABEL_8;
    }
  }
  uint64_t v48 = v71;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v76 + 28), v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  uint64_t v49 = v75;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45 + *(int *)(v40 + 28), v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  uint64_t v50 = v74;
  uint64_t v51 = v74 + *(int *)(v70 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  uint64_t v52 = v73;
  uint64_t v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  if (v53(v50, 1, v73) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    if (v53(v51, 1, v52) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
LABEL_24:
      uint64_t v58 = v67;
      uint64_t v57 = v68;
      uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      int v60 = v65;
      v59(v65, v41, v68);
      uint64_t v61 = v66;
      v59(v66, v45, v57);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v62 = *(void (**)(char *, uint64_t))(v58 + 8);
      v62(v61, v57);
      v62(v60, v57);
      return v37 & 1;
    }
    goto LABEL_22;
  }
  uint64_t v54 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  if (v53(v51, 1, v52) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v54, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
LABEL_22:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    uint64_t v36 = v50;
    goto LABEL_7;
  }
  uint64_t v55 = v64;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v51, v64, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  char v56 = specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(v54, v55, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, closure #1 in static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v55, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v54, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  if (v56) {
    goto LABEL_24;
  }
LABEL_8:
  char v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WorkoutUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v52 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v51 = (char *)&v48 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v54 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v48 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v24 = a1;
  uint64_t v25 = v23;
  uint64_t v26 = v23[5];
  uint64_t v27 = *(char *)(v24 + v26);
  uint64_t v55 = a2;
  uint64_t v28 = *(char *)(a2 + v26);
  if (v27 == 72)
  {
    if (v28 != 72) {
      goto LABEL_18;
    }
  }
  else if (v28 == 72 || qword_24711E0C0[v27] != qword_24711E0C0[v28])
  {
    goto LABEL_18;
  }
  uint64_t v29 = v23[6];
  uint64_t v30 = (double *)(v24 + v29);
  char v31 = *(unsigned char *)(v24 + v29 + 8);
  uint64_t v32 = (double *)(v55 + v29);
  int v33 = *(unsigned __int8 *)(v55 + v29 + 8);
  if (v31)
  {
    if (!v33) {
      goto LABEL_18;
    }
  }
  else
  {
    if (*v30 != *v32) {
      LOBYTE(v33) = 1;
    }
    if (v33) {
      goto LABEL_18;
    }
  }
  uint64_t v49 = v4;
  uint64_t v50 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v24 + v23[7], (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55 + v25[7], (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v34 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
  if (v35((uint64_t)v13, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v35(v34, 1, v8) != 1)
    {
      outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v34, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v38 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v17, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v38 & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_21;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_17:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_18;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v35(v34, 1, v8) != 1) {
    goto LABEL_17;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_21:
  uint64_t v39 = v25[8];
  uint64_t v40 = *(char *)(v50 + v39);
  uint64_t v41 = *(char *)(v55 + v39);
  if (v40 != 72)
  {
    if (v41 == 72 || qword_24711E0C0[v40] != qword_24711E0C0[v41]) {
      goto LABEL_18;
    }
LABEL_26:
    uint64_t v42 = v53;
    int v43 = *(void (**)(char *))(v53 + 16);
    char v44 = v51;
    uint64_t v45 = v49;
    v43(v51);
    int v46 = v52;
    ((void (*)(char *, uint64_t, uint64_t))v43)(v52, v55, v45);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v47 = *(void (**)(char *, uint64_t))(v42 + 8);
    v47(v46, v45);
    v47(v44, v45);
    return v36 & 1;
  }
  if (v41 == 72) {
    goto LABEL_26;
  }
LABEL_18:
  char v36 = 0;
  return v36 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_OutdoorUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_47;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_47;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_47;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_47;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 3)
  {
    if (v24 != 3) {
      goto LABEL_47;
    }
  }
  else if (v24 == 3 || v23 != v24)
  {
    goto LABEL_47;
  }
  uint64_t v26 = v11[8];
  int v27 = *(unsigned __int8 *)(a1 + v26);
  int v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 4)
  {
    if (v28 != 4) {
      goto LABEL_47;
    }
  }
  else if (v28 == 4 || v27 != v28)
  {
    goto LABEL_47;
  }
  uint64_t v30 = v11[9];
  char v31 = (double *)(a1 + v30);
  char v32 = *(unsigned char *)(a1 + v30 + 8);
  int v33 = (double *)(a2 + v30);
  int v34 = *(unsigned __int8 *)(a2 + v30 + 8);
  if (v32)
  {
    if (!v34) {
      goto LABEL_47;
    }
  }
  else
  {
    if (*v31 != *v33) {
      LOBYTE(v34) = 1;
    }
    if (v34) {
      goto LABEL_47;
    }
  }
  uint64_t v35 = v11[10];
  int v36 = *(unsigned __int8 *)(a1 + v35);
  int v37 = *(unsigned __int8 *)(a2 + v35);
  if (v36 == 4)
  {
    if (v37 != 4) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }
  char v38 = 0;
  if (v37 != 4 && v36 == v37)
  {
LABEL_40:
    uint64_t v39 = v11[11];
    int v40 = *(unsigned __int8 *)(a1 + v39);
    int v41 = *(unsigned __int8 *)(a2 + v39);
    if (v40 != 2)
    {
      if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0) {
        goto LABEL_47;
      }
LABEL_45:
      uint64_t v42 = v11[12];
      int v43 = (float *)(a1 + v42);
      char v44 = *(unsigned char *)(a1 + v42 + 4);
      uint64_t v45 = (float *)(a2 + v42);
      int v46 = *(unsigned __int8 *)(a2 + v42 + 4);
      if (v44)
      {
        if (!v46) {
          goto LABEL_47;
        }
      }
      else
      {
        if (*v43 != *v45) {
          LOBYTE(v46) = 1;
        }
        if (v46) {
          goto LABEL_47;
        }
      }
      uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v48(v10, a1, v4);
      v48(v8, a2, v4);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v49 = *(void (**)(char *, uint64_t))(v5 + 8);
      v49(v8, v4);
      v49(v10, v4);
      return v38 & 1;
    }
    if (v41 == 2) {
      goto LABEL_45;
    }
LABEL_47:
    char v38 = 0;
  }
  return v38 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WorkoutSettings.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (v16) {
      goto LABEL_37;
    }
    goto LABEL_10;
  }
  if (!v16) {
    goto LABEL_37;
  }
  BOOL v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    uint64_t v19 = v11[6];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = *(void *)(a1 + v19 + 8);
    uint64_t v22 = (void *)(a2 + v19);
    uint64_t v23 = v22[1];
    if (v21)
    {
      if (v23)
      {
        if (*v20 != *v22 || v21 != v23)
        {
          char v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return v18 & 1;
          }
        }
LABEL_19:
        uint64_t v25 = v11[7];
        int v26 = *(unsigned __int8 *)(a1 + v25);
        int v27 = *(unsigned __int8 *)(a2 + v25);
        if (v26 == 67)
        {
          if (v27 != 67) {
            goto LABEL_37;
          }
        }
        else if (v27 == 67 || v26 != v27)
        {
          goto LABEL_37;
        }
        uint64_t v29 = v11[8];
        int v30 = *(unsigned __int8 *)(a1 + v29);
        int v31 = *(unsigned __int8 *)(a2 + v29);
        if (v30 == 5)
        {
          if (v31 != 5) {
            goto LABEL_37;
          }
        }
        else if (v31 == 5 || v30 != v31)
        {
          goto LABEL_37;
        }
        uint64_t v33 = v11[9];
        int v34 = *(unsigned __int8 *)(a1 + v33);
        int v35 = *(unsigned __int8 *)(a2 + v33);
        if (v34 == 3)
        {
          if (v35 != 3) {
            goto LABEL_37;
          }
        }
        else
        {
          char v18 = 0;
          if (v35 == 3 || v34 != v35) {
            return v18 & 1;
          }
        }
        int v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v37(v10, a1, v4);
        v37(v8, a2, v4);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v38 = *(void (**)(char *, uint64_t))(v5 + 8);
        v38(v8, v4);
        v38(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v23)
    {
      goto LABEL_19;
    }
LABEL_37:
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WorkoutEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v121 = a2;
  uint64_t v98 = type metadata accessor for UnknownStorage();
  uint64_t v101 = *(void *)(v98 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v98);
  uint64_t v100 = &v95[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v3);
  uint64_t v99 = &v95[-v5];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v103 = *(void *)(v6 - 8);
  uint64_t v104 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v97 = &v95[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutSettings?, CLP_LogEntry_PrivateData_WorkoutSettings?));
  MEMORY[0x270FA5388](v102);
  uint64_t v105 = &v95[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v107 = &v95[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v115 = &v95[-v13];
  MEMORY[0x270FA5388](v12);
  uint64_t v110 = &v95[-v14];
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v113 = &v95[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v109 = &v95[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v114 = &v95[-v22];
  MEMORY[0x270FA5388](v21);
  int v24 = &v95[-v23];
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v106 = &v95[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v108 = &v95[-v29];
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v111 = &v95[-v31];
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v112 = &v95[-v33];
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v119 = &v95[-v35];
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v118 = &v95[-v37];
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  int v40 = &v95[-v39];
  uint64_t v41 = MEMORY[0x270FA5388](v38);
  int v43 = &v95[-v42];
  MEMORY[0x270FA5388](v41);
  uint64_t v45 = &v95[-v44];
  uint64_t v46 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t v47 = *(int *)(v46 + 20);
  uint64_t v120 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v47, (uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v116 = (int *)v46;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v121 + *(int *)(v46 + 20), (uint64_t)v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v117 = v18;
  uint64_t v48 = (uint64_t)&v24[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v43, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v49((uint64_t)v24, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v49(v48, 1, v15) == 1)
    {
      uint64_t v50 = v15;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v51 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v52 = (uint64_t)v24;
LABEL_34:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v51);
    goto LABEL_35;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, (uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v49(v48, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v53 = v113;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v48, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  int v96 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v40, (uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v50 = v15;
  if ((v96 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_8:
  uint64_t v54 = v116;
  uint64_t v55 = v118;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v120 + v116[6], (uint64_t)v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v56 = v121;
  uint64_t v57 = v119;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v121 + v54[6], (uint64_t)v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v58 = v114;
  uint64_t v59 = (uint64_t)&v114[*(int *)(v117 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v55, (uint64_t)v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v57, v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v49((uint64_t)v58, 1, v50) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    unsigned int v60 = v49(v59, 1, v50);
    uint64_t v61 = v115;
    if (v60 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v62 = v112;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v58, (uint64_t)v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  unsigned int v63 = v49(v59, 1, v50);
  uint64_t v61 = v115;
  if (v63 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v62, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    uint64_t v51 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v52 = (uint64_t)v58;
    goto LABEL_34;
  }
  uint64_t v64 = v113;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v59, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  int v96 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v62, (uint64_t)v64, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v64, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v62, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v96 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_15:
  uint64_t v65 = v54[7];
  int v66 = *(unsigned __int8 *)(v120 + v65);
  int v67 = *(unsigned __int8 *)(v56 + v65);
  if (v66 == 19)
  {
    if (v67 != 19) {
      goto LABEL_35;
    }
LABEL_20:
    uint64_t v69 = v120 + v54[8];
    uint64_t v70 = v54;
    uint64_t v71 = v111;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, (uint64_t)v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v72 = v108;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56 + v70[8], (uint64_t)v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v73 = v109;
    uint64_t v74 = (uint64_t)&v109[*(int *)(v117 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v71, (uint64_t)v109, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v72, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v49((uint64_t)v73, 1, v50) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      unsigned int v75 = v49(v74, 1, v50);
      uint64_t v76 = (uint64_t)v107;
      uint64_t v77 = v110;
      if (v75 == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_27:
        uint64_t v82 = v116;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v120 + v116[9], (uint64_t)v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56 + v82[9], (uint64_t)v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        uint64_t v73 = v105;
        uint64_t v83 = (uint64_t)&v105[*(int *)(v102 + 48)];
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v77, (uint64_t)v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v61, v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        uint64_t v84 = v104;
        uint64_t v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
        if (v85((uint64_t)v73, 1, v104) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
          if (v85(v83, 1, v84) == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
LABEL_38:
            uint64_t v89 = v101;
            uint64_t v90 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v101 + 16);
            uint64_t v91 = v99;
            uint64_t v92 = v98;
            v90(v99, v120, v98);
            uint64_t v93 = v100;
            v90(v100, v56, v92);
            lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
            char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v94 = *(void (**)(unsigned char *, uint64_t))(v89 + 8);
            v94(v93, v92);
            v94(v91, v92);
            return v68 & 1;
          }
          goto LABEL_32;
        }
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v73, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        if (v85(v83, 1, v84) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
          outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v76, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
LABEL_32:
          uint64_t v51 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutSettings?, CLP_LogEntry_PrivateData_WorkoutSettings?);
          goto LABEL_33;
        }
        uint64_t v87 = v97;
        outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v83, (uint64_t)v97, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        char v88 = specialized static CLP_LogEntry_PrivateData_WorkoutSettings.== infix(_:_:)(v76, (uint64_t)v87);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v87, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v76, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        if (v88) {
          goto LABEL_38;
        }
LABEL_35:
        char v68 = 0;
        return v68 & 1;
      }
    }
    else
    {
      uint64_t v78 = v106;
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v73, (uint64_t)v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      unsigned int v79 = v49(v74, 1, v50);
      uint64_t v76 = (uint64_t)v107;
      uint64_t v77 = v110;
      if (v79 != 1)
      {
        uint64_t v80 = v113;
        outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v74, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        char v81 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v78, (uint64_t)v80, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v80, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v78, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        if ((v81 & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_27;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v78, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    uint64_t v51 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_33:
    uint64_t v52 = (uint64_t)v73;
    goto LABEL_34;
  }
  char v68 = 0;
  if (v67 != 19 && v66 == v67) {
    goto LABEL_20;
  }
  return v68 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_PlaceInference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  uint64_t v12 = v11;
  uint64_t v13 = v11[5];
  int v14 = *(unsigned __int8 *)(a1 + v13);
  int v15 = *(unsigned __int8 *)(a2 + v13);
  if (v14 == 5)
  {
    if (v15 != 5) {
      goto LABEL_35;
    }
  }
  else if (v15 == 5 || v14 != v15)
  {
    goto LABEL_35;
  }
  uint64_t v17 = v11[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 3)
  {
    if (v19 != 3) {
      goto LABEL_35;
    }
  }
  else if (v19 == 3 || v18 != v19)
  {
    goto LABEL_35;
  }
  uint64_t v21 = v11[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = *(void *)(a1 + v21 + 8);
  int v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  if (!v23)
  {
    if (v25) {
      goto LABEL_35;
    }
LABEL_26:
    uint64_t v28 = v12[8];
    uint64_t v29 = (void *)(a1 + v28);
    uint64_t v30 = *(void *)(a1 + v28 + 8);
    uint64_t v31 = (void *)(a2 + v28);
    uint64_t v32 = v31[1];
    if (v30)
    {
      if (v32)
      {
        if (*v29 != *v31 || v30 != v32)
        {
          char v27 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return v27 & 1;
          }
        }
LABEL_37:
        uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v35(v10, a1, v4);
        v35(v8, a2, v4);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v5 + 8);
        v36(v8, v4);
        v36(v10, v4);
        return v27 & 1;
      }
    }
    else if (!v32)
    {
      goto LABEL_37;
    }
LABEL_35:
    char v27 = 0;
    return v27 & 1;
  }
  if (!v25) {
    goto LABEL_35;
  }
  if (*v22 == *v24 && v23 == v25) {
    goto LABEL_26;
  }
  char v27 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_26;
  }
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Magnetometer.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  int v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = *(int *)(v27 + 24);
  uint64_t v51 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_10:
    char v41 = 0;
    return v41 & 1;
  }
  uint64_t v31 = v49;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v33 = v50;
  uint64_t v34 = v51;
  if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample) & 1) == 0)goto LABEL_10; {
  uint64_t v36 = v47;
  }
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  uint64_t v38 = v45;
  v37(v45, (char *)v33 + *(int *)(v27 + 20), v48);
  uint64_t v39 = (char *)v34 + *(int *)(v27 + 20);
  int v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReachabilityState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = *(char *)(a1 + v12);
  uint64_t v14 = *(char *)(a2 + v12);
  if (v13 == 5)
  {
    if (v14 != 5) {
      goto LABEL_22;
    }
  }
  else if (v14 == 5 || qword_24711E300[v13] != qword_24711E300[v14])
  {
    goto LABEL_22;
  }
  uint64_t v15 = v11[6];
  uint64_t v16 = *(char *)(a1 + v15);
  uint64_t v17 = *(char *)(a2 + v15);
  if (v16 == 5)
  {
    if (v17 != 5) {
      goto LABEL_22;
    }
  }
  else if (v17 == 5 || qword_24711E300[v16] != qword_24711E300[v17])
  {
    goto LABEL_22;
  }
  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2) {
      goto LABEL_22;
    }
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_22;
  }
  uint64_t v21 = v11[8];
  int v22 = *(unsigned __int8 *)(a1 + v21);
  int v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 == 2) {
      goto LABEL_21;
    }
LABEL_22:
    char v25 = 0;
    return v25 & 1;
  }
  if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v24(v10, a1, v4);
  v24(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  v26(v8, v4);
  v26(v10, v4);
  return v25 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SensorFusionStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20);
  uint64_t v12 = (_DWORD *)(a1 + v11);
  char v13 = *(unsigned char *)(a1 + v11 + 4);
  uint64_t v14 = (_DWORD *)(a2 + v11);
  int v15 = *(unsigned __int8 *)(a2 + v11 + 4);
  if ((v13 & 1) == 0)
  {
    if (*v12 != *v14) {
      LOBYTE(v15) = 1;
    }
    if (v15) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
    return v16 & 1;
  }
  if (v15) {
    goto LABEL_7;
  }
LABEL_3:
  char v16 = 0;
  return v16 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_DeviceMotionSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v125 = a1;
  uint64_t v126 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v106 = *(void *)(v2 - 8);
  uint64_t v107 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v105 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v104 = (char *)&v104 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v116 = *(void *)(v6 - 8);
  uint64_t v117 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v108 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SensorFusionStatus?, CLP_LogEntry_PrivateData_SensorFusionStatus?));
  MEMORY[0x270FA5388](v109);
  uint64_t v110 = (uint64_t)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v115 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v113 = (uint64_t)&v104 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v111 = (uint64_t)&v104 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  uint64_t v120 = *(void *)(v15 - 8);
  uint64_t v121 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v112 = (uint64_t)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?));
  MEMORY[0x270FA5388](v118);
  uint64_t v122 = (uint64_t)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v114 = (uint64_t)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v124 = (uint64_t)&v104 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v119 = (uint64_t)&v104 - v23;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v29 = v28 - 8;
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v104 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v33 = MEMORY[0x270FA5388](v32 - 8);
  uint64_t v35 = (char *)&v104 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  uint64_t v38 = (char *)&v104 - v37;
  MEMORY[0x270FA5388](v36);
  int v40 = (char *)&v104 - v39;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v125 + *(int *)(v41 + 20), (uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v123 = (int *)v41;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v126 + *(int *)(v41 + 20), (uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v42 = (uint64_t)&v31[*(int *)(v29 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v43((uint64_t)v31, 1, v24) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v43(v42, 1, v24) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v44 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v45 = (uint64_t)v31;
    goto LABEL_14;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v43(v42, 1, v24) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v42, (uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v46 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v35, (uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v46 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v47 = v123;
  uint64_t v48 = v119;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v125 + v123[6], v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  uint64_t v49 = v124;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v126 + v47[6], v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  uint64_t v50 = v122;
  uint64_t v51 = v122 + *(int *)(v118 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v122, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  uint64_t v52 = v121;
  uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
  if (v53(v50, 1, v121) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    int v54 = v53(v51, 1, v52);
    uint64_t v56 = v116;
    uint64_t v55 = v117;
    uint64_t v57 = v115;
    if (v54 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v44 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    uint64_t v45 = v50;
    goto LABEL_14;
  }
  uint64_t v58 = v114;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  int v59 = v53(v51, 1, v52);
  uint64_t v60 = v116;
  uint64_t v55 = v117;
  uint64_t v57 = v115;
  if (v59 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v58, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
    goto LABEL_13;
  }
  uint64_t v63 = v112;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v51, v112, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  char v64 = specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(v58, v63, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, closure #1 in static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v63, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  uint64_t v56 = v60;
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v58, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  if ((v64 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v65 = (uint64_t)v57;
  uint64_t v66 = v47[7];
  uint64_t v67 = v125;
  uint64_t v68 = v126;
  int v69 = *(unsigned __int8 *)(v125 + v66);
  int v70 = *(unsigned __int8 *)(v126 + v66);
  if (v69 == 2)
  {
    uint64_t v71 = v113;
    if (v70 != 2) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v71 = v113;
    if (v70 == 2 || ((((v70 & 1) == 0) ^ v69) & 1) == 0) {
      goto LABEL_15;
    }
  }
  uint64_t v72 = v47[8];
  uint64_t v73 = (_DWORD *)(v125 + v72);
  char v74 = *(unsigned char *)(v125 + v72 + 4);
  unsigned int v75 = (_DWORD *)(v126 + v72);
  int v76 = *(unsigned __int8 *)(v126 + v72 + 4);
  if (v74)
  {
    if (!v76) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v73 != *v75) {
      LOBYTE(v76) = 1;
    }
    if (v76) {
      goto LABEL_15;
    }
  }
  uint64_t v77 = v47[9];
  int v78 = *(unsigned __int8 *)(v125 + v77);
  int v79 = *(unsigned __int8 *)(v126 + v77);
  if (v78 == 5)
  {
    uint64_t v80 = v111;
    if (v79 != 5) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
  char v61 = 0;
  uint64_t v80 = v111;
  if (v79 != 5 && v78 == v79)
  {
LABEL_34:
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v125 + v47[10], v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68 + v47[10], v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    uint64_t v81 = v71;
    uint64_t v82 = v110;
    uint64_t v83 = v110 + *(int *)(v109 + 48);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    uint64_t v84 = v82;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    uint64_t v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
    if (v85(v84, 1, v55) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      uint64_t v84 = v110;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      if (v85(v83, 1, v55) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
LABEL_41:
        uint64_t v88 = v123[11];
        uint64_t v89 = (float *)(v67 + v88);
        char v90 = *(unsigned char *)(v67 + v88 + 4);
        uint64_t v91 = (float *)(v68 + v88);
        int v92 = *(unsigned __int8 *)(v68 + v88 + 4);
        if (v90)
        {
          if (v92) {
            goto LABEL_47;
          }
        }
        else
        {
          if (*v89 != *v91) {
            LOBYTE(v92) = 1;
          }
          if ((v92 & 1) == 0)
          {
LABEL_47:
            uint64_t v93 = v123[12];
            uint64_t v94 = (float *)(v67 + v93);
            char v95 = *(unsigned char *)(v67 + v93 + 4);
            int v96 = (float *)(v68 + v93);
            int v97 = *(unsigned __int8 *)(v68 + v93 + 4);
            if (v95)
            {
              if (v97)
              {
LABEL_53:
                uint64_t v99 = v106;
                uint64_t v98 = v107;
                uint64_t v100 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 16);
                uint64_t v101 = v104;
                v100(v104, v67, v107);
                uint64_t v102 = v105;
                v100(v105, v68, v98);
                lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
                char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v103 = *(void (**)(char *, uint64_t))(v99 + 8);
                v103(v102, v98);
                v103(v101, v98);
                return v61 & 1;
              }
            }
            else
            {
              if (*v94 != *v96) {
                LOBYTE(v97) = 1;
              }
              if ((v97 & 1) == 0) {
                goto LABEL_53;
              }
            }
          }
        }
LABEL_15:
        char v61 = 0;
        return v61 & 1;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      if (v85(v83, 1, v55) != 1)
      {
        uint64_t v86 = v108;
        outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v83, v108, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        char v87 = specialized static CLP_LogEntry_PrivateData_SensorFusionStatus.== infix(_:_:)(v65, v86);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v86, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v65, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
        if ((v87 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_41;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v65, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    }
    uint64_t v44 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SensorFusionStatus?, CLP_LogEntry_PrivateData_SensorFusionStatus?);
    uint64_t v45 = v84;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v44);
    goto LABEL_15;
  }
  return v61 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_DeviceMotion.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  char v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = *(int *)(v27 + 24);
  uint64_t v51 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_10:
    char v41 = 0;
    return v41 & 1;
  }
  uint64_t v31 = v49;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v33 = v50;
  uint64_t v34 = v51;
  if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_DeviceMotionSample.== infix(_:_:)) & 1) == 0)goto LABEL_10; {
  uint64_t v36 = v47;
  }
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  uint64_t v38 = v45;
  v37(v45, (char *)v33 + *(int *)(v27 + 20), v48);
  uint64_t v39 = (char *)v34 + *(int *)(v27 + 20);
  int v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Natalimetry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v65 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  char v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v63 = (char *)&v62 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v62 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BodyMetrics?, CLP_LogEntry_PrivateData_BodyMetrics?));
  MEMORY[0x270FA5388](v68);
  uint64_t v72 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v67 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v73 = (uint64_t)&v62 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v69 = (uint64_t)&v62 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v62 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v62 - v30;
  char v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v32[5], (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75 + v32[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v39 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v26, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v39 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v40 = v32[6];
  uint64_t v41 = v74;
  uint64_t v42 = v75;
  int v43 = (_DWORD *)(v74 + v40);
  char v44 = *(unsigned char *)(v74 + v40 + 4);
  uint64_t v45 = (_DWORD *)(v75 + v40);
  int v46 = *(unsigned __int8 *)(v75 + v40 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_8;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_8;
    }
  }
  uint64_t v47 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v32[7], v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  uint64_t v48 = v73;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42 + v32[7], v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  uint64_t v49 = v72;
  uint64_t v50 = v72 + *(int *)(v68 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  uint64_t v51 = v71;
  uint64_t v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (v52(v49, 1, v71) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    if (v52(v50, 1, v51) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
LABEL_24:
      uint64_t v57 = v65;
      uint64_t v56 = v66;
      uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
      int v59 = v63;
      v58(v63, v41, v66);
      uint64_t v60 = v64;
      v58(v64, v42, v56);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v61 = *(void (**)(char *, uint64_t))(v57 + 8);
      v61(v60, v56);
      v61(v59, v56);
      return v37 & 1;
    }
    goto LABEL_22;
  }
  uint64_t v53 = v67;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  if (v52(v50, 1, v51) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
LABEL_22:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BodyMetrics?, CLP_LogEntry_PrivateData_BodyMetrics?);
    uint64_t v36 = v49;
    goto LABEL_7;
  }
  uint64_t v54 = v62;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v50, v62, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  char v55 = specialized static CLP_LogEntry_PrivateData_BodyMetrics.== infix(_:_:)(v53, v54);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v54, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  if (v55) {
    goto LABEL_24;
  }
LABEL_8:
  char v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MotionState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = a1;
  uint64_t v78 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v66 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v65 = (char *)&v63 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v64 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionActivity?, CLP_LogEntry_PrivateData_MotionActivity?));
  MEMORY[0x270FA5388](v70);
  uint64_t v74 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v69 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v75 = (uint64_t)&v63 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v71 = (uint64_t)&v63 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v63 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v32 + 20), (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v76 = v32;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78 + *(int *)(v32 + 20), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v39 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v26, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v39 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v40 = v76;
  uint64_t v41 = v77;
  uint64_t v42 = *(int *)(v76 + 24);
  int v43 = (_DWORD *)(v77 + v42);
  char v44 = *(unsigned char *)(v77 + v42 + 4);
  uint64_t v45 = v78;
  int v46 = (_DWORD *)(v78 + v42);
  int v47 = *(unsigned __int8 *)(v78 + v42 + 4);
  if (v44)
  {
    if (!v47) {
      goto LABEL_8;
    }
  }
  else
  {
    if (*v43 != *v46) {
      LOBYTE(v47) = 1;
    }
    if (v47) {
      goto LABEL_8;
    }
  }
  uint64_t v48 = v71;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v76 + 28), v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  uint64_t v49 = v75;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45 + *(int *)(v40 + 28), v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  uint64_t v50 = v74;
  uint64_t v51 = v74 + *(int *)(v70 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  uint64_t v52 = v73;
  uint64_t v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  if (v53(v50, 1, v73) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
    if (v53(v51, 1, v52) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
LABEL_24:
      uint64_t v58 = v67;
      uint64_t v57 = v68;
      int v59 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      uint64_t v60 = v65;
      v59(v65, v41, v68);
      char v61 = v66;
      v59(v66, v45, v57);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v62 = *(void (**)(char *, uint64_t))(v58 + 8);
      v62(v61, v57);
      v62(v60, v57);
      return v37 & 1;
    }
    goto LABEL_22;
  }
  uint64_t v54 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  if (v53(v51, 1, v52) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v54, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
LABEL_22:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionActivity?, CLP_LogEntry_PrivateData_MotionActivity?);
    uint64_t v36 = v50;
    goto LABEL_7;
  }
  uint64_t v55 = v64;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v51, v64, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  char v56 = specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(v54, v55, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionActivity.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v55, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v54, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  if (v56) {
    goto LABEL_24;
  }
LABEL_8:
  char v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_BodyMetrics.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v68 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3) {
      goto LABEL_64;
    }
  }
  else if (v14 == 3 || v13 != v14)
  {
    goto LABEL_64;
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = (float *)(a1 + v16);
  char v18 = *(unsigned char *)(a1 + v16 + 4);
  uint64_t v19 = (float *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 4);
  if (v18)
  {
    if (!v20) {
      goto LABEL_64;
    }
  }
  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if (v20) {
      goto LABEL_64;
    }
  }
  uint64_t v21 = v11[7];
  uint64_t v22 = (float *)(a1 + v21);
  char v23 = *(unsigned char *)(a1 + v21 + 4);
  uint64_t v24 = (float *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if (v23)
  {
    if (!v25) {
      goto LABEL_64;
    }
  }
  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if (v25) {
      goto LABEL_64;
    }
  }
  uint64_t v26 = v11[8];
  uint64_t v27 = (float *)(a1 + v26);
  char v28 = *(unsigned char *)(a1 + v26 + 4);
  uint64_t v29 = (float *)(a2 + v26);
  int v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if (v28)
  {
    if (!v30) {
      goto LABEL_64;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_64;
    }
  }
  uint64_t v31 = v11[9];
  uint64_t v32 = (float *)(a1 + v31);
  char v33 = *(unsigned char *)(a1 + v31 + 4);
  uint64_t v34 = (float *)(a2 + v31);
  int v35 = *(unsigned __int8 *)(a2 + v31 + 4);
  if (v33)
  {
    if (!v35) {
      goto LABEL_64;
    }
  }
  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if (v35) {
      goto LABEL_64;
    }
  }
  uint64_t v36 = v11[10];
  char v37 = (float *)(a1 + v36);
  char v38 = *(unsigned char *)(a1 + v36 + 4);
  char v39 = (float *)(a2 + v36);
  int v40 = *(unsigned __int8 *)(a2 + v36 + 4);
  if (v38)
  {
    if (!v40) {
      goto LABEL_64;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_64;
    }
  }
  uint64_t v41 = v11[11];
  uint64_t v42 = (float *)(a1 + v41);
  char v43 = *(unsigned char *)(a1 + v41 + 4);
  char v44 = (float *)(a2 + v41);
  int v45 = *(unsigned __int8 *)(a2 + v41 + 4);
  if (v43)
  {
    if (!v45) {
      goto LABEL_64;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_64;
    }
  }
  uint64_t v46 = v11[12];
  int v47 = (float *)(a1 + v46);
  char v48 = *(unsigned char *)(a1 + v46 + 4);
  uint64_t v49 = (float *)(a2 + v46);
  int v50 = *(unsigned __int8 *)(a2 + v46 + 4);
  if (v48)
  {
    if (!v50) {
      goto LABEL_64;
    }
  }
  else
  {
    if (*v47 != *v49) {
      LOBYTE(v50) = 1;
    }
    if (v50) {
      goto LABEL_64;
    }
  }
  uint64_t v51 = v11[13];
  uint64_t v52 = (float *)(a1 + v51);
  char v53 = *(unsigned char *)(a1 + v51 + 4);
  uint64_t v54 = (float *)(a2 + v51);
  int v55 = *(unsigned __int8 *)(a2 + v51 + 4);
  if (v53)
  {
    if (!v55) {
      goto LABEL_64;
    }
  }
  else
  {
    if (*v52 != *v54) {
      LOBYTE(v55) = 1;
    }
    if (v55) {
      goto LABEL_64;
    }
  }
  uint64_t v56 = v11[14];
  int v57 = *(unsigned __int8 *)(a1 + v56);
  int v58 = *(unsigned __int8 *)(a2 + v56);
  if (v57 == 8)
  {
    if (v58 == 8) {
      goto LABEL_62;
    }
LABEL_64:
    char v59 = 0;
    return v59 & 1;
  }
  char v59 = 0;
  if (v58 != 8 && v57 == v58)
  {
LABEL_62:
    uint64_t v60 = v11[15];
    char v61 = (float *)(a1 + v60);
    char v62 = *(unsigned char *)(a1 + v60 + 4);
    uint64_t v63 = (float *)(a2 + v60);
    int v64 = *(unsigned __int8 *)(a2 + v60 + 4);
    if (v62)
    {
      if (!v64) {
        goto LABEL_64;
      }
    }
    else
    {
      if (*v61 != *v63) {
        LOBYTE(v64) = 1;
      }
      if (v64) {
        goto LABEL_64;
      }
    }
    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v66(v10, a1, v4);
    v66(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v67 = *(void (**)(char *, uint64_t))(v5 + 8);
    v67(v8, v4);
    v67(v10, v4);
  }
  return v59 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WristState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  char v62 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v61 = (char *)&v60 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v67 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  char v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v60 - v20;
  MEMORY[0x270FA5388](v19);
  char v23 = (char *)&v60 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v65 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (int *)v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = v27[5];
  uint64_t v66 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_39;
  }
  uint64_t v31 = (uint64_t)v67;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_8:
  uint64_t v33 = v27[6];
  uint64_t v34 = v66;
  int v35 = *(unsigned __int8 *)(v65 + v33);
  int v36 = *(unsigned __int8 *)(v66 + v33);
  if (v35 == 4)
  {
    if (v36 != 4) {
      goto LABEL_39;
    }
  }
  else
  {
    char v37 = 0;
    if (v36 == 4 || v35 != v36) {
      return v37 & 1;
    }
  }
  uint64_t v38 = v27[7];
  int v39 = *(unsigned __int8 *)(v65 + v38);
  int v40 = *(unsigned __int8 *)(v66 + v38);
  if (v39 == 4)
  {
    if (v40 != 4) {
      goto LABEL_39;
    }
  }
  else
  {
    char v37 = 0;
    if (v40 == 4 || v39 != v40) {
      return v37 & 1;
    }
  }
  uint64_t v41 = v27[8];
  int v42 = *(unsigned __int8 *)(v65 + v41);
  int v43 = *(unsigned __int8 *)(v66 + v41);
  if (v42 == 4)
  {
    if (v43 != 4) {
      goto LABEL_39;
    }
    goto LABEL_23;
  }
  char v37 = 0;
  if (v43 != 4 && v42 == v43)
  {
LABEL_23:
    uint64_t v44 = v27[9];
    int v45 = *(unsigned __int8 *)(v65 + v44);
    int v46 = *(unsigned __int8 *)(v66 + v44);
    if (v45 == 2)
    {
      if (v46 != 2) {
        goto LABEL_39;
      }
    }
    else if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0)
    {
      goto LABEL_39;
    }
    uint64_t v47 = v27[10];
    int v48 = *(unsigned __int8 *)(v65 + v47);
    int v49 = *(unsigned __int8 *)(v66 + v47);
    if (v48 == 2)
    {
      if (v49 != 2) {
        goto LABEL_39;
      }
    }
    else if (v49 == 2 || ((((v49 & 1) == 0) ^ v48) & 1) == 0)
    {
      goto LABEL_39;
    }
    uint64_t v50 = v27[11];
    int v51 = *(unsigned __int8 *)(v65 + v50);
    int v52 = *(unsigned __int8 *)(v66 + v50);
    if (v51 != 2)
    {
      if (v52 == 2 || ((((v52 & 1) == 0) ^ v51) & 1) == 0) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    if (v52 == 2)
    {
LABEL_38:
      uint64_t v54 = v63;
      uint64_t v53 = v64;
      int v55 = *(void (**)(char *))(v63 + 16);
      uint64_t v56 = v61;
      v55(v61);
      int v57 = v62;
      ((void (*)(char *, uint64_t, uint64_t))v55)(v62, v34, v53);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v58 = *(void (**)(char *, uint64_t))(v54 + 8);
      v58(v57, v53);
      v58(v56, v53);
      return v37 & 1;
    }
LABEL_39:
    char v37 = 0;
  }
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WatchOrientation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v12 = *(int *)(v11 + 20);
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 4)
  {
    if (v14 != 4) {
      goto LABEL_16;
    }
  }
  else if (v14 == 4 || v13 != v14)
  {
    goto LABEL_16;
  }
  uint64_t v16 = *(int *)(v11 + 24);
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 != 4)
  {
    if (v18 != 4 && v17 == v18) {
      goto LABEL_11;
    }
LABEL_16:
    char v20 = 0;
    return v20 & 1;
  }
  if (v18 != 4) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WatchState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v105 = a1;
  uint64_t v106 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v87 = *(void *)(v2 - 8);
  uint64_t v88 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v86 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v85 = (char *)&v84 - v5;
  uint64_t v91 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v96 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v84 = (uint64_t)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WristState?, CLP_LogEntry_PrivateData_WristState?));
  MEMORY[0x270FA5388](v90);
  int v97 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  char v95 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v94 = (char *)&v84 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v93 = (char *)&v84 - v13;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v99 = *(void *)(v14 - 8);
  uint64_t v100 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v89 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WatchOrientation?, CLP_LogEntry_PrivateData_WatchOrientation?));
  MEMORY[0x270FA5388](v98);
  uint64_t v103 = (uint64_t)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v92 = (uint64_t)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v101 = (uint64_t)&v84 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v102 = (uint64_t)&v84 - v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v28 = v27 - 8;
  MEMORY[0x270FA5388](v27);
  int v30 = (char *)&v84 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v34 = (char *)&v84 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v32);
  char v37 = (char *)&v84 - v36;
  MEMORY[0x270FA5388](v35);
  int v39 = (char *)&v84 - v38;
  uint64_t v40 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105 + *(int *)(v40 + 20), (uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v104 = (int *)v40;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106 + *(int *)(v40 + 20), (uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v41 = (uint64_t)&v30[*(int *)(v28 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v42((uint64_t)v30, 1, v23) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v42(v41, 1, v23) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    int v43 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v44 = (uint64_t)v30;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, v43);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, (uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v42(v41, 1, v23) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v41, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v47 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v34, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v47 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v48 = v105;
  uint64_t v49 = v104[6];
  uint64_t v50 = (_DWORD *)(v105 + v49);
  char v51 = *(unsigned char *)(v105 + v49 + 4);
  uint64_t v52 = v106;
  uint64_t v53 = (_DWORD *)(v106 + v49);
  int v54 = *(unsigned __int8 *)(v106 + v49 + 4);
  if (v51)
  {
    if (!v54) {
      goto LABEL_8;
    }
  }
  else
  {
    if (*v50 != *v53) {
      LOBYTE(v54) = 1;
    }
    if (v54) {
      goto LABEL_8;
    }
  }
  int v55 = v104;
  uint64_t v56 = v102;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105 + v104[7], v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  uint64_t v57 = v101;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52 + v55[7], v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  uint64_t v58 = v103;
  uint64_t v59 = v103 + *(int *)(v98 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  uint64_t v60 = v100;
  char v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
  if (v61(v58, 1, v100) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    int v62 = v61(v59, 1, v60);
    uint64_t v64 = v96;
    uint64_t v63 = (uint64_t)v97;
    uint64_t v66 = (uint64_t)v94;
    uint64_t v65 = (uint64_t)v95;
    uint64_t v67 = (uint64_t)v93;
    if (v62 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  uint64_t v68 = v92;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  int v69 = v61(v59, 1, v60);
  uint64_t v64 = v96;
  uint64_t v63 = (uint64_t)v97;
  uint64_t v66 = (uint64_t)v94;
  uint64_t v70 = v95;
  if (v69 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v68, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
LABEL_22:
    int v43 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WatchOrientation?, CLP_LogEntry_PrivateData_WatchOrientation?);
    uint64_t v44 = v103;
    goto LABEL_7;
  }
  uint64_t v71 = v89;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v59, v89, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  LODWORD(v100) = specialized static CLP_LogEntry_PrivateData_WatchOrientation.== infix(_:_:)(v68, v71);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v71, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v68, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  uint64_t v65 = (uint64_t)v70;
  uint64_t v67 = (uint64_t)v93;
  if ((v100 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_24:
  uint64_t v72 = v104;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48 + v104[8], v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52 + v72[8], v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  uint64_t v73 = v63 + *(int *)(v90 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  uint64_t v75 = v91;
  if (v74(v63, 1, v91) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    if (v74(v73, 1, v75) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
LABEL_31:
      uint64_t v79 = v87;
      uint64_t v78 = v88;
      uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
      uint64_t v81 = v85;
      v80(v85, v48, v88);
      uint64_t v82 = v86;
      v80(v86, v52, v78);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v83 = *(void (**)(char *, uint64_t))(v79 + 8);
      v83(v82, v78);
      v83(v81, v78);
      return v45 & 1;
    }
    goto LABEL_29;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  if (v74(v73, 1, v75) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v65, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
LABEL_29:
    int v43 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WristState?, CLP_LogEntry_PrivateData_WristState?);
    uint64_t v44 = v63;
    goto LABEL_7;
  }
  uint64_t v76 = v84;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v73, v84, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  char v77 = specialized static CLP_LogEntry_PrivateData_WristState.== infix(_:_:)(v65, v76);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v76, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v65, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  if (v77) {
    goto LABEL_31;
  }
LABEL_8:
  char v45 = 0;
  return v45 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_StepCount.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = a1;
  uint64_t v78 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v66 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v65 = (char *)&v63 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v64 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_StepCountEntry?, CLP_LogEntry_PrivateData_StepCountEntry?));
  MEMORY[0x270FA5388](v70);
  uint64_t v74 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v69 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v75 = (uint64_t)&v63 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v71 = (uint64_t)&v63 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v63 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v32 + 20), (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v76 = v32;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78 + *(int *)(v32 + 20), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v39 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v26, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v39 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v40 = v76;
  uint64_t v41 = v77;
  uint64_t v42 = *(int *)(v76 + 24);
  int v43 = (_DWORD *)(v77 + v42);
  char v44 = *(unsigned char *)(v77 + v42 + 4);
  uint64_t v45 = v78;
  int v46 = (_DWORD *)(v78 + v42);
  int v47 = *(unsigned __int8 *)(v78 + v42 + 4);
  if (v44)
  {
    if (!v47) {
      goto LABEL_8;
    }
  }
  else
  {
    if (*v43 != *v46) {
      LOBYTE(v47) = 1;
    }
    if (v47) {
      goto LABEL_8;
    }
  }
  uint64_t v48 = v71;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v76 + 28), v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  uint64_t v49 = v75;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45 + *(int *)(v40 + 28), v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  uint64_t v50 = v74;
  uint64_t v51 = v74 + *(int *)(v70 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  uint64_t v52 = v73;
  uint64_t v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  if (v53(v50, 1, v73) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
    if (v53(v51, 1, v52) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
LABEL_24:
      uint64_t v58 = v67;
      uint64_t v57 = v68;
      uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      uint64_t v60 = v65;
      v59(v65, v41, v68);
      char v61 = v66;
      v59(v66, v45, v57);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v62 = *(void (**)(char *, uint64_t))(v58 + 8);
      v62(v61, v57);
      v62(v60, v57);
      return v37 & 1;
    }
    goto LABEL_22;
  }
  uint64_t v54 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  if (v53(v51, 1, v52) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v54, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
LABEL_22:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_StepCountEntry?, CLP_LogEntry_PrivateData_StepCountEntry?);
    uint64_t v36 = v50;
    goto LABEL_7;
  }
  uint64_t v55 = v64;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v51, v64, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  char v56 = specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(v54, v55, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_StepCountEntry.== infix(_:_:));
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v55, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v54, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  if (v56) {
    goto LABEL_24;
  }
LABEL_8:
  char v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_DirectionOfTravel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v101 = *(void *)(v4 - 8);
  uint64_t v102 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v100 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v99 = (char *)&v98 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v103 = (uint64_t)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v98 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v98 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v104 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (int *)v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = v27[5];
  uint64_t v105 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_83;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v31 = v103;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v103, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_83;
  }
LABEL_8:
  uint64_t v33 = v27[6];
  uint64_t v34 = (double *)(v104 + v33);
  char v35 = *(unsigned char *)(v104 + v33 + 8);
  uint64_t v36 = (double *)(v105 + v33);
  int v37 = *(unsigned __int8 *)(v105 + v33 + 8);
  if (v35)
  {
    if (!v37) {
      goto LABEL_83;
    }
  }
  else
  {
    if (*v34 != *v36) {
      LOBYTE(v37) = 1;
    }
    if (v37) {
      goto LABEL_83;
    }
  }
  uint64_t v38 = v27[7];
  char v39 = (double *)(v104 + v38);
  char v40 = *(unsigned char *)(v104 + v38 + 8);
  uint64_t v41 = (double *)(v105 + v38);
  int v42 = *(unsigned __int8 *)(v105 + v38 + 8);
  if (v40)
  {
    if (!v42) {
      goto LABEL_83;
    }
  }
  else
  {
    if (*v39 != *v41) {
      LOBYTE(v42) = 1;
    }
    if (v42) {
      goto LABEL_83;
    }
  }
  uint64_t v43 = v27[8];
  char v44 = (double *)(v104 + v43);
  char v45 = *(unsigned char *)(v104 + v43 + 8);
  int v46 = (double *)(v105 + v43);
  int v47 = *(unsigned __int8 *)(v105 + v43 + 8);
  if (v45)
  {
    if (!v47) {
      goto LABEL_83;
    }
  }
  else
  {
    if (*v44 != *v46) {
      LOBYTE(v47) = 1;
    }
    if (v47) {
      goto LABEL_83;
    }
  }
  uint64_t v48 = v27[9];
  uint64_t v49 = (double *)(v104 + v48);
  char v50 = *(unsigned char *)(v104 + v48 + 8);
  uint64_t v51 = (double *)(v105 + v48);
  int v52 = *(unsigned __int8 *)(v105 + v48 + 8);
  if (v50)
  {
    if (!v52) {
      goto LABEL_83;
    }
  }
  else
  {
    if (*v49 != *v51) {
      LOBYTE(v52) = 1;
    }
    if (v52) {
      goto LABEL_83;
    }
  }
  uint64_t v53 = v27[10];
  uint64_t v54 = (double *)(v104 + v53);
  char v55 = *(unsigned char *)(v104 + v53 + 8);
  char v56 = (double *)(v105 + v53);
  int v57 = *(unsigned __int8 *)(v105 + v53 + 8);
  if (v55)
  {
    if (!v57) {
      goto LABEL_83;
    }
  }
  else
  {
    if (*v54 != *v56) {
      LOBYTE(v57) = 1;
    }
    if (v57) {
      goto LABEL_83;
    }
  }
  uint64_t v58 = v27[11];
  uint64_t v59 = (double *)(v104 + v58);
  char v60 = *(unsigned char *)(v104 + v58 + 8);
  char v61 = (double *)(v105 + v58);
  int v62 = *(unsigned __int8 *)(v105 + v58 + 8);
  if (v60)
  {
    if (!v62) {
      goto LABEL_83;
    }
  }
  else
  {
    if (*v59 != *v61) {
      LOBYTE(v62) = 1;
    }
    if (v62) {
      goto LABEL_83;
    }
  }
  uint64_t v63 = v27[12];
  uint64_t v64 = (double *)(v104 + v63);
  char v65 = *(unsigned char *)(v104 + v63 + 8);
  uint64_t v66 = (double *)(v105 + v63);
  int v67 = *(unsigned __int8 *)(v105 + v63 + 8);
  if (v65)
  {
    if (!v67) {
      goto LABEL_83;
    }
  }
  else
  {
    if (*v64 != *v66) {
      LOBYTE(v67) = 1;
    }
    if (v67) {
      goto LABEL_83;
    }
  }
  uint64_t v68 = v27[13];
  uint64_t v69 = (double *)(v104 + v68);
  char v70 = *(unsigned char *)(v104 + v68 + 8);
  uint64_t v71 = (double *)(v105 + v68);
  int v72 = *(unsigned __int8 *)(v105 + v68 + 8);
  if (v70)
  {
    if (!v72) {
      goto LABEL_83;
    }
  }
  else
  {
    if (*v69 != *v71) {
      LOBYTE(v72) = 1;
    }
    if (v72) {
      goto LABEL_83;
    }
  }
  uint64_t v73 = v27[14];
  uint64_t v74 = (double *)(v104 + v73);
  char v75 = *(unsigned char *)(v104 + v73 + 8);
  uint64_t v76 = (double *)(v105 + v73);
  int v77 = *(unsigned __int8 *)(v105 + v73 + 8);
  if (v75)
  {
    if (!v77) {
      goto LABEL_83;
    }
  }
  else
  {
    if (*v74 != *v76) {
      LOBYTE(v77) = 1;
    }
    if (v77) {
      goto LABEL_83;
    }
  }
  uint64_t v78 = v27[15];
  int v79 = *(unsigned __int8 *)(v104 + v78);
  int v80 = *(unsigned __int8 *)(v105 + v78);
  if (v79 == 2)
  {
    if (v80 != 2) {
      goto LABEL_83;
    }
  }
  else if (v80 == 2 || ((((v80 & 1) == 0) ^ v79) & 1) == 0)
  {
    goto LABEL_83;
  }
  uint64_t v81 = v27[16];
  int v82 = *(unsigned __int8 *)(v104 + v81);
  int v83 = *(unsigned __int8 *)(v105 + v81);
  if (v82 == 2)
  {
    if (v83 != 2) {
      goto LABEL_83;
    }
  }
  else if (v83 == 2 || ((((v83 & 1) == 0) ^ v82) & 1) == 0)
  {
    goto LABEL_83;
  }
  uint64_t v84 = v27[17];
  int v85 = *(unsigned __int8 *)(v104 + v84);
  int v86 = *(unsigned __int8 *)(v105 + v84);
  if (v85 == 2)
  {
    if (v86 != 2) {
      goto LABEL_83;
    }
  }
  else if (v86 == 2 || ((((v86 & 1) == 0) ^ v85) & 1) == 0)
  {
    goto LABEL_83;
  }
  uint64_t v87 = v27[18];
  int v88 = *(unsigned __int8 *)(v104 + v87);
  int v89 = *(unsigned __int8 *)(v105 + v87);
  if (v88 != 2)
  {
    if (v89 != 2 && ((((v89 & 1) == 0) ^ v88) & 1) != 0) {
      goto LABEL_82;
    }
LABEL_83:
    char v95 = 0;
    return v95 & 1;
  }
  if (v89 != 2) {
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v91 = v101;
  uint64_t v90 = v102;
  uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
  uint64_t v93 = v99;
  v92(v99, v104, v102);
  uint64_t v94 = v100;
  v92(v100, v105, v90);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v96 = *(void (**)(char *, uint64_t))(v91 + 8);
  v96(v94, v90);
  v96(v93, v90);
  return v95 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (float *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  uint64_t v15 = (float *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (float *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v22 = v11[7];
    uint64_t v23 = (float *)(a1 + v22);
    char v24 = *(unsigned char *)(a1 + v22 + 4);
    uint64_t v25 = (float *)(a2 + v22);
    int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if (v24)
    {
      if (!v26) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if (v26) {
        goto LABEL_15;
      }
    }
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
    return v27 & 1;
  }
  if (v21) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_CompassTypeSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v78 = *(void *)(v3 - 8);
  uint64_t v79 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  int v77 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v76 = (char *)&v74 - v6;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t v84 = *(void *)(v7 - 8);
  uint64_t v85 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v80 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeCompass?, CLP_LogEntry_PrivateData_MotionTypeCompass?));
  MEMORY[0x270FA5388](v82);
  uint64_t v86 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v81 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v88 = (uint64_t)&v74 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v83 = (uint64_t)&v74 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  char v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v21 = v20 - 8;
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  char v27 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = (char *)&v74 - v29;
  MEMORY[0x270FA5388](v28);
  char v32 = (char *)&v74 - v31;
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  uint64_t v34 = *(int *)(v33 + 20);
  uint64_t v87 = a1;
  uint64_t v35 = a1 + v34;
  uint64_t v36 = (int *)v33;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v35, (uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v89 + v36[5], (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v37 = (uint64_t)&v23[*(int *)(v21 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v38((uint64_t)v23, 1, v16) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v38(v37, 1, v16) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    char v39 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v40 = (uint64_t)v23;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v39);
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v38(v37, 1, v16) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v37, (uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v41 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v27, (uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v41 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v42 = v87;
  uint64_t v43 = v83;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87 + v36[6], v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  char v75 = v36;
  uint64_t v45 = v88;
  uint64_t v44 = v89;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v89 + v36[6], v88, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  uint64_t v46 = v86;
  uint64_t v47 = v86 + *(int *)(v82 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  uint64_t v48 = v85;
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  if (v49(v46, 1, v85) != 1)
  {
    uint64_t v50 = v81;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    if (v49(v47, 1, v48) != 1)
    {
      uint64_t v53 = v80;
      outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v47, v80, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      char v54 = specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(v50, v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionTypeCompass.== infix(_:_:));
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v88, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v50, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
      if ((v54 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v88, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v50, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_13;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  if (v49(v47, 1, v48) != 1)
  {
LABEL_13:
    char v39 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeCompass?, CLP_LogEntry_PrivateData_MotionTypeCompass?);
    uint64_t v40 = v46;
    goto LABEL_14;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
LABEL_18:
  uint64_t v55 = v75[7];
  char v56 = (float *)(v42 + v55);
  char v57 = *(unsigned char *)(v42 + v55 + 4);
  uint64_t v58 = (float *)(v44 + v55);
  int v59 = *(unsigned __int8 *)(v44 + v55 + 4);
  if (v57)
  {
    if (!v59) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v56 != *v58) {
      LOBYTE(v59) = 1;
    }
    if (v59) {
      goto LABEL_15;
    }
  }
  uint64_t v60 = v75[8];
  char v61 = (float *)(v42 + v60);
  char v62 = *(unsigned char *)(v42 + v60 + 4);
  uint64_t v63 = (float *)(v44 + v60);
  int v64 = *(unsigned __int8 *)(v44 + v60 + 4);
  if (v62)
  {
    if (!v64) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v61 != *v63) {
      LOBYTE(v64) = 1;
    }
    if (v64) {
      goto LABEL_15;
    }
  }
  uint64_t v65 = v75[9];
  int v66 = *(unsigned __int8 *)(v42 + v65);
  int v67 = *(unsigned __int8 *)(v44 + v65);
  if (v66 == 2)
  {
    if (v67 == 2)
    {
LABEL_35:
      uint64_t v69 = v78;
      uint64_t v68 = v79;
      char v70 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
      uint64_t v71 = v76;
      v70(v76, v42, v79);
      int v72 = v77;
      v70(v77, v44, v68);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v73 = *(void (**)(char *, uint64_t))(v69 + 8);
      v73(v72, v68);
      v73(v71, v68);
      return v51 & 1;
    }
  }
  else if (v67 != 2 && ((((v67 & 1) == 0) ^ v66) & 1) != 0)
  {
    goto LABEL_35;
  }
LABEL_15:
  char v51 = 0;
  return v51 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Compass.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = *(int *)(v27 + 24);
  char v51 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_10:
    char v41 = 0;
    return v41 & 1;
  }
  uint64_t v31 = v49;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v33 = v50;
  uint64_t v34 = v51;
  if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_CompassTypeSample.== infix(_:_:)) & 1) == 0)goto LABEL_10; {
  uint64_t v36 = v47;
  }
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  uint64_t v38 = v45;
  v37(v45, (char *)v33 + *(int *)(v27 + 20), v48);
  char v39 = (char *)v34 + *(int *)(v27 + 20);
  uint64_t v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Battery.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_32;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_32;
    }
  }
  uint64_t v17 = v11[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2) {
      goto LABEL_32;
    }
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v20 = v11[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2) {
      goto LABEL_32;
    }
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v23 = v11[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 5)
  {
    if (v25 != 5) {
      goto LABEL_32;
    }
  }
  else if (v25 == 5 || v24 != v25)
  {
    goto LABEL_32;
  }
  uint64_t v27 = v11[9];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 != 2)
  {
    if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0) {
      goto LABEL_32;
    }
LABEL_30:
    uint64_t v30 = v11[10];
    uint64_t v31 = (_DWORD *)(a1 + v30);
    char v32 = *(unsigned char *)(a1 + v30 + 4);
    uint64_t v33 = (_DWORD *)(a2 + v30);
    int v34 = *(unsigned __int8 *)(a2 + v30 + 4);
    if (v32)
    {
      if (!v34) {
        goto LABEL_32;
      }
    }
    else
    {
      if (*v31 != *v33) {
        LOBYTE(v34) = 1;
      }
      if (v34) {
        goto LABEL_32;
      }
    }
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v37(v10, a1, v4);
    v37(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v5 + 8);
    v38(v8, v4);
    v38(v10, v4);
    return v35 & 1;
  }
  if (v29 == 2) {
    goto LABEL_30;
  }
LABEL_32:
  char v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Timer.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v44 = (char *)&v41 - v9;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v41 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  int v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v48 = (uint64_t)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  int v22 = (char *)&v41 - v21;
  MEMORY[0x270FA5388](v20);
  int v24 = (char *)&v41 - v23;
  uint64_t v25 = a3(0);
  uint64_t v26 = *(int *)(v25 + 20);
  uint64_t v42 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v26, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v27 = *(int *)(v25 + 20);
  uint64_t v43 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v27, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = (uint64_t)&v16[*(int *)(v14 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, (uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v29((uint64_t)v16, 1, v10) != 1)
  {
    uint64_t v30 = v48;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v29(v28, 1, v10) != 1)
    {
      uint64_t v31 = v41;
      outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v28, v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(v30, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if (v32) {
        goto LABEL_8;
      }
LABEL_9:
      char v38 = 0;
      return v38 & 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_9;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v29(v28, 1, v10) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_8:
  uint64_t v34 = v46;
  uint64_t v33 = v47;
  char v35 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v36 = v44;
  v35(v44, v42, v47);
  uint64_t v37 = v45;
  v35(v45, v43, v33);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
  v39(v37, v33);
  v39(v36, v33);
  return v38 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v65 = a3;
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v61 = *(void *)(v5 - 8);
  uint64_t v62 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v60 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int v59 = (char *)&v58 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  int v64 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  int v22 = (char *)&v58 - v21;
  MEMORY[0x270FA5388](v20);
  int v24 = (char *)&v58 - v23;
  uint64_t v25 = v65(0);
  uint64_t v26 = *(int *)(v25 + 20);
  uint64_t v63 = a1;
  uint64_t v27 = a1 + v26;
  uint64_t v28 = (int *)v25;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v27, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = v28[5];
  uint64_t v65 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v29, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = (uint64_t)&v15[*(int *)(v13 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v31((uint64_t)v15, 1, v9) != 1)
  {
    uint64_t v32 = (uint64_t)v64;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v31(v30, 1, v9) != 1)
    {
      outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v30, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v35 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v19, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v35 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v31(v30, 1, v9) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_10:
  uint64_t v36 = v28[6];
  uint64_t v37 = (float *)(v63 + v36);
  char v38 = *(unsigned char *)(v63 + v36 + 4);
  uint64_t v39 = v65;
  uint64_t v40 = (float *)((char *)v65 + v36);
  int v41 = *((unsigned __int8 *)v65 + v36 + 4);
  if (v38)
  {
    if (!v41) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v37 != *v40) {
      LOBYTE(v41) = 1;
    }
    if (v41) {
      goto LABEL_7;
    }
  }
  uint64_t v42 = v28[7];
  uint64_t v43 = (float *)(v63 + v42);
  char v44 = *(unsigned char *)(v63 + v42 + 4);
  uint64_t v45 = (float *)((char *)v65 + v42);
  int v46 = *((unsigned __int8 *)v65 + v42 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_7;
    }
  }
  uint64_t v47 = v28[8];
  uint64_t v48 = (float *)(v63 + v47);
  char v49 = *(unsigned char *)(v63 + v47 + 4);
  uint64_t v50 = (float *)((char *)v65 + v47);
  int v51 = *((unsigned __int8 *)v65 + v47 + 4);
  if (v49)
  {
    if (v51)
    {
LABEL_28:
      uint64_t v53 = v61;
      uint64_t v52 = v62;
      char v54 = *(void (**)(char *))(v61 + 16);
      uint64_t v55 = v59;
      v54(v59);
      char v56 = v60;
      ((void (*)(char *, uint64_t (*)(void), uint64_t))v54)(v60, v39, v52);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v57 = *(void (**)(char *, uint64_t))(v53 + 8);
      v57(v56, v52);
      v57(v55, v52);
      return v33 & 1;
    }
  }
  else
  {
    if (*v48 != *v50) {
      LOBYTE(v51) = 1;
    }
    if ((v51 & 1) == 0) {
      goto LABEL_28;
    }
  }
LABEL_7:
  char v33 = 0;
  return v33 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Accel.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  int v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = *(int *)(v27 + 24);
  int v51 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_10:
    char v41 = 0;
    return v41 & 1;
  }
  uint64_t v31 = v49;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  char v33 = v50;
  uint64_t v34 = v51;
  if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample) & 1) == 0)goto LABEL_10; {
  uint64_t v36 = v47;
  }
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  char v38 = v45;
  v37(v45, (char *)v33 + *(int *)(v27 + 20), v48);
  uint64_t v39 = (char *)v34 + *(int *)(v27 + 20);
  uint64_t v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Gyro.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  int v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = *(int *)(v27 + 24);
  int v51 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_10:
    char v41 = 0;
    return v41 & 1;
  }
  uint64_t v31 = v49;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  char v33 = v50;
  uint64_t v34 = v51;
  if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample) & 1) == 0)goto LABEL_10; {
  uint64_t v36 = v47;
  }
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  char v38 = v45;
  v37(v45, (char *)v33 + *(int *)(v27 + 20), v48);
  uint64_t v39 = (char *)v34 + *(int *)(v27 + 20);
  uint64_t v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_BaroSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  char v54 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v53 = (char *)&v52 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v57 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v52 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v58 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (int *)v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = v27[5];
  uint64_t v59 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) != 1)
    {
      uint64_t v33 = v57;
      outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      char v34 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v34 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_10:
  uint64_t v35 = v27[6];
  uint64_t v36 = v59;
  uint64_t v37 = (float *)(v58 + v35);
  char v38 = *(unsigned char *)(v58 + v35 + 4);
  uint64_t v39 = (float *)(v59 + v35);
  int v40 = *(unsigned __int8 *)(v59 + v35 + 4);
  if (v38)
  {
    if (!v40) {
      goto LABEL_7;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_7;
    }
  }
  uint64_t v41 = v27[7];
  uint64_t v42 = (float *)(v58 + v41);
  char v43 = *(unsigned char *)(v58 + v41 + 4);
  uint64_t v44 = (float *)(v59 + v41);
  int v45 = *(unsigned __int8 *)(v59 + v41 + 4);
  if (v43)
  {
    if (v45)
    {
LABEL_22:
      uint64_t v47 = v55;
      uint64_t v46 = v56;
      uint64_t v48 = *(void (**)(char *))(v55 + 16);
      uint64_t v49 = v53;
      v48(v53);
      uint64_t v50 = v54;
      ((void (*)(char *, uint64_t, uint64_t))v48)(v54, v36, v46);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v51 = *(void (**)(char *, uint64_t))(v47 + 8);
      v51(v50, v46);
      v51(v49, v46);
      return v31 & 1;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if ((v45 & 1) == 0) {
      goto LABEL_22;
    }
  }
LABEL_7:
  char v31 = 0;
  return v31 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Baro.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int v45 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = *(int *)(v27 + 24);
  int v51 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_10:
    char v41 = 0;
    return v41 & 1;
  }
  uint64_t v31 = v49;
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v33 = v50;
  char v34 = v51;
  if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_BaroSample.== infix(_:_:)) & 1) == 0)goto LABEL_10; {
  uint64_t v36 = v47;
  }
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  char v38 = v45;
  v37(v45, (char *)v33 + *(int *)(v27 + 20), v48);
  uint64_t v39 = (char *)v34 + *(int *)(v27 + 20);
  int v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  uint64_t v14 = (double *)((char *)a1 + v13);
  char v15 = *((unsigned char *)a1 + v13 + 8);
  uint64_t v16 = (double *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if (v15)
  {
    if (!v17) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_27;
    }
  }
  uint64_t v18 = v11[7];
  uint64_t v19 = (double *)((char *)a1 + v18);
  char v20 = *((unsigned char *)a1 + v18 + 8);
  uint64_t v21 = (double *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if (v20)
  {
    if (!v22) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if (v22) {
      goto LABEL_27;
    }
  }
  uint64_t v23 = v11[8];
  uint64_t v24 = (double *)((char *)a1 + v23);
  char v25 = *((unsigned char *)a1 + v23 + 8);
  uint64_t v26 = (double *)((char *)a2 + v23);
  int v27 = *((unsigned __int8 *)a2 + v23 + 8);
  if (v25)
  {
    if (!v27) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v24 != *v26) {
      LOBYTE(v27) = 1;
    }
    if (v27) {
      goto LABEL_27;
    }
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = (double *)((char *)a1 + v28);
  char v30 = *((unsigned char *)a1 + v28 + 8);
  uint64_t v31 = (double *)((char *)a2 + v28);
  int v32 = *((unsigned __int8 *)a2 + v28 + 8);
  if (v30)
  {
    if (v32) {
      goto LABEL_25;
    }
LABEL_27:
    char v34 = 0;
    return v34 & 1;
  }
  if (*v29 != *v31) {
    LOBYTE(v32) = 1;
  }
  if (v32) {
    goto LABEL_27;
  }
LABEL_25:
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v33(v10, (char *)a1 + v12[5], v4);
  v33(v8, (char *)a2 + v12[5], v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v5 + 8);
  v35(v8, v4);
  v35(v10, v4);
  return v34 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v96 = a1;
  int v97 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v85 = *(void *)(v2 - 8);
  uint64_t v86 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v84 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v83 = (char *)&v82 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v93 = *(void *)(v6 - 8);
  uint64_t v94 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v87 = (uint64_t)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?));
  MEMORY[0x270FA5388](v88);
  uint64_t v89 = (uint64_t)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v92 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v90 = (char *)&v82 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v91 = (char *)&v82 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (uint64_t *)((char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  int v22 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v82 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v82 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v96 + *(int *)(v32 + 24), (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  char v95 = (int *)v32;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v97 + *(int *)(v32 + 24), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  char v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    uint64_t v36 = (uint64_t)v22;
    goto LABEL_7;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  char v37 = specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.== infix(_:_:)(v26, v18);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if ((v37 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_9:
  uint64_t v39 = v96;
  char v38 = v97;
  if ((specialized static Array<A>.== infix(_:_:)(*v96, *v97) & 1) == 0) {
    goto LABEL_27;
  }
  int v40 = v95;
  uint64_t v41 = v95[7];
  uint64_t v42 = (uint64_t *)((char *)v39 + v41);
  char v43 = *((unsigned char *)v39 + v41 + 8);
  uint64_t v44 = (uint64_t *)((char *)v38 + v41);
  int v45 = *((unsigned __int8 *)v38 + v41 + 8);
  if (v43)
  {
    uint64_t v47 = v93;
    uint64_t v46 = v94;
    uint64_t v49 = (uint64_t)v91;
    uint64_t v48 = (uint64_t)v92;
    uint64_t v50 = (uint64_t)v90;
    if (!v45) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    uint64_t v47 = v93;
    uint64_t v46 = v94;
    uint64_t v49 = (uint64_t)v91;
    uint64_t v48 = (uint64_t)v92;
    uint64_t v50 = (uint64_t)v90;
    if (v45) {
      goto LABEL_27;
    }
  }
  uint64_t v51 = v95[8];
  int v52 = *((unsigned __int8 *)v39 + v51);
  int v53 = *((unsigned __int8 *)v38 + v51);
  if (v52 == 4)
  {
    if (v53 != 4) {
      goto LABEL_27;
    }
    goto LABEL_21;
  }
  char v54 = 0;
  if (v53 != 4 && v52 == v53)
  {
LABEL_21:
    uint64_t v55 = v95[9];
    uint64_t v56 = (_DWORD *)((char *)v39 + v55);
    char v57 = *((unsigned char *)v39 + v55 + 4);
    uint64_t v58 = (_DWORD *)((char *)v38 + v55);
    int v59 = *((unsigned __int8 *)v38 + v55 + 4);
    if (v57)
    {
      if (!v59) {
        goto LABEL_27;
      }
    }
    else
    {
      if (*v56 != *v58) {
        LOBYTE(v59) = 1;
      }
      if (v59) {
        goto LABEL_27;
      }
    }
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39 + v95[10], v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38 + v40[10], v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    uint64_t v61 = v89;
    uint64_t v62 = v89 + *(int *)(v88 + 48);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v89, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    uint64_t v63 = v61;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    int v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
    if (v64(v63, 1, v46) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      uint64_t v63 = v89;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      if (v64(v62, 1, v46) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        goto LABEL_36;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      if (v64(v62, 1, v46) != 1)
      {
        uint64_t v65 = v87;
        outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v62, v87, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        uint64_t v66 = v63;
        char v67 = specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.== infix(_:_:)(v48, v65);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v65, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v48, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        if (v67)
        {
LABEL_36:
          uint64_t v68 = v95[11];
          uint64_t v69 = (uint64_t *)((char *)v39 + v68);
          char v70 = *((unsigned char *)v39 + v68 + 8);
          uint64_t v71 = (uint64_t *)((char *)v38 + v68);
          int v72 = *((unsigned __int8 *)v38 + v68 + 8);
          if (v70)
          {
            if (v72)
            {
LABEL_42:
              uint64_t v73 = (char *)v39 + v95[5];
              uint64_t v75 = v85;
              uint64_t v74 = v86;
              uint64_t v76 = v95;
              int v77 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
              uint64_t v78 = v83;
              v77(v83, v73, v86);
              uint64_t v79 = (char *)v38 + v76[5];
              uint64_t v80 = v84;
              v77(v84, v79, v74);
              lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
              char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v81 = *(void (**)(char *, uint64_t))(v75 + 8);
              v81(v80, v74);
              v81(v78, v74);
              return v54 & 1;
            }
          }
          else
          {
            if (*v69 != *v71) {
              LOBYTE(v72) = 1;
            }
            if ((v72 & 1) == 0) {
              goto LABEL_42;
            }
          }
        }
LABEL_27:
        char v54 = 0;
        return v54 & 1;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v48, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    }
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    uint64_t v36 = v63;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_27;
  }
  return v54 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = (char *)&v47 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v54 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v47 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v47 - v22;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  uint64_t v25 = *(int *)(v24 + 24);
  int v52 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = (int *)v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v28 = v27[6];
  int v53 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_15;
  }
  uint64_t v31 = (uint64_t)v54;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v29, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v32 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v32 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v33 = v52;
  char v34 = v53;
  if ((specialized static Array<A>.== infix(_:_:)(*v52, *v53, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.== infix(_:_:)) & 1) == 0)goto LABEL_15; {
  uint64_t v35 = v27[7];
  }
  int v36 = *((unsigned __int8 *)v33 + v35);
  int v37 = *((unsigned __int8 *)v34 + v35);
  if (v36 != 2)
  {
    if (v37 != 2 && ((((v37 & 1) == 0) ^ v36) & 1) != 0) {
      goto LABEL_14;
    }
LABEL_15:
    char v44 = 0;
    return v44 & 1;
  }
  if (v37 != 2) {
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v39 = v50;
  uint64_t v38 = v51;
  int v40 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  uint64_t v41 = v48;
  v40(v48, (char *)v33 + v27[5], v51);
  uint64_t v42 = (char *)v34 + v27[5];
  char v43 = v49;
  v40(v49, v42, v38);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v45 = *(void (**)(char *, uint64_t))(v39 + 8);
  v45(v43, v38);
  v45(v41, v38);
  return v44 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  uint64_t v15 = (double *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 8);
  uint64_t v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if (v16)
  {
    if (!v18) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if (v18) {
      goto LABEL_21;
    }
  }
  uint64_t v19 = v13[6];
  uint64_t v20 = (double *)(a1 + v19);
  char v21 = *(unsigned char *)(a1 + v19 + 8);
  uint64_t v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if (v21)
  {
    if (!v23) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if (v23) {
      goto LABEL_21;
    }
  }
  uint64_t v24 = v13[7];
  uint64_t v25 = (double *)(a1 + v24);
  char v26 = *(unsigned char *)(a1 + v24 + 8);
  uint64_t v27 = (double *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if ((v26 & 1) == 0)
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if (v28) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v29 = v13[8];
    uint64_t v30 = (double *)(a1 + v29);
    char v31 = *(unsigned char *)(a1 + v29 + 8);
    char v32 = (double *)(a2 + v29);
    int v33 = *(unsigned __int8 *)(a2 + v29 + 8);
    if (v31)
    {
      if (!v33) {
        goto LABEL_21;
      }
    }
    else
    {
      if (*v30 != *v32) {
        LOBYTE(v33) = 1;
      }
      if (v33) {
        goto LABEL_21;
      }
    }
    int v36 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v36(v12, a1, v6);
    v36(v10, a2, v6);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v37 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37(v10, v6);
    v37(v12, v6);
    return v34 & 1;
  }
  if (v28) {
    goto LABEL_19;
  }
LABEL_21:
  char v34 = 0;
  return v34 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v75 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v73 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int v72 = (char *)&v71 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v76 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v71 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v71 - v21;
  int v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v24 = v23;
  uint64_t v25 = v23[5];
  char v26 = (double *)(a1 + v25);
  char v27 = *(unsigned char *)(a1 + v25 + 8);
  int v28 = (double *)(a2 + v25);
  int v29 = *(unsigned __int8 *)(a2 + v25 + 8);
  if (v27)
  {
    if (!v29) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*v26 != *v28) {
      LOBYTE(v29) = 1;
    }
    if (v29) {
      goto LABEL_49;
    }
  }
  uint64_t v30 = v23[6];
  char v31 = (double *)(a1 + v30);
  char v32 = *(unsigned char *)(a1 + v30 + 8);
  int v33 = (double *)(a2 + v30);
  int v34 = *(unsigned __int8 *)(a2 + v30 + 8);
  if (v32)
  {
    if (!v34) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*v31 != *v33) {
      LOBYTE(v34) = 1;
    }
    if (v34) {
      goto LABEL_49;
    }
  }
  uint64_t v35 = v23[7];
  int v36 = (double *)(a1 + v35);
  char v37 = *(unsigned char *)(a1 + v35 + 8);
  uint64_t v38 = (double *)(a2 + v35);
  int v39 = *(unsigned __int8 *)(a2 + v35 + 8);
  if (v37)
  {
    if (!v39) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*v36 != *v38) {
      LOBYTE(v39) = 1;
    }
    if (v39) {
      goto LABEL_49;
    }
  }
  uint64_t v40 = v23[8];
  uint64_t v41 = (double *)(a1 + v40);
  char v42 = *(unsigned char *)(a1 + v40 + 8);
  char v43 = (double *)(a2 + v40);
  int v44 = *(unsigned __int8 *)(a2 + v40 + 8);
  if (v42)
  {
    if (!v44) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*v41 != *v43) {
      LOBYTE(v44) = 1;
    }
    if (v44) {
      goto LABEL_49;
    }
  }
  uint64_t v45 = v23[9];
  uint64_t v46 = (double *)(a1 + v45);
  char v47 = *(unsigned char *)(a1 + v45 + 8);
  uint64_t v48 = (double *)(a2 + v45);
  int v49 = *(unsigned __int8 *)(a2 + v45 + 8);
  if (v47)
  {
    if (!v49) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*v46 != *v48) {
      LOBYTE(v49) = 1;
    }
    if (v49) {
      goto LABEL_49;
    }
  }
  uint64_t v50 = v23[10];
  uint64_t v51 = (double *)(a1 + v50);
  char v52 = *(unsigned char *)(a1 + v50 + 8);
  int v53 = (double *)(a2 + v50);
  int v54 = *(unsigned __int8 *)(a2 + v50 + 8);
  if (v52)
  {
    if (!v54) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*v51 != *v53) {
      LOBYTE(v54) = 1;
    }
    if (v54) {
      goto LABEL_49;
    }
  }
  uint64_t v55 = v23[11];
  uint64_t v56 = (double *)(a1 + v55);
  char v57 = *(unsigned char *)(a1 + v55 + 8);
  uint64_t v58 = (double *)(a2 + v55);
  int v59 = *(unsigned __int8 *)(a2 + v55 + 8);
  if (v57)
  {
    if (!v59) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*v56 != *v58) {
      LOBYTE(v59) = 1;
    }
    if (v59) {
      goto LABEL_49;
    }
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v23[12], (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v24[12], (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v60 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v71 = v60;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  if (v61((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v61(v71, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_52:
      uint64_t v66 = v74;
      uint64_t v65 = v75;
      char v67 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
      uint64_t v68 = v72;
      v67(v72, a1, v75);
      uint64_t v69 = v73;
      v67(v73, a2, v65);
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v70 = *(void (**)(char *, uint64_t))(v66 + 8);
      v70(v69, v65);
      v70(v68, v65);
      return v62 & 1;
    }
    goto LABEL_48;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v61(v71, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_48:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_49;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v71, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v64 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v17, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v64) {
    goto LABEL_52;
  }
LABEL_49:
  char v62 = 0;
  return v62 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GeomagneticModelData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  char v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v39 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v40 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v41 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  char v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = v46;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v29 = v39;
      outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v26, v39, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      char v30 = specialized static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.== infix(_:_:)(v28, v29);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v29, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v28, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
      if (v30) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v28, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?));
    goto LABEL_9;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
LABEL_8:
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  int v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  int v34 = v42;
  v33(v42, v40, v45);
  uint64_t v35 = v43;
  v33(v43, v41, v31);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v35, v31);
  v37(v34, v31);
  return v36 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v50 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    goto LABEL_39;
  }
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  uint64_t v14 = (double *)((char *)a1 + v13);
  char v15 = *((unsigned char *)a1 + v13 + 8);
  uint64_t v16 = (double *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if (v15)
  {
    if (!v17) {
      goto LABEL_39;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_39;
    }
  }
  uint64_t v18 = v11[7];
  uint64_t v19 = (double *)((char *)a1 + v18);
  char v20 = *((unsigned char *)a1 + v18 + 8);
  uint64_t v21 = (double *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if (v20)
  {
    if (!v22) {
      goto LABEL_39;
    }
  }
  else
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if (v22) {
      goto LABEL_39;
    }
  }
  uint64_t v23 = v11[8];
  int v24 = *((unsigned __int8 *)a1 + v23);
  int v25 = *((unsigned __int8 *)a2 + v23);
  if (v24 == 2)
  {
    if (v25 != 2) {
      goto LABEL_39;
    }
  }
  else if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
  {
    goto LABEL_39;
  }
  uint64_t v26 = v11[9];
  char v27 = (double *)((char *)a1 + v26);
  char v28 = *((unsigned char *)a1 + v26 + 8);
  uint64_t v29 = (double *)((char *)a2 + v26);
  int v30 = *((unsigned __int8 *)a2 + v26 + 8);
  if (v28)
  {
    if (!v30) {
      goto LABEL_39;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_39;
    }
  }
  uint64_t v31 = v11[10];
  uint64_t v32 = (double *)((char *)a1 + v31);
  char v33 = *((unsigned char *)a1 + v31 + 8);
  int v34 = (double *)((char *)a2 + v31);
  int v35 = *((unsigned __int8 *)a2 + v31 + 8);
  if (v33)
  {
    if (!v35) {
      goto LABEL_39;
    }
  }
  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if (v35) {
      goto LABEL_39;
    }
  }
  uint64_t v36 = v11[11];
  char v37 = (double *)((char *)a1 + v36);
  char v38 = *((unsigned char *)a1 + v36 + 8);
  uint64_t v39 = (double *)((char *)a2 + v36);
  int v40 = *((unsigned __int8 *)a2 + v36 + 8);
  if ((v38 & 1) == 0)
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_39;
    }
LABEL_37:
    uint64_t v41 = v11[12];
    char v42 = (double *)((char *)a1 + v41);
    char v43 = *((unsigned char *)a1 + v41 + 8);
    uint64_t v44 = (double *)((char *)a2 + v41);
    int v45 = *((unsigned __int8 *)a2 + v41 + 8);
    if (v43)
    {
      if (!v45) {
        goto LABEL_39;
      }
    }
    else
    {
      if (*v42 != *v44) {
        LOBYTE(v45) = 1;
      }
      if (v45) {
        goto LABEL_39;
      }
    }
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v48(v10, (char *)a1 + v11[5], v4);
    v48(v8, (char *)a2 + v12[5], v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v49 = *(void (**)(char *, uint64_t))(v5 + 8);
    v49(v8, v4);
    v49(v10, v4);
    return v46 & 1;
  }
  if (v40) {
    goto LABEL_37;
  }
LABEL_39:
  char v46 = 0;
  return v46 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapBuildingData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v65 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  char v64 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v63 = (char *)&v61 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v62 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?));
  MEMORY[0x270FA5388](v68);
  uint64_t v72 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v67 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v74 = (uint64_t)&v61 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v69 = (uint64_t)&v61 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  int v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v61 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v61 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v75 + *(int *)(v32 + 28), (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v73 = v32;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v76 + *(int *)(v32 + 28), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  int v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v34(v33, 1, v15) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_9;
    }
LABEL_6:
    int v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_19;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v34(v33, 1, v15) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v37 = specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)((uint64_t)v26, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v37 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v39 = v75;
  char v38 = v76;
  if ((specialized static Array<A>.== infix(_:_:)(*v75, *v76) & 1) == 0
    || !specialized static Array<A>.== infix(_:_:)((void *)v39[1], (void *)v38[1]))
  {
    goto LABEL_19;
  }
  uint64_t v40 = v73;
  uint64_t v41 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39 + *(int *)(v73 + 32), v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  uint64_t v42 = v74;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38 + *(int *)(v40 + 32), v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  uint64_t v43 = v72;
  uint64_t v44 = v72 + *(int *)(v68 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  uint64_t v45 = v71;
  char v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (v46(v43, 1, v71) != 1)
  {
    uint64_t v47 = v67;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    if (v46(v44, 1, v45) != 1)
    {
      uint64_t v48 = v62;
      outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(v44, v62, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      char v49 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v47, v48, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v48, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v47, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
      if (v49) {
        goto LABEL_18;
      }
LABEL_19:
      char v58 = 0;
      return v58 & 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v47, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_16;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  if (v46(v44, 1, v45) != 1)
  {
LABEL_16:
    int v35 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    uint64_t v36 = v43;
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
LABEL_18:
  uint64_t v50 = v73;
  uint64_t v51 = (char *)v39 + *(int *)(v73 + 24);
  uint64_t v53 = v65;
  uint64_t v52 = v66;
  int v54 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  uint64_t v55 = v63;
  v54(v63, v51, v66);
  uint64_t v56 = (char *)v38 + *(int *)(v50 + 24);
  char v57 = v64;
  v54(v64, v56, v52);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v59 = *(void (**)(char *, uint64_t))(v53 + 8);
  v59(v57, v52);
  v59(v55, v52);
  return v58 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = a3(0);
  uint64_t v14 = *(int *)(v13 + 20);
  uint64_t v15 = (double *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 8);
  uint64_t v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) == 0)
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if (v18) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v19 = *(int *)(v13 + 24);
    uint64_t v20 = (double *)(a1 + v19);
    char v21 = *(unsigned char *)(a1 + v19 + 8);
    int v22 = (double *)(a2 + v19);
    int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
    if (v21)
    {
      if (!v23) {
        goto LABEL_9;
      }
    }
    else
    {
      if (*v20 != *v22) {
        LOBYTE(v23) = 1;
      }
      if (v23) {
        goto LABEL_9;
      }
    }
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v25(v12, a1, v6);
    v25(v10, a2, v6);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    v26(v10, v6);
    v26(v12, v6);
    return v24 & 1;
  }
  if (v18) {
    goto LABEL_7;
  }
LABEL_9:
  char v24 = 0;
  return v24 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_26;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_26;
    }
  }
  uint64_t v17 = v11[6];
  int v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_26;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_26;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if (v24)
  {
    if (!v26) {
      goto LABEL_26;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_26;
    }
  }
  uint64_t v27 = v11[8];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 != 4)
  {
    if (v29 != 4 && v28 == v29) {
      goto LABEL_21;
    }
LABEL_26:
    char v31 = 0;
    return v31 & 1;
  }
  if (v29 != 4) {
    goto LABEL_26;
  }
LABEL_21:
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v30(v10, a1, v4);
  v30(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v5 + 8);
  v32(v8, v4);
  v32(v10, v4);
  return v31 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MapsRouteHintData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_27;
    }
  }
  uint64_t v17 = v11[6];
  int v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_27;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if (v24)
  {
    if (!v26) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_27;
    }
  }
  uint64_t v27 = v11[8];
  int v28 = (double *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 8);
  uint64_t v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v32 = v11[9];
    uint64_t v33 = (double *)(a1 + v32);
    char v34 = *(unsigned char *)(a1 + v32 + 8);
    uint64_t v35 = (double *)(a2 + v32);
    int v36 = *(unsigned __int8 *)(a2 + v32 + 8);
    if (v34)
    {
      if (!v36) {
        goto LABEL_27;
      }
    }
    else
    {
      if (*v33 != *v35) {
        LOBYTE(v36) = 1;
      }
      if (v36) {
        goto LABEL_27;
      }
    }
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v5 + 8);
    v40(v8, v4);
    v40(v10, v4);
    return v37 & 1;
  }
  if (v31) {
    goto LABEL_25;
  }
LABEL_27:
  char v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MapMatcherData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_24;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_24;
    }
  }
  uint64_t v17 = v11[6];
  int v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_24;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_24;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2) {
      goto LABEL_24;
    }
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_24;
  }
  uint64_t v25 = v11[8];
  int v26 = *(unsigned __int8 *)(a1 + v25);
  int v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2) {
      goto LABEL_23;
    }
LABEL_24:
    char v29 = 0;
    return v29 & 1;
  }
  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0) {
    goto LABEL_24;
  }
LABEL_23:
  int v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v8, v4);
  v30(v10, v4);
  return v29 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  char v14 = (char *)&v23 - v13;
  uint64_t v15 = *(int *)(a3(0) + 20);
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), char v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    char v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  uint64_t v15 = (double *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 8);
  uint64_t v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if (v16)
  {
    if (!v18) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if (v18) {
      goto LABEL_15;
    }
  }
  uint64_t v19 = v13[6];
  char v20 = (double *)(a1 + v19);
  char v21 = *(unsigned char *)(a1 + v19 + 8);
  uint64_t v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) == 0)
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if (v23) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v24 = v13[7];
    uint64_t v25 = (double *)(a1 + v24);
    char v26 = *(unsigned char *)(a1 + v24 + 8);
    int v27 = (double *)(a2 + v24);
    int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
    if (v26)
    {
      if (!v28) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v25 != *v27) {
        LOBYTE(v28) = 1;
      }
      if (v28) {
        goto LABEL_15;
      }
    }
    int v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v31(v12, a1, v6);
    v31(v10, a2, v6);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v7 + 8);
    v32(v10, v6);
    v32(v12, v6);
    return v29 & 1;
  }
  if (v23) {
    goto LABEL_13;
  }
LABEL_15:
  char v29 = 0;
  return v29 & 1;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_LocationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_LocationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_LocationType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_ClientSatelliteConstellation()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_ClientSatelliteConstellation] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_ClientSatelliteConstellation]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BatchedLocationFixType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BatchedLocationFixType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BatchedLocationFixType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GnssModeOfOperation()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GnssModeOfOperation] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GnssModeOfOperation]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_RhythmicGnssWakeMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_RhythmicGnssWakeMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_RhythmicGnssWakeMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BatchMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BatchMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BatchMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_OperatingMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_OperatingMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_OperatingMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_PipelineOperatingMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_PipelineOperatingMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_PipelineOperatingMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DominantMotionModeType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DominantMotionModeType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_ReachabilityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_ReachabilityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_ReachabilityType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BatteryChargerType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BatteryChargerType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BatteryChargerType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SensorFusionMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SensorFusionMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SensorFusionMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WifiAccessPointMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WifiAccessPointMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WifiAccessPointMode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WifiRfBand()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WifiRfBand] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WifiRfBand]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WifiScanType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WifiScanType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WifiScanType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WifiNotificationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WifiNotificationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WifiNotificationType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_LocationServicesEnabled()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_LocationServicesEnabled] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_LocationServicesEnabled]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DataAvailability()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DataAvailability] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DataAvailability]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_IndoorOutdoorType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_IndoorOutdoorType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_IndoorOutdoorType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_IndoorOutdoorConfidence()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_IndoorOutdoorConfidence] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_IndoorOutdoorConfidence]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_Location.SignalQualityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_Location.SignalQualityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_Location.SignalQualityType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_Location.MotionDetectedType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_Location.MotionDetectedType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_Location.MotionDetectedType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MotionActivity.MountedStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MotionActivity.MountedStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MotionActivity.MountedStateType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WorkoutEvent.EventType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WorkoutEvent.EventType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WorkoutEvent.EventType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DeviceStatus.NotificationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DeviceStatus.NotificationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DeviceStatus.NotificationType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WristState.WristStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WristState.WristStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WristState.WristStateType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_AccelSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_AccelSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_AccelSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_AccelSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Accel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Accel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Accel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Accel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GyroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GyroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GyroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GyroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Gyro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Gyro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Gyro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Gyro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BaroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BaroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BaroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BaroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Baro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Baro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Baro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Baro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DaemonLocation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DaemonLocation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DaemonLocation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DaemonLocation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MapMatcherData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MapMatcherData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MapMatcherData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MapMatcherData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PressureSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PressureSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PressureSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PressureSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_VehicleHeading()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_VehicleHeading()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_VehicleHeading()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_VehicleHeading()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Location()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Location()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Location()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Location()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BatchedLocations()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BatchedLocations()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BatchedLocations()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BatchedLocations()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionActivity()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionActivity()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionActivity()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionActivity()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BodyMetrics()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BodyMetrics()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BodyMetrics()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BodyMetrics()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Natalimetry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Natalimetry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Natalimetry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Natalimetry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Timer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Timer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Timer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Timer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MapVector()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MapVector()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MapVector()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MapVector()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReachabilityState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReachabilityState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReachabilityState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReachabilityState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Battery()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Battery()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Battery()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Battery()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DeviceStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DeviceStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DeviceStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DeviceStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MagSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MagSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MagSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MagSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Magnetometer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Magnetometer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Magnetometer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Magnetometer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Reset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Reset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Reset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Reset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_StepCountEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_StepCountEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_StepCountEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_StepCountEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_StepCount()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_StepCount()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_StepCount()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_StepCount()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Compass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Compass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Compass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Compass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WifiScanResult()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WifiScanResult()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WifiScanResult()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WifiScanResult()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WifiNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WifiNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WifiNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WifiNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WatchOrientation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WatchOrientation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WatchOrientation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WatchOrientation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WristState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WristState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WristState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WristState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WatchState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WatchState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WatchState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WatchState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PlaceInference()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PlaceInference()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PlaceInference()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PlaceInference()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_RoutineVisit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_RoutineVisit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_RoutineVisit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_RoutineVisit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType()
{
  return &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F3B420);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LocationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_LocationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteConstellation()
{
  return &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocationFixType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssModeOfOperation()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatchMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatchMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_OperatingMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_OperatingMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PipelineOperatingMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DominantMotionModeType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xB9) {
    goto LABEL_17;
  }
  if (a2 + 71 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 71) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 71;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 71;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 71;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x48;
  int v8 = v6 - 72;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DominantMotionModeType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 71 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 71) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xB9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xB8)
  {
    unsigned int v6 = ((a2 - 185) >> 8) + 1;
    *unint64_t result = a2 + 71;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F3B62CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 71;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_ReachabilityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatteryChargerType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel()
{
  return &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPointMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiRfBand()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiRfBand;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiScanType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiScanType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiNotificationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LocationServicesEnabled()
{
  return &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DataAvailability()
{
  return &type metadata for CLP_LogEntry_PrivateData_DataAvailability;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IndoorOutdoorType()
{
  return &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence()
{
  return &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_TimeStamp()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_TimeStamp();
}

{
  uint64_t result;
  unint64_t v1;

  unint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F3B7A4);
}

uint64_t sub_246F3B7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_480Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F3B7C4);
}

uint64_t sub_246F3B7C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_481Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_AccelSample()
{
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Accel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_483Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Accel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_484Tm);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_AccelSample(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    int v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      int v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      char v20 = &v10[v19];
      char v21 = &v11[v19];
      *(void *)char v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      int v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)int v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    int v27 = (char *)a1 + v25;
    int v28 = (char *)a2 + v25;
    *(_DWORD *)int v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    char v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    *(_DWORD *)char v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
    uint64_t v31 = a3[8];
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    v32[4] = v33[4];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    char v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)char v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  uint64_t v29 = a3[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    char v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)char v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  uint64_t v29 = a3[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GyroSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F3BF98);
}

uint64_t sub_246F3BF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_480Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GyroSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F3BFB8);
}

uint64_t sub_246F3BFB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_481Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Accel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      uint64_t v19 = v16[5];
      uint64_t v20 = &v14[v19];
      char v21 = &v15[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v16[6];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v16[7];
      uint64_t v26 = &v14[v25];
      uint64_t v27 = &v15[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

void *initializeWithTake for CLP_LogEntry_PrivateData_Accel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    char v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)char v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Gyro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_483Tm_0);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Gyro(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_484Tm_0);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_BaroSample(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      char v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    char v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)char v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 24);
  v7(a1, a2, v6);
  uint64_t v51 = a1;
  uint64_t v52 = a3;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v53 = a2;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v38 = v11[5];
      uint64_t v39 = &v9[v38];
      uint64_t v40 = &v10[v38];
      char v41 = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v41;
      uint64_t v42 = v11[6];
      uint64_t v43 = &v9[v42];
      uint64_t v44 = &v10[v42];
      char v45 = v44[8];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v45;
      uint64_t v46 = v11[7];
      uint64_t v47 = &v9[v46];
      uint64_t v48 = &v10[v46];
      char v49 = v48[8];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v49;
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = v11[6];
  char v21 = &v9[v20];
  uint64_t v22 = &v10[v20];
  char v23 = v22[8];
  *(void *)char v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v11[7];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t result = v51;
  uint64_t v30 = *(int *)(v52 + 24);
  uint64_t v31 = v51 + v30;
  uint64_t v32 = (int *)(v53 + v30);
  int v33 = *v32;
  *(unsigned char *)(v31 + 4) = *((unsigned char *)v32 + 4);
  *(_DWORD *)uint64_t v31 = v33;
  uint64_t v34 = *(int *)(v52 + 28);
  uint64_t v35 = v51 + v34;
  int v36 = (int *)(v53 + v34);
  int v37 = *v36;
  *(unsigned char *)(v35 + 4) = *((unsigned char *)v36 + 4);
  *(_DWORD *)uint64_t v35 = v37;
  return result;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    char v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    char v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)char v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 40);
  v7(a1, a2, v6);
  uint64_t v43 = a1;
  uint64_t v44 = a3;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v45 = a2;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v33 = v11[5];
      uint64_t v34 = &v9[v33];
      uint64_t v35 = &v10[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v11[6];
      int v37 = &v9[v36];
      uint64_t v38 = &v10[v36];
      *(void *)int v37 = *(void *)v38;
      v37[8] = v38[8];
      uint64_t v39 = v11[7];
      uint64_t v40 = &v9[v39];
      char v41 = &v10[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = v11[6];
  uint64_t v20 = &v9[v19];
  char v21 = &v10[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v11[7];
  uint64_t v23 = &v9[v22];
  uint64_t v24 = &v10[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t result = v43;
  uint64_t v27 = *(int *)(v44 + 24);
  uint64_t v28 = *(int *)(v44 + 28);
  uint64_t v29 = v43 + v27;
  uint64_t v30 = v45 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(unsigned char *)(v29 + 4) = *(unsigned char *)(v30 + 4);
  uint64_t v31 = v43 + v28;
  uint64_t v32 = v45 + v28;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F3CFA4);
}

uint64_t sub_246F3CFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_480Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F3CFC4);
}

uint64_t sub_246F3CFC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_481Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_BaroSample()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Baro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_483Tm_1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Baro(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_484Tm_1);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientLocationCoordinate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_11);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientLocationCoordinate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_11);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_7);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_7);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapMatcherData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_240Tm_1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapMatcherData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_241Tm_1);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PressureSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_12);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PressureSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_12);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ClientSatelliteInfo(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[4] = v10[4];
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    int v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    int v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(_DWORD *)int v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    char v21 = (char *)a1 + v18;
    uint64_t v22 = (char *)a2 + v18;
    LODWORD(v19) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)char v21 = v19;
    uint64_t v23 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)a1 + v23) = *((unsigned char *)a2 + v23);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v22;
  uint64_t v23 = a3[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = v26;
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_522Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_523Tm);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_ClientSatelliteInfo();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_8);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = v10;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F3DD08);
}

uint64_t sub_246F3DD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 32)) <= 4u) {
      int v10 = 4;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
    }
    unsigned int v11 = v10 - 4;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 32)) >= 4u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F3DDE4);
}

uint64_t sub_246F3DDE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 32)) = a2 + 4;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_573Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_574Tm);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_VehicleSpeed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_13);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_VehicleSpeed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_13);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_VehicleHeading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_14);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_VehicleHeading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_14);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    int v10 = (char *)a1 + v8;
    unsigned int v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (uint64_t *)((char *)a1 + v9);
    uint64_t v13 = (uint64_t *)((char *)a2 + v9);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  unsigned int v11 = (void *)(a1 + v8);
  uint64_t v12 = (void *)(a2 + v8);
  uint64_t v13 = v12[1];
  *unsigned int v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = (void *)(a1 + v8);
  uint64_t v12 = (uint64_t *)(a2 + v8);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_582Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_583Tm);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationDerivedSpeed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_15);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationDerivedSpeed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_15);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Location(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_9);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Location(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_9);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Location.SignalQualityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Location.MotionDetectedType()
{
  return &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    int v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_BatchedLocations(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for CLP_LogEntry_PrivateData_BatchedLocations(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for CLP_LogEntry_PrivateData_BatchedLocations(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for CLP_LogEntry_PrivateData_BatchedLocations(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F3E7D0);
}

uint64_t sub_246F3E7D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F3E894);
}

void *sub_246F3E894(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_BatchedLocations()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    v10[4] = v11[4];
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_573Tm_0);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_574Tm_0);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_RhythmicStreamingControl(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_7);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_7);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_10);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_10);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(uint64_t *a1, uint64_t *a2, int *a3)
{
  return initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t destroy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_MotionState(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F3F2E4);
}

uint64_t sub_246F3F2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_633Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F3F304);
}

uint64_t sub_246F3F304(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_634Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WorkoutUpdate(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = a3[7];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8(v13, v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v15[6];
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v15[7];
      char v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(void *)char v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    a1[a3[8]] = a2[a3[8]];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = v11;
  uint64_t v48 = a2;
  char v49 = a3;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
  uint64_t v47 = v13;
  LODWORD(v13) = v17(v13, 1, v15);
  int v18 = v17((uint64_t)v14, 1, v15);
  if (v13)
  {
    if (!v18)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v47, v14, v6);
      uint64_t v21 = v15[5];
      uint64_t v22 = v47 + v21;
      uint64_t v23 = &v14[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v24;
      uint64_t v25 = v15[6];
      uint64_t v26 = v47 + v25;
      uint64_t v27 = &v14[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(unsigned char *)(v26 + 8) = v28;
      uint64_t v29 = v15[7];
      uint64_t v30 = v47 + v29;
      uint64_t v31 = &v14[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v32;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v16 + 56))(v47, 0, 1, v15);
      goto LABEL_9;
    }
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v47;
  }
  else
  {
    if (!v18)
    {
      v7(v47, (uint64_t)v14, v6);
      uint64_t v33 = v15[5];
      uint64_t v34 = v47 + v33;
      uint64_t v35 = &v14[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(unsigned char *)(v34 + 8) = v36;
      uint64_t v37 = v15[6];
      uint64_t v38 = v47 + v37;
      uint64_t v39 = &v14[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(unsigned char *)(v38 + 8) = v40;
      uint64_t v41 = v15[7];
      uint64_t v42 = v47 + v41;
      uint64_t v43 = &v14[v41];
      char v44 = v43[8];
      *(void *)uint64_t v42 = *(void *)v43;
      *(unsigned char *)(v42 + 8) = v44;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v47;
  }
  memcpy(v20, v14, v19);
LABEL_9:
  *(unsigned char *)(a1 + v49[8]) = *(unsigned char *)(v48 + v49[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    size_t v19 = &v13[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    char v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)char v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  uint64_t v40 = v12;
  LODWORD(v12) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (v12)
  {
    if (!v17)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v13, v6);
      uint64_t v20 = v14[5];
      uint64_t v21 = v40 + v20;
      uint64_t v22 = &v13[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      *(unsigned char *)(v21 + 8) = v22[8];
      uint64_t v23 = v14[6];
      uint64_t v24 = v40 + v23;
      uint64_t v25 = &v13[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      *(unsigned char *)(v24 + 8) = v25[8];
      uint64_t v26 = v14[7];
      uint64_t v27 = v40 + v26;
      char v28 = &v13[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      *(unsigned char *)(v27 + 8) = v28[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56))(v40, 0, 1, v14);
      goto LABEL_9;
    }
    size_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    size_t v19 = (void *)v40;
  }
  else
  {
    if (!v17)
    {
      v7(v40, (uint64_t)v13, v6);
      uint64_t v29 = v14[5];
      uint64_t v30 = v40 + v29;
      uint64_t v31 = &v13[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v31[8];
      uint64_t v32 = v14[6];
      uint64_t v33 = v40 + v32;
      uint64_t v34 = &v13[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *(unsigned char *)(v33 + 8) = v34[8];
      uint64_t v35 = v14[7];
      uint64_t v36 = v40 + v35;
      uint64_t v37 = &v13[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      *(unsigned char *)(v36 + 8) = v37[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    size_t v19 = (void *)v40;
  }
  memcpy(v19, v13, v18);
LABEL_9:
  *(unsigned char *)(a1 + v42[8]) = *(unsigned char *)(v41 + v42[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F40090);
}

uint64_t sub_246F40090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 183)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 0x48u) {
      int v10 = 72;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 72;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 0x48u) {
      return v11;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 28);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F401D8);
}

uint64_t sub_246F401D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 183)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 72;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = a3[5];
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    uint64_t v51 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    uint64_t v52 = v8;
    uint64_t v53 = v7;
    if (v51(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      int v17 = &v10[v16];
      size_t v18 = &v11[v16];
      *(void *)int v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    char v28 = (char *)a2 + v25;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
    uint64_t v32 = *((void *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      v52(v29, v30, v7);
      v29[v31[5]] = v30[v31[5]];
      uint64_t v34 = v31[6];
      uint64_t v35 = &v29[v34];
      uint64_t v36 = &v30[v34];
      v35[8] = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      uint64_t v37 = v31[7];
      uint64_t v38 = &v29[v37];
      uint64_t v39 = &v30[v37];
      if (v51(&v30[v37], 1, v12))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        v52(v38, v39, v53);
        uint64_t v41 = v12[5];
        uint64_t v42 = &v38[v41];
        uint64_t v43 = &v39[v41];
        *(void *)uint64_t v42 = *(void *)v43;
        v42[8] = v43[8];
        uint64_t v44 = v12[6];
        uint64_t v45 = &v38[v44];
        uint64_t v46 = &v39[v44];
        *(void *)uint64_t v45 = *(void *)v46;
        v45[8] = v46[8];
        uint64_t v47 = v12[7];
        uint64_t v48 = &v38[v47];
        char v49 = &v39[v47];
        *(void *)uint64_t v48 = *(void *)v49;
        v48[8] = v49[8];
        (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v38, 0, 1, v12);
      }
      v29[v31[8]] = v30[v31[8]];
      (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6)) {
    v12(v5, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 28);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    v12(v8, v4);
    uint64_t v11 = v8 + *(int *)(v9 + 28);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v11, 1, v6);
    if (!result)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v54 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v51 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  uint64_t v53 = (void (*)(char *, char *, uint64_t))v7;
  uint64_t v52 = v6;
  if (v51(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    size_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)size_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = v54;
  uint64_t v26 = v54 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  char v28 = (char *)(v54 + v24);
  uint64_t v29 = (char *)(a2 + v24);
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v31 = *((void *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    uint64_t v50 = v12;
    v53(v28, v29, v52);
    v28[v30[5]] = v29[v30[5]];
    uint64_t v33 = v30[6];
    uint64_t v34 = &v28[v33];
    uint64_t v35 = &v29[v33];
    v34[8] = v35[8];
    *(void *)uint64_t v34 = *(void *)v35;
    uint64_t v36 = v30[7];
    uint64_t v37 = &v28[v36];
    uint64_t v38 = &v29[v36];
    if (v51(&v29[v36], 1, v11))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v53(v37, v38, v52);
      uint64_t v40 = v11[5];
      uint64_t v41 = &v37[v40];
      uint64_t v42 = &v38[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v11[6];
      uint64_t v44 = &v37[v43];
      uint64_t v45 = &v38[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      uint64_t v46 = v11[7];
      uint64_t v47 = &v37[v46];
      uint64_t v48 = &v38[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      (*(void (**)(char *, void, uint64_t, int *))(v50 + 56))(v37, 0, 1, v11);
    }
    v28[v30[8]] = v29[v30[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
    return v54;
  }
  return v25;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v110 = *(void *)(v6 - 8);
  uint64_t v112 = v6;
  uint64_t v109 = *(void (**)(uint64_t, uint64_t))(v110 + 24);
  v109(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  uint64_t v108 = v11;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v8, v9, v112);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v109)(v8, v9, v112);
  uint64_t v49 = v10[5];
  uint64_t v50 = &v8[v49];
  uint64_t v51 = &v9[v49];
  char v52 = v51[8];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v52;
  uint64_t v53 = v10[6];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  char v56 = v55[8];
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v56;
  uint64_t v57 = v10[7];
  char v58 = &v8[v57];
  int v59 = &v9[v57];
  char v60 = v59[8];
  *(void *)char v58 = *(void *)v59;
  v58[8] = v60;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (int *)(a2 + v28);
  int v31 = *v30;
  *(unsigned char *)(v29 + 4) = *((unsigned char *)v30 + 4);
  *(_DWORD *)uint64_t v29 = v31;
  uint64_t v32 = a3[7];
  uint64_t v113 = a1;
  uint64_t v33 = (char *)(a1 + v32);
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v36 = *((void *)v35 - 1);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, int *))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      uint64_t v111 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
      v111(v33, v34, v112);
      v33[v35[5]] = v34[v35[5]];
      uint64_t v40 = v35[6];
      uint64_t v41 = &v33[v40];
      uint64_t v42 = &v34[v40];
      char v43 = v42[8];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v43;
      uint64_t v44 = v35[7];
      uint64_t v45 = &v33[v44];
      uint64_t v46 = &v34[v44];
      if (v12(&v34[v44], 1, v10))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        v111(v45, v46, v112);
        uint64_t v82 = v10[5];
        uint64_t v83 = &v45[v82];
        uint64_t v84 = &v46[v82];
        char v85 = v84[8];
        *(void *)uint64_t v83 = *(void *)v84;
        v83[8] = v85;
        uint64_t v86 = v10[6];
        uint64_t v87 = &v45[v86];
        uint64_t v88 = &v46[v86];
        char v89 = v88[8];
        *(void *)uint64_t v87 = *(void *)v88;
        v87[8] = v89;
        uint64_t v90 = v10[7];
        uint64_t v91 = &v45[v90];
        uint64_t v92 = &v46[v90];
        char v93 = v92[8];
        *(void *)uint64_t v91 = *(void *)v92;
        v91[8] = v93;
        (*(void (**)(char *, void, uint64_t, int *))(v108 + 56))(v45, 0, 1, v10);
      }
      v33[v35[8]] = v34[v35[8]];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
      return v113;
    }
LABEL_13:
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    memcpy(v33, v34, *(void *)(*(void *)(v48 - 8) + 64));
    return v113;
  }
  if (v39)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v109)(v33, v34, v112);
  v33[v35[5]] = v34[v35[5]];
  uint64_t v61 = v35[6];
  uint64_t v62 = &v33[v61];
  uint64_t v63 = &v34[v61];
  char v64 = v63[8];
  *(void *)uint64_t v62 = *(void *)v63;
  v62[8] = v64;
  uint64_t v65 = v35[7];
  uint64_t v66 = &v33[v65];
  uint64_t v67 = &v34[v65];
  int v68 = v12(&v33[v65], 1, v10);
  int v69 = v12(v67, 1, v10);
  if (!v68)
  {
    if (!v69)
    {
      ((void (*)(char *, char *, uint64_t))v109)(v66, v67, v112);
      uint64_t v96 = v10[5];
      int v97 = &v66[v96];
      uint64_t v98 = &v67[v96];
      char v99 = v98[8];
      *(void *)int v97 = *(void *)v98;
      v97[8] = v99;
      uint64_t v100 = v10[6];
      uint64_t v101 = &v66[v100];
      uint64_t v102 = &v67[v100];
      char v103 = v102[8];
      *(void *)uint64_t v101 = *(void *)v102;
      v101[8] = v103;
      uint64_t v104 = v10[7];
      uint64_t v105 = &v66[v104];
      uint64_t v106 = &v67[v104];
      char v107 = v106[8];
      *(void *)uint64_t v105 = *(void *)v106;
      v105[8] = v107;
      goto LABEL_24;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_23;
  }
  if (v69)
  {
LABEL_23:
    uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v66, v67, *(void *)(*(void *)(v95 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v66, v67, v112);
  uint64_t v70 = v10[5];
  uint64_t v71 = &v66[v70];
  uint64_t v72 = &v67[v70];
  char v73 = v72[8];
  *(void *)uint64_t v71 = *(void *)v72;
  v71[8] = v73;
  uint64_t v74 = v10[6];
  uint64_t v75 = &v66[v74];
  uint64_t v76 = &v67[v74];
  char v77 = v76[8];
  *(void *)uint64_t v75 = *(void *)v76;
  v75[8] = v77;
  uint64_t v78 = v10[7];
  uint64_t v79 = &v66[v78];
  uint64_t v80 = &v67[v78];
  char v81 = v80[8];
  *(void *)uint64_t v79 = *(void *)v80;
  v79[8] = v81;
  (*(void (**)(char *, void, uint64_t, int *))(v108 + 56))(v66, 0, 1, v10);
LABEL_24:
  uint64_t result = v113;
  v33[v35[8]] = v34[v35[8]];
  return result;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v54 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v51 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  uint64_t v53 = (void (*)(char *, char *, uint64_t))v7;
  uint64_t v52 = v6;
  if (v51(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = v54;
  uint64_t v26 = v54 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = (char *)(v54 + v24);
  uint64_t v29 = (char *)(a2 + v24);
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v31 = *((void *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    uint64_t v50 = v12;
    v53(v28, v29, v52);
    v28[v30[5]] = v29[v30[5]];
    uint64_t v33 = v30[6];
    uint64_t v34 = &v28[v33];
    uint64_t v35 = &v29[v33];
    v34[8] = v35[8];
    *(void *)uint64_t v34 = *(void *)v35;
    uint64_t v36 = v30[7];
    uint64_t v37 = &v28[v36];
    int v38 = &v29[v36];
    if (v51(&v29[v36], 1, v11))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v53(v37, v38, v52);
      uint64_t v40 = v11[5];
      uint64_t v41 = &v37[v40];
      uint64_t v42 = &v38[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v11[6];
      uint64_t v44 = &v37[v43];
      uint64_t v45 = &v38[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      uint64_t v46 = v11[7];
      uint64_t v47 = &v37[v46];
      uint64_t v48 = &v38[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      (*(void (**)(char *, void, uint64_t, int *))(v50 + 56))(v37, 0, 1, v11);
    }
    v28[v30[8]] = v29[v30[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
    return v54;
  }
  return v25;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v92 = *(void *)(v6 - 8);
  uint64_t v94 = v6;
  uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v92 + 40);
  v91(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  uint64_t v90 = v11;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v8, v9, v94);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v91)(v8, v9, v94);
  uint64_t v44 = v10[5];
  uint64_t v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v47 = v10[6];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
  uint64_t v50 = v10[7];
  uint64_t v51 = &v8[v50];
  uint64_t v52 = &v9[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = v52[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[7];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  uint64_t v95 = a1;
  uint64_t v29 = (char *)(a1 + v26);
  uint64_t v30 = (char *)(a2 + v26);
  uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v32 = *((void *)v31 - 1);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, int *))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      char v93 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
      v93(v29, v30, v94);
      v29[v31[5]] = v30[v31[5]];
      uint64_t v36 = v31[6];
      uint64_t v37 = &v29[v36];
      int v38 = &v30[v36];
      v37[8] = v38[8];
      *(void *)uint64_t v37 = *(void *)v38;
      uint64_t v39 = v31[7];
      uint64_t v40 = &v29[v39];
      uint64_t v41 = &v30[v39];
      if (v12(&v30[v39], 1, v10))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        v93(v40, v41, v94);
        uint64_t v70 = v10[5];
        uint64_t v71 = &v40[v70];
        uint64_t v72 = &v41[v70];
        *(void *)uint64_t v71 = *(void *)v72;
        v71[8] = v72[8];
        uint64_t v73 = v10[6];
        uint64_t v74 = &v40[v73];
        uint64_t v75 = &v41[v73];
        *(void *)uint64_t v74 = *(void *)v75;
        v74[8] = v75[8];
        uint64_t v76 = v10[7];
        char v77 = &v40[v76];
        uint64_t v78 = &v41[v76];
        *(void *)char v77 = *(void *)v78;
        v77[8] = v78[8];
        (*(void (**)(char *, void, uint64_t, int *))(v90 + 56))(v40, 0, 1, v10);
      }
      v29[v31[8]] = v30[v31[8]];
      (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
      return v95;
    }
LABEL_13:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    memcpy(v29, v30, *(void *)(*(void *)(v43 - 8) + 64));
    return v95;
  }
  if (v35)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v91)(v29, v30, v94);
  v29[v31[5]] = v30[v31[5]];
  uint64_t v53 = v31[6];
  uint64_t v54 = &v29[v53];
  uint64_t v55 = &v30[v53];
  v54[8] = v55[8];
  *(void *)uint64_t v54 = *(void *)v55;
  uint64_t v56 = v31[7];
  uint64_t v57 = &v29[v56];
  char v58 = &v30[v56];
  int v59 = v12(&v29[v56], 1, v10);
  int v60 = v12(v58, 1, v10);
  if (!v59)
  {
    if (!v60)
    {
      ((void (*)(char *, char *, uint64_t))v91)(v57, v58, v94);
      uint64_t v81 = v10[5];
      uint64_t v82 = &v57[v81];
      uint64_t v83 = &v58[v81];
      *(void *)uint64_t v82 = *(void *)v83;
      v82[8] = v83[8];
      uint64_t v84 = v10[6];
      char v85 = &v57[v84];
      uint64_t v86 = &v58[v84];
      *(void *)char v85 = *(void *)v86;
      v85[8] = v86[8];
      uint64_t v87 = v10[7];
      uint64_t v88 = &v57[v87];
      char v89 = &v58[v87];
      *(void *)uint64_t v88 = *(void *)v89;
      v88[8] = v89[8];
      goto LABEL_24;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_23;
  }
  if (v60)
  {
LABEL_23:
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v57, v58, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v57, v58, v94);
  uint64_t v61 = v10[5];
  uint64_t v62 = &v57[v61];
  uint64_t v63 = &v58[v61];
  *(void *)uint64_t v62 = *(void *)v63;
  v62[8] = v63[8];
  uint64_t v64 = v10[6];
  uint64_t v65 = &v57[v64];
  uint64_t v66 = &v58[v64];
  *(void *)uint64_t v65 = *(void *)v66;
  v65[8] = v66[8];
  uint64_t v67 = v10[7];
  int v68 = &v57[v67];
  int v69 = &v58[v67];
  *(void *)int v68 = *(void *)v69;
  v68[8] = v69[8];
  (*(void (**)(char *, void, uint64_t, int *))(v90 + 56))(v57, 0, 1, v10);
LABEL_24:
  uint64_t result = v95;
  v29[v31[8]] = v30[v31[8]];
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F41FC8);
}

uint64_t sub_246F41FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_633Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F41FE8);
}

uint64_t sub_246F41FE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_634Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WorkoutSettings(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    int v13 = (void *)((char *)a1 + v9);
    int v14 = (void *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *int v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  int v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  int v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *int v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F424D8);
}

uint64_t sub_246F424D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F425BC);
}

uint64_t sub_246F425BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapsRouteHintData();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapsRouteHintData();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xBE) {
    goto LABEL_17;
  }
  if (a2 + 66 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 66) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 66;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 66;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 66;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x43;
  int v8 = v6 - 67;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 66 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 66) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xBE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xBD)
  {
    unsigned int v6 = ((a2 - 190) >> 8) + 1;
    *uint64_t result = a2 + 66;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F428B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 66;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WorkoutEvent(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    unint64_t v10 = &a1[v9];
    int v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    uint64_t v70 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    int v69 = v8;
    if (v70(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    if (v70(&a2[v25], 1, v12))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
      uint64_t v29 = v7;
    }
    else
    {
      uint64_t v29 = v7;
      v69(v26, v27, v7);
      uint64_t v30 = v12[5];
      uint64_t v31 = &v26[v30];
      uint64_t v32 = &v27[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v12[6];
      int v34 = &v26[v33];
      int v35 = &v27[v33];
      *(void *)int v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v12[7];
      uint64_t v37 = &v26[v36];
      int v38 = &v27[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v26, 0, 1, v12);
    }
    uint64_t v39 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    uint64_t v40 = &a1[v39];
    uint64_t v41 = &a2[v39];
    if (v70(&a2[v39], 1, v12))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
      uint64_t v43 = v69;
    }
    else
    {
      uint64_t v43 = v69;
      v69(v40, v41, v29);
      uint64_t v44 = v12[5];
      uint64_t v45 = &v40[v44];
      uint64_t v46 = &v41[v44];
      *(void *)uint64_t v45 = *(void *)v46;
      v45[8] = v46[8];
      uint64_t v47 = v12[6];
      uint64_t v48 = &v40[v47];
      uint64_t v49 = &v41[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = v12[7];
      uint64_t v51 = &v40[v50];
      uint64_t v52 = &v41[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v40, 0, 1, v12);
    }
    uint64_t v53 = a3[9];
    uint64_t v54 = &a1[v53];
    uint64_t v55 = &a2[v53];
    uint64_t v56 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
    uint64_t v57 = *((void *)v56 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v57 + 48))(v55, 1, v56))
    {
      uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
      memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      v43(v54, v55, v29);
      uint64_t v59 = v56[5];
      int v60 = &v54[v59];
      uint64_t v61 = &v55[v59];
      uint64_t v62 = *((void *)v61 + 1);
      *(void *)int v60 = *(void *)v61;
      *((void *)v60 + 1) = v62;
      uint64_t v63 = v56[6];
      uint64_t v64 = &v54[v63];
      uint64_t v65 = &v55[v63];
      uint64_t v66 = *((void *)v65 + 1);
      *(void *)uint64_t v64 = *(void *)v65;
      *((void *)v64 + 1) = v66;
      v54[v56[7]] = v55[v56[7]];
      v54[v56[8]] = v55[v56[8]];
      v54[v56[9]] = v55[v56[9]];
      uint64_t v67 = *(void (**)(char *, void, uint64_t, int *))(v57 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v67(v54, 0, 1, v56);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  int v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7)) {
    v5(v6, v4);
  }
  uint64_t v9 = a1 + a2[6];
  if (!v8(v9, 1, v7)) {
    v5(v9, v4);
  }
  uint64_t v10 = a1 + a2[8];
  if (!v8(v10, 1, v7)) {
    v5(v10, v4);
  }
  uint64_t v11 = a1 + a2[9];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  if (!result)
  {
    v5(v11, v4);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v68 = a1;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  int v69 = (void (*)(char *, char *, uint64_t))v7;
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v15 = v11[5];
    uint64_t v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = v11[6];
    uint64_t v19 = &v9[v18];
    uint64_t v20 = &v10[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v11[7];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v24 = a3[6];
  uint64_t v25 = (char *)(v68 + v24);
  uint64_t v26 = (char *)(a2 + v24);
  if (v13((char *)(a2 + v24), 1, v11))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    uint64_t v28 = v6;
  }
  else
  {
    uint64_t v28 = v6;
    v69(v25, v26, v6);
    uint64_t v29 = v11[5];
    uint64_t v30 = &v25[v29];
    uint64_t v31 = &v26[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v11[6];
    uint64_t v33 = &v25[v32];
    int v34 = &v26[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v11[7];
    uint64_t v36 = &v25[v35];
    uint64_t v37 = &v26[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v25, 0, 1, v11);
  }
  uint64_t v38 = a3[8];
  *(unsigned char *)(v68 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v39 = (char *)(v68 + v38);
  uint64_t v40 = (char *)(a2 + v38);
  if (v13((char *)(a2 + v38), 1, v11))
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
    uint64_t v42 = v69;
  }
  else
  {
    uint64_t v42 = v69;
    v69(v39, v40, v28);
    uint64_t v43 = v11[5];
    uint64_t v44 = &v39[v43];
    uint64_t v45 = &v40[v43];
    *(void *)uint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    uint64_t v46 = v11[6];
    uint64_t v47 = &v39[v46];
    uint64_t v48 = &v40[v46];
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = v48[8];
    uint64_t v49 = v11[7];
    uint64_t v50 = &v39[v49];
    uint64_t v51 = &v40[v49];
    *(void *)uint64_t v50 = *(void *)v51;
    v50[8] = v51[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v39, 0, 1, v11);
  }
  uint64_t v52 = a3[9];
  uint64_t v53 = (char *)(v68 + v52);
  uint64_t v54 = (char *)(a2 + v52);
  uint64_t v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v56 = *((void *)v55 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v56 + 48))(v54, 1, v55))
  {
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    v42(v53, v54, v28);
    uint64_t v58 = v55[5];
    uint64_t v59 = &v53[v58];
    int v60 = &v54[v58];
    uint64_t v61 = *((void *)v60 + 1);
    *(void *)uint64_t v59 = *(void *)v60;
    *((void *)v59 + 1) = v61;
    uint64_t v62 = v55[6];
    uint64_t v63 = &v53[v62];
    uint64_t v64 = &v54[v62];
    uint64_t v65 = *((void *)v64 + 1);
    *(void *)uint64_t v63 = *(void *)v64;
    *((void *)v63 + 1) = v65;
    v53[v55[7]] = v54[v55[7]];
    v53[v55[8]] = v54[v55[8]];
    v53[v55[9]] = v54[v55[9]];
    uint64_t v66 = *(void (**)(char *, void, uint64_t, int *))(v56 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66(v53, 0, 1, v55);
  }
  return v68;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v124 = *(void *)(v6 - 8);
  uint64_t v125 = v6;
  uint64_t v123 = *(void (**)(uint64_t, uint64_t))(v124 + 24);
  v123(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v8, v9, v125);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v123)(v8, v9, v125);
  uint64_t v81 = v10[5];
  uint64_t v82 = &v8[v81];
  uint64_t v83 = &v9[v81];
  char v84 = v83[8];
  *(void *)uint64_t v82 = *(void *)v83;
  v82[8] = v84;
  uint64_t v85 = v10[6];
  uint64_t v86 = &v8[v85];
  uint64_t v87 = &v9[v85];
  char v88 = v87[8];
  *(void *)uint64_t v86 = *(void *)v87;
  v86[8] = v88;
  uint64_t v89 = v10[7];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  char v92 = v91[8];
  *(void *)uint64_t v90 = *(void *)v91;
  v90[8] = v92;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  int v31 = v12((char *)(a1 + v28), 1, v10);
  int v32 = v12(v30, 1, v10);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v29, v30, v125);
      uint64_t v33 = v10[5];
      int v34 = &v29[v33];
      uint64_t v35 = &v30[v33];
      char v36 = v35[8];
      *(void *)int v34 = *(void *)v35;
      v34[8] = v36;
      uint64_t v37 = v10[6];
      uint64_t v38 = &v29[v37];
      uint64_t v39 = &v30[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v40;
      uint64_t v41 = v10[7];
      uint64_t v42 = &v29[v41];
      uint64_t v43 = &v30[v41];
      char v44 = v43[8];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v44;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v29, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_12:
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v29, v30, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v123)(v29, v30, v125);
  uint64_t v93 = v10[5];
  uint64_t v94 = &v29[v93];
  uint64_t v95 = &v30[v93];
  char v96 = v95[8];
  *(void *)uint64_t v94 = *(void *)v95;
  v94[8] = v96;
  uint64_t v97 = v10[6];
  uint64_t v98 = &v29[v97];
  char v99 = &v30[v97];
  char v100 = v99[8];
  *(void *)uint64_t v98 = *(void *)v99;
  v98[8] = v100;
  uint64_t v101 = v10[7];
  uint64_t v102 = &v29[v101];
  char v103 = &v30[v101];
  char v104 = v103[8];
  *(void *)uint64_t v102 = *(void *)v103;
  v102[8] = v104;
LABEL_13:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v46 = a3[8];
  uint64_t v47 = (char *)(a1 + v46);
  uint64_t v48 = (char *)(a2 + v46);
  int v49 = v12((char *)(a1 + v46), 1, v10);
  int v50 = v12(v48, 1, v10);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v47, v48, v125);
      uint64_t v51 = v10[5];
      uint64_t v52 = &v47[v51];
      uint64_t v53 = &v48[v51];
      char v54 = v53[8];
      *(void *)uint64_t v52 = *(void *)v53;
      v52[8] = v54;
      uint64_t v55 = v10[6];
      uint64_t v56 = &v47[v55];
      uint64_t v57 = &v48[v55];
      char v58 = v57[8];
      *(void *)uint64_t v56 = *(void *)v57;
      v56[8] = v58;
      uint64_t v59 = v10[7];
      int v60 = &v47[v59];
      uint64_t v61 = &v48[v59];
      char v62 = v61[8];
      *(void *)int v60 = *(void *)v61;
      v60[8] = v62;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v47, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_18:
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v47, v48, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  ((void (*)(char *, char *, uint64_t))v123)(v47, v48, v125);
  uint64_t v105 = v10[5];
  uint64_t v106 = &v47[v105];
  char v107 = &v48[v105];
  char v108 = v107[8];
  *(void *)uint64_t v106 = *(void *)v107;
  v106[8] = v108;
  uint64_t v109 = v10[6];
  uint64_t v110 = &v47[v109];
  uint64_t v111 = &v48[v109];
  char v112 = v111[8];
  *(void *)uint64_t v110 = *(void *)v111;
  v110[8] = v112;
  uint64_t v113 = v10[7];
  uint64_t v114 = &v47[v113];
  uint64_t v115 = &v48[v113];
  char v116 = v115[8];
  *(void *)uint64_t v114 = *(void *)v115;
  v114[8] = v116;
LABEL_19:
  uint64_t v64 = a3[9];
  uint64_t v65 = (unsigned char *)(a1 + v64);
  uint64_t v66 = (unsigned char *)(a2 + v64);
  uint64_t v67 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v68 = *((void *)v67 - 1);
  int v69 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v68 + 48);
  int v70 = v69(v65, 1, v67);
  int v71 = v69(v66, 1, v67);
  if (!v70)
  {
    if (!v71)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v123)(v65, v66, v125);
      uint64_t v117 = v67[5];
      uint64_t v118 = &v65[v117];
      uint64_t v119 = &v66[v117];
      void *v118 = *v119;
      v118[1] = v119[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v120 = v67[6];
      uint64_t v121 = &v65[v120];
      uint64_t v122 = &v66[v120];
      *uint64_t v121 = *v122;
      v121[1] = v122[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v65[v67[7]] = v66[v67[7]];
      v65[v67[8]] = v66[v67[8]];
      v65[v67[9]] = v66[v67[9]];
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v65, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
    goto LABEL_24;
  }
  if (v71)
  {
LABEL_24:
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    memcpy(v65, v66, *(void *)(*(void *)(v79 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v124 + 16))(v65, v66, v125);
  uint64_t v72 = v67[5];
  uint64_t v73 = &v65[v72];
  uint64_t v74 = &v66[v72];
  *uint64_t v73 = *v74;
  v73[1] = v74[1];
  uint64_t v75 = v67[6];
  uint64_t v76 = &v65[v75];
  char v77 = &v66[v75];
  void *v76 = *v77;
  v76[1] = v77[1];
  v65[v67[7]] = v66[v67[7]];
  v65[v67[8]] = v66[v67[8]];
  v65[v67[9]] = v66[v67[9]];
  uint64_t v78 = *(void (**)(unsigned char *, void, uint64_t, int *))(v68 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78(v65, 0, 1, v67);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v59 = a3;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  char v58 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  int v60 = (void (*)(char *, char *, uint64_t))v7;
  if (v58(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = v59[6];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  if (v58((char *)(a2 + v23), 1, v11))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    uint64_t v27 = v6;
  }
  else
  {
    uint64_t v27 = v6;
    v60(v24, v25, v6);
    uint64_t v28 = v11[5];
    uint64_t v29 = &v24[v28];
    uint64_t v30 = &v25[v28];
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = v11[6];
    int v32 = &v24[v31];
    uint64_t v33 = &v25[v31];
    *(void *)int v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v11[7];
    uint64_t v35 = &v24[v34];
    char v36 = &v25[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v24, 0, 1, v11);
  }
  uint64_t v37 = v59[8];
  *(unsigned char *)(a1 + v59[7]) = *(unsigned char *)(a2 + v59[7]);
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  if (v58((char *)(a2 + v37), 1, v11))
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
    uint64_t v41 = v60;
  }
  else
  {
    uint64_t v41 = v60;
    v60(v38, v39, v27);
    uint64_t v42 = v11[5];
    uint64_t v43 = &v38[v42];
    char v44 = &v39[v42];
    *(void *)uint64_t v43 = *(void *)v44;
    v43[8] = v44[8];
    uint64_t v45 = v11[6];
    uint64_t v46 = &v38[v45];
    uint64_t v47 = &v39[v45];
    *(void *)uint64_t v46 = *(void *)v47;
    v46[8] = v47[8];
    uint64_t v48 = v11[7];
    int v49 = &v38[v48];
    int v50 = &v39[v48];
    *(void *)int v49 = *(void *)v50;
    v49[8] = v50[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v38, 0, 1, v11);
  }
  uint64_t v51 = v59[9];
  uint64_t v52 = (char *)(a1 + v51);
  uint64_t v53 = (char *)(a2 + v51);
  char v54 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v55 = *((void *)v54 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v55 + 48))(v53, 1, v54))
  {
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    v41(v52, v53, v27);
    *(_OWORD *)&v52[v54[5]] = *(_OWORD *)&v53[v54[5]];
    *(_OWORD *)&v52[v54[6]] = *(_OWORD *)&v53[v54[6]];
    v52[v54[7]] = v53[v54[7]];
    v52[v54[8]] = v53[v54[8]];
    v52[v54[9]] = v53[v54[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v55 + 56))(v52, 0, 1, v54);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v103 = *(void *)(v6 - 8);
  uint64_t v104 = v6;
  uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v103 + 40);
  v102(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v8, v9, v104);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v102)(v8, v9, v104);
  uint64_t v65 = v10[5];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  *(void *)uint64_t v66 = *(void *)v67;
  v66[8] = v67[8];
  uint64_t v68 = v10[6];
  int v69 = &v8[v68];
  int v70 = &v9[v68];
  *(void *)int v69 = *(void *)v70;
  v69[8] = v70[8];
  uint64_t v71 = v10[7];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  *(void *)uint64_t v72 = *(void *)v73;
  v72[8] = v73[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = (char *)(a1 + v25);
  uint64_t v27 = (char *)(a2 + v25);
  int v28 = v12((char *)(a1 + v25), 1, v10);
  int v29 = v12(v27, 1, v10);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v26, v27, v104);
      uint64_t v30 = v10[5];
      uint64_t v31 = &v26[v30];
      int v32 = &v27[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v10[6];
      uint64_t v34 = &v26[v33];
      uint64_t v35 = &v27[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v10[7];
      uint64_t v37 = &v26[v36];
      uint64_t v38 = &v27[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v26, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_12:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v26, v27, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v102)(v26, v27, v104);
  uint64_t v74 = v10[5];
  uint64_t v75 = &v26[v74];
  uint64_t v76 = &v27[v74];
  *(void *)uint64_t v75 = *(void *)v76;
  v75[8] = v76[8];
  uint64_t v77 = v10[6];
  uint64_t v78 = &v26[v77];
  uint64_t v79 = &v27[v77];
  *(void *)uint64_t v78 = *(void *)v79;
  v78[8] = v79[8];
  uint64_t v80 = v10[7];
  uint64_t v81 = &v26[v80];
  uint64_t v82 = &v27[v80];
  *(void *)uint64_t v81 = *(void *)v82;
  v81[8] = v82[8];
LABEL_13:
  uint64_t v40 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  int v43 = v12((char *)(a1 + v40), 1, v10);
  int v44 = v12(v42, 1, v10);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v41, v42, v104);
      uint64_t v45 = v10[5];
      uint64_t v46 = &v41[v45];
      uint64_t v47 = &v42[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      uint64_t v48 = v10[6];
      int v49 = &v41[v48];
      int v50 = &v42[v48];
      *(void *)int v49 = *(void *)v50;
      v49[8] = v50[8];
      uint64_t v51 = v10[7];
      uint64_t v52 = &v41[v51];
      uint64_t v53 = &v42[v51];
      *(void *)uint64_t v52 = *(void *)v53;
      v52[8] = v53[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v41, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v44)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_18:
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v41, v42, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_19;
  }
  ((void (*)(char *, char *, uint64_t))v102)(v41, v42, v104);
  uint64_t v83 = v10[5];
  char v84 = &v41[v83];
  uint64_t v85 = &v42[v83];
  *(void *)char v84 = *(void *)v85;
  v84[8] = v85[8];
  uint64_t v86 = v10[6];
  uint64_t v87 = &v41[v86];
  char v88 = &v42[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  v87[8] = v88[8];
  uint64_t v89 = v10[7];
  uint64_t v90 = &v41[v89];
  uint64_t v91 = &v42[v89];
  *(void *)uint64_t v90 = *(void *)v91;
  v90[8] = v91[8];
LABEL_19:
  uint64_t v55 = a3[9];
  uint64_t v56 = (unsigned char *)(a1 + v55);
  uint64_t v57 = (unsigned char *)(a2 + v55);
  char v58 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v59 = *((void *)v58 - 1);
  int v60 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v59 + 48);
  int v61 = v60(v56, 1, v58);
  int v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v102)(v56, v57, v104);
      uint64_t v92 = v58[5];
      uint64_t v93 = &v56[v92];
      uint64_t v94 = (uint64_t *)&v57[v92];
      uint64_t v96 = *v94;
      uint64_t v95 = v94[1];
      *uint64_t v93 = v96;
      v93[1] = v95;
      swift_bridgeObjectRelease();
      uint64_t v97 = v58[6];
      uint64_t v98 = &v56[v97];
      char v99 = (uint64_t *)&v57[v97];
      uint64_t v101 = *v99;
      uint64_t v100 = v99[1];
      *uint64_t v98 = v101;
      v98[1] = v100;
      swift_bridgeObjectRelease();
      v56[v58[7]] = v57[v58[7]];
      v56[v58[8]] = v57[v58[8]];
      v56[v58[9]] = v57[v58[9]];
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v56, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
    goto LABEL_24;
  }
  if (v62)
  {
LABEL_24:
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    memcpy(v56, v57, *(void *)(*(void *)(v63 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v103 + 32))(v56, v57, v104);
  *(_OWORD *)&v56[v58[5]] = *(_OWORD *)&v57[v58[5]];
  *(_OWORD *)&v56[v58[6]] = *(_OWORD *)&v57[v58[6]];
  v56[v58[7]] = v57[v58[7]];
  v56[v58[8]] = v57[v58[8]];
  v56[v58[9]] = v57[v58[9]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v59 + 56))(v56, 0, 1, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F44A08);
}

uint64_t sub_246F44A08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 236)
  {
    if (*(unsigned __int8 *)(a1 + a3[7]) <= 0x13u) {
      int v14 = 19;
    }
    else {
      int v14 = *(unsigned __int8 *)(a1 + a3[7]);
    }
    unsigned int v15 = v14 - 19;
    if (*(unsigned __int8 *)(a1 + a3[7]) >= 0x13u) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[9];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F44BA8);
}

uint64_t sub_246F44BA8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 236)
  {
    *(unsigned char *)(a1 + a4[7]) = a2 + 19;
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[9];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_WorkoutEvent()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent.EventType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent.EventType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *uint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F44FD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent.EventType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionStateMediator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_11);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionStateMediator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_11);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_BodyMetrics(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    a1 = (void *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[4] = v10[4];
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    int v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)int v13 = *(_DWORD *)v14;
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    uint64_t v19 = (char *)a1 + v17;
    uint64_t v20 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    uint64_t v21 = (char *)a1 + v18;
    char v22 = (char *)a2 + v18;
    LODWORD(v19) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = v19;
    uint64_t v23 = a3[11];
    uint64_t v24 = a3[12];
    uint64_t v25 = (char *)a1 + v23;
    uint64_t v26 = (char *)a2 + v23;
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    v25[4] = v26[4];
    uint64_t v27 = (char *)a1 + v24;
    int v28 = (char *)a2 + v24;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = a3[13];
    uint64_t v30 = a3[14];
    uint64_t v31 = (char *)a1 + v29;
    int v32 = (char *)a2 + v29;
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    *((unsigned char *)a1 + v30) = *((unsigned char *)a2 + v30);
    uint64_t v33 = a3[15];
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  uint64_t v26 = a1 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v32 = a3[15];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v22;
  uint64_t v23 = a3[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = v26;
  uint64_t v27 = a3[11];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = (int *)(a2 + v27);
  int v30 = *v29;
  *(unsigned char *)(v28 + 4) = *((unsigned char *)v29 + 4);
  *(_DWORD *)uint64_t v28 = v30;
  uint64_t v31 = a3[12];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = (int *)(a2 + v31);
  int v34 = *v33;
  *(unsigned char *)(v32 + 4) = *((unsigned char *)v33 + 4);
  *(_DWORD *)uint64_t v32 = v34;
  uint64_t v35 = a3[13];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = (int *)(a2 + v35);
  int v38 = *v37;
  *(unsigned char *)(v36 + 4) = *((unsigned char *)v37 + 4);
  *(_DWORD *)uint64_t v36 = v38;
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  uint64_t v39 = a3[15];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  LOBYTE(v38) = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  *(unsigned char *)(v40 + 4) = v38;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  uint64_t v26 = a1 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v32 = a3[15];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v18;
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  uint64_t v26 = a1 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v32 = a3[15];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F457E0);
}

uint64_t sub_246F457E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 3u) {
      int v10 = 3;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 3;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 3u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F458BC);
}

uint64_t sub_246F458BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_BodyMetrics()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Natalimetry(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    int v10 = (char *)a1 + v9;
    unsigned int v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
    uint64_t v32 = *((void *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[v31[5]] = v30[v31[5]];
      uint64_t v34 = v31[6];
      uint64_t v35 = &v29[v34];
      uint64_t v36 = &v30[v34];
      v35[4] = v36[4];
      *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
      uint64_t v37 = v31[7];
      int v38 = &v29[v37];
      uint64_t v39 = &v30[v37];
      v38[4] = v39[4];
      *(_DWORD *)int v38 = *(_DWORD *)v39;
      uint64_t v40 = v31[8];
      uint64_t v41 = &v29[v40];
      uint64_t v42 = &v30[v40];
      v41[4] = v42[4];
      *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
      uint64_t v43 = v31[9];
      int v44 = &v29[v43];
      uint64_t v45 = &v30[v43];
      v44[4] = v45[4];
      *(_DWORD *)int v44 = *(_DWORD *)v45;
      uint64_t v46 = v31[10];
      uint64_t v47 = &v29[v46];
      uint64_t v48 = &v30[v46];
      v47[4] = v48[4];
      *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
      uint64_t v49 = v31[11];
      int v50 = &v29[v49];
      uint64_t v51 = &v30[v49];
      *(_DWORD *)int v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      uint64_t v52 = v31[12];
      uint64_t v53 = &v29[v52];
      uint64_t v54 = &v30[v52];
      *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
      v53[4] = v54[4];
      uint64_t v55 = v31[13];
      uint64_t v56 = &v29[v55];
      uint64_t v57 = &v30[v55];
      *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v29[v31[14]] = v30[v31[14]];
      uint64_t v58 = v31[15];
      uint64_t v59 = &v29[v58];
      int v60 = &v30[v58];
      *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6)) {
    v10(v5, v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  unsigned int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  uint64_t v27 = (char *)(a1 + v24);
  uint64_t v28 = (char *)(a2 + v24);
  uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    uint64_t v32 = v29[6];
    uint64_t v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    v33[4] = v34[4];
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    uint64_t v35 = v29[7];
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    v36[4] = v37[4];
    *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
    uint64_t v38 = v29[8];
    uint64_t v39 = &v27[v38];
    uint64_t v40 = &v28[v38];
    v39[4] = v40[4];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    uint64_t v41 = v29[9];
    uint64_t v42 = &v27[v41];
    uint64_t v43 = &v28[v41];
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    uint64_t v44 = v29[10];
    uint64_t v45 = &v27[v44];
    uint64_t v46 = &v28[v44];
    v45[4] = v46[4];
    *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
    uint64_t v47 = v29[11];
    uint64_t v48 = &v27[v47];
    uint64_t v49 = &v28[v47];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = v29[12];
    uint64_t v51 = &v27[v50];
    uint64_t v52 = &v28[v50];
    *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    uint64_t v53 = v29[13];
    uint64_t v54 = &v27[v53];
    uint64_t v55 = &v28[v53];
    *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    v27[v29[14]] = v28[v29[14]];
    uint64_t v56 = v29[15];
    uint64_t v57 = &v27[v56];
    uint64_t v58 = &v28[v56];
    *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v125 = *(void *)(v6 - 8);
  uint64_t v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 24);
  v124(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v126 = a1;
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v124((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v77 = v10[5];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  char v80 = v79[8];
  *(void *)uint64_t v78 = *(void *)v79;
  v78[8] = v80;
  uint64_t v81 = v10[6];
  uint64_t v82 = &v8[v81];
  uint64_t v83 = &v9[v81];
  char v84 = v83[8];
  *(void *)uint64_t v82 = *(void *)v83;
  v82[8] = v84;
  uint64_t v85 = v10[7];
  uint64_t v86 = &v8[v85];
  uint64_t v87 = &v9[v85];
  char v88 = v87[8];
  *(void *)uint64_t v86 = *(void *)v87;
  v86[8] = v88;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = v126 + v28;
  uint64_t v30 = (int *)(a2 + v28);
  int v31 = *v30;
  *(unsigned char *)(v29 + 4) = *((unsigned char *)v30 + 4);
  *(_DWORD *)uint64_t v29 = v31;
  uint64_t v32 = a3[7];
  uint64_t v33 = (unsigned char *)(v126 + v32);
  uint64_t v34 = (unsigned char *)(a2 + v32);
  uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v36 = *((void *)v35 - 1);
  uint64_t v37 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      v124((uint64_t)v33, (uint64_t)v34, v6);
      v33[v35[5]] = v34[v35[5]];
      uint64_t v89 = v35[6];
      uint64_t v90 = &v33[v89];
      uint64_t v91 = &v34[v89];
      char v92 = v91[4];
      *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
      v90[4] = v92;
      uint64_t v93 = v35[7];
      uint64_t v94 = &v33[v93];
      uint64_t v95 = &v34[v93];
      char v96 = v95[4];
      *(_DWORD *)uint64_t v94 = *(_DWORD *)v95;
      v94[4] = v96;
      uint64_t v97 = v35[8];
      uint64_t v98 = &v33[v97];
      char v99 = &v34[v97];
      char v100 = v99[4];
      *(_DWORD *)uint64_t v98 = *(_DWORD *)v99;
      v98[4] = v100;
      uint64_t v101 = v35[9];
      uint64_t v102 = &v33[v101];
      uint64_t v103 = &v34[v101];
      char v104 = v103[4];
      *(_DWORD *)uint64_t v102 = *(_DWORD *)v103;
      v102[4] = v104;
      uint64_t v105 = v35[10];
      uint64_t v106 = &v33[v105];
      char v107 = &v34[v105];
      char v108 = v107[4];
      *(_DWORD *)uint64_t v106 = *(_DWORD *)v107;
      v106[4] = v108;
      uint64_t v109 = v35[11];
      uint64_t v110 = &v33[v109];
      uint64_t v111 = &v34[v109];
      int v112 = *(_DWORD *)v111;
      v110[4] = v111[4];
      *(_DWORD *)uint64_t v110 = v112;
      uint64_t v113 = v35[12];
      uint64_t v114 = &v33[v113];
      uint64_t v115 = &v34[v113];
      int v116 = *(_DWORD *)v115;
      v114[4] = v115[4];
      *(_DWORD *)uint64_t v114 = v116;
      uint64_t v117 = v35[13];
      uint64_t v118 = &v33[v117];
      uint64_t v119 = &v34[v117];
      int v120 = *(_DWORD *)v119;
      v118[4] = v119[4];
      *(_DWORD *)uint64_t v118 = v120;
      v33[v35[14]] = v34[v35[14]];
      uint64_t v121 = v35[15];
      uint64_t v122 = &v33[v121];
      uint64_t v123 = &v34[v121];
      LOBYTE(v120) = v123[4];
      *(_DWORD *)uint64_t v122 = *(_DWORD *)v123;
      v122[4] = v120;
      return v126;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    memcpy(v33, v34, *(void *)(*(void *)(v75 - 8) + 64));
    return v126;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v125 + 16))(v33, v34, v6);
  v33[v35[5]] = v34[v35[5]];
  uint64_t v40 = v35[6];
  uint64_t v41 = &v33[v40];
  uint64_t v42 = &v34[v40];
  char v43 = v42[4];
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  v41[4] = v43;
  uint64_t v44 = v35[7];
  uint64_t v45 = &v33[v44];
  uint64_t v46 = &v34[v44];
  char v47 = v46[4];
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  v45[4] = v47;
  uint64_t v48 = v35[8];
  uint64_t v49 = &v33[v48];
  uint64_t v50 = &v34[v48];
  char v51 = v50[4];
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
  v49[4] = v51;
  uint64_t v52 = v35[9];
  uint64_t v53 = &v33[v52];
  uint64_t v54 = &v34[v52];
  char v55 = v54[4];
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  v53[4] = v55;
  uint64_t v56 = v35[10];
  uint64_t v57 = &v33[v56];
  uint64_t v58 = &v34[v56];
  char v59 = v58[4];
  *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
  v57[4] = v59;
  uint64_t v60 = v35[11];
  int v61 = &v33[v60];
  int v62 = &v34[v60];
  int v63 = *(_DWORD *)v62;
  v61[4] = v62[4];
  *(_DWORD *)int v61 = v63;
  uint64_t v64 = v35[12];
  uint64_t v65 = &v33[v64];
  uint64_t v66 = &v34[v64];
  int v67 = *(_DWORD *)v66;
  v65[4] = v66[4];
  *(_DWORD *)uint64_t v65 = v67;
  uint64_t v68 = v35[13];
  int v69 = &v33[v68];
  int v70 = &v34[v68];
  int v71 = *(_DWORD *)v70;
  v69[4] = v70[4];
  *(_DWORD *)int v69 = v71;
  v33[v35[14]] = v34[v35[14]];
  uint64_t v72 = v35[15];
  uint64_t v73 = &v33[v72];
  uint64_t v74 = &v34[v72];
  LOBYTE(v71) = v74[4];
  *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
  v73[4] = v71;
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  return v126;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  uint64_t v27 = (char *)(a1 + v24);
  uint64_t v28 = (char *)(a2 + v24);
  uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    uint64_t v32 = v29[6];
    uint64_t v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    v33[4] = v34[4];
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    uint64_t v35 = v29[7];
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    v36[4] = v37[4];
    *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
    uint64_t v38 = v29[8];
    int v39 = &v27[v38];
    uint64_t v40 = &v28[v38];
    v39[4] = v40[4];
    *(_DWORD *)int v39 = *(_DWORD *)v40;
    uint64_t v41 = v29[9];
    uint64_t v42 = &v27[v41];
    char v43 = &v28[v41];
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    uint64_t v44 = v29[10];
    uint64_t v45 = &v27[v44];
    uint64_t v46 = &v28[v44];
    v45[4] = v46[4];
    *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
    uint64_t v47 = v29[11];
    uint64_t v48 = &v27[v47];
    uint64_t v49 = &v28[v47];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = v29[12];
    char v51 = &v27[v50];
    uint64_t v52 = &v28[v50];
    *(_DWORD *)char v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    uint64_t v53 = v29[13];
    uint64_t v54 = &v27[v53];
    char v55 = &v28[v53];
    *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    v27[v29[14]] = v28[v29[14]];
    uint64_t v56 = v29[15];
    uint64_t v57 = &v27[v56];
    uint64_t v58 = &v28[v56];
    *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v102 = *(void *)(v6 - 8);
  uint64_t v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 40);
  v101(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v103 = a1;
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v101((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v65 = v10[5];
  uint64_t v66 = &v8[v65];
  int v67 = &v9[v65];
  *(void *)uint64_t v66 = *(void *)v67;
  v66[8] = v67[8];
  uint64_t v68 = v10[6];
  int v69 = &v8[v68];
  int v70 = &v9[v68];
  *(void *)int v69 = *(void *)v70;
  v69[8] = v70[8];
  uint64_t v71 = v10[7];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  *(void *)uint64_t v72 = *(void *)v73;
  v72[8] = v73[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[7];
  uint64_t v27 = v103 + v25;
  uint64_t v28 = a2 + v25;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  uint64_t v29 = (unsigned char *)(v103 + v26);
  uint64_t v30 = (unsigned char *)(a2 + v26);
  uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v32 = *((void *)v31 - 1);
  uint64_t v33 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      v101((uint64_t)v29, (uint64_t)v30, v6);
      v29[v31[5]] = v30[v31[5]];
      uint64_t v74 = v31[6];
      uint64_t v75 = &v29[v74];
      uint64_t v76 = &v30[v74];
      v75[4] = v76[4];
      *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
      uint64_t v77 = v31[7];
      uint64_t v78 = &v29[v77];
      uint64_t v79 = &v30[v77];
      v78[4] = v79[4];
      *(_DWORD *)uint64_t v78 = *(_DWORD *)v79;
      uint64_t v80 = v31[8];
      uint64_t v81 = &v29[v80];
      uint64_t v82 = &v30[v80];
      v81[4] = v82[4];
      *(_DWORD *)uint64_t v81 = *(_DWORD *)v82;
      uint64_t v83 = v31[9];
      char v84 = &v29[v83];
      uint64_t v85 = &v30[v83];
      v84[4] = v85[4];
      *(_DWORD *)char v84 = *(_DWORD *)v85;
      uint64_t v86 = v31[10];
      uint64_t v87 = &v29[v86];
      char v88 = &v30[v86];
      v87[4] = v88[4];
      *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
      uint64_t v89 = v31[11];
      uint64_t v90 = &v29[v89];
      uint64_t v91 = &v30[v89];
      *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
      v90[4] = v91[4];
      uint64_t v92 = v31[12];
      uint64_t v93 = &v29[v92];
      uint64_t v94 = &v30[v92];
      *(_DWORD *)uint64_t v93 = *(_DWORD *)v94;
      v93[4] = v94[4];
      uint64_t v95 = v31[13];
      char v96 = &v29[v95];
      uint64_t v97 = &v30[v95];
      *(_DWORD *)char v96 = *(_DWORD *)v97;
      v96[4] = v97[4];
      v29[v31[14]] = v30[v31[14]];
      uint64_t v98 = v31[15];
      char v99 = &v29[v98];
      char v100 = &v30[v98];
      *(_DWORD *)char v99 = *(_DWORD *)v100;
      v99[4] = v100[4];
      return v103;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    memcpy(v29, v30, *(void *)(*(void *)(v63 - 8) + 64));
    return v103;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v102 + 32))(v29, v30, v6);
  v29[v31[5]] = v30[v31[5]];
  uint64_t v36 = v31[6];
  uint64_t v37 = &v29[v36];
  uint64_t v38 = &v30[v36];
  v37[4] = v38[4];
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  uint64_t v39 = v31[7];
  uint64_t v40 = &v29[v39];
  uint64_t v41 = &v30[v39];
  v40[4] = v41[4];
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  uint64_t v42 = v31[8];
  char v43 = &v29[v42];
  uint64_t v44 = &v30[v42];
  v43[4] = v44[4];
  *(_DWORD *)char v43 = *(_DWORD *)v44;
  uint64_t v45 = v31[9];
  uint64_t v46 = &v29[v45];
  uint64_t v47 = &v30[v45];
  v46[4] = v47[4];
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  uint64_t v48 = v31[10];
  uint64_t v49 = &v29[v48];
  uint64_t v50 = &v30[v48];
  v49[4] = v50[4];
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
  uint64_t v51 = v31[11];
  uint64_t v52 = &v29[v51];
  uint64_t v53 = &v30[v51];
  *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
  v52[4] = v53[4];
  uint64_t v54 = v31[12];
  char v55 = &v29[v54];
  uint64_t v56 = &v30[v54];
  *(_DWORD *)char v55 = *(_DWORD *)v56;
  v55[4] = v56[4];
  uint64_t v57 = v31[13];
  uint64_t v58 = &v29[v57];
  char v59 = &v30[v57];
  *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
  v58[4] = v59[4];
  v29[v31[14]] = v30[v31[14]];
  uint64_t v60 = v31[15];
  int v61 = &v29[v60];
  int v62 = &v30[v60];
  *(_DWORD *)int v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
  return v103;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F47358);
}

uint64_t sub_246F47358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_633Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F47378);
}

uint64_t sub_246F47378(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_634Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F473CC);
}

uint64_t sub_246F473CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_480Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F473EC);
}

uint64_t sub_246F473EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_481Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = a3[8];
    uint64_t v32 = a3[9];
    uint64_t v33 = (char *)a1 + v31;
    int v34 = (char *)a2 + v31;
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    int v35 = (char *)a1 + v32;
    uint64_t v36 = (char *)a2 + v32;
    *(_DWORD *)int v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
    uint64_t v37 = a3[10];
    uint64_t v38 = a3[11];
    uint64_t v39 = (char *)a1 + v37;
    uint64_t v40 = (char *)a2 + v37;
    int v41 = *(_DWORD *)v40;
    v39[4] = v40[4];
    *(_DWORD *)uint64_t v39 = v41;
    uint64_t v42 = (char *)a1 + v38;
    char v43 = (char *)a2 + v38;
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  uint64_t v35 = a3[10];
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = (int *)(a2 + v35);
  int v39 = *v38;
  *(unsigned char *)(v37 + 4) = *((unsigned char *)v38 + 4);
  *(_DWORD *)uint64_t v37 = v39;
  uint64_t v40 = a1 + v36;
  uint64_t v41 = a2 + v36;
  *(unsigned char *)(v40 + 4) = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v62 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 24);
  v7(a1, a2, v6);
  uint64_t v63 = a3;
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v61 = *((void *)v11 - 1);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v61 + 48);
  uint64_t v64 = v9;
  LODWORD(v9) = v12(v9, 1, v11);
  int v13 = v12((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v62 + 16))(v64, v10, v6);
      uint64_t v16 = v11[5];
      uint64_t v17 = v64 + v16;
      uint64_t v18 = &v10[v16];
      char v19 = v18[8];
      *(void *)uint64_t v17 = *(void *)v18;
      *(unsigned char *)(v17 + 8) = v19;
      uint64_t v20 = v11[6];
      uint64_t v21 = v64 + v20;
      uint64_t v22 = &v10[v20];
      char v23 = v22[8];
      *(void *)uint64_t v21 = *(void *)v22;
      *(unsigned char *)(v21 + 8) = v23;
      uint64_t v24 = v11[7];
      uint64_t v25 = v64 + v24;
      uint64_t v26 = &v10[v24];
      char v27 = v26[8];
      *(void *)uint64_t v25 = *(void *)v26;
      *(unsigned char *)(v25 + 8) = v27;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v61 + 56))(v64, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v15 = (void *)v64;
  }
  else
  {
    if (!v13)
    {
      v7(v64, (uint64_t)v10, v6);
      uint64_t v28 = v11[5];
      uint64_t v29 = v64 + v28;
      uint64_t v30 = &v10[v28];
      char v31 = v30[8];
      *(void *)uint64_t v29 = *(void *)v30;
      *(unsigned char *)(v29 + 8) = v31;
      uint64_t v32 = v11[6];
      uint64_t v33 = v64 + v32;
      uint64_t v34 = &v10[v32];
      char v35 = v34[8];
      *(void *)uint64_t v33 = *(void *)v34;
      *(unsigned char *)(v33 + 8) = v35;
      uint64_t v36 = v11[7];
      uint64_t v37 = v64 + v36;
      uint64_t v38 = &v10[v36];
      char v39 = v38[8];
      *(void *)uint64_t v37 = *(void *)v38;
      *(unsigned char *)(v37 + 8) = v39;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v64, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v15 = (void *)v64;
  }
  memcpy(v15, v10, v14);
LABEL_9:
  uint64_t v40 = v63[6];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = (uint64_t *)(a2 + v40);
  uint64_t v43 = *v42;
  *(unsigned char *)(v41 + 8) = *((unsigned char *)v42 + 8);
  *(void *)uint64_t v41 = v43;
  uint64_t v44 = v63[7];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = (uint64_t *)(a2 + v44);
  uint64_t v47 = *v46;
  *(unsigned char *)(v45 + 8) = *((unsigned char *)v46 + 8);
  *(void *)uint64_t v45 = v47;
  uint64_t v48 = v63[8];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  LODWORD(v47) = *(_DWORD *)v50;
  *(unsigned char *)(v49 + 4) = *(unsigned char *)(v50 + 4);
  *(_DWORD *)uint64_t v49 = v47;
  uint64_t v51 = v63[9];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = a2 + v51;
  LODWORD(v47) = *(_DWORD *)v53;
  *(unsigned char *)(v52 + 4) = *(unsigned char *)(v53 + 4);
  *(_DWORD *)uint64_t v52 = v47;
  uint64_t v54 = v63[10];
  uint64_t v55 = a1 + v54;
  uint64_t v56 = a2 + v54;
  LODWORD(v47) = *(_DWORD *)v56;
  *(unsigned char *)(v55 + 4) = *(unsigned char *)(v56 + 4);
  *(_DWORD *)uint64_t v55 = v47;
  uint64_t v57 = v63[11];
  uint64_t v58 = a1 + v57;
  uint64_t v59 = a2 + v57;
  LODWORD(v47) = *(_DWORD *)v59;
  *(unsigned char *)(v58 + 4) = *(unsigned char *)(v59 + 4);
  *(_DWORD *)uint64_t v58 = v47;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    char v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  uint64_t v35 = a3[10];
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = (int *)(a2 + v35);
  int v39 = *v38;
  *(unsigned char *)(v37 + 4) = *((unsigned char *)v38 + 4);
  *(_DWORD *)uint64_t v37 = v39;
  uint64_t v40 = a1 + v36;
  uint64_t v41 = a2 + v36;
  *(unsigned char *)(v40 + 4) = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 40);
  v7(a1, a2, v6);
  uint64_t v56 = a3;
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v54 = *((void *)v11 - 1);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v54 + 48);
  uint64_t v57 = v9;
  LODWORD(v9) = v12(v9, 1, v11);
  int v13 = v12((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v57, v10, v6);
      uint64_t v16 = v11[5];
      uint64_t v17 = v57 + v16;
      uint64_t v18 = &v10[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      *(unsigned char *)(v17 + 8) = v18[8];
      uint64_t v19 = v11[6];
      uint64_t v20 = v57 + v19;
      uint64_t v21 = &v10[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v21[8];
      uint64_t v22 = v11[7];
      uint64_t v23 = v57 + v22;
      uint64_t v24 = &v10[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      *(unsigned char *)(v23 + 8) = v24[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v54 + 56))(v57, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v15 = (void *)v57;
  }
  else
  {
    if (!v13)
    {
      v7(v57, (uint64_t)v10, v6);
      uint64_t v25 = v11[5];
      uint64_t v26 = v57 + v25;
      uint64_t v27 = &v10[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      *(unsigned char *)(v26 + 8) = v27[8];
      uint64_t v28 = v11[6];
      uint64_t v29 = v57 + v28;
      uint64_t v30 = &v10[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      *(unsigned char *)(v29 + 8) = v30[8];
      uint64_t v31 = v11[7];
      uint64_t v32 = v57 + v31;
      uint64_t v33 = &v10[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      *(unsigned char *)(v32 + 8) = v33[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v14 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v15 = (void *)v57;
  }
  memcpy(v15, v10, v14);
LABEL_9:
  uint64_t v34 = v56[6];
  uint64_t v35 = v56[7];
  uint64_t v36 = a1 + v34;
  uint64_t v37 = a2 + v34;
  *(void *)uint64_t v36 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  uint64_t v38 = a1 + v35;
  uint64_t v39 = a2 + v35;
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  uint64_t v40 = v56[8];
  uint64_t v41 = v56[9];
  uint64_t v42 = a1 + v40;
  uint64_t v43 = a2 + v40;
  *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
  *(unsigned char *)(v42 + 4) = *(unsigned char *)(v43 + 4);
  uint64_t v44 = a1 + v41;
  uint64_t v45 = a2 + v41;
  *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
  *(unsigned char *)(v44 + 4) = *(unsigned char *)(v45 + 4);
  uint64_t v46 = v56[10];
  uint64_t v47 = v56[11];
  uint64_t v48 = a1 + v46;
  uint64_t v49 = (int *)(a2 + v46);
  int v50 = *v49;
  *(unsigned char *)(v48 + 4) = *((unsigned char *)v49 + 4);
  *(_DWORD *)uint64_t v48 = v50;
  uint64_t v51 = a1 + v47;
  uint64_t v52 = a2 + v47;
  *(unsigned char *)(v51 + 4) = *(unsigned char *)(v52 + 4);
  *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F4826C);
}

uint64_t sub_246F4826C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_480Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F4828C);
}

uint64_t sub_246F4828C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_481Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DigitalElevationModel()
{
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_DirectionOfTravel(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    int v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = &a1[v25];
    uint64_t v28 = &a2[v25];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = &a1[v26];
    uint64_t v30 = &a2[v26];
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = a3[8];
    uint64_t v32 = a3[9];
    uint64_t v33 = &a1[v31];
    uint64_t v34 = &a2[v31];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = &a1[v32];
    uint64_t v36 = &a2[v32];
    v35[8] = v36[8];
    *(void *)uint64_t v35 = *(void *)v36;
    uint64_t v37 = a3[10];
    uint64_t v38 = a3[11];
    uint64_t v39 = &a1[v37];
    uint64_t v40 = &a2[v37];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = &a1[v38];
    uint64_t v42 = &a2[v38];
    *(void *)uint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    uint64_t v43 = a3[12];
    uint64_t v44 = a3[13];
    uint64_t v45 = &a1[v43];
    uint64_t v46 = &a2[v43];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = &a1[v44];
    uint64_t v48 = &a2[v44];
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = v48[8];
    uint64_t v49 = a3[14];
    uint64_t v50 = a3[15];
    uint64_t v51 = &a1[v49];
    uint64_t v52 = &a2[v49];
    *(void *)uint64_t v51 = *(void *)v52;
    v51[8] = v52[8];
    a1[v50] = a2[v50];
    uint64_t v53 = a3[17];
    a1[a3[16]] = a2[a3[16]];
    a1[v53] = a2[v53];
    a1[a3[18]] = a2[a3[18]];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  *(void *)uint64_t v33 = *(void *)v34;
  uint64_t v35 = a3[10];
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = a2 + v35;
  *(void *)uint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = a2 + v36;
  *(void *)uint64_t v39 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  uint64_t v41 = a3[12];
  uint64_t v42 = a3[13];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(void *)uint64_t v43 = *(void *)v44;
  *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
  uint64_t v45 = a1 + v42;
  uint64_t v46 = a2 + v42;
  *(void *)uint64_t v45 = *(void *)v46;
  *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
  uint64_t v47 = a3[14];
  uint64_t v48 = a3[15];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(void *)uint64_t v49 = *(void *)v50;
  *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
  *(unsigned char *)(a1 + v48) = *(unsigned char *)(a2 + v48);
  uint64_t v51 = a3[17];
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + v51) = *(unsigned char *)(a2 + v51);
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 24);
  v78(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v76 = *((void *)v10 - 1);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v76 + 48);
  uint64_t v79 = v8;
  LODWORD(v8) = v11(v8, 1, v10);
  int v12 = v11((uint64_t)v9, 1, v10);
  if (v8)
  {
    if (!v12)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v77 + 16))(v79, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = v79 + v15;
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      *(unsigned char *)(v16 + 8) = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = v79 + v19;
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = v79 + v23;
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      *(unsigned char *)(v24 + 8) = v26;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v76 + 56))(v79, 0, 1, v10);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v79;
  }
  else
  {
    if (!v12)
    {
      v78(v79, (uint64_t)v9, v6);
      uint64_t v27 = v10[5];
      uint64_t v28 = v79 + v27;
      uint64_t v29 = &v9[v27];
      char v30 = v29[8];
      *(void *)uint64_t v28 = *(void *)v29;
      *(unsigned char *)(v28 + 8) = v30;
      uint64_t v31 = v10[6];
      uint64_t v32 = v79 + v31;
      uint64_t v33 = &v9[v31];
      char v34 = v33[8];
      *(void *)uint64_t v32 = *(void *)v33;
      *(unsigned char *)(v32 + 8) = v34;
      uint64_t v35 = v10[7];
      uint64_t v36 = v79 + v35;
      uint64_t v37 = &v9[v35];
      char v38 = v37[8];
      *(void *)uint64_t v36 = *(void *)v37;
      *(unsigned char *)(v36 + 8) = v38;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v79, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v79;
  }
  memcpy(v14, v9, v13);
LABEL_9:
  uint64_t v39 = a3[6];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  *(unsigned char *)(v40 + 8) = *((unsigned char *)v41 + 8);
  *(void *)uint64_t v40 = v42;
  uint64_t v43 = a3[7];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = (uint64_t *)(a2 + v43);
  uint64_t v46 = *v45;
  *(unsigned char *)(v44 + 8) = *((unsigned char *)v45 + 8);
  *(void *)uint64_t v44 = v46;
  uint64_t v47 = a3[8];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = (uint64_t *)(a2 + v47);
  uint64_t v50 = *v49;
  *(unsigned char *)(v48 + 8) = *((unsigned char *)v49 + 8);
  *(void *)uint64_t v48 = v50;
  uint64_t v51 = a3[9];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = (uint64_t *)(a2 + v51);
  uint64_t v54 = *v53;
  *(unsigned char *)(v52 + 8) = *((unsigned char *)v53 + 8);
  *(void *)uint64_t v52 = v54;
  uint64_t v55 = a3[10];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = (uint64_t *)(a2 + v55);
  uint64_t v58 = *v57;
  *(unsigned char *)(v56 + 8) = *((unsigned char *)v57 + 8);
  *(void *)uint64_t v56 = v58;
  uint64_t v59 = a3[11];
  uint64_t v60 = a1 + v59;
  uint64_t v61 = (uint64_t *)(a2 + v59);
  uint64_t v62 = *v61;
  *(unsigned char *)(v60 + 8) = *((unsigned char *)v61 + 8);
  *(void *)uint64_t v60 = v62;
  uint64_t v63 = a3[12];
  uint64_t v64 = a1 + v63;
  uint64_t v65 = (uint64_t *)(a2 + v63);
  uint64_t v66 = *v65;
  *(unsigned char *)(v64 + 8) = *((unsigned char *)v65 + 8);
  *(void *)uint64_t v64 = v66;
  uint64_t v67 = a3[13];
  uint64_t v68 = a1 + v67;
  int v69 = (uint64_t *)(a2 + v67);
  uint64_t v70 = *v69;
  *(unsigned char *)(v68 + 8) = *((unsigned char *)v69 + 8);
  *(void *)uint64_t v68 = v70;
  uint64_t v71 = a3[14];
  uint64_t v72 = a1 + v71;
  uint64_t v73 = (uint64_t *)(a2 + v71);
  uint64_t v74 = *v73;
  *(unsigned char *)(v72 + 8) = *((unsigned char *)v73 + 8);
  *(void *)uint64_t v72 = v74;
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  *(void *)uint64_t v33 = *(void *)v34;
  uint64_t v35 = a3[10];
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = a2 + v35;
  *(void *)uint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = a2 + v36;
  *(void *)uint64_t v39 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  uint64_t v41 = a3[12];
  uint64_t v42 = a3[13];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(void *)uint64_t v43 = *(void *)v44;
  *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
  uint64_t v45 = a1 + v42;
  uint64_t v46 = a2 + v42;
  *(void *)uint64_t v45 = *(void *)v46;
  *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
  uint64_t v47 = a3[14];
  uint64_t v48 = a3[15];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(void *)uint64_t v49 = *(void *)v50;
  *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
  *(unsigned char *)(a1 + v48) = *(unsigned char *)(a2 + v48);
  uint64_t v51 = a3[17];
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + v51) = *(unsigned char *)(a2 + v51);
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 40);
  v65(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v63 = *((void *)v10 - 1);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v63 + 48);
  uint64_t v66 = v8;
  LODWORD(v8) = v11(v8, 1, v10);
  int v12 = v11((uint64_t)v9, 1, v10);
  if (v8)
  {
    if (!v12)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v66, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = v66 + v15;
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      *(unsigned char *)(v16 + 8) = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = v66 + v18;
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v20[8];
      uint64_t v21 = v10[7];
      uint64_t v22 = v66 + v21;
      uint64_t v23 = &v9[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v23[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v63 + 56))(v66, 0, 1, v10);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v66;
  }
  else
  {
    if (!v12)
    {
      v65(v66, (uint64_t)v9, v6);
      uint64_t v24 = v10[5];
      uint64_t v25 = v66 + v24;
      uint64_t v26 = &v9[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      *(unsigned char *)(v25 + 8) = v26[8];
      uint64_t v27 = v10[6];
      uint64_t v28 = v66 + v27;
      uint64_t v29 = &v9[v27];
      *(void *)uint64_t v28 = *(void *)v29;
      *(unsigned char *)(v28 + 8) = v29[8];
      uint64_t v30 = v10[7];
      uint64_t v31 = v66 + v30;
      uint64_t v32 = &v9[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      *(unsigned char *)(v31 + 8) = v32[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v66;
  }
  memcpy(v14, v9, v13);
LABEL_9:
  uint64_t v33 = a3[6];
  uint64_t v34 = a3[7];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(void *)uint64_t v35 = *(void *)v36;
  *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(void *)uint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  uint64_t v39 = a3[8];
  uint64_t v40 = a3[9];
  uint64_t v41 = a1 + v39;
  uint64_t v42 = a2 + v39;
  *(void *)uint64_t v41 = *(void *)v42;
  *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
  uint64_t v43 = a1 + v40;
  uint64_t v44 = a2 + v40;
  *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
  *(void *)uint64_t v43 = *(void *)v44;
  uint64_t v45 = a3[10];
  uint64_t v46 = a3[11];
  uint64_t v47 = a1 + v45;
  uint64_t v48 = a2 + v45;
  *(void *)uint64_t v47 = *(void *)v48;
  *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
  uint64_t v49 = a1 + v46;
  uint64_t v50 = a2 + v46;
  *(void *)uint64_t v49 = *(void *)v50;
  *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
  uint64_t v51 = a3[12];
  uint64_t v52 = a3[13];
  uint64_t v53 = a1 + v51;
  uint64_t v54 = a2 + v51;
  *(void *)uint64_t v53 = *(void *)v54;
  *(unsigned char *)(v53 + 8) = *(unsigned char *)(v54 + 8);
  uint64_t v55 = a1 + v52;
  uint64_t v56 = a2 + v52;
  *(void *)uint64_t v55 = *(void *)v56;
  *(unsigned char *)(v55 + 8) = *(unsigned char *)(v56 + 8);
  uint64_t v57 = a3[14];
  uint64_t v58 = a3[15];
  uint64_t v59 = a1 + v57;
  uint64_t v60 = a2 + v57;
  *(void *)uint64_t v59 = *(void *)v60;
  *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
  *(unsigned char *)(a1 + v58) = *(unsigned char *)(a2 + v58);
  uint64_t v61 = a3[17];
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + v61) = *(unsigned char *)(a2 + v61);
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F49370);
}

uint64_t sub_246F49370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 60));
  if (v14 >= 2) {
    int v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v15 = -2;
  }
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F494B8);
}

uint64_t sub_246F494B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 60)) = a2 + 2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapVector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_12);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_12);
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = &a1[v25];
    uint64_t v28 = &a2[v25];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = &a1[v26];
    uint64_t v30 = &a2[v26];
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = a3[8];
    uint64_t v32 = a3[9];
    uint64_t v33 = &a1[v31];
    uint64_t v34 = &a2[v31];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    a1[v32] = a2[v32];
    uint64_t v35 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    a1[v35] = a2[v35];
    a1[a3[12]] = a2[a3[12]];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  uint64_t v33 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v33) = *(unsigned char *)(a2 + v33);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 24);
  v54(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v52 = *((void *)v10 - 1);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v52 + 48);
  uint64_t v55 = v8;
  LODWORD(v8) = v11(v8, 1, v10);
  int v12 = v11((uint64_t)v9, 1, v10);
  if (v8)
  {
    if (!v12)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v53 + 16))(v55, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = v55 + v15;
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      *(unsigned char *)(v16 + 8) = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = v55 + v19;
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = v55 + v23;
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      *(unsigned char *)(v24 + 8) = v26;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v52 + 56))(v55, 0, 1, v10);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v55;
  }
  else
  {
    if (!v12)
    {
      v54(v55, (uint64_t)v9, v6);
      uint64_t v27 = v10[5];
      uint64_t v28 = v55 + v27;
      uint64_t v29 = &v9[v27];
      char v30 = v29[8];
      *(void *)uint64_t v28 = *(void *)v29;
      *(unsigned char *)(v28 + 8) = v30;
      uint64_t v31 = v10[6];
      uint64_t v32 = v55 + v31;
      uint64_t v33 = &v9[v31];
      char v34 = v33[8];
      *(void *)uint64_t v32 = *(void *)v33;
      *(unsigned char *)(v32 + 8) = v34;
      uint64_t v35 = v10[7];
      uint64_t v36 = v55 + v35;
      uint64_t v37 = &v9[v35];
      char v38 = v37[8];
      *(void *)uint64_t v36 = *(void *)v37;
      *(unsigned char *)(v36 + 8) = v38;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v55;
  }
  memcpy(v14, v9, v13);
LABEL_9:
  uint64_t v39 = a3[6];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  *(unsigned char *)(v40 + 8) = *((unsigned char *)v41 + 8);
  *(void *)uint64_t v40 = v42;
  uint64_t v43 = a3[7];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = (uint64_t *)(a2 + v43);
  uint64_t v46 = *v45;
  *(unsigned char *)(v44 + 8) = *((unsigned char *)v45 + 8);
  *(void *)uint64_t v44 = v46;
  uint64_t v47 = a3[8];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = (uint64_t *)(a2 + v47);
  uint64_t v50 = *v49;
  *(unsigned char *)(v48 + 8) = *((unsigned char *)v49 + 8);
  *(void *)uint64_t v48 = v50;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[8];
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  uint64_t v33 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v33) = *(unsigned char *)(a2 + v33);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 40);
  v47(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v45 = *((void *)v10 - 1);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v45 + 48);
  uint64_t v48 = v8;
  LODWORD(v8) = v11(v8, 1, v10);
  int v12 = v11((uint64_t)v9, 1, v10);
  if (v8)
  {
    if (!v12)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v48, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = v48 + v15;
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      *(unsigned char *)(v16 + 8) = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = v48 + v18;
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v20[8];
      uint64_t v21 = v10[7];
      uint64_t v22 = v48 + v21;
      uint64_t v23 = &v9[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v23[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v45 + 56))(v48, 0, 1, v10);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v48;
  }
  else
  {
    if (!v12)
    {
      v47(v48, (uint64_t)v9, v6);
      uint64_t v24 = v10[5];
      uint64_t v25 = v48 + v24;
      uint64_t v26 = &v9[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      *(unsigned char *)(v25 + 8) = v26[8];
      uint64_t v27 = v10[6];
      uint64_t v28 = v48 + v27;
      uint64_t v29 = &v9[v27];
      *(void *)uint64_t v28 = *(void *)v29;
      *(unsigned char *)(v28 + 8) = v29[8];
      uint64_t v30 = v10[7];
      uint64_t v31 = v48 + v30;
      uint64_t v32 = &v9[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      *(unsigned char *)(v31 + 8) = v32[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v48;
  }
  memcpy(v14, v9, v13);
LABEL_9:
  uint64_t v33 = a3[6];
  uint64_t v34 = a3[7];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(void *)uint64_t v35 = *(void *)v36;
  *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(void *)uint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  uint64_t v39 = a3[8];
  uint64_t v40 = a3[9];
  uint64_t v41 = a1 + v39;
  uint64_t v42 = a2 + v39;
  *(void *)uint64_t v41 = *(void *)v42;
  *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
  *(unsigned char *)(a1 + v40) = *(unsigned char *)(a2 + v40);
  uint64_t v43 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v43) = *(unsigned char *)(a2 + v43);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_705Tm);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_706Tm);
}

void type metadata completion function for CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    int v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    uint64_t v58 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    uint64_t v59 = v8;
    uint64_t v60 = v7;
    if (v58(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
    uint64_t v32 = *((void *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      uint64_t v57 = v13;
      v59(v29, v30, v7);
      uint64_t v34 = v31[5];
      uint64_t v35 = &v29[v34];
      uint64_t v36 = &v30[v34];
      if (v58(&v30[v34], 1, v12))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        v59(v35, v36, v60);
        uint64_t v38 = v12[5];
        uint64_t v39 = &v35[v38];
        uint64_t v40 = &v36[v38];
        *(void *)uint64_t v39 = *(void *)v40;
        v39[8] = v40[8];
        uint64_t v41 = v12[6];
        uint64_t v42 = &v35[v41];
        uint64_t v43 = &v36[v41];
        *(void *)uint64_t v42 = *(void *)v43;
        v42[8] = v43[8];
        uint64_t v44 = v12[7];
        uint64_t v45 = &v35[v44];
        uint64_t v46 = &v36[v44];
        *(void *)uint64_t v45 = *(void *)v46;
        v45[8] = v46[8];
        (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v35, 0, 1, v12);
      }
      uint64_t v47 = v31[6];
      uint64_t v48 = &v29[v47];
      uint64_t v49 = &v30[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = v31[7];
      uint64_t v51 = &v29[v50];
      uint64_t v52 = &v30[v50];
      v51[8] = v52[8];
      *(void *)uint64_t v51 = *(void *)v52;
      uint64_t v53 = v31[8];
      uint64_t v54 = &v29[v53];
      uint64_t v55 = &v30[v53];
      *(void *)uint64_t v54 = *(void *)v55;
      v54[8] = v55[8];
      v29[v31[9]] = v30[v31[9]];
      v29[v31[10]] = v30[v31[10]];
      v29[v31[11]] = v30[v31[11]];
      v29[v31[12]] = v30[v31[12]];
      (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6)) {
    v12(v5, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 28);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    v12(v8, v4);
    uint64_t v11 = v8 + *(int *)(v9 + 20);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v11, 1, v6);
    if (!result)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v59 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v57 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  uint64_t v58 = (void (*)(char *, char *, uint64_t))v7;
  if (v57(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = v59;
  uint64_t v26 = v59 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = (char *)(v59 + v24);
  uint64_t v29 = (char *)(a2 + v24);
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v31 = *((void *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    uint64_t v55 = v12;
    v58(v28, v29, v6);
    uint64_t v33 = v30[5];
    __dst = &v28[v33];
    uint64_t v34 = &v29[v33];
    if (v57(&v29[v33], 1, v11))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(__dst, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      v58(__dst, v34, v6);
      uint64_t v36 = v11[5];
      uint64_t v37 = &__dst[v36];
      uint64_t v38 = &v34[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      uint64_t v39 = v11[6];
      uint64_t v40 = &__dst[v39];
      uint64_t v41 = &v34[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v11[7];
      uint64_t v43 = &__dst[v42];
      uint64_t v44 = &v34[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      (*(void (**)(char *, void, uint64_t, int *))(v55 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v45 = v30[6];
    uint64_t v46 = &v28[v45];
    uint64_t v47 = &v29[v45];
    *(void *)uint64_t v46 = *(void *)v47;
    v46[8] = v47[8];
    uint64_t v48 = v30[7];
    uint64_t v49 = &v28[v48];
    uint64_t v50 = &v29[v48];
    v49[8] = v50[8];
    *(void *)uint64_t v49 = *(void *)v50;
    uint64_t v51 = v30[8];
    uint64_t v52 = &v28[v51];
    uint64_t v53 = &v29[v51];
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v53[8];
    v28[v30[9]] = v29[v30[9]];
    v28[v30[10]] = v29[v30[10]];
    v28[v30[11]] = v29[v30[11]];
    v28[v30[12]] = v29[v30[12]];
    (*(void (**)(char *, void, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
    return v59;
  }
  return v25;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  __dst = *(void **)(v6 - 8);
  uint64_t v129 = v6;
  uint64_t v125 = (void (*)(uint64_t, uint64_t))__dst[3];
  v125(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(void))(v11 + 48);
  int v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  int v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  uint64_t v124 = v11;
  if (v13)
  {
    if (!v14)
    {
      ((void (*)(char *, char *, uint64_t))__dst[2])(v8, v9, v129);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v125)(v8, v9, v129);
  uint64_t v44 = v10[5];
  uint64_t v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  char v47 = v46[8];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v47;
  uint64_t v48 = v10[6];
  uint64_t v49 = &v8[v48];
  uint64_t v50 = &v9[v48];
  char v51 = v50[8];
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v51;
  uint64_t v52 = v10[7];
  uint64_t v53 = &v8[v52];
  uint64_t v54 = &v9[v52];
  char v55 = v54[8];
  *(void *)uint64_t v53 = *(void *)v54;
  v53[8] = v55;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (int *)(a2 + v28);
  int v31 = *v30;
  *(unsigned char *)(v29 + 4) = *((unsigned char *)v30 + 4);
  *(_DWORD *)uint64_t v29 = v31;
  uint64_t v32 = a3[7];
  uint64_t v130 = a1;
  uint64_t v33 = (char *)(a1 + v32);
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v36 = *((void *)v35 - 1);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, int *))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      uint64_t v126 = (void (*)(char *, char *, uint64_t))__dst[2];
      v126(v33, v34, v129);
      uint64_t v40 = v35[5];
      __dsta = &v33[v40];
      uint64_t v41 = &v34[v40];
      if (((unsigned int (*)(char *, uint64_t, int *))v12)(&v34[v40], 1, v10))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(__dsta, v41, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        v126(__dsta, v41, v129);
        uint64_t v62 = v10[5];
        uint64_t v63 = &__dsta[v62];
        uint64_t v64 = &v41[v62];
        char v65 = v64[8];
        *(void *)uint64_t v63 = *(void *)v64;
        v63[8] = v65;
        uint64_t v66 = v10[6];
        uint64_t v67 = &__dsta[v66];
        uint64_t v68 = &v41[v66];
        char v69 = v68[8];
        *(void *)uint64_t v67 = *(void *)v68;
        v67[8] = v69;
        uint64_t v70 = v10[7];
        uint64_t v71 = &__dsta[v70];
        uint64_t v72 = &v41[v70];
        char v73 = v72[8];
        *(void *)uint64_t v71 = *(void *)v72;
        v71[8] = v73;
        (*(void (**)(char *, void, uint64_t, int *))(v124 + 56))(__dsta, 0, 1, v10);
      }
      uint64_t v74 = v35[6];
      uint64_t v75 = &v33[v74];
      uint64_t v76 = &v34[v74];
      uint64_t v77 = *(void *)v76;
      v75[8] = v76[8];
      *(void *)uint64_t v75 = v77;
      uint64_t v78 = v35[7];
      uint64_t v79 = &v33[v78];
      uint64_t v80 = &v34[v78];
      uint64_t v81 = *(void *)v80;
      v79[8] = v80[8];
      *(void *)uint64_t v79 = v81;
      uint64_t v82 = v35[8];
      uint64_t v83 = &v33[v82];
      char v84 = &v34[v82];
      uint64_t v85 = *(void *)v84;
      v83[8] = v84[8];
      *(void *)uint64_t v83 = v85;
      v33[v35[9]] = v34[v35[9]];
      v33[v35[10]] = v34[v35[10]];
      v33[v35[11]] = v34[v35[11]];
      v33[v35[12]] = v34[v35[12]];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
      return v130;
    }
LABEL_13:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    memcpy(v33, v34, *(void *)(*(void *)(v43 - 8) + 64));
    return v130;
  }
  if (v39)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v125)(v33, v34, v129);
  uint64_t v56 = v35[5];
  uint64_t v57 = &v34[v56];
  uint64_t v123 = (uint64_t)&v33[v56];
  int v58 = v12();
  int v59 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v57, 1, v10);
  if (v58)
  {
    if (!v59)
    {
      ((void (*)(uint64_t, char *, uint64_t))__dst[2])(v123, v57, v129);
      uint64_t v87 = v10[5];
      uint64_t v88 = v123 + v87;
      uint64_t v89 = &v57[v87];
      char v90 = v89[8];
      *(void *)uint64_t v88 = *(void *)v89;
      *(unsigned char *)(v88 + 8) = v90;
      uint64_t v91 = v10[6];
      uint64_t v92 = v123 + v91;
      uint64_t v93 = &v57[v91];
      char v94 = v93[8];
      *(void *)uint64_t v92 = *(void *)v93;
      *(unsigned char *)(v92 + 8) = v94;
      uint64_t v95 = v10[7];
      uint64_t v96 = v123 + v95;
      uint64_t v97 = &v57[v95];
      char v98 = v97[8];
      *(void *)uint64_t v96 = *(void *)v97;
      *(unsigned char *)(v96 + 8) = v98;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v124 + 56))(v123, 0, 1, v10);
      goto LABEL_26;
    }
    size_t v60 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v61 = (void *)v123;
  }
  else
  {
    if (!v59)
    {
      ((void (*)(uint64_t, char *, uint64_t))v125)(v123, v57, v129);
      uint64_t v99 = v10[5];
      uint64_t v100 = v123 + v99;
      uint64_t v101 = &v57[v99];
      char v102 = v101[8];
      *(void *)uint64_t v100 = *(void *)v101;
      *(unsigned char *)(v100 + 8) = v102;
      uint64_t v103 = v10[6];
      uint64_t v104 = v123 + v103;
      uint64_t v105 = &v57[v103];
      char v106 = v105[8];
      *(void *)uint64_t v104 = *(void *)v105;
      *(unsigned char *)(v104 + 8) = v106;
      uint64_t v107 = v10[7];
      uint64_t v108 = v123 + v107;
      uint64_t v109 = &v57[v107];
      char v110 = v109[8];
      *(void *)uint64_t v108 = *(void *)v109;
      *(unsigned char *)(v108 + 8) = v110;
      goto LABEL_26;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v123, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v60 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v61 = (void *)v123;
  }
  memcpy(v61, v57, v60);
LABEL_26:
  uint64_t result = v130;
  uint64_t v111 = v35[6];
  int v112 = &v33[v111];
  uint64_t v113 = &v34[v111];
  uint64_t v114 = *(void *)v113;
  v112[8] = v113[8];
  *(void *)int v112 = v114;
  uint64_t v115 = v35[7];
  int v116 = &v33[v115];
  uint64_t v117 = &v34[v115];
  uint64_t v118 = *(void *)v117;
  v116[8] = v117[8];
  *(void *)int v116 = v118;
  uint64_t v119 = v35[8];
  int v120 = &v33[v119];
  uint64_t v121 = &v34[v119];
  uint64_t v122 = *(void *)v121;
  v120[8] = v121[8];
  *(void *)int v120 = v122;
  v33[v35[9]] = v34[v35[9]];
  v33[v35[10]] = v34[v35[10]];
  v33[v35[11]] = v34[v35[11]];
  v33[v35[12]] = v34[v35[12]];
  return result;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v59 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v57 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  int v58 = (void (*)(char *, char *, uint64_t))v7;
  if (v57(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = v59;
  uint64_t v26 = v59 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = (char *)(v59 + v24);
  uint64_t v29 = (char *)(a2 + v24);
  uint64_t v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v31 = *((void *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    uint64_t v55 = v12;
    v58(v28, v29, v6);
    uint64_t v33 = v30[5];
    __dst = &v28[v33];
    uint64_t v34 = &v29[v33];
    if (v57(&v29[v33], 1, v11))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(__dst, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      v58(__dst, v34, v6);
      uint64_t v36 = v11[5];
      uint64_t v37 = &__dst[v36];
      int v38 = &v34[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      uint64_t v39 = v11[6];
      uint64_t v40 = &__dst[v39];
      uint64_t v41 = &v34[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v11[7];
      uint64_t v43 = &__dst[v42];
      uint64_t v44 = &v34[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      (*(void (**)(char *, void, uint64_t, int *))(v55 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v45 = v30[6];
    uint64_t v46 = &v28[v45];
    char v47 = &v29[v45];
    *(void *)uint64_t v46 = *(void *)v47;
    v46[8] = v47[8];
    uint64_t v48 = v30[7];
    uint64_t v49 = &v28[v48];
    uint64_t v50 = &v29[v48];
    v49[8] = v50[8];
    *(void *)uint64_t v49 = *(void *)v50;
    uint64_t v51 = v30[8];
    uint64_t v52 = &v28[v51];
    uint64_t v53 = &v29[v51];
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v53[8];
    v28[v30[9]] = v29[v30[9]];
    v28[v30[10]] = v29[v30[10]];
    v28[v30[11]] = v29[v30[11]];
    v28[v30[12]] = v29[v30[12]];
    (*(void (**)(char *, void, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
    return v59;
  }
  return v25;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  __dst = *(void **)(v6 - 8);
  uint64_t v107 = v6;
  uint64_t v103 = (void (*)(uint64_t, uint64_t))__dst[5];
  v103(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(void))(v11 + 48);
  int v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  int v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  uint64_t v102 = v11;
  if (v13)
  {
    if (!v14)
    {
      ((void (*)(char *, char *, uint64_t))__dst[4])(v8, v9, v107);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v103)(v8, v9, v107);
  uint64_t v40 = v10[5];
  uint64_t v41 = &v8[v40];
  uint64_t v42 = &v9[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  v41[8] = v42[8];
  uint64_t v43 = v10[6];
  uint64_t v44 = &v8[v43];
  uint64_t v45 = &v9[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v45[8];
  uint64_t v46 = v10[7];
  char v47 = &v8[v46];
  uint64_t v48 = &v9[v46];
  *(void *)char v47 = *(void *)v48;
  v47[8] = v48[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[7];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  uint64_t v108 = a1;
  uint64_t v29 = (char *)(a1 + v26);
  uint64_t v30 = (char *)(a2 + v26);
  uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v32 = *((void *)v31 - 1);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, int *))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      uint64_t v104 = (void (*)(char *, char *, uint64_t))__dst[4];
      v104(v29, v30, v107);
      uint64_t v36 = v31[5];
      __dsta = &v29[v36];
      uint64_t v37 = &v30[v36];
      if (((unsigned int (*)(char *, uint64_t, int *))v12)(&v30[v36], 1, v10))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(__dsta, v37, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        v104(__dsta, v37, v107);
        uint64_t v55 = v10[5];
        uint64_t v56 = &__dsta[v55];
        uint64_t v57 = &v37[v55];
        *(void *)uint64_t v56 = *(void *)v57;
        v56[8] = v57[8];
        uint64_t v58 = v10[6];
        uint64_t v59 = &__dsta[v58];
        size_t v60 = &v37[v58];
        *(void *)uint64_t v59 = *(void *)v60;
        v59[8] = v60[8];
        uint64_t v61 = v10[7];
        uint64_t v62 = &__dsta[v61];
        uint64_t v63 = &v37[v61];
        *(void *)uint64_t v62 = *(void *)v63;
        v62[8] = v63[8];
        (*(void (**)(char *, void, uint64_t, int *))(v102 + 56))(__dsta, 0, 1, v10);
      }
      uint64_t v64 = v31[6];
      char v65 = &v29[v64];
      uint64_t v66 = &v30[v64];
      *(void *)char v65 = *(void *)v66;
      v65[8] = v66[8];
      uint64_t v67 = v31[7];
      uint64_t v68 = &v29[v67];
      char v69 = &v30[v67];
      v68[8] = v69[8];
      *(void *)uint64_t v68 = *(void *)v69;
      uint64_t v70 = v31[8];
      uint64_t v71 = &v29[v70];
      uint64_t v72 = &v30[v70];
      *(void *)uint64_t v71 = *(void *)v72;
      v71[8] = v72[8];
      v29[v31[9]] = v30[v31[9]];
      v29[v31[10]] = v30[v31[10]];
      v29[v31[11]] = v30[v31[11]];
      v29[v31[12]] = v30[v31[12]];
      (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
      return v108;
    }
LABEL_13:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    memcpy(v29, v30, *(void *)(*(void *)(v39 - 8) + 64));
    return v108;
  }
  if (v35)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v103)(v29, v30, v107);
  uint64_t v49 = v31[5];
  uint64_t v50 = &v30[v49];
  uint64_t v101 = (uint64_t)&v29[v49];
  int v51 = v12();
  int v52 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v50, 1, v10);
  if (v51)
  {
    if (!v52)
    {
      ((void (*)(uint64_t, char *, uint64_t))__dst[4])(v101, v50, v107);
      uint64_t v74 = v10[5];
      uint64_t v75 = v101 + v74;
      uint64_t v76 = &v50[v74];
      *(void *)uint64_t v75 = *(void *)v76;
      *(unsigned char *)(v75 + 8) = v76[8];
      uint64_t v77 = v10[6];
      uint64_t v78 = v101 + v77;
      uint64_t v79 = &v50[v77];
      *(void *)uint64_t v78 = *(void *)v79;
      *(unsigned char *)(v78 + 8) = v79[8];
      uint64_t v80 = v10[7];
      uint64_t v81 = v101 + v80;
      uint64_t v82 = &v50[v80];
      *(void *)uint64_t v81 = *(void *)v82;
      *(unsigned char *)(v81 + 8) = v82[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v102 + 56))(v101, 0, 1, v10);
      goto LABEL_26;
    }
    size_t v53 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v54 = (void *)v101;
  }
  else
  {
    if (!v52)
    {
      ((void (*)(uint64_t, char *, uint64_t))v103)(v101, v50, v107);
      uint64_t v83 = v10[5];
      uint64_t v84 = v101 + v83;
      uint64_t v85 = &v50[v83];
      *(void *)uint64_t v84 = *(void *)v85;
      *(unsigned char *)(v84 + 8) = v85[8];
      uint64_t v86 = v10[6];
      uint64_t v87 = v101 + v86;
      uint64_t v88 = &v50[v86];
      *(void *)uint64_t v87 = *(void *)v88;
      *(unsigned char *)(v87 + 8) = v88[8];
      uint64_t v89 = v10[7];
      uint64_t v90 = v101 + v89;
      uint64_t v91 = &v50[v89];
      *(void *)uint64_t v90 = *(void *)v91;
      *(unsigned char *)(v90 + 8) = v91[8];
      goto LABEL_26;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v101, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v53 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v54 = (void *)v101;
  }
  memcpy(v54, v50, v53);
LABEL_26:
  uint64_t result = v108;
  uint64_t v92 = v31[6];
  uint64_t v93 = &v29[v92];
  char v94 = &v30[v92];
  *(void *)uint64_t v93 = *(void *)v94;
  v93[8] = v94[8];
  uint64_t v95 = v31[7];
  uint64_t v96 = &v29[v95];
  uint64_t v97 = &v30[v95];
  v96[8] = v97[8];
  *(void *)uint64_t v96 = *(void *)v97;
  uint64_t v98 = v31[8];
  uint64_t v99 = &v29[v98];
  uint64_t v100 = &v30[v98];
  *(void *)uint64_t v99 = *(void *)v100;
  v99[8] = v100[8];
  v29[v31[9]] = v30[v31[9]];
  v29[v31[10]] = v30[v31[10]];
  v29[v31[11]] = v30[v31[11]];
  v29[v31[12]] = v30[v31[12]];
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F4C440);
}

uint64_t sub_246F4C440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_633Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F4C460);
}

uint64_t sub_246F4C460(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_634Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_13);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_13);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t *a1, uint64_t *a2, int *a3)
{
  return initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(uint64_t *a1, uint64_t *a2, int *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  int v7 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v7 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else
  {
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16);
    v10(a1, a2, v9);
    uint64_t v11 = a3[5];
    uint64_t v12 = (char *)a1 + v11;
    int v13 = (char *)a2 + v11;
    int v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v15 = *((void *)v14 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      v10((uint64_t *)v12, (uint64_t *)v13, v9);
      uint64_t v18 = v14[5];
      uint64_t v19 = &v12[v18];
      uint64_t v20 = &v13[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v14[6];
      char v22 = &v12[v21];
      uint64_t v23 = &v13[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      uint64_t v24 = v14[7];
      uint64_t v25 = &v12[v24];
      uint64_t v26 = &v13[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v27 = a3[6];
    uint64_t v28 = a3[7];
    uint64_t v29 = (char *)a1 + v27;
    uint64_t v30 = (char *)a2 + v27;
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
    uint64_t v31 = (char *)a1 + v28;
    uint64_t v32 = (char *)a2 + v28;
    uint64_t v33 = a4(0);
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(a5);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      v10((uint64_t *)v31, (uint64_t *)v32, v9);
      *(void *)&v31[*(int *)(v33 + 20)] = *(void *)&v32[*(int *)(v33 + 20)];
      uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
      swift_retain();
      v36(v31, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_MotionState(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t destroy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  int v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(a1, v6);
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
    v7(v8, v6);
  }
  uint64_t v10 = a1 + *(int *)(a2 + 28);
  uint64_t v11 = a3(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    v7(v10, v6);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  v9(a1, a2, v8);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  int v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v9((uint64_t)v11, (uint64_t)v12, v8);
    uint64_t v16 = v13[5];
    uint64_t v17 = &v11[v16];
    uint64_t v18 = &v12[v16];
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = v13[6];
    uint64_t v20 = &v11[v19];
    uint64_t v21 = &v12[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = v13[7];
    uint64_t v23 = &v11[v22];
    uint64_t v24 = &v12[v22];
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[7];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  uint64_t v29 = (char *)(a1 + v26);
  uint64_t v30 = (char *)(a2 + v26);
  uint64_t v31 = a4(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    v9((uint64_t)v29, (uint64_t)v30, v8);
    *(void *)&v29[*(int *)(v31 + 20)] = *(void *)&v30[*(int *)(v31 + 20)];
    uint64_t v34 = *(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56);
    swift_retain();
    v34(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
  v9(a1, a2, v8);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  int v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v9((uint64_t)v11, (uint64_t)v12, v8);
    uint64_t v16 = v13[5];
    uint64_t v17 = &v11[v16];
    uint64_t v18 = &v12[v16];
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = v13[6];
    uint64_t v20 = &v11[v19];
    uint64_t v21 = &v12[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = v13[7];
    uint64_t v23 = &v11[v22];
    uint64_t v24 = &v12[v22];
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v25 = a3[6];
  uint64_t v26 = a3[7];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  uint64_t v29 = (char *)(a1 + v26);
  uint64_t v30 = (char *)(a2 + v26);
  uint64_t v31 = a4(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    v9((uint64_t)v29, (uint64_t)v30, v8);
    *(void *)&v29[*(int *)(v31 + 20)] = *(void *)&v30[*(int *)(v31 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F4CF9C);
}

uint64_t sub_246F4CF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_633Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F4CFBC);
}

uint64_t sub_246F4CFBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_634Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapsRouteHintData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_16);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapsRouteHintData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_16);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MapMatchingRouteHint(void *a1, char *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *(void *)a2;
  *a1 = *(void *)a2;
  if ((v3 & 0x20000) != 0)
  {
    int v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    int v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = &a2[v13];
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v17 = *((void *)v16 - 1);
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, int *))(v17 + 48);
    if (v43(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      uint64_t v19 = v16[5];
      uint64_t v20 = &v14[v19];
      uint64_t v21 = &v15[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v16[6];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v16[7];
      uint64_t v26 = &v14[v25];
      uint64_t v27 = &v15[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v28 = a3[7];
    uint64_t v29 = (char *)v7 + v28;
    uint64_t v30 = &a2[v28];
    if (v43(&a2[v28], 1, v16))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v12(v29, v30, v11);
      uint64_t v32 = v16[5];
      uint64_t v33 = &v29[v32];
      uint64_t v34 = &v30[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = v16[6];
      uint64_t v36 = &v29[v35];
      uint64_t v37 = &v30[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      uint64_t v38 = v16[7];
      uint64_t v39 = &v29[v38];
      uint64_t v40 = &v30[v38];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v29, 0, 1, v16);
    }
    uint64_t v41 = a3[9];
    *((unsigned char *)v7 + a3[8]) = a2[a3[8]];
    *((unsigned char *)v7 + v41) = a2[v41];
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7)) {
    v11(v6, v5);
  }
  uint64_t v9 = a1 + a2[7];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v7);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_MapMatchingRouteHint(void *a1, char *a2, int *a3)
{
  *a1 = *(void *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v42 = a3;
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = &a2[v11];
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    uint64_t v18 = v14[5];
    uint64_t v19 = &v12[v18];
    uint64_t v20 = &v13[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v14[6];
    uint64_t v22 = &v12[v21];
    uint64_t v23 = &v13[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v14[7];
    uint64_t v25 = &v12[v24];
    uint64_t v26 = &v13[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v27 = v42[7];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = &a2[v27];
  if (v16(&a2[v27], 1, v14))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v10(v28, v29, v9);
    uint64_t v31 = v14[5];
    uint64_t v32 = &v28[v31];
    uint64_t v33 = &v29[v31];
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v14[6];
    uint64_t v35 = &v28[v34];
    uint64_t v36 = &v29[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    uint64_t v37 = v14[7];
    uint64_t v38 = &v28[v37];
    uint64_t v39 = &v29[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v28, 0, 1, v14);
  }
  uint64_t v40 = v42[9];
  *((unsigned char *)a1 + v42[8]) = a2[v42[8]];
  *((unsigned char *)a1 + v40) = a2[v40];
  return a1;
}

char *assignWithCopy for CLP_LogEntry_PrivateData_MapMatchingRouteHint(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v75 = type metadata accessor for UnknownStorage();
  uint64_t v72 = *(void (**)(char *, char *))(*(void *)(v75 - 8) + 24);
  uint64_t v73 = *(void *)(v75 - 8);
  v72(v7, v8);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v74 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v74 + 48);
  int v14 = v13(v10, 1, v12);
  int v15 = v13(v11, 1, v12);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v10, v11, v75);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      char v19 = v18[8];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v19;
      uint64_t v20 = v12[6];
      uint64_t v21 = &v10[v20];
      uint64_t v22 = &v11[v20];
      char v23 = v22[8];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v23;
      uint64_t v24 = v12[7];
      uint64_t v25 = &v10[v24];
      uint64_t v26 = &v11[v24];
      char v27 = v26[8];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v27;
      (*(void (**)(char *, void, uint64_t, int *))(v74 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v72)(v10, v11, v75);
  uint64_t v48 = v12[5];
  uint64_t v49 = &v10[v48];
  uint64_t v50 = &v11[v48];
  char v51 = v50[8];
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v51;
  uint64_t v52 = v12[6];
  size_t v53 = &v10[v52];
  uint64_t v54 = &v11[v52];
  char v55 = v54[8];
  *(void *)size_t v53 = *(void *)v54;
  v53[8] = v55;
  uint64_t v56 = v12[7];
  uint64_t v57 = &v10[v56];
  uint64_t v58 = &v11[v56];
  char v59 = v58[8];
  *(void *)uint64_t v57 = *(void *)v58;
  v57[8] = v59;
LABEL_7:
  uint64_t v29 = a3[7];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (char *)a2 + v29;
  int v32 = v13(&a1[v29], 1, v12);
  int v33 = v13(v31, 1, v12);
  if (!v32)
  {
    if (!v33)
    {
      ((void (*)(char *, char *, uint64_t))v72)(v30, v31, v75);
      uint64_t v60 = v12[5];
      uint64_t v61 = &v30[v60];
      uint64_t v62 = &v31[v60];
      char v63 = v62[8];
      *(void *)uint64_t v61 = *(void *)v62;
      v61[8] = v63;
      uint64_t v64 = v12[6];
      char v65 = &v30[v64];
      uint64_t v66 = &v31[v64];
      char v67 = v66[8];
      *(void *)char v65 = *(void *)v66;
      v65[8] = v67;
      uint64_t v68 = v12[7];
      char v69 = &v30[v68];
      uint64_t v70 = &v31[v68];
      char v71 = v70[8];
      *(void *)char v69 = *(void *)v70;
      v69[8] = v71;
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v30, v31, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v30, v31, v75);
  uint64_t v34 = v12[5];
  uint64_t v35 = &v30[v34];
  uint64_t v36 = &v31[v34];
  char v37 = v36[8];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v37;
  uint64_t v38 = v12[6];
  uint64_t v39 = &v30[v38];
  uint64_t v40 = &v31[v38];
  char v41 = v40[8];
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v41;
  uint64_t v42 = v12[7];
  uint64_t v43 = &v30[v42];
  uint64_t v44 = &v31[v42];
  char v45 = v44[8];
  *(void *)uint64_t v43 = *(void *)v44;
  v43[8] = v45;
  (*(void (**)(char *, void, uint64_t, int *))(v74 + 56))(v30, 0, 1, v12);
LABEL_13:
  a1[a3[8]] = *((unsigned char *)a2 + a3[8]);
  a1[a3[9]] = *((unsigned char *)a2 + a3[9]);
  return a1;
}

void *initializeWithTake for CLP_LogEntry_PrivateData_MapMatchingRouteHint(void *a1, char *a2, int *a3)
{
  *a1 = *(void *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v42 = a3;
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = &a2[v11];
  int v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    uint64_t v18 = v14[5];
    char v19 = &v12[v18];
    uint64_t v20 = &v13[v18];
    *(void *)char v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v14[6];
    uint64_t v22 = &v12[v21];
    char v23 = &v13[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v14[7];
    uint64_t v25 = &v12[v24];
    uint64_t v26 = &v13[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v27 = v42[7];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = &a2[v27];
  if (v16(&a2[v27], 1, v14))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v10(v28, v29, v9);
    uint64_t v31 = v14[5];
    int v32 = &v28[v31];
    int v33 = &v29[v31];
    *(void *)int v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v14[6];
    uint64_t v35 = &v28[v34];
    uint64_t v36 = &v29[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    uint64_t v37 = v14[7];
    uint64_t v38 = &v28[v37];
    uint64_t v39 = &v29[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v28, 0, 1, v14);
  }
  uint64_t v40 = v42[9];
  *((unsigned char *)a1 + v42[8]) = a2[v42[8]];
  *((unsigned char *)a1 + v40) = a2[v40];
  return a1;
}

char *assignWithTake for CLP_LogEntry_PrivateData_MapMatchingRouteHint(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v64 = type metadata accessor for UnknownStorage();
  uint64_t v61 = *(void (**)(char *, char *))(*(void *)(v64 - 8) + 40);
  uint64_t v62 = *(void *)(v64 - 8);
  v61(v7, v8);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v63 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v63 + 48);
  int v14 = v13(v10, 1, v12);
  int v15 = v13(v11, 1, v12);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v10, v11, v64);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      char v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)char v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v61)(v10, v11, v64);
  uint64_t v43 = v12[5];
  uint64_t v44 = &v10[v43];
  char v45 = &v11[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v45[8];
  uint64_t v46 = v12[6];
  char v47 = &v10[v46];
  uint64_t v48 = &v11[v46];
  *(void *)char v47 = *(void *)v48;
  v47[8] = v48[8];
  uint64_t v49 = v12[7];
  uint64_t v50 = &v10[v49];
  char v51 = &v11[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
LABEL_7:
  uint64_t v26 = a3[7];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = (char *)a2 + v26;
  int v29 = v13(&a1[v26], 1, v12);
  int v30 = v13(v28, 1, v12);
  if (!v29)
  {
    if (!v30)
    {
      ((void (*)(char *, char *, uint64_t))v61)(v27, v28, v64);
      uint64_t v52 = v12[5];
      size_t v53 = &v27[v52];
      uint64_t v54 = &v28[v52];
      *(void *)size_t v53 = *(void *)v54;
      v53[8] = v54[8];
      uint64_t v55 = v12[6];
      uint64_t v56 = &v27[v55];
      uint64_t v57 = &v28[v55];
      *(void *)uint64_t v56 = *(void *)v57;
      v56[8] = v57[8];
      uint64_t v58 = v12[7];
      char v59 = &v27[v58];
      uint64_t v60 = &v28[v58];
      *(void *)char v59 = *(void *)v60;
      v59[8] = v60[8];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v27, v28, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v27, v28, v64);
  uint64_t v31 = v12[5];
  int v32 = &v27[v31];
  int v33 = &v28[v31];
  *(void *)int v32 = *(void *)v33;
  v32[8] = v33[8];
  uint64_t v34 = v12[6];
  uint64_t v35 = &v27[v34];
  uint64_t v36 = &v28[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  uint64_t v37 = v12[7];
  uint64_t v38 = &v27[v37];
  uint64_t v39 = &v28[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = v39[8];
  (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v27, 0, 1, v12);
LABEL_13:
  uint64_t v41 = a3[9];
  a1[a3[8]] = *((unsigned char *)a2 + a3[8]);
  a1[v41] = *((unsigned char *)a2 + v41);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_483Tm_2);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_484Tm_2);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientSatelliteConstellation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F4E564);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(void *a1, char *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *(void *)a2;
  *a1 = *(void *)a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = *((void *)a2 + 1);
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    int v14 = (char *)v7 + v13;
    int v15 = &a2[v13];
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v17 = *((void *)v16 - 1);
    uint64_t v50 = *(unsigned int (**)(char *, uint64_t, int *))(v17 + 48);
    if (v50(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      uint64_t v19 = v16[5];
      uint64_t v20 = &v14[v19];
      uint64_t v21 = &v15[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v16[6];
      char v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      *(void *)char v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v16[7];
      uint64_t v26 = &v14[v25];
      uint64_t v27 = &v15[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v28 = a3[8];
    int v29 = (char *)v7 + v28;
    int v30 = &a2[v28];
    if (v50(&a2[v28], 1, v16))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v12(v29, v30, v11);
      uint64_t v32 = v16[5];
      int v33 = &v29[v32];
      uint64_t v34 = &v30[v32];
      *(void *)int v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = v16[6];
      uint64_t v36 = &v29[v35];
      uint64_t v37 = &v30[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      uint64_t v38 = v16[7];
      uint64_t v39 = &v29[v38];
      uint64_t v40 = &v30[v38];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v29, 0, 1, v16);
    }
    uint64_t v41 = a3[9];
    uint64_t v42 = a3[10];
    uint64_t v43 = (char *)v7 + v41;
    uint64_t v44 = &a2[v41];
    *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
    v43[4] = v44[4];
    *((unsigned char *)v7 + v42) = a2[v42];
    uint64_t v45 = a3[11];
    uint64_t v46 = a3[12];
    char v47 = (char *)v7 + v45;
    uint64_t v48 = &a2[v45];
    *(_DWORD *)char v47 = *(_DWORD *)v48;
    v47[4] = v48[4];
    *((unsigned char *)v7 + v46) = a2[v46];
    *((unsigned char *)v7 + a3[13]) = a2[a3[13]];
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7)) {
    v11(v6, v5);
  }
  uint64_t v9 = a1 + a2[8];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v7);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(void *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  int v14 = &a2[v12];
  int v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v49 = *(unsigned int (**)(char *, uint64_t, int *))(v16 + 48);
  if (v49(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    uint64_t v22 = &v13[v21];
    char v23 = &v14[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v27 = a3[8];
  uint64_t v28 = (char *)a1 + v27;
  int v29 = &a2[v27];
  if (v49(&a2[v27], 1, v15))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v11(v28, v29, v10);
    uint64_t v31 = v15[5];
    uint64_t v32 = &v28[v31];
    int v33 = &v29[v31];
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v15[6];
    uint64_t v35 = &v28[v34];
    uint64_t v36 = &v29[v34];
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    uint64_t v37 = v15[7];
    uint64_t v38 = &v28[v37];
    uint64_t v39 = &v29[v37];
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v28, 0, 1, v15);
  }
  uint64_t v40 = a3[9];
  uint64_t v41 = a3[10];
  uint64_t v42 = (char *)a1 + v40;
  uint64_t v43 = &a2[v40];
  *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
  v42[4] = v43[4];
  *((unsigned char *)a1 + v41) = a2[v41];
  uint64_t v44 = a3[11];
  uint64_t v45 = a3[12];
  uint64_t v46 = (char *)a1 + v44;
  char v47 = &a2[v44];
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  v46[4] = v47[4];
  *((unsigned char *)a1 + v45) = a2[v45];
  *((unsigned char *)a1 + a3[13]) = a2[a3[13]];
  return a1;
}

char *assignWithCopy for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v83 = type metadata accessor for UnknownStorage();
  uint64_t v80 = *(void (**)(char *, char *))(*(void *)(v83 - 8) + 24);
  uint64_t v81 = *(void *)(v83 - 8);
  v80(v7, v8);
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v82 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v82 + 48);
  int v14 = v13(v10, 1, v12);
  int v15 = v13(v11, 1, v12);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v10, v11, v83);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      char v19 = v18[8];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v19;
      uint64_t v20 = v12[6];
      uint64_t v21 = &v10[v20];
      uint64_t v22 = &v11[v20];
      char v23 = v22[8];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v23;
      uint64_t v24 = v12[7];
      uint64_t v25 = &v10[v24];
      uint64_t v26 = &v11[v24];
      char v27 = v26[8];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v27;
      (*(void (**)(char *, void, uint64_t, int *))(v82 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v80)(v10, v11, v83);
  uint64_t v56 = v12[5];
  uint64_t v57 = &v10[v56];
  uint64_t v58 = &v11[v56];
  char v59 = v58[8];
  *(void *)uint64_t v57 = *(void *)v58;
  v57[8] = v59;
  uint64_t v60 = v12[6];
  uint64_t v61 = &v10[v60];
  uint64_t v62 = &v11[v60];
  char v63 = v62[8];
  *(void *)uint64_t v61 = *(void *)v62;
  v61[8] = v63;
  uint64_t v64 = v12[7];
  char v65 = &v10[v64];
  uint64_t v66 = &v11[v64];
  char v67 = v66[8];
  *(void *)char v65 = *(void *)v66;
  v65[8] = v67;
LABEL_7:
  uint64_t v29 = a3[8];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (char *)a2 + v29;
  int v32 = v13(&a1[v29], 1, v12);
  int v33 = v13(v31, 1, v12);
  if (!v32)
  {
    if (!v33)
    {
      ((void (*)(char *, char *, uint64_t))v80)(v30, v31, v83);
      uint64_t v68 = v12[5];
      char v69 = &v30[v68];
      uint64_t v70 = &v31[v68];
      char v71 = v70[8];
      *(void *)char v69 = *(void *)v70;
      v69[8] = v71;
      uint64_t v72 = v12[6];
      uint64_t v73 = &v30[v72];
      uint64_t v74 = &v31[v72];
      char v75 = v74[8];
      *(void *)uint64_t v73 = *(void *)v74;
      v73[8] = v75;
      uint64_t v76 = v12[7];
      uint64_t v77 = &v30[v76];
      uint64_t v78 = &v31[v76];
      char v79 = v78[8];
      *(void *)uint64_t v77 = *(void *)v78;
      v77[8] = v79;
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v30, v31, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v30, v31, v83);
  uint64_t v34 = v12[5];
  uint64_t v35 = &v30[v34];
  uint64_t v36 = &v31[v34];
  char v37 = v36[8];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v37;
  uint64_t v38 = v12[6];
  uint64_t v39 = &v30[v38];
  uint64_t v40 = &v31[v38];
  char v41 = v40[8];
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v41;
  uint64_t v42 = v12[7];
  uint64_t v43 = &v30[v42];
  uint64_t v44 = &v31[v42];
  char v45 = v44[8];
  *(void *)uint64_t v43 = *(void *)v44;
  v43[8] = v45;
  (*(void (**)(char *, void, uint64_t, int *))(v82 + 56))(v30, 0, 1, v12);
LABEL_13:
  uint64_t v47 = a3[9];
  uint64_t v48 = &a1[v47];
  uint64_t v49 = (char *)a2 + v47;
  int v50 = *(_DWORD *)v49;
  v48[4] = v49[4];
  *(_DWORD *)uint64_t v48 = v50;
  a1[a3[10]] = *((unsigned char *)a2 + a3[10]);
  uint64_t v51 = a3[11];
  uint64_t v52 = &a1[v51];
  size_t v53 = (char *)a2 + v51;
  int v54 = *(_DWORD *)v53;
  v52[4] = v53[4];
  *(_DWORD *)uint64_t v52 = v54;
  a1[a3[12]] = *((unsigned char *)a2 + a3[12]);
  a1[a3[13]] = *((unsigned char *)a2 + a3[13]);
  return a1;
}

_OWORD *initializeWithTake for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(_OWORD *a1, char *a2, int *a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = &a2[v11];
  int v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v48(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    char v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v26 = a3[8];
  char v27 = (char *)a1 + v26;
  uint64_t v28 = &a2[v26];
  if (v48(&a2[v26], 1, v14))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v10(v27, v28, v9);
    uint64_t v30 = v14[5];
    uint64_t v31 = &v27[v30];
    int v32 = &v28[v30];
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = v14[6];
    uint64_t v34 = &v27[v33];
    uint64_t v35 = &v28[v33];
    *(void *)uint64_t v34 = *(void *)v35;
    v34[8] = v35[8];
    uint64_t v36 = v14[7];
    char v37 = &v27[v36];
    uint64_t v38 = &v28[v36];
    *(void *)char v37 = *(void *)v38;
    v37[8] = v38[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v27, 0, 1, v14);
  }
  uint64_t v39 = a3[9];
  uint64_t v40 = a3[10];
  char v41 = (char *)a1 + v39;
  uint64_t v42 = &a2[v39];
  *(_DWORD *)char v41 = *(_DWORD *)v42;
  v41[4] = v42[4];
  *((unsigned char *)a1 + v40) = a2[v40];
  uint64_t v43 = a3[11];
  uint64_t v44 = a3[12];
  char v45 = (char *)a1 + v43;
  uint64_t v46 = &a2[v43];
  *(_DWORD *)char v45 = *(_DWORD *)v46;
  v45[4] = v46[4];
  *((unsigned char *)a1 + v44) = a2[v44];
  *((unsigned char *)a1 + a3[13]) = a2[a3[13]];
  return a1;
}

char *assignWithTake for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  swift_bridgeObjectRelease();
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v71 = type metadata accessor for UnknownStorage();
  uint64_t v68 = *(void (**)(char *, char *))(*(void *)(v71 - 8) + 40);
  uint64_t v69 = *(void *)(v71 - 8);
  v68(v7, v8);
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v70 = *((void *)v12 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v70 + 48);
  int v14 = v13(v10, 1, v12);
  int v15 = v13(v11, 1, v12);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v10, v11, v71);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v70 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v68)(v10, v11, v71);
  uint64_t v50 = v12[5];
  uint64_t v51 = &v10[v50];
  uint64_t v52 = &v11[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = v52[8];
  uint64_t v53 = v12[6];
  int v54 = &v10[v53];
  uint64_t v55 = &v11[v53];
  *(void *)int v54 = *(void *)v55;
  v54[8] = v55[8];
  uint64_t v56 = v12[7];
  uint64_t v57 = &v10[v56];
  uint64_t v58 = &v11[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  v57[8] = v58[8];
LABEL_7:
  uint64_t v26 = a3[8];
  char v27 = &a1[v26];
  uint64_t v28 = (char *)a2 + v26;
  int v29 = v13(&a1[v26], 1, v12);
  int v30 = v13(v28, 1, v12);
  if (!v29)
  {
    if (!v30)
    {
      ((void (*)(char *, char *, uint64_t))v68)(v27, v28, v71);
      uint64_t v59 = v12[5];
      uint64_t v60 = &v27[v59];
      uint64_t v61 = &v28[v59];
      *(void *)uint64_t v60 = *(void *)v61;
      v60[8] = v61[8];
      uint64_t v62 = v12[6];
      char v63 = &v27[v62];
      uint64_t v64 = &v28[v62];
      *(void *)char v63 = *(void *)v64;
      v63[8] = v64[8];
      uint64_t v65 = v12[7];
      uint64_t v66 = &v27[v65];
      char v67 = &v28[v65];
      *(void *)uint64_t v66 = *(void *)v67;
      v66[8] = v67[8];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v27, v28, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v27, v28, v71);
  uint64_t v31 = v12[5];
  int v32 = &v27[v31];
  uint64_t v33 = &v28[v31];
  *(void *)int v32 = *(void *)v33;
  v32[8] = v33[8];
  uint64_t v34 = v12[6];
  uint64_t v35 = &v27[v34];
  uint64_t v36 = &v28[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  uint64_t v37 = v12[7];
  uint64_t v38 = &v27[v37];
  uint64_t v39 = &v28[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = v39[8];
  (*(void (**)(char *, void, uint64_t, int *))(v70 + 56))(v27, 0, 1, v12);
LABEL_13:
  uint64_t v41 = a3[9];
  uint64_t v42 = a3[10];
  uint64_t v43 = &a1[v41];
  uint64_t v44 = (char *)a2 + v41;
  *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
  v43[4] = v44[4];
  a1[v42] = *((unsigned char *)a2 + v42);
  uint64_t v45 = a3[11];
  uint64_t v46 = a3[12];
  uint64_t v47 = &a1[v45];
  uint64_t v48 = (char *)a2 + v45;
  *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
  v47[4] = v48[4];
  a1[v46] = *((unsigned char *)a2 + v46);
  a1[a3[13]] = *((unsigned char *)a2 + a3[13]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F4FA74);
}

uint64_t sub_246F4FA74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      int v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F4FBB8);
}

void *sub_246F4FBB8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      int v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F4FF6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType()
{
  return &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReachabilityState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_240Tm_2);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReachabilityState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_241Tm_2);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReachabilityState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Battery(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v12 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
    uint64_t v13 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    int v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    v14[4] = v15[4];
    *(_DWORD *)int v14 = *(_DWORD *)v15;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v11 = a3[10];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F50468);
}

uint64_t __swift_get_extra_inhabitant_index_573Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F5055C);
}

uint64_t __swift_store_extra_inhabitant_index_574Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_Battery()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_14);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_14);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *uint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F50860);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SignalEnvironment(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    unsigned int v10 = &a1[v9];
    int v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v25] = a2[v25];
    uint64_t v26 = a3[8];
    char v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    *(_DWORD *)char v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  unsigned int v10 = (char *)(a2 + v8);
  int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  uint64_t v49 = a3;
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v48 = a2;
  unsigned int v10 = (char *)(a2 + v8);
  int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  uint64_t v47 = v9;
  LODWORD(v9) = v13(v9, 1, v11);
  int v14 = v13((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v47, v10, v6);
      uint64_t v17 = v11[5];
      uint64_t v18 = v47 + v17;
      uint64_t v19 = &v10[v17];
      char v20 = v19[8];
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v20;
      uint64_t v21 = v11[6];
      uint64_t v22 = v47 + v21;
      uint64_t v23 = &v10[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v24;
      uint64_t v25 = v11[7];
      uint64_t v26 = v47 + v25;
      char v27 = &v10[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(unsigned char *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v47, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v47;
  }
  else
  {
    if (!v14)
    {
      v7(v47, (uint64_t)v10, v6);
      uint64_t v29 = v11[5];
      uint64_t v30 = v47 + v29;
      uint64_t v31 = &v10[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v32;
      uint64_t v33 = v11[6];
      uint64_t v34 = v47 + v33;
      uint64_t v35 = &v10[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(unsigned char *)(v34 + 8) = v36;
      uint64_t v37 = v11[7];
      uint64_t v38 = v47 + v37;
      uint64_t v39 = &v10[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(unsigned char *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v47;
  }
  memcpy(v16, v10, v15);
LABEL_9:
  *(unsigned char *)(a1 + v49[6]) = *(unsigned char *)(v48 + v49[6]);
  *(unsigned char *)(a1 + v49[7]) = *(unsigned char *)(v48 + v49[7]);
  uint64_t v41 = v49[8];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = (int *)(v48 + v41);
  int v44 = *v43;
  *(unsigned char *)(v42 + 4) = *((unsigned char *)v43 + 4);
  *(_DWORD *)uint64_t v42 = v44;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  unsigned int v10 = (char *)(a2 + v8);
  int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    size_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)size_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 40);
  v7(a1, a2, v6);
  uint64_t v43 = a3;
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v42 = a2;
  unsigned int v10 = (char *)(a2 + v8);
  int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  uint64_t v41 = v9;
  LODWORD(v9) = v13(v9, 1, v11);
  int v14 = v13((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v41, v10, v6);
      uint64_t v17 = v11[5];
      uint64_t v18 = v41 + v17;
      uint64_t v19 = &v10[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v19[8];
      uint64_t v20 = v11[6];
      uint64_t v21 = v41 + v20;
      uint64_t v22 = &v10[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      *(unsigned char *)(v21 + 8) = v22[8];
      uint64_t v23 = v11[7];
      uint64_t v24 = v41 + v23;
      uint64_t v25 = &v10[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      *(unsigned char *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v41, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v41;
  }
  else
  {
    if (!v14)
    {
      v7(v41, (uint64_t)v10, v6);
      uint64_t v26 = v11[5];
      uint64_t v27 = v41 + v26;
      char v28 = &v10[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      *(unsigned char *)(v27 + 8) = v28[8];
      uint64_t v29 = v11[6];
      uint64_t v30 = v41 + v29;
      uint64_t v31 = &v10[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v31[8];
      uint64_t v32 = v11[7];
      uint64_t v33 = v41 + v32;
      uint64_t v34 = &v10[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *(unsigned char *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v41;
  }
  memcpy(v16, v10, v15);
LABEL_9:
  uint64_t v35 = v43[7];
  *(unsigned char *)(a1 + v43[6]) = *(unsigned char *)(v42 + v43[6]);
  *(unsigned char *)(a1 + v35) = *(unsigned char *)(v42 + v35);
  uint64_t v36 = v43[8];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = v42 + v36;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F514D8);
}

uint64_t sub_246F514D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 8u) {
    int v14 = 8;
  }
  else {
    int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  }
  unsigned int v15 = v14 - 8;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 8u) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F5160C);
}

uint64_t sub_246F5160C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 8;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SignalEnvironment()
{
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F51804);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType()
{
  return &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F51850);
}

uint64_t sub_246F51850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 4u) {
      int v10 = 4;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    }
    unsigned int v11 = v10 - 4;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 4u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F5192C);
}

uint64_t sub_246F5192C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 24);
  v7(a1, a2, v6);
  uint64_t v56 = a3;
  uint64_t v57 = a2;
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  int v10 = (char *)(a2 + v8);
  unsigned int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  uint64_t v55 = v9;
  LODWORD(v9) = v13(v9, 1, v11);
  int v14 = v13((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v55, v10, v6);
      uint64_t v17 = v11[5];
      uint64_t v18 = v55 + v17;
      uint64_t v19 = &v10[v17];
      char v20 = v19[8];
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v20;
      uint64_t v21 = v11[6];
      uint64_t v22 = v55 + v21;
      uint64_t v23 = &v10[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v24;
      uint64_t v25 = v11[7];
      uint64_t v26 = v55 + v25;
      uint64_t v27 = &v10[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(unsigned char *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v55, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v55;
  }
  else
  {
    if (!v14)
    {
      v7(v55, (uint64_t)v10, v6);
      uint64_t v29 = v11[5];
      uint64_t v30 = v55 + v29;
      uint64_t v31 = &v10[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v32;
      uint64_t v33 = v11[6];
      uint64_t v34 = v55 + v33;
      uint64_t v35 = &v10[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(unsigned char *)(v34 + 8) = v36;
      uint64_t v37 = v11[7];
      uint64_t v38 = v55 + v37;
      uint64_t v39 = &v10[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(unsigned char *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v55;
  }
  memcpy(v16, v10, v15);
LABEL_9:
  uint64_t v41 = v56[6];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = (int *)(v57 + v41);
  int v44 = *v43;
  *(unsigned char *)(v42 + 4) = *((unsigned char *)v43 + 4);
  *(_DWORD *)uint64_t v42 = v44;
  uint64_t v45 = v56[7];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = (int *)(v57 + v45);
  int v48 = *v47;
  *(unsigned char *)(v46 + 4) = *((unsigned char *)v47 + 4);
  *(_DWORD *)uint64_t v46 = v48;
  uint64_t v49 = v56[8];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = (int *)(v57 + v49);
  int v52 = *v51;
  *(unsigned char *)(v50 + 4) = *((unsigned char *)v51 + 4);
  *(_DWORD *)uint64_t v50 = v52;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 40);
  v7(a1, a2, v6);
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  int v10 = (char *)(a2 + v8);
  unsigned int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  uint64_t v46 = v9;
  LODWORD(v9) = v13(v9, 1, v11);
  int v14 = v13((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v46, v10, v6);
      uint64_t v17 = v11[5];
      uint64_t v18 = v46 + v17;
      uint64_t v19 = &v10[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v19[8];
      uint64_t v20 = v11[6];
      uint64_t v21 = v46 + v20;
      uint64_t v22 = &v10[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      *(unsigned char *)(v21 + 8) = v22[8];
      uint64_t v23 = v11[7];
      uint64_t v24 = v46 + v23;
      uint64_t v25 = &v10[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      *(unsigned char *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v46, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v46;
  }
  else
  {
    if (!v14)
    {
      v7(v46, (uint64_t)v10, v6);
      uint64_t v26 = v11[5];
      uint64_t v27 = v46 + v26;
      char v28 = &v10[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      *(unsigned char *)(v27 + 8) = v28[8];
      uint64_t v29 = v11[6];
      uint64_t v30 = v46 + v29;
      uint64_t v31 = &v10[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v31[8];
      uint64_t v32 = v11[7];
      uint64_t v33 = v46 + v32;
      uint64_t v34 = &v10[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *(unsigned char *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v46, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v46;
  }
  memcpy(v16, v10, v15);
LABEL_9:
  uint64_t v35 = v47[6];
  uint64_t v36 = v47[7];
  uint64_t v37 = a1 + v35;
  uint64_t v38 = v48 + v35;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
  uint64_t v39 = a1 + v36;
  uint64_t v40 = v48 + v36;
  *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
  *(unsigned char *)(v39 + 4) = *(unsigned char *)(v40 + 4);
  uint64_t v41 = v47[8];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = v48 + v41;
  *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
  *(unsigned char *)(v42 + 4) = *(unsigned char *)(v43 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MagSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F52074);
}

uint64_t sub_246F52074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_480Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MagSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F52094);
}

uint64_t sub_246F52094(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_481Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_483Tm_3);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_484Tm_3);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Timer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    int v10 = (char *)a1 + v9;
    unsigned int v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  unsigned int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v43 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  unsigned int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v30 = v11[5];
      uint64_t v31 = &v9[v30];
      uint64_t v32 = &v10[v30];
      char v33 = v32[8];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v33;
      uint64_t v34 = v11[6];
      uint64_t v35 = &v9[v34];
      uint64_t v36 = &v10[v34];
      char v37 = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v37;
      uint64_t v38 = v11[7];
      uint64_t v39 = &v9[v38];
      uint64_t v40 = &v10[v38];
      char v41 = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v41;
      return v43;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v28 - 8) + 64));
    return v43;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = v11[6];
  uint64_t v21 = &v9[v20];
  uint64_t v22 = &v10[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v11[7];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return v43;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  unsigned int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    char v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v37 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  unsigned int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v27 = v11[5];
      uint64_t v28 = &v9[v27];
      uint64_t v29 = &v10[v27];
      *(void *)uint64_t v28 = *(void *)v29;
      v28[8] = v29[8];
      uint64_t v30 = v11[6];
      uint64_t v31 = &v9[v30];
      uint64_t v32 = &v10[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v11[7];
      uint64_t v34 = &v9[v33];
      uint64_t v35 = &v10[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      return v37;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v25 - 8) + 64));
    return v37;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = v11[6];
  uint64_t v20 = &v9[v19];
  uint64_t v21 = &v10[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v11[7];
  char v23 = &v9[v22];
  uint64_t v24 = &v10[v22];
  *(void *)char v23 = *(void *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return v37;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F52B6C);
}

uint64_t sub_246F52B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_480Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F52B8C);
}

uint64_t sub_246F52B8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_481Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccelerometerPace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_17);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccelerometerPace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_17);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_FalseStepDetectorState(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v10 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    uint64_t v11 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_8);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_ClientSatelliteInfo();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_15);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_15);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F531D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_StepCount(uint64_t *a1, uint64_t *a2, int *a3)
{
  return initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t destroy for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_MotionState(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t *a6)
{
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v60 = *(void *)(v9 - 8);
  uint64_t v62 = v9;
  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v60 + 24);
  v59(a1, a2);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v14 = *((void *)v13 - 1);
  int v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v11, v12, v62);
      uint64_t v18 = v13[5];
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      char v21 = v20[8];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v21;
      uint64_t v22 = v13[6];
      char v23 = &v11[v22];
      uint64_t v24 = &v12[v22];
      char v25 = v24[8];
      *(void *)char v23 = *(void *)v24;
      v23[8] = v25;
      uint64_t v26 = v13[7];
      uint64_t v27 = &v11[v26];
      uint64_t v28 = &v12[v26];
      char v29 = v28[8];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v29;
      (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v11, v12, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v59)(v11, v12, v62);
  uint64_t v46 = v13[5];
  uint64_t v47 = &v11[v46];
  uint64_t v48 = &v12[v46];
  char v49 = v48[8];
  *(void *)uint64_t v47 = *(void *)v48;
  v47[8] = v49;
  uint64_t v50 = v13[6];
  uint64_t v51 = &v11[v50];
  int v52 = &v12[v50];
  char v53 = v52[8];
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = v53;
  uint64_t v54 = v13[7];
  uint64_t v55 = &v11[v54];
  uint64_t v56 = &v12[v54];
  char v57 = v56[8];
  *(void *)uint64_t v55 = *(void *)v56;
  v55[8] = v57;
LABEL_7:
  uint64_t v31 = a3[6];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = (int *)(a2 + v31);
  int v34 = *v33;
  *(unsigned char *)(v32 + 4) = *((unsigned char *)v33 + 4);
  *(_DWORD *)uint64_t v32 = v34;
  uint64_t v35 = a3[7];
  uint64_t v36 = (char *)(a1 + v35);
  uint64_t v37 = (char *)(a2 + v35);
  uint64_t v38 = a4(0);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  int v41 = v40(v36, 1, v38);
  int v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      ((void (*)(char *, char *, uint64_t))v59)(v36, v37, v62);
      *(void *)&v36[*(int *)(v38 + 20)] = *(void *)&v37[*(int *)(v38 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v36, a5);
    goto LABEL_12;
  }
  if (v42)
  {
LABEL_12:
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(a6);
    memcpy(v36, v37, *(void *)(*(void *)(v44 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v36, v37, v62);
  *(void *)&v36[*(int *)(v38 + 20)] = *(void *)&v37[*(int *)(v38 + 20)];
  uint64_t v43 = *(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56);
  swift_retain();
  v43(v36, 0, 1, v38);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t *a6)
{
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v52 + 40);
  v51(a1, a2);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v14 = *((void *)v13 - 1);
  int v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v11, v12, v54);
      uint64_t v18 = v13[5];
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v13[6];
      uint64_t v22 = &v11[v21];
      char v23 = &v12[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v23[8];
      uint64_t v24 = v13[7];
      char v25 = &v11[v24];
      uint64_t v26 = &v12[v24];
      *(void *)char v25 = *(void *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v11, v12, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v51)(v11, v12, v54);
  uint64_t v41 = v13[5];
  int v42 = &v11[v41];
  uint64_t v43 = &v12[v41];
  *(void *)int v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = v13[6];
  uint64_t v45 = &v11[v44];
  uint64_t v46 = &v12[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v47 = v13[7];
  uint64_t v48 = &v11[v47];
  char v49 = &v12[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = a3[7];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  uint64_t v32 = (char *)(a1 + v29);
  uint64_t v33 = (char *)(a2 + v29);
  uint64_t v34 = a4(0);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      ((void (*)(char *, char *, uint64_t))v51)(v32, v33, v54);
      *(void *)&v32[*(int *)(v34 + 20)] = *(void *)&v33[*(int *)(v34 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v32, a5);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(a6);
    memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v32, v33, v54);
  *(void *)&v32[*(int *)(v34 + 20)] = *(void *)&v33[*(int *)(v34 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F53B3C);
}

uint64_t sub_246F53B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_633Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t __swift_get_extra_inhabitant_index_633Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a2)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a4);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a3 + 28);
  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F53CB0);
}

uint64_t sub_246F53CB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_634Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t __swift_store_extra_inhabitant_index_634Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v14 = a1;
LABEL_5:
    return v13(v14, a2, a2, v12);
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v16 = *(void *)(v15 - 8);
  if (*(_DWORD *)(v16 + 84) == a3)
  {
    uint64_t v12 = v15;
    uint64_t v14 = a1 + *(int *)(a4 + 20);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    goto LABEL_5;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + *(int *)(a4 + 28);
  return v19(v21, a2, a2, v20);
}

void type metadata completion function for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v8 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, a4, a5);
      if (v9 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeVector3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_18);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeVector3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_18);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_TimeStamp();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_19);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_19);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_16);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_16);
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_CompassTypeSample(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    unint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      int v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)int v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      char v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)char v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      v8(v26, v27, v7);
      *(void *)&v26[*(int *)(v28 + 20)] = *(void *)&v27[*(int *)(v28 + 20)];
      uint64_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56);
      swift_retain();
      v31(v26, 0, 1, v28);
    }
    uint64_t v32 = a3[7];
    uint64_t v33 = a3[8];
    uint64_t v34 = &a1[v32];
    uint64_t v35 = &a2[v32];
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
    uint64_t v36 = &a1[v33];
    int v37 = &a2[v33];
    *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
    v36[4] = v37[4];
    a1[a3[9]] = a2[a3[9]];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7)) {
    v5(v6, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    v5(v8, v4);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(void *)&v24[*(int *)(v26 + 20)] = *(void *)&v25[*(int *)(v26 + 20)];
    uint64_t v29 = *(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56);
    swift_retain();
    v29(v24, 0, 1, v26);
  }
  uint64_t v30 = a3[7];
  uint64_t v31 = a3[8];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = *(unsigned char *)(v33 + 4);
  uint64_t v34 = a1 + v31;
  uint64_t v35 = a2 + v31;
  *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
  *(unsigned char *)(v34 + 4) = *(unsigned char *)(v35 + 4);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v60 + 24);
  v59(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v8, v9, v61);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v59)(v8, v9, v61);
  uint64_t v47 = v10[5];
  uint64_t v48 = &v8[v47];
  char v49 = &v9[v47];
  char v50 = v49[8];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v50;
  uint64_t v51 = v10[6];
  uint64_t v52 = &v8[v51];
  char v53 = &v9[v51];
  char v54 = v53[8];
  *(void *)uint64_t v52 = *(void *)v53;
  v52[8] = v54;
  uint64_t v55 = v10[7];
  uint64_t v56 = &v8[v55];
  char v57 = &v9[v55];
  char v58 = v57[8];
  *(void *)uint64_t v56 = *(void *)v57;
  v56[8] = v58;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      ((void (*)(char *, char *, uint64_t))v59)(v29, v30, v61);
      *(void *)&v29[*(int *)(v31 + 20)] = *(void *)&v30[*(int *)(v31 + 20)];
      swift_retain();
      swift_release();
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    memcpy(v29, v30, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v29, v30, v61);
  *(void *)&v29[*(int *)(v31 + 20)] = *(void *)&v30[*(int *)(v31 + 20)];
  uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56);
  swift_retain();
  v36(v29, 0, 1, v31);
LABEL_13:
  uint64_t v38 = a3[7];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = (int *)(a2 + v38);
  int v41 = *v40;
  *(unsigned char *)(v39 + 4) = *((unsigned char *)v40 + 4);
  *(_DWORD *)uint64_t v39 = v41;
  uint64_t v42 = a3[8];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = (int *)(a2 + v42);
  int v45 = *v44;
  *(unsigned char *)(v43 + 4) = *((unsigned char *)v44 + 4);
  *(_DWORD *)uint64_t v43 = v45;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(void *)&v24[*(int *)(v26 + 20)] = *(void *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = a3[7];
  uint64_t v30 = a3[8];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  char v50 = *(void (**)(uint64_t, uint64_t))(v51 + 40);
  v50(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v8, v9, v52);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v50)(v8, v9, v52);
  uint64_t v41 = v10[5];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = v10[6];
  int v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  *(void *)int v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v47 = v10[7];
  uint64_t v48 = &v8[v47];
  char v49 = &v9[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = (char *)(a1 + v25);
  uint64_t v27 = (char *)(a2 + v25);
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      ((void (*)(char *, char *, uint64_t))v50)(v26, v27, v52);
      *(void *)&v26[*(int *)(v28 + 20)] = *(void *)&v27[*(int *)(v28 + 20)];
      swift_release();
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v26, v27, v52);
  *(void *)&v26[*(int *)(v28 + 20)] = *(void *)&v27[*(int *)(v28 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_13:
  uint64_t v34 = a3[7];
  uint64_t v35 = a3[8];
  uint64_t v36 = a1 + v34;
  uint64_t v37 = a2 + v34;
  *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
  *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
  uint64_t v38 = a1 + v35;
  uint64_t v39 = a2 + v35;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  *(unsigned char *)(v38 + 4) = *(unsigned char *)(v39 + 4);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F553BC);
}

uint64_t sub_246F553BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  unsigned int v16 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v16 >= 2) {
    int v17 = ((v16 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v17 = -2;
  }
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F55554);
}

uint64_t sub_246F55554(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(unsigned char *)(a1 + a4[9]) = a2 + 2;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_CompassTypeSample()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Compass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_483Tm_4);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Compass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_484Tm_4);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_17);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_17);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_20);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_20);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_DeviceMotionSample(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    char v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      int v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)int v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      v8(v26, v27, v7);
      *(void *)&v26[*(int *)(v28 + 20)] = *(void *)&v27[*(int *)(v28 + 20)];
      int v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56);
      swift_retain();
      v31(v26, 0, 1, v28);
    }
    uint64_t v32 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    uint64_t v33 = &a1[v32];
    uint64_t v34 = &a2[v32];
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    uint64_t v35 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    uint64_t v36 = &a1[v35];
    uint64_t v37 = &a2[v35];
    uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      v8(v36, v37, v7);
      uint64_t v41 = *(int *)(v38 + 20);
      uint64_t v42 = &v36[v41];
      uint64_t v43 = &v37[v41];
      *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
      v42[4] = v43[4];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    uint64_t v44 = a3[11];
    uint64_t v45 = a3[12];
    uint64_t v46 = &a1[v44];
    uint64_t v47 = &a2[v44];
    *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
    v46[4] = v47[4];
    uint64_t v48 = &a1[v45];
    char v49 = &a2[v45];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6)) {
    v12(v5, v4);
  }
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v12(v7, v4);
    swift_release();
  }
  uint64_t v9 = a1 + a2[10];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(void *)&v24[*(int *)(v26 + 20)] = *(void *)&v25[*(int *)(v26 + 20)];
    uint64_t v29 = *(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56);
    swift_retain();
    v29(v24, 0, 1, v26);
  }
  uint64_t v30 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v34 = (char *)(a1 + v33);
  uint64_t v35 = (char *)(a2 + v33);
  uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v34, (uint64_t)v35, v6);
    uint64_t v39 = *(int *)(v36 + 20);
    uint64_t v40 = &v34[v39];
    uint64_t v41 = &v35[v39];
    *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
    v40[4] = v41[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  uint64_t v42 = a3[11];
  uint64_t v43 = a3[12];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = a2 + v42;
  *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
  *(unsigned char *)(v44 + 4) = *(unsigned char *)(v45 + 4);
  uint64_t v46 = a1 + v43;
  uint64_t v47 = a2 + v43;
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  *(unsigned char *)(v46 + 4) = *(unsigned char *)(v47 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v81 + 24);
  v80(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v8, v9, v82);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v80)(v8, v9, v82);
  uint64_t v64 = v10[5];
  uint64_t v65 = &v8[v64];
  uint64_t v66 = &v9[v64];
  char v67 = v66[8];
  *(void *)uint64_t v65 = *(void *)v66;
  v65[8] = v67;
  uint64_t v68 = v10[6];
  uint64_t v69 = &v8[v68];
  uint64_t v70 = &v9[v68];
  char v71 = v70[8];
  *(void *)uint64_t v69 = *(void *)v70;
  v69[8] = v71;
  uint64_t v72 = v10[7];
  uint64_t v73 = &v8[v72];
  uint64_t v74 = &v9[v72];
  char v75 = v74[8];
  *(void *)uint64_t v73 = *(void *)v74;
  v73[8] = v75;
LABEL_7:
  uint64_t v28 = a3[6];
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v29, v30, v82);
      *(void *)&v29[*(int *)(v31 + 20)] = *(void *)&v30[*(int *)(v31 + 20)];
      uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56);
      swift_retain();
      v36(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    memcpy(v29, v30, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v80)(v29, v30, v82);
  *(void *)&v29[*(int *)(v31 + 20)] = *(void *)&v30[*(int *)(v31 + 20)];
  swift_retain();
  swift_release();
LABEL_13:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v38 = a3[8];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = (int *)(a2 + v38);
  int v41 = *v40;
  *(unsigned char *)(v39 + 4) = *((unsigned char *)v40 + 4);
  *(_DWORD *)uint64_t v39 = v41;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v42 = a3[10];
  uint64_t v43 = (char *)(a1 + v42);
  uint64_t v44 = (char *)(a2 + v42);
  uint64_t v45 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      ((void (*)(char *, char *, uint64_t))v80)(v43, v44, v82);
      uint64_t v76 = *(int *)(v45 + 20);
      uint64_t v77 = &v43[v76];
      uint64_t v78 = &v44[v76];
      char v79 = v78[4];
      *(_DWORD *)uint64_t v77 = *(_DWORD *)v78;
      v77[4] = v79;
      goto LABEL_19;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v43, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    goto LABEL_18;
  }
  if (v49)
  {
LABEL_18:
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    memcpy(v43, v44, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v43, v44, v82);
  uint64_t v50 = *(int *)(v45 + 20);
  uint64_t v51 = &v43[v50];
  uint64_t v52 = &v44[v50];
  char v53 = v52[4];
  *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
  v51[4] = v53;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
LABEL_19:
  uint64_t v55 = a3[11];
  uint64_t v56 = a1 + v55;
  char v57 = (int *)(a2 + v55);
  int v58 = *v57;
  *(unsigned char *)(v56 + 4) = *((unsigned char *)v57 + 4);
  *(_DWORD *)uint64_t v56 = v58;
  uint64_t v59 = a3[12];
  uint64_t v60 = a1 + v59;
  uint64_t v61 = (int *)(a2 + v59);
  int v62 = *v61;
  *(unsigned char *)(v60 + 4) = *((unsigned char *)v61 + 4);
  *(_DWORD *)uint64_t v60 = v62;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(void *)&v24[*(int *)(v26 + 20)] = *(void *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  uint64_t v32 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v33 = (char *)(a1 + v32);
  int v34 = (char *)(a2 + v32);
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    uint64_t v38 = *(int *)(v35 + 20);
    uint64_t v39 = &v33[v38];
    uint64_t v40 = &v34[v38];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  uint64_t v41 = a3[11];
  uint64_t v42 = a3[12];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
  *(unsigned char *)(v43 + 4) = *(unsigned char *)(v44 + 4);
  uint64_t v45 = a1 + v42;
  uint64_t v46 = a2 + v42;
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  *(unsigned char *)(v45 + 4) = *(unsigned char *)(v46 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v70 = v6;
  uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v69 + 40);
  v68(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v8, v9, v70);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v68)(v8, v9, v70);
  uint64_t v56 = v10[5];
  char v57 = &v8[v56];
  int v58 = &v9[v56];
  *(void *)char v57 = *(void *)v58;
  v57[8] = v58[8];
  uint64_t v59 = v10[6];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  v60[8] = v61[8];
  uint64_t v62 = v10[7];
  char v63 = &v8[v62];
  uint64_t v64 = &v9[v62];
  *(void *)char v63 = *(void *)v64;
  v63[8] = v64[8];
LABEL_7:
  uint64_t v25 = a3[6];
  uint64_t v26 = (char *)(a1 + v25);
  uint64_t v27 = (char *)(a2 + v25);
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v26, v27, v70);
      *(void *)&v26[*(int *)(v28 + 20)] = *(void *)&v27[*(int *)(v28 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v68)(v26, v27, v70);
  *(void *)&v26[*(int *)(v28 + 20)] = *(void *)&v27[*(int *)(v28 + 20)];
  swift_release();
LABEL_13:
  uint64_t v34 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  uint64_t v37 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      ((void (*)(char *, char *, uint64_t))v68)(v38, v39, v70);
      uint64_t v65 = *(int *)(v40 + 20);
      uint64_t v66 = &v38[v65];
      char v67 = &v39[v65];
      *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
      v66[4] = v67[4];
      goto LABEL_19;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v38, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    goto LABEL_18;
  }
  if (v44)
  {
LABEL_18:
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    memcpy(v38, v39, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v38, v39, v70);
  uint64_t v45 = *(int *)(v40 + 20);
  uint64_t v46 = &v38[v45];
  uint64_t v47 = &v39[v45];
  *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
  v46[4] = v47[4];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
LABEL_19:
  uint64_t v49 = a3[11];
  uint64_t v50 = a3[12];
  uint64_t v51 = a1 + v49;
  uint64_t v52 = a2 + v49;
  *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
  *(unsigned char *)(v51 + 4) = *(unsigned char *)(v52 + 4);
  uint64_t v53 = a1 + v50;
  uint64_t v54 = a2 + v50;
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  *(unsigned char *)(v53 + 4) = *(unsigned char *)(v54 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F57570);
}

uint64_t sub_246F57570(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  if (a2 == 253)
  {
    unsigned int v16 = *(unsigned __int8 *)(a1 + a3[7]);
    if (v16 >= 2) {
      int v17 = ((v16 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v17 = -2;
    }
    if (v17 < 0) {
      int v17 = -1;
    }
    return (v17 + 1);
  }
  else
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
    uint64_t v20 = v18;
    uint64_t v21 = a1 + a3[10];
    return v19(v21, a2, v20);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F57774);
}

uint64_t sub_246F57774(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v14 = *(void *)(result - 8);
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }
  if (a3 == 253)
  {
    *(unsigned char *)(a1 + a4[7]) = a2 + 2;
  }
  else
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v19 = v17;
    uint64_t v20 = a1 + a4[10];
    return v18(v20, a2, a2, v19);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_483Tm_5);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_484Tm_5);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = (char *)a1 + v16;
    uint64_t v20 = (char *)a2 + v16;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = a3[10];
    uint64_t v23 = (char *)a1 + v21;
    uint64_t v24 = (char *)a2 + v21;
    v23[8] = v24[8];
    *(void *)uint64_t v23 = *(void *)v24;
    uint64_t v25 = (char *)a1 + v22;
    uint64_t v26 = (char *)a2 + v22;
    v25[8] = v26[8];
    *(void *)uint64_t v25 = *(void *)v26;
    uint64_t v27 = a3[11];
    uint64_t v28 = a3[12];
    uint64_t v29 = (char *)a1 + v27;
    uint64_t v30 = (char *)a2 + v27;
    v29[8] = v30[8];
    int v31 = (char *)a1 + v28;
    int v32 = (char *)a2 + v28;
    *(void *)uint64_t v29 = *(void *)v30;
    uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v34 = *((void *)v33 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v31, (uint64_t *)v32, v7);
      uint64_t v37 = v33[5];
      uint64_t v38 = &v31[v37];
      uint64_t v39 = &v32[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v33[6];
      uint64_t v41 = &v31[v40];
      uint64_t v42 = &v32[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v33[7];
      int v44 = &v31[v43];
      uint64_t v45 = &v32[v43];
      *(void *)int v44 = *(void *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 48);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  uint64_t v30 = (char *)(a1 + v27);
  int v31 = (char *)(a2 + v27);
  *(void *)uint64_t v28 = *(void *)v29;
  int v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    uint64_t v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    uint64_t v39 = &v30[v38];
    uint64_t v40 = &v31[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    uint64_t v42 = &v30[v41];
    uint64_t v43 = &v31[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 24);
  v70(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  char v30 = *(unsigned char *)(v29 + 8);
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = v30;
  uint64_t v31 = a3[11];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  char v34 = *(unsigned char *)(v33 + 8);
  *(void *)uint64_t v32 = *(void *)v33;
  *(unsigned char *)(v32 + 8) = v34;
  uint64_t v35 = a3[12];
  uint64_t v36 = (char *)(a1 + v35);
  uint64_t v37 = (char *)(a2 + v35);
  uint64_t v38 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v39 = *((void *)v38 - 1);
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t, int *))(v39 + 48);
  int v41 = v40(v36, 1, v38);
  int v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      v70((uint64_t)v36, (uint64_t)v37, v6);
      uint64_t v57 = v38[5];
      int v58 = &v36[v57];
      uint64_t v59 = &v37[v57];
      char v60 = v59[8];
      *(void *)int v58 = *(void *)v59;
      v58[8] = v60;
      uint64_t v61 = v38[6];
      uint64_t v62 = &v36[v61];
      char v63 = &v37[v61];
      char v64 = v63[8];
      *(void *)uint64_t v62 = *(void *)v63;
      v62[8] = v64;
      uint64_t v65 = v38[7];
      uint64_t v66 = &v36[v65];
      char v67 = &v37[v65];
      char v68 = v67[8];
      *(void *)uint64_t v66 = *(void *)v67;
      v66[8] = v68;
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v42)
  {
LABEL_6:
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v36, v37, *(void *)(*(void *)(v55 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v36, v37, v6);
  uint64_t v43 = v38[5];
  int v44 = &v36[v43];
  uint64_t v45 = &v37[v43];
  char v46 = v45[8];
  *(void *)int v44 = *(void *)v45;
  v44[8] = v46;
  uint64_t v47 = v38[6];
  uint64_t v48 = &v36[v47];
  uint64_t v49 = &v37[v47];
  char v50 = v49[8];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v50;
  uint64_t v51 = v38[7];
  uint64_t v52 = &v36[v51];
  uint64_t v53 = &v37[v51];
  char v54 = v53[8];
  *(void *)uint64_t v52 = *(void *)v53;
  v52[8] = v54;
  (*(void (**)(char *, void, uint64_t, int *))(v39 + 56))(v36, 0, 1, v38);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  char v30 = (char *)(a1 + v27);
  uint64_t v31 = (char *)(a2 + v27);
  *(void *)uint64_t v28 = *(void *)v29;
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    uint64_t v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    uint64_t v39 = &v30[v38];
    uint64_t v40 = &v31[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    int v42 = &v30[v41];
    uint64_t v43 = &v31[v41];
    *(void *)int v42 = *(void *)v43;
    v42[8] = v43[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 40);
  v57(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  *(void *)uint64_t v21 = *(void *)v22;
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = a3[11];
  uint64_t v26 = a3[12];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = (char *)(a1 + v26);
  char v30 = (char *)(a2 + v26);
  *(void *)uint64_t v27 = *(void *)v28;
  uint64_t v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v32 = *((void *)v31 - 1);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, int *))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      v57((uint64_t)v29, (uint64_t)v30, v6);
      uint64_t v47 = v31[5];
      uint64_t v48 = &v29[v47];
      uint64_t v49 = &v30[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = v31[6];
      uint64_t v51 = &v29[v50];
      uint64_t v52 = &v30[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      uint64_t v53 = v31[7];
      char v54 = &v29[v53];
      uint64_t v55 = &v30[v53];
      *(void *)char v54 = *(void *)v55;
      v54[8] = v55[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v35)
  {
LABEL_6:
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v29, v30, *(void *)(*(void *)(v45 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v29, v30, v6);
  uint64_t v36 = v31[5];
  uint64_t v37 = &v29[v36];
  uint64_t v38 = &v30[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  uint64_t v39 = v31[6];
  uint64_t v40 = &v29[v39];
  uint64_t v41 = &v30[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  v40[8] = v41[8];
  uint64_t v42 = v31[7];
  uint64_t v43 = &v29[v42];
  int v44 = &v30[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  v43[8] = v44[8];
  (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F58A60);
}

uint64_t sub_246F58A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 48);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F58B70);
}

uint64_t sub_246F58B70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 48);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v12[8];
      uint64_t v26 = &v10[v25];
      uint64_t v27 = &v11[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = v12[9];
      uint64_t v29 = &v10[v28];
      char v30 = &v11[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      uint64_t v31 = v12[10];
      uint64_t v32 = &v10[v31];
      uint64_t v33 = &v11[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v12[11];
      int v35 = &v10[v34];
      uint64_t v36 = &v11[v34];
      *(void *)int v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v12[12];
      __dst = &v10[v37];
      uint64_t v38 = &v11[v37];
      uint64_t v39 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
      uint64_t v40 = *((void *)v39 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(__dst, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v38, v7);
        uint64_t v42 = v39[5];
        uint64_t v43 = &__dst[v42];
        int v44 = &v38[v42];
        *(void *)uint64_t v43 = *(void *)v44;
        v43[8] = v44[8];
        uint64_t v45 = v39[6];
        char v46 = &__dst[v45];
        uint64_t v47 = &v38[v45];
        *(void *)char v46 = *(void *)v47;
        v46[8] = v47[8];
        uint64_t v48 = v39[7];
        uint64_t v49 = &__dst[v48];
        uint64_t v50 = &v38[v48];
        *(void *)uint64_t v49 = *(void *)v50;
        v49[8] = v50[8];
        (*(void (**)(void))(v40 + 56))();
      }
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    v10(v5, v4);
    uint64_t v8 = v5 + *(int *)(v6 + 48);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v11[8];
    uint64_t v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v11[9];
    uint64_t v27 = &v9[v26];
    uint64_t v28 = &v10[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v11[10];
    char v30 = &v9[v29];
    uint64_t v31 = &v10[v29];
    *(void *)char v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v11[11];
    uint64_t v33 = &v9[v32];
    uint64_t v34 = &v10[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v11[12];
    __dst = &v9[v35];
    uint64_t v36 = &v10[v35];
    uint64_t v37 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v38 = *((void *)v37 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(__dst, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v36, v6);
      uint64_t v40 = v37[5];
      uint64_t v41 = &__dst[v40];
      uint64_t v42 = &v36[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v37[6];
      int v44 = &__dst[v43];
      uint64_t v45 = &v36[v43];
      *(void *)int v44 = *(void *)v45;
      v44[8] = v45[8];
      uint64_t v46 = v37[7];
      uint64_t v47 = &__dst[v46];
      uint64_t v48 = &v36[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      (*(void (**)(void))(v38 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v127 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v128 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7(v9, (uint64_t)v10, v6);
      uint64_t v54 = v11[5];
      uint64_t v55 = v9 + v54;
      uint64_t v56 = &v10[v54];
      char v57 = v56[8];
      *(void *)uint64_t v55 = *(void *)v56;
      *(unsigned char *)(v55 + 8) = v57;
      uint64_t v58 = v11[6];
      uint64_t v59 = v9 + v58;
      char v60 = &v10[v58];
      char v61 = v60[8];
      *(void *)uint64_t v59 = *(void *)v60;
      *(unsigned char *)(v59 + 8) = v61;
      uint64_t v62 = v11[7];
      uint64_t v63 = v9 + v62;
      char v64 = &v10[v62];
      char v65 = v64[8];
      *(void *)uint64_t v63 = *(void *)v64;
      *(unsigned char *)(v63 + 8) = v65;
      uint64_t v66 = v11[8];
      uint64_t v67 = v9 + v66;
      char v68 = &v10[v66];
      char v69 = v68[8];
      *(void *)uint64_t v67 = *(void *)v68;
      *(unsigned char *)(v67 + 8) = v69;
      uint64_t v70 = v11[9];
      uint64_t v71 = v9 + v70;
      uint64_t v72 = &v10[v70];
      char v73 = v72[8];
      *(void *)uint64_t v71 = *(void *)v72;
      *(unsigned char *)(v71 + 8) = v73;
      uint64_t v74 = v11[10];
      uint64_t v75 = v9 + v74;
      uint64_t v76 = &v10[v74];
      char v77 = v76[8];
      *(void *)uint64_t v75 = *(void *)v76;
      *(unsigned char *)(v75 + 8) = v77;
      uint64_t v78 = v11[11];
      uint64_t v79 = v9 + v78;
      uint64_t v80 = &v10[v78];
      char v81 = v80[8];
      *(void *)uint64_t v79 = *(void *)v80;
      *(unsigned char *)(v79 + 8) = v81;
      uint64_t v82 = v11[12];
      uint64_t v83 = v9 + v82;
      uint64_t v84 = &v10[v82];
      uint64_t v85 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
      uint64_t v86 = *((void *)v85 - 1);
      uint64_t v87 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v86 + 48);
      int v88 = v87(v83, 1, v85);
      int v89 = v87((uint64_t)v84, 1, v85);
      if (v88)
      {
        if (!v89)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v127 + 16))(v83, v84, v6);
          uint64_t v90 = v85[5];
          uint64_t v91 = v83 + v90;
          uint64_t v92 = &v84[v90];
          char v93 = v92[8];
          *(void *)uint64_t v91 = *(void *)v92;
          *(unsigned char *)(v91 + 8) = v93;
          uint64_t v94 = v85[6];
          uint64_t v95 = v83 + v94;
          uint64_t v96 = &v84[v94];
          char v97 = v96[8];
          *(void *)uint64_t v95 = *(void *)v96;
          *(unsigned char *)(v95 + 8) = v97;
          uint64_t v98 = v85[7];
          uint64_t v99 = v83 + v98;
          uint64_t v100 = &v84[v98];
          char v101 = v100[8];
          *(void *)uint64_t v99 = *(void *)v100;
          *(unsigned char *)(v99 + 8) = v101;
          (*(void (**)(uint64_t, void, uint64_t, int *))(v86 + 56))(v83, 0, 1, v85);
          return v128;
        }
      }
      else
      {
        if (!v89)
        {
          v7(v83, (uint64_t)v84, v6);
          uint64_t v115 = v85[5];
          uint64_t v116 = v83 + v115;
          uint64_t v117 = &v84[v115];
          char v118 = v117[8];
          *(void *)uint64_t v116 = *(void *)v117;
          *(unsigned char *)(v116 + 8) = v118;
          uint64_t v119 = v85[6];
          uint64_t v120 = v83 + v119;
          uint64_t v121 = &v84[v119];
          char v122 = v121[8];
          *(void *)uint64_t v120 = *(void *)v121;
          *(unsigned char *)(v120 + 8) = v122;
          uint64_t v123 = v85[7];
          uint64_t v124 = v83 + v123;
          uint64_t v125 = &v84[v123];
          char v126 = v125[8];
          *(void *)uint64_t v124 = *(void *)v125;
          *(unsigned char *)(v124 + 8) = v126;
          return v128;
        }
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      }
      size_t v51 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      uint64_t v52 = (void *)v83;
      uint64_t v53 = v84;
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_7:
    size_t v51 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?)
                                - 8)
                    + 64);
    uint64_t v52 = (void *)v9;
    uint64_t v53 = v10;
LABEL_8:
    memcpy(v52, v53, v51);
    return v128;
  }
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v127 + 16);
  v16(v9, v10, v6);
  uint64_t v17 = v11[5];
  uint64_t v18 = v9 + v17;
  uint64_t v19 = &v10[v17];
  char v20 = v19[8];
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v20;
  uint64_t v21 = v11[6];
  uint64_t v22 = v9 + v21;
  uint64_t v23 = &v10[v21];
  char v24 = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = v24;
  uint64_t v25 = v11[7];
  uint64_t v26 = v9 + v25;
  uint64_t v27 = &v10[v25];
  char v28 = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = v28;
  uint64_t v29 = v11[8];
  uint64_t v30 = v9 + v29;
  uint64_t v31 = &v10[v29];
  char v32 = v31[8];
  *(void *)uint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = v32;
  uint64_t v33 = v11[9];
  uint64_t v34 = v9 + v33;
  uint64_t v35 = &v10[v33];
  char v36 = v35[8];
  *(void *)uint64_t v34 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = v36;
  uint64_t v37 = v11[10];
  uint64_t v38 = v9 + v37;
  uint64_t v39 = &v10[v37];
  char v40 = v39[8];
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = v40;
  uint64_t v41 = v11[11];
  uint64_t v42 = v9 + v41;
  uint64_t v43 = &v10[v41];
  char v44 = v43[8];
  *(void *)uint64_t v42 = *(void *)v43;
  *(unsigned char *)(v42 + 8) = v44;
  uint64_t v45 = v11[12];
  uint64_t v46 = (char *)(v9 + v45);
  uint64_t v47 = &v10[v45];
  uint64_t v48 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v49 = *((void *)v48 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v49 + 48))(v47, 1, v48))
  {
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    v16((uint64_t)v46, v47, v6);
    uint64_t v102 = v48[5];
    uint64_t v103 = &v46[v102];
    uint64_t v104 = &v47[v102];
    char v105 = v104[8];
    *(void *)uint64_t v103 = *(void *)v104;
    v103[8] = v105;
    uint64_t v106 = v48[6];
    uint64_t v107 = &v46[v106];
    uint64_t v108 = &v47[v106];
    char v109 = v108[8];
    *(void *)uint64_t v107 = *(void *)v108;
    v107[8] = v109;
    uint64_t v110 = v48[7];
    uint64_t v111 = &v46[v110];
    int v112 = &v47[v110];
    char v113 = v112[8];
    *(void *)uint64_t v111 = *(void *)v112;
    v111[8] = v113;
    (*(void (**)(char *, void, uint64_t, int *))(v49 + 56))(v46, 0, 1, v48);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return v128;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v11[8];
    char v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    *(void *)char v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v11[9];
    uint64_t v27 = &v9[v26];
    char v28 = &v10[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v11[10];
    uint64_t v30 = &v9[v29];
    uint64_t v31 = &v10[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v11[11];
    uint64_t v33 = &v9[v32];
    uint64_t v34 = &v10[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v11[12];
    __dst = &v9[v35];
    char v36 = &v10[v35];
    uint64_t v37 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v38 = *((void *)v37 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(__dst, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v36, v6);
      uint64_t v40 = v37[5];
      uint64_t v41 = &__dst[v40];
      uint64_t v42 = &v36[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v37[6];
      char v44 = &__dst[v43];
      uint64_t v45 = &v36[v43];
      *(void *)char v44 = *(void *)v45;
      v44[8] = v45[8];
      uint64_t v46 = v37[7];
      uint64_t v47 = &__dst[v46];
      uint64_t v48 = &v36[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      (*(void (**)(void))(v38 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v104 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v105 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7(v9, (uint64_t)v10, v6);
      uint64_t v47 = v11[5];
      uint64_t v48 = v9 + v47;
      uint64_t v49 = &v10[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      *(unsigned char *)(v48 + 8) = v49[8];
      uint64_t v50 = v11[6];
      uint64_t v51 = v9 + v50;
      uint64_t v52 = &v10[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      *(unsigned char *)(v51 + 8) = v52[8];
      uint64_t v53 = v11[7];
      uint64_t v54 = v9 + v53;
      uint64_t v55 = &v10[v53];
      *(void *)uint64_t v54 = *(void *)v55;
      *(unsigned char *)(v54 + 8) = v55[8];
      uint64_t v56 = v11[8];
      uint64_t v57 = v9 + v56;
      uint64_t v58 = &v10[v56];
      *(void *)uint64_t v57 = *(void *)v58;
      *(unsigned char *)(v57 + 8) = v58[8];
      uint64_t v59 = v11[9];
      uint64_t v60 = v9 + v59;
      char v61 = &v10[v59];
      *(void *)uint64_t v60 = *(void *)v61;
      *(unsigned char *)(v60 + 8) = v61[8];
      uint64_t v62 = v11[10];
      uint64_t v63 = v9 + v62;
      char v64 = &v10[v62];
      *(void *)uint64_t v63 = *(void *)v64;
      *(unsigned char *)(v63 + 8) = v64[8];
      uint64_t v65 = v11[11];
      uint64_t v66 = v9 + v65;
      uint64_t v67 = &v10[v65];
      *(void *)uint64_t v66 = *(void *)v67;
      *(unsigned char *)(v66 + 8) = v67[8];
      uint64_t v68 = v11[12];
      uint64_t v69 = v9 + v68;
      uint64_t v70 = &v10[v68];
      uint64_t v71 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
      uint64_t v72 = *((void *)v71 - 1);
      char v73 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v72 + 48);
      int v74 = v73(v69, 1, v71);
      int v75 = v73((uint64_t)v70, 1, v71);
      if (v74)
      {
        if (!v75)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v104 + 32))(v69, v70, v6);
          uint64_t v76 = v71[5];
          uint64_t v77 = v69 + v76;
          uint64_t v78 = &v70[v76];
          *(void *)uint64_t v77 = *(void *)v78;
          *(unsigned char *)(v77 + 8) = v78[8];
          uint64_t v79 = v71[6];
          uint64_t v80 = v69 + v79;
          char v81 = &v70[v79];
          *(void *)uint64_t v80 = *(void *)v81;
          *(unsigned char *)(v80 + 8) = v81[8];
          uint64_t v82 = v71[7];
          uint64_t v83 = v69 + v82;
          uint64_t v84 = &v70[v82];
          *(void *)uint64_t v83 = *(void *)v84;
          *(unsigned char *)(v83 + 8) = v84[8];
          (*(void (**)(uint64_t, void, uint64_t, int *))(v72 + 56))(v69, 0, 1, v71);
          return v105;
        }
      }
      else
      {
        if (!v75)
        {
          v7(v69, (uint64_t)v70, v6);
          uint64_t v95 = v71[5];
          uint64_t v96 = v69 + v95;
          char v97 = &v70[v95];
          *(void *)uint64_t v96 = *(void *)v97;
          *(unsigned char *)(v96 + 8) = v97[8];
          uint64_t v98 = v71[6];
          uint64_t v99 = v69 + v98;
          uint64_t v100 = &v70[v98];
          *(void *)uint64_t v99 = *(void *)v100;
          *(unsigned char *)(v99 + 8) = v100[8];
          uint64_t v101 = v71[7];
          uint64_t v102 = v69 + v101;
          uint64_t v103 = &v70[v101];
          *(void *)uint64_t v102 = *(void *)v103;
          *(unsigned char *)(v102 + 8) = v103[8];
          return v105;
        }
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v69, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      }
      size_t v44 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      uint64_t v45 = (void *)v69;
      uint64_t v46 = v70;
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_7:
    size_t v44 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?)
                                - 8)
                    + 64);
    uint64_t v45 = (void *)v9;
    uint64_t v46 = v10;
LABEL_8:
    memcpy(v45, v46, v44);
    return v105;
  }
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v104 + 32);
  v16(v9, v10, v6);
  uint64_t v17 = v11[5];
  uint64_t v18 = v9 + v17;
  uint64_t v19 = &v10[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v19[8];
  uint64_t v20 = v11[6];
  uint64_t v21 = v9 + v20;
  uint64_t v22 = &v10[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = v22[8];
  uint64_t v23 = v11[7];
  uint64_t v24 = v9 + v23;
  uint64_t v25 = &v10[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = v25[8];
  uint64_t v26 = v11[8];
  uint64_t v27 = v9 + v26;
  char v28 = &v10[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = v28[8];
  uint64_t v29 = v11[9];
  uint64_t v30 = v9 + v29;
  uint64_t v31 = &v10[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = v31[8];
  uint64_t v32 = v11[10];
  uint64_t v33 = v9 + v32;
  uint64_t v34 = &v10[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = v34[8];
  uint64_t v35 = v11[11];
  uint64_t v36 = v9 + v35;
  uint64_t v37 = &v10[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = v37[8];
  uint64_t v38 = v11[12];
  uint64_t v39 = (char *)(v9 + v38);
  uint64_t v40 = &v10[v38];
  uint64_t v41 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v42 = *((void *)v41 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v42 + 48))(v40, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    v16((uint64_t)v39, v40, v6);
    uint64_t v85 = v41[5];
    uint64_t v86 = &v39[v85];
    uint64_t v87 = &v40[v85];
    *(void *)uint64_t v86 = *(void *)v87;
    v86[8] = v87[8];
    uint64_t v88 = v41[6];
    int v89 = &v39[v88];
    uint64_t v90 = &v40[v88];
    *(void *)int v89 = *(void *)v90;
    v89[8] = v90[8];
    uint64_t v91 = v41[7];
    uint64_t v92 = &v39[v91];
    char v93 = &v40[v91];
    *(void *)uint64_t v92 = *(void *)v93;
    v92[8] = v93[8];
    (*(void (**)(char *, void, uint64_t, int *))(v42 + 56))(v39, 0, 1, v41);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return v105;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F5A614);
}

uint64_t sub_246F5A614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_480Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
}

uint64_t __swift_get_extra_inhabitant_index_480Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v10(a1, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 20);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F5A730);
}

uint64_t sub_246F5A730(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_481Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
}

uint64_t __swift_store_extra_inhabitant_index_481Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    return v12(a1, a2, a2, v10);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a4 + 20);
    return v15(v17, a2, a2, v16);
  }
}

void type metadata completion function for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, a4, a5);
    if (v8 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WifiAccessPoint(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    a1 = (void *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (void *)((char *)a1 + v9);
    uint64_t v13 = (void *)((char *)a2 + v9);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    void v17[4] = v18[4];
    *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v19 = a3[9];
    uint64_t v20 = a3[10];
    uint64_t v21 = (char *)a1 + v19;
    uint64_t v22 = (char *)a2 + v19;
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = (char *)a1 + v20;
    uint64_t v24 = (char *)a2 + v20;
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    uint64_t v25 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)a1 + v25) = *((unsigned char *)a2 + v25);
    uint64_t v26 = a3[14];
    *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    uint64_t v27 = (char *)a1 + v26;
    char v28 = (char *)a2 + v26;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (int *)(a2 + v14);
  int v17 = *v16;
  *(unsigned char *)(v15 + 4) = *((unsigned char *)v16 + 4);
  *(_DWORD *)uint64_t v15 = v17;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = (int *)(a2 + v18);
  int v21 = *v20;
  *(unsigned char *)(v19 + 4) = *((unsigned char *)v20 + 4);
  *(_DWORD *)uint64_t v19 = v21;
  uint64_t v22 = a3[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (int *)(a2 + v22);
  int v25 = *v24;
  *(unsigned char *)(v23 + 4) = *((unsigned char *)v24 + 4);
  *(_DWORD *)uint64_t v23 = v25;
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v26 = a3[14];
  uint64_t v27 = a1 + v26;
  char v28 = (int *)(a2 + v26);
  int v29 = *v28;
  *(unsigned char *)(v27 + 4) = *((unsigned char *)v28 + 4);
  *(_DWORD *)uint64_t v27 = v29;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  uint64_t v21 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v22 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = (void *)(a1 + v8);
  uint64_t v12 = (uint64_t *)(a2 + v8);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
  uint64_t v25 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  uint64_t v26 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  return a1;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WifiAssociationState(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 24);
    a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      uint64_t v22 = *((void *)v21 + 1);
      *(void *)uint64_t v20 = *(void *)v21;
      *((void *)v20 + 1) = v22;
      uint64_t v23 = v12[7];
      uint64_t v24 = &v10[v23];
      uint64_t v25 = &v11[v23];
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      v24[4] = v25[4];
      v10[v12[8]] = v11[v12[8]];
      uint64_t v26 = v12[9];
      uint64_t v27 = &v10[v26];
      uint64_t v28 = &v11[v26];
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      uint64_t v29 = v12[10];
      uint64_t v30 = &v10[v29];
      uint64_t v31 = &v11[v29];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      v30[4] = v31[4];
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      uint64_t v32 = v12[14];
      uint64_t v33 = &v10[v32];
      uint64_t v34 = &v11[v32];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      uint64_t v35 = *(void (**)(char *, void, uint64_t, int *))(v13 + 56);
      swift_bridgeObjectRetain();
      v35(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 24);
  v7(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v62 = a1;
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v38 = v11[5];
      uint64_t v39 = &v9[v38];
      uint64_t v40 = &v10[v38];
      uint64_t v41 = *(void *)v40;
      v39[8] = v40[8];
      *(void *)uint64_t v39 = v41;
      uint64_t v42 = v11[6];
      uint64_t v43 = &v9[v42];
      size_t v44 = &v10[v42];
      void *v43 = *v44;
      v43[1] = v44[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v45 = v11[7];
      uint64_t v46 = &v9[v45];
      uint64_t v47 = &v10[v45];
      int v48 = *(_DWORD *)v47;
      v46[4] = v47[4];
      *(_DWORD *)uint64_t v46 = v48;
      v9[v11[8]] = v10[v11[8]];
      uint64_t v49 = v11[9];
      uint64_t v50 = &v9[v49];
      uint64_t v51 = &v10[v49];
      int v52 = *(_DWORD *)v51;
      v50[4] = v51[4];
      *(_DWORD *)uint64_t v50 = v52;
      uint64_t v53 = v11[10];
      uint64_t v54 = &v9[v53];
      uint64_t v55 = &v10[v53];
      int v56 = *(_DWORD *)v55;
      v54[4] = v55[4];
      *(_DWORD *)uint64_t v54 = v56;
      v9[v11[11]] = v10[v11[11]];
      v9[v11[12]] = v10[v11[12]];
      v9[v11[13]] = v10[v11[13]];
      uint64_t v57 = v11[14];
      uint64_t v58 = &v9[v57];
      uint64_t v59 = &v10[v57];
      int v60 = *(_DWORD *)v59;
      v58[4] = v59[4];
      *(_DWORD *)uint64_t v58 = v60;
      return v62;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    memcpy(v9, v10, *(void *)(*(void *)(v36 - 8) + 64));
    return v62;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v61 + 16))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = v11[6];
  uint64_t v21 = &v9[v20];
  uint64_t v22 = &v10[v20];
  void *v21 = *v22;
  v21[1] = v22[1];
  uint64_t v23 = v11[7];
  uint64_t v24 = &v9[v23];
  uint64_t v25 = &v10[v23];
  LOBYTE(v19) = v25[4];
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  v24[4] = v19;
  v9[v11[8]] = v10[v11[8]];
  uint64_t v26 = v11[9];
  uint64_t v27 = &v9[v26];
  uint64_t v28 = &v10[v26];
  LODWORD(v19) = *(_DWORD *)v28;
  v27[4] = v28[4];
  *(_DWORD *)uint64_t v27 = v19;
  uint64_t v29 = v11[10];
  uint64_t v30 = &v9[v29];
  uint64_t v31 = &v10[v29];
  LOBYTE(v19) = v31[4];
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  v30[4] = v19;
  v9[v11[11]] = v10[v11[11]];
  v9[v11[12]] = v10[v11[12]];
  v9[v11[13]] = v10[v11[13]];
  uint64_t v32 = v11[14];
  uint64_t v33 = &v9[v32];
  uint64_t v34 = &v10[v32];
  LODWORD(v19) = *(_DWORD *)v34;
  v33[4] = v34[4];
  *(_DWORD *)uint64_t v33 = v19;
  uint64_t v35 = *(void (**)(unsigned char *, void, uint64_t, int *))(v12 + 56);
  swift_bridgeObjectRetain();
  v35(v9, 0, 1, v11);
  return v62;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
    uint64_t v17 = v11[7];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v20 = v11[9];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    uint64_t v23 = v11[10];
    uint64_t v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    v9[v11[13]] = v10[v11[13]];
    uint64_t v26 = v11[14];
    uint64_t v27 = &v9[v26];
    uint64_t v28 = &v10[v26];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v54 = a1;
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v33 = v11[5];
      uint64_t v34 = &v9[v33];
      uint64_t v35 = &v10[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v11[6];
      uint64_t v37 = &v9[v36];
      uint64_t v38 = (uint64_t *)&v10[v36];
      uint64_t v40 = *v38;
      uint64_t v39 = v38[1];
      void *v37 = v40;
      v37[1] = v39;
      swift_bridgeObjectRelease();
      uint64_t v41 = v11[7];
      uint64_t v42 = &v9[v41];
      uint64_t v43 = &v10[v41];
      *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
      v42[4] = v43[4];
      v9[v11[8]] = v10[v11[8]];
      uint64_t v44 = v11[9];
      uint64_t v45 = &v9[v44];
      uint64_t v46 = &v10[v44];
      *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
      v45[4] = v46[4];
      uint64_t v47 = v11[10];
      int v48 = &v9[v47];
      uint64_t v49 = &v10[v47];
      *(_DWORD *)int v48 = *(_DWORD *)v49;
      v48[4] = v49[4];
      v9[v11[11]] = v10[v11[11]];
      v9[v11[12]] = v10[v11[12]];
      v9[v11[13]] = v10[v11[13]];
      uint64_t v50 = v11[14];
      uint64_t v51 = &v9[v50];
      int v52 = &v10[v50];
      v51[4] = v52[4];
      *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
      return v54;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    memcpy(v9, v10, *(void *)(*(void *)(v31 - 8) + 64));
    return v54;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 32))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
  uint64_t v19 = v11[7];
  uint64_t v20 = &v9[v19];
  uint64_t v21 = &v10[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  v9[v11[8]] = v10[v11[8]];
  uint64_t v22 = v11[9];
  uint64_t v23 = &v9[v22];
  uint64_t v24 = &v10[v22];
  v23[4] = v24[4];
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  uint64_t v25 = v11[10];
  uint64_t v26 = &v9[v25];
  uint64_t v27 = &v10[v25];
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  v26[4] = v27[4];
  v9[v11[11]] = v10[v11[11]];
  v9[v11[12]] = v10[v11[12]];
  v9[v11[13]] = v10[v11[13]];
  uint64_t v28 = v11[14];
  uint64_t v29 = &v9[v28];
  uint64_t v30 = &v10[v28];
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  v29[4] = v30[4];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return v54;
}

uint64_t sub_246F5BB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 253)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t sub_246F5BCA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 253)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_WifiAssociationState()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *assignWithCopy for CLP_LogEntry_PrivateData_Accel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v47 = a1;
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  uint64_t v46 = (uint64_t)v13;
  LODWORD(v13) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (v13)
  {
    if (!v18)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v46, v14, v9);
      uint64_t v21 = v15[5];
      uint64_t v22 = v46 + v21;
      uint64_t v23 = &v14[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v24;
      uint64_t v25 = v15[6];
      uint64_t v26 = v46 + v25;
      uint64_t v27 = &v14[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(unsigned char *)(v26 + 8) = v28;
      uint64_t v29 = v15[7];
      uint64_t v30 = v46 + v29;
      uint64_t v31 = &v14[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v32;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v16 + 56))(v46, 0, 1, v15);
      return v47;
    }
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v46;
  }
  else
  {
    if (!v18)
    {
      v11((char *)v46, v14, v9);
      uint64_t v33 = v15[5];
      uint64_t v34 = v46 + v33;
      uint64_t v35 = &v14[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(unsigned char *)(v34 + 8) = v36;
      uint64_t v37 = v15[6];
      uint64_t v38 = v46 + v37;
      uint64_t v39 = &v14[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(unsigned char *)(v38 + 8) = v40;
      uint64_t v41 = v15[7];
      uint64_t v42 = v46 + v41;
      uint64_t v43 = &v14[v41];
      char v44 = v43[8];
      *(void *)uint64_t v42 = *(void *)v43;
      *(unsigned char *)(v42 + 8) = v44;
      return v47;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v46, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v46;
  }
  memcpy(v20, v14, v19);
  return v47;
}

void *assignWithTake for CLP_LogEntry_PrivateData_Accel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v41 = a1;
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  uint64_t v40 = (uint64_t)v13;
  LODWORD(v13) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (v13)
  {
    if (!v18)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v40, v14, v9);
      uint64_t v21 = v15[5];
      uint64_t v22 = v40 + v21;
      uint64_t v23 = &v14[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v23[8];
      uint64_t v24 = v15[6];
      uint64_t v25 = v40 + v24;
      uint64_t v26 = &v14[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      *(unsigned char *)(v25 + 8) = v26[8];
      uint64_t v27 = v15[7];
      uint64_t v28 = v40 + v27;
      uint64_t v29 = &v14[v27];
      *(void *)uint64_t v28 = *(void *)v29;
      *(unsigned char *)(v28 + 8) = v29[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v16 + 56))(v40, 0, 1, v15);
      return v41;
    }
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v40;
  }
  else
  {
    if (!v18)
    {
      v11((char *)v40, v14, v9);
      uint64_t v30 = v15[5];
      uint64_t v31 = v40 + v30;
      char v32 = &v14[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      *(unsigned char *)(v31 + 8) = v32[8];
      uint64_t v33 = v15[6];
      uint64_t v34 = v40 + v33;
      uint64_t v35 = &v14[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      *(unsigned char *)(v34 + 8) = v35[8];
      uint64_t v36 = v15[7];
      uint64_t v37 = v40 + v36;
      uint64_t v38 = &v14[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      *(unsigned char *)(v37 + 8) = v38[8];
      return v41;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v40;
  }
  memcpy(v20, v14, v19);
  return v41;
}

void type metadata completion function for CLP_LogEntry_PrivateData_Accel()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_18);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_18);
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      int v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    a1[a3[8]] = a2[a3[8]];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  uint64_t v47 = v9;
  LODWORD(v9) = v13(v9, 1, v11);
  int v14 = v13((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v47, v10, v6);
      uint64_t v17 = v11[5];
      uint64_t v18 = v47 + v17;
      uint64_t v19 = &v10[v17];
      char v20 = v19[8];
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v20;
      uint64_t v21 = v11[6];
      uint64_t v22 = v47 + v21;
      uint64_t v23 = &v10[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v24;
      uint64_t v25 = v11[7];
      uint64_t v26 = v47 + v25;
      uint64_t v27 = &v10[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(unsigned char *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v47, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v47;
  }
  else
  {
    if (!v14)
    {
      v7(v47, (uint64_t)v10, v6);
      uint64_t v29 = v11[5];
      uint64_t v30 = v47 + v29;
      uint64_t v31 = &v10[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v32;
      uint64_t v33 = v11[6];
      uint64_t v34 = v47 + v33;
      uint64_t v35 = &v10[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(unsigned char *)(v34 + 8) = v36;
      uint64_t v37 = v11[7];
      uint64_t v38 = v47 + v37;
      uint64_t v39 = &v10[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(unsigned char *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v47;
  }
  memcpy(v16, v10, v15);
LABEL_9:
  *(unsigned char *)(a1 + v49[6]) = *(unsigned char *)(v48 + v49[6]);
  uint64_t v41 = v49[7];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = (uint64_t *)(v48 + v41);
  uint64_t v44 = *v43;
  *(unsigned char *)(v42 + 8) = *((unsigned char *)v43 + 8);
  *(void *)uint64_t v42 = v44;
  *(unsigned char *)(a1 + v49[8]) = *(unsigned char *)(v48 + v49[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    size_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)size_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  uint64_t v40 = v9;
  LODWORD(v9) = v13(v9, 1, v11);
  int v14 = v13((uint64_t)v10, 1, v11);
  if (v9)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v10, v6);
      uint64_t v17 = v11[5];
      uint64_t v18 = v40 + v17;
      uint64_t v19 = &v10[v17];
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v19[8];
      uint64_t v20 = v11[6];
      uint64_t v21 = v40 + v20;
      uint64_t v22 = &v10[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      *(unsigned char *)(v21 + 8) = v22[8];
      uint64_t v23 = v11[7];
      uint64_t v24 = v40 + v23;
      uint64_t v25 = &v10[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      *(unsigned char *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v40, 0, 1, v11);
      goto LABEL_9;
    }
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v40;
  }
  else
  {
    if (!v14)
    {
      v7(v40, (uint64_t)v10, v6);
      uint64_t v26 = v11[5];
      uint64_t v27 = v40 + v26;
      char v28 = &v10[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      *(unsigned char *)(v27 + 8) = v28[8];
      uint64_t v29 = v11[6];
      uint64_t v30 = v40 + v29;
      uint64_t v31 = &v10[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v31[8];
      uint64_t v32 = v11[7];
      uint64_t v33 = v40 + v32;
      uint64_t v34 = &v10[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      *(unsigned char *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v16 = (void *)v40;
  }
  memcpy(v16, v10, v15);
LABEL_9:
  uint64_t v35 = v42[7];
  *(unsigned char *)(a1 + v42[6]) = *(unsigned char *)(v41 + v42[6]);
  uint64_t v36 = a1 + v35;
  uint64_t v37 = v41 + v35;
  *(void *)uint64_t v36 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  *(unsigned char *)(a1 + v42[8]) = *(unsigned char *)(v41 + v42[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F5D1D0);
}

uint64_t sub_246F5D1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 4u) {
    int v14 = 4;
  }
  else {
    int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  }
  unsigned int v15 = v14 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 4u) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F5D304);
}

uint64_t sub_246F5D304(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_21);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_21);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    unsigned int v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)unsigned int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = (char *)v7 + v14;
    uint64_t v18 = (char *)a2 + v14;
    *(void *)uint64_t v17 = *(void *)v18;
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    char v21 = *((unsigned char *)a2 + v19);
    v17[8] = v18[8];
    *((unsigned char *)v7 + v19) = v21;
    uint64_t v22 = (char *)v7 + v20;
    *(void *)uint64_t v22 = *(void *)((char *)a2 + v20);
    v22[8] = *((unsigned char *)a2 + v20 + 8);
    uint64_t v23 = a3[10];
    uint64_t v24 = a3[11];
    uint64_t v25 = (char *)v7 + v23;
    uint64_t v26 = (char *)a2 + v23;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = (char *)v7 + v24;
    char v28 = (char *)a2 + v24;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = a3[12];
    uint64_t v30 = (char *)v7 + v29;
    uint64_t v31 = (char *)a2 + v29;
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
  }
  return v7;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  unsigned int v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)unsigned int v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[10];
  uint64_t v21 = a3[11];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = (char *)a1 + v21;
  uint64_t v25 = (char *)a2 + v21;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = a3[12];
  uint64_t v27 = (char *)a1 + v26;
  char v28 = (char *)a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  return a1;
}

void *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void *)v12;
  v11[8] = v12[8];
  *(void *)uint64_t v11 = v13;
  uint64_t v14 = a3[7];
  unsigned int v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  LOBYTE(v13) = v16[8];
  *(void *)unsigned int v15 = *(void *)v16;
  v15[8] = v13;
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v17 = a3[9];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = a3[10];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  LOBYTE(v20) = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v20;
  uint64_t v24 = a3[11];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  LOBYTE(v20) = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v20;
  uint64_t v27 = a3[12];
  char v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  LOBYTE(v20) = v29[8];
  *(void *)char v28 = *(void *)v29;
  v28[8] = v20;
  return a1;
}

void *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  unsigned int v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[10];
  uint64_t v20 = a3[11];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = (char *)a1 + v20;
  uint64_t v24 = (char *)a2 + v20;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = a3[12];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  return a1;
}

void *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  unsigned int v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[10];
  uint64_t v20 = a3[11];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = (char *)a1 + v20;
  uint64_t v24 = (char *)a2 + v20;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = a3[12];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_18Tm_1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_19Tm_1);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    unsigned int v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)unsigned int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = (char *)v7 + v14;
    uint64_t v18 = (char *)a2 + v14;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
  }
  return v7;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  unsigned int v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)unsigned int v15 = *(void *)v16;
  v15[8] = v16[8];
  return a1;
}

void *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v13;
  uint64_t v14 = a3[7];
  unsigned int v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[8];
  *(void *)unsigned int v15 = *(void *)v16;
  v15[8] = v17;
  return a1;
}

void *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  char v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  unsigned int v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  return a1;
}

void *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  char v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  unsigned int v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_18Tm_2);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_19Tm_2);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = (char *)v7 + v13;
    unsigned int v15 = (char *)a2 + v13;
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      uint64_t v19 = v16[5];
      uint64_t v20 = &v14[v19];
      uint64_t v21 = &v15[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v16[6];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v16[7];
      uint64_t v26 = &v14[v25];
      uint64_t v27 = &v15[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v28 = a3[8];
    uint64_t v29 = (char *)v7 + v28;
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      v12(v29, v30, v11);
      uint64_t v34 = *(int *)(v31 + 20);
      uint64_t v35 = &v29[v34];
      uint64_t v36 = &v30[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = *(int *)(v31 + 24);
      uint64_t v38 = &v29[v37];
      uint64_t v39 = &v30[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7)) {
    v11(v6, v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8, v5);
  }
  return result;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapBuildingData(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  unsigned int v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    uint64_t v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v27 = a3[8];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    v11(v28, v29, v10);
    uint64_t v33 = *(int *)(v30 + 20);
    uint64_t v34 = &v28[v33];
    uint64_t v35 = &v29[v33];
    *(void *)uint64_t v34 = *(void *)v35;
    v34[8] = v35[8];
    uint64_t v36 = *(int *)(v30 + 24);
    uint64_t v37 = &v28[v36];
    uint64_t v38 = &v29[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  return a1;
}

void *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapBuildingData(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v70 = *(void *)(v9 - 8);
  uint64_t v71 = v9;
  uint64_t v69 = *(void (**)(char *, char *))(v70 + 24);
  v69(v7, v8);
  uint64_t v72 = a3;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v14 = *((void *)v13 - 1);
  unsigned int v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v11, v12, v71);
      uint64_t v18 = v13[5];
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      char v21 = v20[8];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v21;
      uint64_t v22 = v13[6];
      uint64_t v23 = &v11[v22];
      uint64_t v24 = &v12[v22];
      char v25 = v24[8];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v25;
      uint64_t v26 = v13[7];
      uint64_t v27 = &v11[v26];
      uint64_t v28 = &v12[v26];
      char v29 = v28[8];
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v29;
      (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v11, v12, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v69)(v11, v12, v71);
  uint64_t v49 = v13[5];
  uint64_t v50 = &v11[v49];
  uint64_t v51 = &v12[v49];
  char v52 = v51[8];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v52;
  uint64_t v53 = v13[6];
  uint64_t v54 = &v11[v53];
  uint64_t v55 = &v12[v53];
  char v56 = v55[8];
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v56;
  uint64_t v57 = v13[7];
  uint64_t v58 = &v11[v57];
  uint64_t v59 = &v12[v57];
  char v60 = v59[8];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v60;
LABEL_7:
  uint64_t v31 = *(int *)(v72 + 32);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      ((void (*)(char *, char *, uint64_t))v69)(v32, v33, v71);
      uint64_t v61 = *(int *)(v34 + 20);
      uint64_t v62 = &v32[v61];
      uint64_t v63 = &v33[v61];
      char v64 = v63[8];
      *(void *)uint64_t v62 = *(void *)v63;
      v62[8] = v64;
      uint64_t v65 = *(int *)(v34 + 24);
      uint64_t v66 = &v32[v65];
      uint64_t v67 = &v33[v65];
      char v68 = v67[8];
      *(void *)uint64_t v66 = *(void *)v67;
      v66[8] = v68;
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    memcpy(v32, v33, *(void *)(*(void *)(v47 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v32, v33, v71);
  uint64_t v39 = *(int *)(v34 + 20);
  uint64_t v40 = &v32[v39];
  uint64_t v41 = &v33[v39];
  char v42 = v41[8];
  *(void *)uint64_t v40 = *(void *)v41;
  v40[8] = v42;
  uint64_t v43 = *(int *)(v34 + 24);
  uint64_t v44 = &v32[v43];
  uint64_t v45 = &v33[v43];
  char v46 = v45[8];
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v46;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

_OWORD *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapBuildingData(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    char v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)char v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    char v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v26 = a3[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    v10(v27, v28, v9);
    uint64_t v32 = *(int *)(v29 + 20);
    uint64_t v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = *(int *)(v29 + 24);
    uint64_t v36 = &v27[v35];
    int v37 = &v28[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

void *assignWithTake for CLP_LogEntry_PrivateData_GEOMapBuildingData(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v60 = *(void *)(v9 - 8);
  uint64_t v61 = v9;
  uint64_t v59 = *(void (**)(char *, char *))(v60 + 40);
  v59(v7, v8);
  uint64_t v62 = a3;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v11, v12, v61);
      uint64_t v18 = v13[5];
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v13[6];
      uint64_t v22 = &v11[v21];
      uint64_t v23 = &v12[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v23[8];
      uint64_t v24 = v13[7];
      char v25 = &v11[v24];
      uint64_t v26 = &v12[v24];
      *(void *)char v25 = *(void *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v11, v12, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v59)(v11, v12, v61);
  uint64_t v44 = v13[5];
  uint64_t v45 = &v11[v44];
  char v46 = &v12[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v47 = v13[6];
  uint64_t v48 = &v11[v47];
  uint64_t v49 = &v12[v47];
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
  uint64_t v50 = v13[7];
  uint64_t v51 = &v11[v50];
  char v52 = &v12[v50];
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = v52[8];
LABEL_7:
  uint64_t v28 = *(int *)(v62 + 32);
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      ((void (*)(char *, char *, uint64_t))v59)(v29, v30, v61);
      uint64_t v53 = *(int *)(v31 + 20);
      uint64_t v54 = &v29[v53];
      uint64_t v55 = &v30[v53];
      *(void *)uint64_t v54 = *(void *)v55;
      v54[8] = v55[8];
      uint64_t v56 = *(int *)(v31 + 24);
      uint64_t v57 = &v29[v56];
      uint64_t v58 = &v30[v56];
      *(void *)uint64_t v57 = *(void *)v58;
      v57[8] = v58[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    memcpy(v29, v30, *(void *)(*(void *)(v42 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v29, v30, v61);
  uint64_t v36 = *(int *)(v31 + 20);
  int v37 = &v29[v36];
  int v38 = &v30[v36];
  *(void *)int v37 = *(void *)v38;
  v37[8] = v38[8];
  uint64_t v39 = *(int *)(v31 + 24);
  uint64_t v40 = &v29[v39];
  uint64_t v41 = &v30[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  v40[8] = v41[8];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F5F5D4);
}

uint64_t sub_246F5F5D4(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  int v17 = &a1[a3[8]];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F5F768);
}

char *sub_246F5F768(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  int v17 = &v5[a4[8]];
  return (char *)v15(v17, a2, a2, v16);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *((unsigned char *)v7 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    v14[4] = v15[4];
    *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
    uint64_t v16 = a3[8];
    uint64_t v17 = a3[9];
    uint64_t v18 = (char *)v7 + v16;
    uint64_t v19 = (char *)a2 + v16;
    v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    uint64_t v20 = (char *)v7 + v17;
    uint64_t v21 = (char *)a2 + v17;
    v20[4] = v21[4];
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  }
  return v7;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  v12[4] = v13[4];
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  void v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v18 = (char *)a1 + v15;
  uint64_t v19 = (char *)a2 + v15;
  v18[4] = v19[4];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  return a1;
}

void *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  v11[4] = v13;
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v17;
  uint64_t v18 = a3[9];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  char v21 = v20[4];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  v19[4] = v21;
  return a1;
}

void *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  v15[4] = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  char v17 = (char *)a1 + v14;
  uint64_t v18 = (char *)a2 + v14;
  void v17[4] = v18[4];
  *(_DWORD *)char v17 = *(_DWORD *)v18;
  return a1;
}

void *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  v15[4] = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  char v17 = (char *)a1 + v14;
  uint64_t v18 = (char *)a2 + v14;
  void v17[4] = v18[4];
  *(_DWORD *)char v17 = *(_DWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_18Tm_3);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_19Tm_3);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType()
{
  return &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    char v17 = (char *)v7 + v14;
    uint64_t v18 = (char *)a2 + v14;
    *(void *)char v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    char v21 = (char *)v7 + v19;
    uint64_t v22 = (char *)a2 + v19;
    *(void *)char v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = (char *)v7 + v20;
    uint64_t v24 = (char *)a2 + v20;
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
  }
  return v7;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  char v21 = (char *)a1 + v18;
  uint64_t v22 = (char *)a2 + v18;
  *(void *)char v21 = *(void *)v22;
  v21[8] = v22[8];
  return a1;
}

void *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v13;
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[8];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v21;
  uint64_t v22 = a3[9];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  char v25 = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v25;
  return a1;
}

void *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  char v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  uint64_t v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = (char *)a1 + v17;
  char v21 = (char *)a2 + v17;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  return a1;
}

void *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  char v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  uint64_t v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = (char *)a1 + v17;
  char v21 = (char *)a2 + v17;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_18Tm_4);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_19Tm_4);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch();
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (void *)((char *)v7 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      void *v14 = *v15;
      uint64_t v19 = v16[5];
      char v52 = (char *)v14 + v19;
      uint64_t v53 = v11;
      uint64_t v20 = v12;
      char v21 = (char *)v15 + v19;
      swift_bridgeObjectRetain();
      uint64_t v22 = v21;
      uint64_t v12 = v20;
      uint64_t v11 = v53;
      v12(v52, v22, v53);
      uint64_t v23 = v16[6];
      uint64_t v24 = (char *)v14 + v23;
      char v25 = (char *)v15 + v23;
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      uint64_t v26 = v16[7];
      uint64_t v27 = (char *)v14 + v26;
      uint64_t v28 = (char *)v15 + v26;
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      uint64_t v29 = v16[8];
      uint64_t v30 = (char *)v14 + v29;
      uint64_t v31 = (char *)v15 + v29;
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      uint64_t v32 = v16[9];
      uint64_t v33 = (char *)v14 + v32;
      int v34 = (char *)v15 + v32;
      *(void *)uint64_t v33 = *(void *)v34;
      v33[8] = v34[8];
      (*(void (**)(void *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v35 = a3[7];
    uint64_t v36 = a3[8];
    int v37 = (char *)v7 + v35;
    int v38 = (char *)a2 + v35;
    *(void *)int v37 = *(void *)v38;
    v37[8] = v38[8];
    *((unsigned char *)v7 + v36) = *((unsigned char *)a2 + v36);
    uint64_t v39 = a3[9];
    uint64_t v40 = a3[10];
    uint64_t v41 = (char *)v7 + v39;
    uint64_t v42 = (char *)a2 + v39;
    *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
    v41[4] = v42[4];
    uint64_t v43 = (char *)v7 + v40;
    uint64_t v44 = (char *)a2 + v40;
    uint64_t v45 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v12(v43, v44, v11);
      v43[*(int *)(v45 + 20)] = v44[*(int *)(v45 + 20)];
      v43[*(int *)(v45 + 24)] = v44[*(int *)(v45 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    uint64_t v48 = a3[11];
    uint64_t v49 = (char *)v7 + v48;
    uint64_t v50 = (char *)a2 + v48;
    *(void *)uint64_t v49 = *(void *)v50;
    v49[8] = v50[8];
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v11(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 20), v5);
  }
  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8, v5);
  }
  return result;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    uint64_t v17 = v14[5];
    uint64_t v50 = (char *)v12 + v17;
    uint64_t v51 = v9;
    uint64_t v18 = v10;
    uint64_t v19 = (char *)v13 + v17;
    swift_bridgeObjectRetain();
    uint64_t v20 = v19;
    uint64_t v10 = v18;
    uint64_t v9 = v51;
    v10(v50, v20, v51);
    uint64_t v21 = v14[6];
    uint64_t v22 = (char *)v12 + v21;
    uint64_t v23 = (char *)v13 + v21;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v14[7];
    char v25 = (char *)v12 + v24;
    uint64_t v26 = (char *)v13 + v24;
    *(void *)char v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = v14[8];
    uint64_t v28 = (char *)v12 + v27;
    uint64_t v29 = (char *)v13 + v27;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    uint64_t v30 = v14[9];
    uint64_t v31 = (char *)v12 + v30;
    uint64_t v32 = (char *)v13 + v30;
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    (*(void (**)(void *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v33 = a3[7];
  uint64_t v34 = a3[8];
  uint64_t v35 = (char *)a1 + v33;
  uint64_t v36 = (char *)a2 + v33;
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  *((unsigned char *)a1 + v34) = *((unsigned char *)a2 + v34);
  uint64_t v37 = a3[9];
  uint64_t v38 = a3[10];
  uint64_t v39 = (char *)a1 + v37;
  uint64_t v40 = (char *)a2 + v37;
  *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
  v39[4] = v40[4];
  uint64_t v41 = (char *)a1 + v38;
  uint64_t v42 = (char *)a2 + v38;
  uint64_t v43 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    v10(v41, v42, v9);
    v41[*(int *)(v43 + 20)] = v42[*(int *)(v43 + 20)];
    v41[*(int *)(v43 + 24)] = v42[*(int *)(v43 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  uint64_t v46 = a3[11];
  uint64_t v47 = (char *)a1 + v46;
  uint64_t v48 = (char *)a2 + v46;
  *(void *)uint64_t v47 = *(void *)v48;
  v47[8] = v48[8];
  return a1;
}

void *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v77 = *(void *)(v9 - 8);
  uint64_t v78 = v9;
  uint64_t v76 = *(void (**)(char *, char *))(v77 + 24);
  v76(v7, v8);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *uint64_t v11 = *v12;
      uint64_t v18 = v13[5];
      uint64_t v19 = (char *)v11 + v18;
      uint64_t v20 = (char *)v12 + v18;
      int v75 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
      swift_bridgeObjectRetain();
      v75(v19, v20, v78);
      uint64_t v21 = v13[6];
      uint64_t v22 = (char *)v11 + v21;
      uint64_t v23 = (char *)v12 + v21;
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v24;
      uint64_t v25 = v13[7];
      uint64_t v26 = (char *)v11 + v25;
      uint64_t v27 = (char *)v12 + v25;
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v28;
      uint64_t v29 = v13[8];
      uint64_t v30 = (char *)v11 + v29;
      uint64_t v31 = (char *)v12 + v29;
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v32;
      uint64_t v33 = v13[9];
      uint64_t v34 = (char *)v11 + v33;
      uint64_t v35 = (char *)v12 + v33;
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v36;
      (*(void (**)(void *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
LABEL_6:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    memcpy(v11, v12, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v11 = *v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v76)((char *)v11 + v13[5], (char *)v12 + v13[5], v78);
  uint64_t v59 = v13[6];
  uint64_t v60 = (char *)v11 + v59;
  uint64_t v61 = (char *)v12 + v59;
  char v62 = v61[8];
  *(void *)uint64_t v60 = *(void *)v61;
  v60[8] = v62;
  uint64_t v63 = v13[7];
  char v64 = (char *)v11 + v63;
  uint64_t v65 = (char *)v12 + v63;
  char v66 = v65[8];
  *(void *)char v64 = *(void *)v65;
  v64[8] = v66;
  uint64_t v67 = v13[8];
  char v68 = (char *)v11 + v67;
  uint64_t v69 = (char *)v12 + v67;
  char v70 = v69[8];
  *(void *)char v68 = *(void *)v69;
  v68[8] = v70;
  uint64_t v71 = v13[9];
  uint64_t v72 = (char *)v11 + v71;
  char v73 = (char *)v12 + v71;
  char v74 = v73[8];
  *(void *)uint64_t v72 = *(void *)v73;
  v72[8] = v74;
LABEL_7:
  uint64_t v38 = a3[7];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = *(void *)v40;
  v39[8] = v40[8];
  *(void *)uint64_t v39 = v41;
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v42 = a3[9];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  LODWORD(v41) = *(_DWORD *)v44;
  v43[4] = v44[4];
  *(_DWORD *)uint64_t v43 = v41;
  uint64_t v45 = a3[10];
  uint64_t v46 = (char *)a1 + v45;
  uint64_t v47 = (char *)a2 + v45;
  uint64_t v48 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (!v51)
  {
    if (!v52)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v76)(v46, v47, v78);
      v46[*(int *)(v48 + 20)] = v47[*(int *)(v48 + 20)];
      v46[*(int *)(v48 + 24)] = v47[*(int *)(v48 + 24)];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v46, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    goto LABEL_12;
  }
  if (v52)
  {
LABEL_12:
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v77 + 16))(v46, v47, v78);
  v46[*(int *)(v48 + 20)] = v47[*(int *)(v48 + 20)];
  v46[*(int *)(v48 + 24)] = v47[*(int *)(v48 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
LABEL_13:
  uint64_t v54 = a3[11];
  uint64_t v55 = (char *)a1 + v54;
  uint64_t v56 = (char *)a2 + v54;
  uint64_t v57 = *(void *)v56;
  v55[8] = v56[8];
  *(void *)uint64_t v55 = v57;
  return a1;
}

void *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + v14[5], (char *)v13 + v14[5], v9);
    uint64_t v17 = v14[6];
    uint64_t v18 = (char *)v12 + v17;
    uint64_t v19 = (char *)v13 + v17;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[7];
    uint64_t v21 = (char *)v12 + v20;
    uint64_t v22 = (char *)v13 + v20;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[8];
    char v24 = (char *)v12 + v23;
    uint64_t v25 = (char *)v13 + v23;
    *(void *)char v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v14[9];
    uint64_t v27 = (char *)v12 + v26;
    char v28 = (char *)v13 + v26;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    (*(void (**)(void *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v29 = a3[7];
  uint64_t v30 = a3[8];
  uint64_t v31 = (char *)a1 + v29;
  char v32 = (char *)a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  *((unsigned char *)a1 + v30) = *((unsigned char *)a2 + v30);
  uint64_t v33 = a3[9];
  uint64_t v34 = a3[10];
  uint64_t v35 = (char *)a1 + v33;
  char v36 = (char *)a2 + v33;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  v35[4] = v36[4];
  uint64_t v37 = (char *)a1 + v34;
  uint64_t v38 = (char *)a2 + v34;
  uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v10(v37, v38, v9);
    v37[*(int *)(v39 + 20)] = v38[*(int *)(v39 + 20)];
    v37[*(int *)(v39 + 24)] = v38[*(int *)(v39 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  uint64_t v42 = a3[11];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  *(void *)uint64_t v43 = *(void *)v44;
  v43[8] = v44[8];
  return a1;
}

void *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  uint64_t v63 = *(void (**)(char *, char *))(v64 + 40);
  v63(v7, v8);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v11[v13[5]], &v12[v13[5]], v65);
      uint64_t v18 = v13[6];
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v13[7];
      uint64_t v22 = &v11[v21];
      uint64_t v23 = &v12[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v23[8];
      uint64_t v24 = v13[8];
      uint64_t v25 = &v11[v24];
      uint64_t v26 = &v12[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = v13[9];
      char v28 = &v11[v27];
      uint64_t v29 = &v12[v27];
      *(void *)char v28 = *(void *)v29;
      v28[8] = v29[8];
      (*(void (**)(char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    memcpy(v11, v12, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v11 = *(void *)v12;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v63)(&v11[v13[5]], &v12[v13[5]], v65);
  uint64_t v51 = v13[6];
  int v52 = &v11[v51];
  uint64_t v53 = &v12[v51];
  *(void *)int v52 = *(void *)v53;
  v52[8] = v53[8];
  uint64_t v54 = v13[7];
  uint64_t v55 = &v11[v54];
  uint64_t v56 = &v12[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  v55[8] = v56[8];
  uint64_t v57 = v13[8];
  uint64_t v58 = &v11[v57];
  uint64_t v59 = &v12[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v59[8];
  uint64_t v60 = v13[9];
  uint64_t v61 = &v11[v60];
  char v62 = &v12[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  v61[8] = v62[8];
LABEL_7:
  uint64_t v31 = a3[7];
  uint64_t v32 = a3[8];
  uint64_t v33 = (char *)a1 + v31;
  uint64_t v34 = (char *)a2 + v31;
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v34[8];
  *((unsigned char *)a1 + v32) = *((unsigned char *)a2 + v32);
  uint64_t v35 = a3[9];
  uint64_t v36 = a3[10];
  uint64_t v37 = (char *)a1 + v35;
  uint64_t v38 = (char *)a2 + v35;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  v37[4] = v38[4];
  uint64_t v39 = (char *)a1 + v36;
  uint64_t v40 = (char *)a2 + v36;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v42 + 48);
  int v44 = v43(v39, 1, v41);
  int v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v63)(v39, v40, v65);
      v39[*(int *)(v41 + 20)] = v40[*(int *)(v41 + 20)];
      v39[*(int *)(v41 + 24)] = v40[*(int *)(v41 + 24)];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v39, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    goto LABEL_12;
  }
  if (v45)
  {
LABEL_12:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    memcpy(v39, v40, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v64 + 32))(v39, v40, v65);
  v39[*(int *)(v41 + 20)] = v40[*(int *)(v41 + 20)];
  v39[*(int *)(v41 + 24)] = v40[*(int *)(v41 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
LABEL_13:
  uint64_t v47 = a3[11];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  *(void *)uint64_t v48 = *(void *)v49;
  v48[8] = v49[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F61B60);
}

uint64_t sub_246F61B60(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  int v17 = &a1[a3[10]];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F61CF4);
}

char *sub_246F61CF4(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  int v17 = &v5[a4[10]];
  return (char *)v15(v17, a2, a2, v16);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType()
{
  return &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_210Tm_9);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_211Tm_9);
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      uint64_t v19 = v16[5];
      uint64_t v20 = &v14[v19];
      uint64_t v21 = &v15[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v16[6];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v16[7];
      uint64_t v26 = &v14[v25];
      uint64_t v27 = &v15[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    *((unsigned char *)v7 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return v7;
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

void *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v48 = a3;
  uint64_t v49 = a2;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v46 = a1;
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  uint64_t v47 = (uint64_t)v13;
  LODWORD(v13) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (v13)
  {
    if (!v18)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v47, v14, v9);
      uint64_t v21 = v15[5];
      uint64_t v22 = v47 + v21;
      uint64_t v23 = &v14[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v24;
      uint64_t v25 = v15[6];
      uint64_t v26 = v47 + v25;
      uint64_t v27 = &v14[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      *(unsigned char *)(v26 + 8) = v28;
      uint64_t v29 = v15[7];
      uint64_t v30 = v47 + v29;
      uint64_t v31 = &v14[v29];
      char v32 = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = v32;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v16 + 56))(v47, 0, 1, v15);
      goto LABEL_9;
    }
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v47;
  }
  else
  {
    if (!v18)
    {
      v11((char *)v47, v14, v9);
      uint64_t v33 = v15[5];
      uint64_t v34 = v47 + v33;
      uint64_t v35 = &v14[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      *(unsigned char *)(v34 + 8) = v36;
      uint64_t v37 = v15[6];
      uint64_t v38 = v47 + v37;
      uint64_t v39 = &v14[v37];
      char v40 = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      *(unsigned char *)(v38 + 8) = v40;
      uint64_t v41 = v15[7];
      uint64_t v42 = v47 + v41;
      uint64_t v43 = &v14[v41];
      char v44 = v43[8];
      *(void *)uint64_t v42 = *(void *)v43;
      *(unsigned char *)(v42 + 8) = v44;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v47;
  }
  memcpy(v20, v14, v19);
LABEL_9:
  uint64_t result = v46;
  *((unsigned char *)v46 + *(int *)(v48 + 28)) = *((unsigned char *)v49 + *(int *)(v48 + 28));
  return result;
}

void *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    size_t v19 = &v13[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    char v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)char v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

void *assignWithTake for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  uint64_t v42 = a3;
  uint64_t v43 = a2;
  uint64_t v12 = *(int *)(a3 + 24);
  char v40 = a1;
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  uint64_t v41 = (uint64_t)v13;
  LODWORD(v13) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (v13)
  {
    if (!v18)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v41, v14, v9);
      uint64_t v21 = v15[5];
      uint64_t v22 = v41 + v21;
      uint64_t v23 = &v14[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v23[8];
      uint64_t v24 = v15[6];
      uint64_t v25 = v41 + v24;
      uint64_t v26 = &v14[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      *(unsigned char *)(v25 + 8) = v26[8];
      uint64_t v27 = v15[7];
      uint64_t v28 = v41 + v27;
      uint64_t v29 = &v14[v27];
      *(void *)uint64_t v28 = *(void *)v29;
      *(unsigned char *)(v28 + 8) = v29[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v16 + 56))(v41, 0, 1, v15);
      goto LABEL_9;
    }
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v41;
  }
  else
  {
    if (!v18)
    {
      v11((char *)v41, v14, v9);
      uint64_t v30 = v15[5];
      uint64_t v31 = v41 + v30;
      char v32 = &v14[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      *(unsigned char *)(v31 + 8) = v32[8];
      uint64_t v33 = v15[6];
      uint64_t v34 = v41 + v33;
      uint64_t v35 = &v14[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      *(unsigned char *)(v34 + 8) = v35[8];
      uint64_t v36 = v15[7];
      uint64_t v37 = v41 + v36;
      uint64_t v38 = &v14[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      *(unsigned char *)(v37 + 8) = v38[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v41;
  }
  memcpy(v20, v14, v19);
LABEL_9:
  uint64_t result = v40;
  *((unsigned char *)v40 + *(int *)(v42 + 28)) = *((unsigned char *)v43 + *(int *)(v42 + 28));
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_483Tm_7);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_484Tm_7);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_TechnologyStatus(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WatchOrientation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F63010);
}

uint64_t sub_246F63010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 4u) {
      int v10 = 4;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 4;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 4u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WatchOrientation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F630EC);
}

uint64_t sub_246F630EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_WatchOrientation()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WristState(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    int v10 = &a1[v9];
    unsigned int v11 = &a2[v9];
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      int v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v25] = a2[v25];
    uint64_t v26 = a3[9];
    a1[a3[8]] = a2[a3[8]];
    a1[v26] = a2[v26];
    uint64_t v27 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    a1[v27] = a2[v27];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  unsigned int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    int v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  uint64_t v24 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  uint64_t v25 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 24);
  v42(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v40 = *((void *)v10 - 1);
  unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v40 + 48);
  uint64_t v43 = v8;
  LODWORD(v8) = v11(v8, 1, v10);
  int v12 = v11((uint64_t)v9, 1, v10);
  if (v8)
  {
    if (!v12)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v43, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = v43 + v15;
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      *(unsigned char *)(v16 + 8) = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = v43 + v19;
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = v43 + v23;
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      *(unsigned char *)(v24 + 8) = v26;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v40 + 56))(v43, 0, 1, v10);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v43;
  }
  else
  {
    if (!v12)
    {
      v42(v43, (uint64_t)v9, v6);
      uint64_t v27 = v10[5];
      uint64_t v28 = v43 + v27;
      uint64_t v29 = &v9[v27];
      char v30 = v29[8];
      *(void *)uint64_t v28 = *(void *)v29;
      *(unsigned char *)(v28 + 8) = v30;
      uint64_t v31 = v10[6];
      uint64_t v32 = v43 + v31;
      uint64_t v33 = &v9[v31];
      char v34 = v33[8];
      *(void *)uint64_t v32 = *(void *)v33;
      *(unsigned char *)(v32 + 8) = v34;
      uint64_t v35 = v10[7];
      uint64_t v36 = v43 + v35;
      uint64_t v37 = &v9[v35];
      char v38 = v37[8];
      *(void *)uint64_t v36 = *(void *)v37;
      *(unsigned char *)(v36 + 8) = v38;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v43, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v43;
  }
  memcpy(v14, v9, v13);
LABEL_9:
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  int v10 = (char *)(a2 + v8);
  unsigned int v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  uint64_t v24 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  uint64_t v25 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 40);
  v39(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  int v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v37 = *((void *)v10 - 1);
  unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v37 + 48);
  uint64_t v40 = v8;
  LODWORD(v8) = v11(v8, 1, v10);
  int v12 = v11((uint64_t)v9, 1, v10);
  if (v8)
  {
    if (!v12)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v40, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = v40 + v15;
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      *(unsigned char *)(v16 + 8) = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = v40 + v18;
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v20[8];
      uint64_t v21 = v10[7];
      uint64_t v22 = v40 + v21;
      uint64_t v23 = &v9[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = v23[8];
      (*(void (**)(uint64_t, void, uint64_t, int *))(v37 + 56))(v40, 0, 1, v10);
      goto LABEL_9;
    }
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v40;
  }
  else
  {
    if (!v12)
    {
      v39(v40, (uint64_t)v9, v6);
      uint64_t v24 = v10[5];
      uint64_t v25 = v40 + v24;
      char v26 = &v9[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      *(unsigned char *)(v25 + 8) = v26[8];
      uint64_t v27 = v10[6];
      uint64_t v28 = v40 + v27;
      uint64_t v29 = &v9[v27];
      *(void *)uint64_t v28 = *(void *)v29;
      *(unsigned char *)(v28 + 8) = v29[8];
      uint64_t v30 = v10[7];
      uint64_t v31 = v40 + v30;
      uint64_t v32 = &v9[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      *(unsigned char *)(v31 + 8) = v32[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    size_t v13 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    uint64_t v14 = (void *)v40;
  }
  memcpy(v14, v9, v13);
LABEL_9:
  uint64_t v33 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v33) = *(unsigned char *)(a2 + v33);
  uint64_t v34 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v34) = *(unsigned char *)(a2 + v34);
  uint64_t v35 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v35) = *(unsigned char *)(a2 + v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F63E44);
}

uint64_t __swift_get_extra_inhabitant_index_705Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 2) {
    int v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v15 = -2;
  }
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F63F90);
}

uint64_t __swift_store_extra_inhabitant_index_706Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_WristState()
{
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WristState.WristStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WatchState(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *((void *)v12 - 1);
    uint64_t v56 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    uint64_t v55 = v13;
    uint64_t v57 = v8;
    if (v56(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = a3[6];
    uint64_t v26 = a3[7];
    uint64_t v27 = (char *)a1 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    uint64_t v29 = (char *)a1 + v26;
    uint64_t v30 = (char *)a2 + v26;
    uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      v57(v29, v30, v7);
      v29[*(int *)(v31 + 20)] = v30[*(int *)(v31 + 20)];
      v29[*(int *)(v31 + 24)] = v30[*(int *)(v31 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    uint64_t v34 = a3[8];
    uint64_t v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    uint64_t v37 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
    uint64_t v38 = *((void *)v37 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      uint64_t v54 = v38;
      v57(v35, v36, v7);
      uint64_t v40 = v37[5];
      uint64_t v41 = &v35[v40];
      uint64_t v42 = &v36[v40];
      if (v56(&v36[v40], 1, v12))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        v57(v41, v42, v7);
        uint64_t v44 = v12[5];
        int v45 = &v41[v44];
        uint64_t v46 = &v42[v44];
        *(void *)int v45 = *(void *)v46;
        v45[8] = v46[8];
        uint64_t v47 = v12[6];
        uint64_t v48 = &v41[v47];
        uint64_t v49 = &v42[v47];
        *(void *)uint64_t v48 = *(void *)v49;
        v48[8] = v49[8];
        uint64_t v50 = v12[7];
        uint64_t v51 = &v41[v50];
        int v52 = &v42[v50];
        *(void *)uint64_t v51 = *(void *)v52;
        v51[8] = v52[8];
        (*(void (**)(char *, void, uint64_t, int *))(v55 + 56))(v41, 0, 1, v12);
      }
      v35[v37[6]] = v36[v37[6]];
      v35[v37[7]] = v36[v37[7]];
      v35[v37[8]] = v36[v37[8]];
      v35[v37[9]] = v36[v37[9]];
      v35[v37[10]] = v36[v37[10]];
      v35[v37[11]] = v36[v37[11]];
      (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v35, 0, 1, v37);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v14(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6)) {
    v14(v5, v4);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
    v14(v8, v4);
  }
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    v14(v10, v4);
    uint64_t v13 = v10 + *(int *)(v11 + 20);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v13, 1, v6);
    if (!result)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v59 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v56 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  uint64_t v55 = v12;
  uint64_t v57 = (void (*)(void *, const void *, uint64_t))v7;
  uint64_t v58 = v6;
  if (v56(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = v59;
  uint64_t v26 = v59 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = (void *)(v59 + v24);
  uint64_t v29 = (const void *)(a2 + v24);
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    uint64_t v33 = v58;
  }
  else
  {
    uint64_t v33 = v58;
    v57(v28, v29, v58);
    *((unsigned char *)v28 + *(int *)(v30 + 20)) = *((unsigned char *)v29 + *(int *)(v30 + 20));
    *((unsigned char *)v28 + *(int *)(v30 + 24)) = *((unsigned char *)v29 + *(int *)(v30 + 24));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  uint64_t v34 = a3[8];
  uint64_t v35 = (char *)(v59 + v34);
  uint64_t v36 = (char *)(a2 + v34);
  uint64_t v37 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v38 = *((void *)v37 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    uint64_t v54 = v38;
    v57(v35, v36, v33);
    uint64_t v40 = v37[5];
    uint64_t v41 = &v35[v40];
    uint64_t v42 = &v36[v40];
    if (v56(&v36[v40], 1, v11))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v57(v41, v42, v33);
      uint64_t v44 = v11[5];
      int v45 = &v41[v44];
      uint64_t v46 = &v42[v44];
      *(void *)int v45 = *(void *)v46;
      v45[8] = v46[8];
      uint64_t v47 = v11[6];
      uint64_t v48 = &v41[v47];
      uint64_t v49 = &v42[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = v11[7];
      uint64_t v51 = &v41[v50];
      int v52 = &v42[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      (*(void (**)(char *, void, uint64_t, int *))(v55 + 56))(v41, 0, 1, v11);
    }
    v35[v37[6]] = v36[v37[6]];
    v35[v37[7]] = v36[v37[7]];
    v35[v37[8]] = v36[v37[8]];
    v35[v37[9]] = v36[v37[9]];
    v35[v37[10]] = v36[v37[10]];
    v35[v37[11]] = v36[v37[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v35, 0, 1, v37);
    return v59;
  }
  return v25;
}

char *assignWithCopy for CLP_LogEntry_PrivateData_WatchState(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v117 = *(void *)(v6 - 8);
  uint64_t v116 = *(void (**)(char *, uint64_t, uint64_t))(v117 + 24);
  v116(a1, a2, v6);
  __src = a3;
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
  unsigned int v13 = v12(v8, 1, v10);
  uint64_t v114 = v12;
  unsigned int v14 = v12(v9, 1, v10);
  uint64_t v115 = v10;
  uint64_t v113 = v11;
  uint64_t v118 = v6;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      char v18 = v17[8];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v10[7];
      uint64_t v24 = &v8[v23];
      uint64_t v25 = &v9[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v116(v8, (uint64_t)v9, v6);
  uint64_t v57 = v10[5];
  uint64_t v58 = &v8[v57];
  uint64_t v59 = &v9[v57];
  char v60 = v59[8];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v60;
  uint64_t v61 = v10[6];
  char v62 = &v8[v61];
  uint64_t v63 = &v9[v61];
  char v64 = v63[8];
  *(void *)char v62 = *(void *)v63;
  v62[8] = v64;
  uint64_t v65 = v10[7];
  char v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  char v68 = v67[8];
  *(void *)char v66 = *(void *)v67;
  v66[8] = v68;
LABEL_7:
  uint64_t v28 = __src;
  uint64_t v29 = __src[6];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (int *)(a2 + v29);
  int v32 = *v31;
  v30[4] = *((unsigned char *)v31 + 4);
  *(_DWORD *)uint64_t v30 = v32;
  uint64_t v33 = __src[7];
  __srca = a1;
  uint64_t v34 = &a1[v33];
  uint64_t v35 = (char *)(a2 + v33);
  uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v34, v35, v118);
      v34[*(int *)(v36 + 20)] = v35[*(int *)(v36 + 20)];
      v34[*(int *)(v36 + 24)] = v35[*(int *)(v36 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
LABEL_12:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  v116(v34, (uint64_t)v35, v118);
  v34[*(int *)(v36 + 20)] = v35[*(int *)(v36 + 20)];
  v34[*(int *)(v36 + 24)] = v35[*(int *)(v36 + 24)];
LABEL_13:
  uint64_t v42 = __srca;
  uint64_t v43 = v28[8];
  uint64_t v44 = &__srca[v43];
  int v45 = (char *)(a2 + v43);
  uint64_t v46 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v47 = *((void *)v46 - 1);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, int *))(v47 + 48);
  int v49 = v48(v44, 1, v46);
  int v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (v50)
    {
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v44, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
      goto LABEL_19;
    }
    v116(v44, (uint64_t)v45, v118);
    uint64_t v69 = v46[5];
    char v70 = &v45[v69];
    uint64_t v112 = (uint64_t)&v44[v69];
    int v71 = ((uint64_t (*)(void))v12)();
    unsigned int v72 = v12(v70, 1, v115);
    if (v71)
    {
      if (!v72)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v117 + 16))(v112, v70, v118);
        uint64_t v87 = v115[5];
        uint64_t v88 = v112 + v87;
        int v89 = &v70[v87];
        char v90 = v89[8];
        *(void *)uint64_t v88 = *(void *)v89;
        *(unsigned char *)(v88 + 8) = v90;
        uint64_t v91 = v115[6];
        uint64_t v92 = v112 + v91;
        char v93 = &v70[v91];
        char v94 = v93[8];
        *(void *)uint64_t v92 = *(void *)v93;
        *(unsigned char *)(v92 + 8) = v94;
        uint64_t v95 = v115[7];
        uint64_t v96 = v112 + v95;
        char v97 = &v70[v95];
        char v98 = v97[8];
        *(void *)uint64_t v96 = *(void *)v97;
        *(unsigned char *)(v96 + 8) = v98;
        (*(void (**)(uint64_t, void, uint64_t, int *))(v113 + 56))(v112, 0, 1, v115);
        goto LABEL_32;
      }
      size_t v73 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      char v74 = (void *)v112;
    }
    else
    {
      if (!v72)
      {
        v116((char *)v112, (uint64_t)v70, v118);
        uint64_t v99 = v115[5];
        uint64_t v100 = v112 + v99;
        uint64_t v101 = &v70[v99];
        char v102 = v101[8];
        *(void *)uint64_t v100 = *(void *)v101;
        *(unsigned char *)(v100 + 8) = v102;
        uint64_t v103 = v115[6];
        uint64_t v104 = v112 + v103;
        uint64_t v105 = &v70[v103];
        char v106 = v105[8];
        *(void *)uint64_t v104 = *(void *)v105;
        *(unsigned char *)(v104 + 8) = v106;
        uint64_t v107 = v115[7];
        uint64_t v108 = v112 + v107;
        char v109 = &v70[v107];
        char v110 = v109[8];
        *(void *)uint64_t v108 = *(void *)v109;
        *(unsigned char *)(v108 + 8) = v110;
        goto LABEL_32;
      }
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v112, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      size_t v73 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      char v74 = (void *)v112;
    }
    memcpy(v74, v70, v73);
LABEL_32:
    v44[v46[6]] = v45[v46[6]];
    v44[v46[7]] = v45[v46[7]];
    v44[v46[8]] = v45[v46[8]];
    v44[v46[9]] = v45[v46[9]];
    v44[v46[10]] = v45[v46[10]];
    v44[v46[11]] = v45[v46[11]];
    return v42;
  }
  if (v50)
  {
LABEL_19:
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    memcpy(v44, v45, *(void *)(*(void *)(v56 - 8) + 64));
    return v42;
  }
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
  v51(v44, v45, v118);
  uint64_t v52 = v46[5];
  uint64_t v53 = &v44[v52];
  uint64_t v54 = &v45[v52];
  if (v114(&v45[v52], 1, v115))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    v51(v53, v54, v118);
    uint64_t v75 = v115[5];
    uint64_t v76 = &v53[v75];
    uint64_t v77 = &v54[v75];
    char v78 = v77[8];
    *(void *)uint64_t v76 = *(void *)v77;
    v76[8] = v78;
    uint64_t v79 = v115[6];
    uint64_t v80 = &v53[v79];
    char v81 = &v54[v79];
    char v82 = v81[8];
    *(void *)uint64_t v80 = *(void *)v81;
    v80[8] = v82;
    uint64_t v83 = v115[7];
    uint64_t v84 = &v53[v83];
    uint64_t v85 = &v54[v83];
    char v86 = v85[8];
    *(void *)uint64_t v84 = *(void *)v85;
    v84[8] = v86;
    (*(void (**)(char *, void, uint64_t, int *))(v113 + 56))(v53, 0, 1, v115);
  }
  uint64_t v42 = __srca;
  v44[v46[6]] = v45[v46[6]];
  v44[v46[7]] = v45[v46[7]];
  v44[v46[8]] = v45[v46[8]];
  v44[v46[9]] = v45[v46[9]];
  v44[v46[10]] = v45[v46[10]];
  v44[v46[11]] = v45[v46[11]];
  (*(void (**)(char *, void, uint64_t, int *))(v47 + 56))(v44, 0, 1, v46);
  return v42;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v59 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v56 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  uint64_t v55 = v12;
  uint64_t v57 = (void (*)(void *, const void *, uint64_t))v7;
  uint64_t v58 = v6;
  if (v56(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)char v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    char v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = a3[6];
  uint64_t v24 = a3[7];
  uint64_t v25 = v59;
  uint64_t v26 = v59 + v23;
  uint64_t v27 = a2 + v23;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = (void *)(v59 + v24);
  uint64_t v29 = (const void *)(a2 + v24);
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    uint64_t v33 = v58;
  }
  else
  {
    uint64_t v33 = v58;
    v57(v28, v29, v58);
    *((unsigned char *)v28 + *(int *)(v30 + 20)) = *((unsigned char *)v29 + *(int *)(v30 + 20));
    *((unsigned char *)v28 + *(int *)(v30 + 24)) = *((unsigned char *)v29 + *(int *)(v30 + 24));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  uint64_t v34 = a3[8];
  uint64_t v35 = (char *)(v59 + v34);
  uint64_t v36 = (char *)(a2 + v34);
  uint64_t v37 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v38 = *((void *)v37 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    uint64_t v54 = v38;
    v57(v35, v36, v33);
    uint64_t v40 = v37[5];
    uint64_t v41 = &v35[v40];
    uint64_t v42 = &v36[v40];
    if (v56(&v36[v40], 1, v11))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v57(v41, v42, v33);
      uint64_t v44 = v11[5];
      int v45 = &v41[v44];
      uint64_t v46 = &v42[v44];
      *(void *)int v45 = *(void *)v46;
      v45[8] = v46[8];
      uint64_t v47 = v11[6];
      uint64_t v48 = &v41[v47];
      int v49 = &v42[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = v11[7];
      uint64_t v51 = &v41[v50];
      uint64_t v52 = &v42[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      (*(void (**)(char *, void, uint64_t, int *))(v55 + 56))(v41, 0, 1, v11);
    }
    v35[v37[6]] = v36[v37[6]];
    v35[v37[7]] = v36[v37[7]];
    v35[v37[8]] = v36[v37[8]];
    v35[v37[9]] = v36[v37[9]];
    v35[v37[10]] = v36[v37[10]];
    v35[v37[11]] = v36[v37[11]];
    (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v35, 0, 1, v37);
    return v59;
  }
  return v25;
}

char *assignWithTake for CLP_LogEntry_PrivateData_WatchState(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v101 = *(void *)(v6 - 8);
  uint64_t v100 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 40);
  v100(a1, a2, v6);
  __src = a3;
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
  unsigned int v13 = v12(v8, 1, v10);
  char v98 = v12;
  unsigned int v14 = v12(v9, 1, v10);
  uint64_t v99 = v10;
  uint64_t v97 = v11;
  uint64_t v102 = v6;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v21 = v10[7];
      char v22 = &v8[v21];
      uint64_t v23 = &v9[v21];
      *(void *)char v22 = *(void *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v100(v8, (uint64_t)v9, v6);
  uint64_t v53 = v10[5];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v55[8];
  uint64_t v56 = v10[6];
  uint64_t v57 = &v8[v56];
  uint64_t v58 = &v9[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  v57[8] = v58[8];
  uint64_t v59 = v10[7];
  char v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  *(void *)char v60 = *(void *)v61;
  v60[8] = v61[8];
LABEL_7:
  uint64_t v25 = __src;
  uint64_t v26 = __src[6];
  uint64_t v27 = __src[7];
  uint64_t v28 = &a1[v26];
  uint64_t v29 = a2 + v26;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  v28[4] = *(unsigned char *)(v29 + 4);
  __srca = a1;
  uint64_t v30 = &a1[v27];
  uint64_t v31 = (char *)(a2 + v27);
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v30, v31, v102);
      v30[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
      v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v30, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  v100(v30, (uint64_t)v31, v102);
  v30[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
  v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
LABEL_13:
  uint64_t v38 = __srca;
  uint64_t v39 = v25[8];
  uint64_t v40 = &__srca[v39];
  uint64_t v41 = (char *)(a2 + v39);
  uint64_t v42 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v43 = *((void *)v42 - 1);
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t, int *))(v43 + 48);
  int v45 = v44(v40, 1, v42);
  int v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (v46)
    {
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
      goto LABEL_19;
    }
    v100(v40, (uint64_t)v41, v102);
    uint64_t v62 = v42[5];
    uint64_t v63 = &v41[v62];
    uint64_t v96 = (uint64_t)&v40[v62];
    int v64 = ((uint64_t (*)(void))v12)();
    unsigned int v65 = v12(v63, 1, v99);
    if (v64)
    {
      if (!v65)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v101 + 32))(v96, v63, v102);
        uint64_t v77 = v99[5];
        uint64_t v78 = v96 + v77;
        uint64_t v79 = &v63[v77];
        *(void *)uint64_t v78 = *(void *)v79;
        *(unsigned char *)(v78 + 8) = v79[8];
        uint64_t v80 = v99[6];
        uint64_t v81 = v96 + v80;
        char v82 = &v63[v80];
        *(void *)uint64_t v81 = *(void *)v82;
        *(unsigned char *)(v81 + 8) = v82[8];
        uint64_t v83 = v99[7];
        uint64_t v84 = v96 + v83;
        uint64_t v85 = &v63[v83];
        *(void *)uint64_t v84 = *(void *)v85;
        *(unsigned char *)(v84 + 8) = v85[8];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v97 + 56))(v96, 0, 1, v99);
        goto LABEL_32;
      }
      size_t v66 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      uint64_t v67 = (void *)v96;
    }
    else
    {
      if (!v65)
      {
        v100((char *)v96, (uint64_t)v63, v102);
        uint64_t v86 = v99[5];
        uint64_t v87 = v96 + v86;
        uint64_t v88 = &v63[v86];
        *(void *)uint64_t v87 = *(void *)v88;
        *(unsigned char *)(v87 + 8) = v88[8];
        uint64_t v89 = v99[6];
        uint64_t v90 = v96 + v89;
        uint64_t v91 = &v63[v89];
        *(void *)uint64_t v90 = *(void *)v91;
        *(unsigned char *)(v90 + 8) = v91[8];
        uint64_t v92 = v99[7];
        uint64_t v93 = v96 + v92;
        char v94 = &v63[v92];
        *(void *)uint64_t v93 = *(void *)v94;
        *(unsigned char *)(v93 + 8) = v94[8];
        goto LABEL_32;
      }
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v96, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      size_t v66 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      uint64_t v67 = (void *)v96;
    }
    memcpy(v67, v63, v66);
LABEL_32:
    v40[v42[6]] = v41[v42[6]];
    v40[v42[7]] = v41[v42[7]];
    v40[v42[8]] = v41[v42[8]];
    v40[v42[9]] = v41[v42[9]];
    v40[v42[10]] = v41[v42[10]];
    v40[v42[11]] = v41[v42[11]];
    return v38;
  }
  if (v46)
  {
LABEL_19:
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    memcpy(v40, v41, *(void *)(*(void *)(v52 - 8) + 64));
    return v38;
  }
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
  v47(v40, v41, v102);
  uint64_t v48 = v42[5];
  int v49 = &v40[v48];
  uint64_t v50 = &v41[v48];
  if (v98(&v41[v48], 1, v99))
  {
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    v47(v49, v50, v102);
    uint64_t v68 = v99[5];
    uint64_t v69 = &v49[v68];
    char v70 = &v50[v68];
    *(void *)uint64_t v69 = *(void *)v70;
    v69[8] = v70[8];
    uint64_t v71 = v99[6];
    unsigned int v72 = &v49[v71];
    size_t v73 = &v50[v71];
    *(void *)unsigned int v72 = *(void *)v73;
    v72[8] = v73[8];
    uint64_t v74 = v99[7];
    uint64_t v75 = &v49[v74];
    uint64_t v76 = &v50[v74];
    *(void *)uint64_t v75 = *(void *)v76;
    v75[8] = v76[8];
    (*(void (**)(char *, void, uint64_t, int *))(v97 + 56))(v49, 0, 1, v99);
  }
  uint64_t v38 = __srca;
  v40[v42[6]] = v41[v42[6]];
  v40[v42[7]] = v41[v42[7]];
  v40[v42[8]] = v41[v42[8]];
  v40[v42[9]] = v41[v42[9]];
  v40[v42[10]] = v41[v42[10]];
  v40[v42[11]] = v41[v42[11]];
  (*(void (**)(char *, void, uint64_t, int *))(v43 + 56))(v40, 0, 1, v42);
  return v38;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F66588);
}

uint64_t sub_246F66588(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[8];
  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F66740);
}

uint64_t sub_246F66740(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_7;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[8];
  return v19(v21, a2, a2, v20);
}

void type metadata completion function for CLP_LogEntry_PrivateData_WatchState()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_PlaceInference(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v11 = (void *)((char *)a1 + v9);
    uint64_t v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = (void *)((char *)a1 + v10);
    uint64_t v15 = (void *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  void *v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  uint64_t v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  void *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F66F14);
}

uint64_t sub_246F66F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F66FF8);
}

uint64_t sub_246F66FF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_PlaceInference()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BatchedLocationFixType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F67258);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_19);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_19);
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_OutdoorUpdate(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(void *)unint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[9];
    uint64_t v16 = a3[10];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v19 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v18 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  *(unsigned char *)(v15 + 8) = *((unsigned char *)v16 + 8);
  *(void *)uint64_t v15 = v17;
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v18 = a3[12];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  LODWORD(v17) = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  *(_DWORD *)uint64_t v19 = v17;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v18 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v18 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F67844);
}

uint64_t __swift_get_extra_inhabitant_index_522Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F67938);
}

uint64_t __swift_store_extra_inhabitant_index_523Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_InertialOdometrySample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_20);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_InertialOdometrySample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_20);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246F67C48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame()
{
  return &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_Location._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Location._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
              if (v6 <= 0x3F)
              {
                type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
                if (v7 <= 0x3F) {
                  swift_updateClassMetadata2();
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MotionActivity._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionActivity._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MapVector._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MapVector._StorageClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v7 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, a4, a5);
    if (v8 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_WifiNotification._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_WifiNotification._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t ALProtoRequest.().init()()
{
  uint64_t v1 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  MEMORY[0x270FA5388](v1 - 8);
  unint64_t v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = swift_beginAccess();
  if (static ALProtoRequest._sTransactionCount == -1)
  {
    __break(1u);
  }
  else
  {
    ++static ALProtoRequest._sTransactionCount;
    CLP_LogEntry_AONLoc_Request.init()((uint64_t)v3);
    outlined init with take of CLP_LogEntry_AONLoc_Request((uint64_t)v3, v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
    swift_beginAccess();
    CLP_LogEntry_AONLoc_Request.processID.setter(0);
    CLP_LogEntry_AONLoc_Request.transactionID.setter(static ALProtoRequest._sTransactionCount);
    swift_endAccess();
    uint64_t v5 = mach_continuous_time();
    swift_beginAccess();
    CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.setter(v5);
    swift_endAccess();
    return v0;
  }
  return result;
}

int *ALProtoRequest._sTransactionCount.unsafeMutableAddressor()
{
  return &static ALProtoRequest._sTransactionCount;
}

uint64_t ALProtoRequest.__allocating_init(wifiResultOptions:)(uint64_t a1)
{
  return ALProtoRequest.__allocating_init(wifiResultOptions:)(a1, 3);
}

uint64_t type metadata accessor for ALProtoRequest()
{
  uint64_t result = type metadata singleton initialization cache for ALProtoRequest;
  if (!type metadata singleton initialization cache for ALProtoRequest) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ALProtoRequest.__allocating_init(btResultOptions:)(uint64_t a1)
{
  return ALProtoRequest.__allocating_init(wifiResultOptions:)(a1, 4);
}

uint64_t ALProtoRequest.__allocating_init(wifiResultOptions:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ALProtoRequest();
  uint64_t v7 = swift_allocObject();
  ALProtoRequest.().init()();
  swift_beginAccess();
  swift_retain();
  CLP_LogEntry_AONLoc_Request.type.setter(a2);
  swift_endAccess();
  ALResultOptions.toPb()(v6);
  swift_beginAccess();
  CLP_LogEntry_AONLoc_Request.resultOptions.setter((uint64_t)v6);
  swift_endAccess();
  swift_release();
  uint64_t v8 = type metadata accessor for ALResultOptions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  return v7;
}

uint64_t ALProtoRequest.__allocating_init(data:)()
{
  uint64_t v1 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = swift_allocObject();
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request();
  Message.init(serializedData:extensions:partial:options:)();
  if (v0) {
    swift_deallocPartialClassInstance();
  }
  else {
    outlined init with take of CLP_LogEntry_AONLoc_Request((uint64_t)v4, v5 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  }
  return v5;
}

uint64_t ALProtoRequest.init(data:)()
{
  uint64_t v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request();
  Message.init(serializedData:extensions:partial:options:)();
  if (v1)
  {
    type metadata accessor for ALProtoRequest();
    swift_deallocPartialClassInstance();
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request((uint64_t)v5, v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  }
  return v0;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request);
  }
  return result;
}

uint64_t outlined init with take of CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ALProtoRequest.serializedData()()
{
  uint64_t v1 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)v0 + 128))(v2);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request();
  uint64_t v5 = Message.serializedData(partial:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request((uint64_t)v4);
  return v5;
}

uint64_t outlined destroy of CLP_LogEntry_AONLoc_Request(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Bool __swiftcall ALProtoRequest.isWiFiResult()()
{
  return ALProtoRequest.isWiFiResult()(3);
}

Swift::Bool __swiftcall ALProtoRequest.isBtResult()()
{
  return ALProtoRequest.isWiFiResult()(4);
}

BOOL ALProtoRequest.isWiFiResult()(char a1)
{
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  unint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)v15 - v8;
  uint64_t v10 = *(void (**)(uint64_t))(*(void *)v1 + 128);
  v10(v7);
  BOOL v11 = CLP_LogEntry_AONLoc_Request.hasType.getter();
  uint64_t v12 = outlined destroy of CLP_LogEntry_AONLoc_Request((uint64_t)v9);
  if (!v11) {
    return 0;
  }
  v10(v12);
  char v13 = CLP_LogEntry_AONLoc_Request.type.getter();
  outlined destroy of CLP_LogEntry_AONLoc_Request((uint64_t)v6);
  char v17 = v13;
  char v16 = a1;
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  return v15[2] == v15[1];
}

uint64_t ALProtoRequest._pb.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess();
  return outlined init with copy of CLP_LogEntry_AONLoc_Request(v3, a1);
}

uint64_t outlined init with copy of CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ALProtoRequest._pb.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess();
  outlined assign with take of CLP_LogEntry_AONLoc_Request(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ALProtoRequest._pb.modify())()
{
  return ALFResultsRequesterData._options.modify;
}

uint64_t static ALProtoRequest._sTransactionCount.getter()
{
  return static ALProtoRequest._sTransactionCount;
}

uint64_t static ALProtoRequest._sTransactionCount.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  static ALProtoRequest._sTransactionCount = a1;
  return result;
}

uint64_t (*static ALProtoRequest._sTransactionCount.modify())()
{
  return ALFResultsRequesterData._label.modify;
}

uint64_t ALProtoRequest.deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request(v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  return v0;
}

uint64_t ALProtoRequest.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request(v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t ObjC metadata update function for ALProtoRequest()
{
  return type metadata accessor for ALProtoRequest();
}

uint64_t type metadata completion function for ALProtoRequest()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ALProtoRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ALProtoRequest);
}

uint64_t dispatch thunk of ALProtoRequest.__allocating_init(data:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ALProtoRequest.serializedData()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ALProtoRequest.isWiFiResult()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of ALProtoRequest.isBtResult()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PositionMethod(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_PositionMethod and conformance Proto_Gnss_Emergency_PositionMethod();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_PositionMethod@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_PositionMethod.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_PositionMethod@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_PositionMethod.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_PositionMethod.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionMethod.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionMethod(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionMethod.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PositionReqType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_PositionReqType and conformance Proto_Gnss_Emergency_PositionReqType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_PositionReqType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionReqType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionReqType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionReqType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PositionSession(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_PositionSession and conformance Proto_Gnss_Emergency_PositionSession();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_PositionSession.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionSession.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionSession(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionSession;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PositionProtocol(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_PositionProtocol and conformance Proto_Gnss_Emergency_PositionProtocol();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_PositionProtocol.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionProtocol.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionProtocol(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionProtocol.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_SessionErrorCode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_SessionErrorCode and conformance Proto_Gnss_Emergency_SessionErrorCode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_SessionErrorCode@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_SessionErrorCode.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_SessionErrorCode@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_SessionErrorCode.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_SessionErrorCode.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_SessionErrorCode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SessionErrorCode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_SessionErrorCode.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_TriggerType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_TriggerType and conformance Proto_Gnss_Emergency_TriggerType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_TriggerType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_TriggerType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_TriggerType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_TriggerType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_Status(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_Status and conformance Proto_Gnss_Emergency_Status();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_Status@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_Status.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_Status@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_Status.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_Status.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_Status.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_Status(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_Status.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_EndCause(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_EndCause and conformance Proto_Gnss_Emergency_EndCause();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_EndCause@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_EndCause.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_EndCause@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_EndCause.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_EndCause.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_EndCause.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_EndCause(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_EndCause.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ConnectionStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_ConnectionStatus and conformance Proto_Gnss_Emergency_ConnectionStatus();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_ConnectionStatus.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ConnectionStatus.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ConnectionStatus(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_ConnectionStatus.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_CellType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_CellType and conformance Proto_Gnss_Emergency_CellType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_CellType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_CellType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_CellType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_CellType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_FreqMode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_FreqMode and conformance Proto_Gnss_Emergency_FreqMode();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_FreqMode.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_FreqMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_FreqMode(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_FreqMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_SLPAddressType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_SLPAddressType and conformance Proto_Gnss_Emergency_SLPAddressType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_SLPAddressType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_SLPAddressType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SLPAddressType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SLPAddressType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ErrorCodes(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_ErrorCodes and conformance Proto_Gnss_Emergency_ErrorCodes();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_ErrorCodes.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ErrorCodes.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ErrorCodes(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_ErrorCodes.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ClsModemState(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_ClsModemState and conformance Proto_Gnss_Emergency_ClsModemState();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_ClsModemState.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ClsModemState.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ClsModemState(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ClsModemState;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_SessionProtocol(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_SessionProtocol and conformance Proto_Gnss_Emergency_SessionProtocol();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_SessionProtocol.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_SessionProtocol.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SessionProtocol(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_SessionProtocol.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PosProtocol(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_PosProtocol and conformance Proto_Gnss_Emergency_PosProtocol();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_PosProtocol.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PosProtocol.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PosProtocol(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_PosProtocol.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_MethodType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_MethodType and conformance Proto_Gnss_Emergency_MethodType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_MethodType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_MethodType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MethodType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MethodType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_Environment(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_Environment and conformance Proto_Gnss_Emergency_Environment();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_Environment.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_Environment.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_Environment(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_Environment;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_AdditionalInfo(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_AdditionalInfo and conformance Proto_Gnss_Emergency_AdditionalInfo();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_AdditionalInfo.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_AdditionalInfo.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AdditionalInfo(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AdditionalInfo;
}

uint64_t Proto_Gnss_Emergency_GnssId.rawValue.getter(char a1)
{
  return qword_24712B968[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Proto_Gnss_Emergency_GnssId(char *a1, char *a2)
{
  return qword_24712B968[*a1] == qword_24712B968[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GnssId(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_GnssId and conformance Proto_Gnss_Emergency_GnssId();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_GnssId@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized Proto_Gnss_Emergency_GnssId.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance Proto_Gnss_Emergency_GnssId()
{
  return qword_24712B968[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_GnssId@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized Proto_Gnss_Emergency_GnssId.init(rawValue:)();
  *a1 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Proto_Gnss_Emergency_GnssId(void *a1@<X8>)
{
  *a1 = qword_24712B968[*v1];
}

void *static Proto_Gnss_Emergency_GnssId.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GnssId.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GnssId(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GnssId.allCases.getter;
}

uint64_t Proto_Gnss_Emergency_SupportedGADShapes.rawValue.getter(char a1)
{
  return qword_24712B9A0[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Proto_Gnss_Emergency_SupportedGADShapes(char *a1, char *a2)
{
  return qword_24712B9A0[*a1] == qword_24712B9A0[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_SupportedGADShapes(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_SupportedGADShapes and conformance Proto_Gnss_Emergency_SupportedGADShapes();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_SupportedGADShapes@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized Proto_Gnss_Emergency_SupportedGADShapes.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance Proto_Gnss_Emergency_SupportedGADShapes()
{
  return qword_24712B9A0[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_SupportedGADShapes@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized Proto_Gnss_Emergency_SupportedGADShapes.init(rawValue:)();
  *a1 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Proto_Gnss_Emergency_SupportedGADShapes(void *a1@<X8>)
{
  *a1 = qword_24712B9A0[*v1];
}

void *static Proto_Gnss_Emergency_SupportedGADShapes.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_SupportedGADShapes.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SupportedGADShapes(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_SupportedGADShapes.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_FixType(uint64_t a1, uint64_t a2)
{
  unint64_t fixed = lazy protocol witness table accessor for type Proto_Gnss_Emergency_FixType and conformance Proto_Gnss_Emergency_FixType();
  return MEMORY[0x270F44AF0](a1, a2, fixed);
}

void *static Proto_Gnss_Emergency_FixType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_FixType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_FixType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_FixType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ClsNetworkType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_ClsNetworkType and conformance Proto_Gnss_Emergency_ClsNetworkType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_ClsNetworkType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ClsNetworkType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ClsNetworkType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_ClsNetworkType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GnssTimeId(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_GnssTimeId and conformance Proto_Gnss_Emergency_GnssTimeId();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_GnssTimeId.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GnssTimeId.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GnssTimeId(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GnssTimeId.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ShapeType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_ShapeType and conformance Proto_Gnss_Emergency_ShapeType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_ShapeType@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_ShapeType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_ShapeType@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Proto_Gnss_Emergency_ShapeType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_ShapeType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ShapeType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ShapeType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_ShapeType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_VelocityType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_VelocityType and conformance Proto_Gnss_Emergency_VelocityType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_VelocityType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_VelocityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_VelocityType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_VelocityType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_MultipathIndicator(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_MultipathIndicator and conformance Proto_Gnss_Emergency_MultipathIndicator();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_MultipathIndicator.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_MultipathIndicator.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MultipathIndicator(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_MultipathIndicator.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GanssId(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_GanssId and conformance Proto_Gnss_Emergency_GanssId();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_GanssId.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssId.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssId(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssId.allCases.getter;
}

uint64_t Proto_Gnss_Emergency_MeasurementsResult.rawValue.getter(char a1)
{
  return qword_24712BA30[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Proto_Gnss_Emergency_MeasurementsResult(char *a1, char *a2)
{
  return qword_24712BA30[*a1] == qword_24712BA30[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_MeasurementsResult(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_MeasurementsResult and conformance Proto_Gnss_Emergency_MeasurementsResult();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.rawValue.getter in conformance Proto_Gnss_Emergency_MeasurementsResult()
{
  return qword_24712BA30[*v0];
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Proto_Gnss_Emergency_MeasurementsResult(void *a1@<X8>)
{
  *a1 = qword_24712BA30[*v1];
}

void *static Proto_Gnss_Emergency_MeasurementsResult.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_MeasurementsResult.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MeasurementsResult(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MeasurementsResult;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_LcsGanssId(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_LcsGanssId and conformance Proto_Gnss_Emergency_LcsGanssId();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_LcsGanssId.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_LcsGanssId.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_LcsGanssId(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_LcsGanssId.allCases.getter;
}

ALProtobuf::Proto_Gnss_Emergency_AidMask_optional __swiftcall Proto_Gnss_Emergency_AidMask.init(rawValue:)(Swift::Int rawValue)
{
  return (ALProtobuf::Proto_Gnss_Emergency_AidMask_optional)specialized Proto_Gnss_Emergency_AidMask.init(rawValue:)(rawValue);
}

uint64_t Proto_Gnss_Emergency_AidMask.rawValue.getter(char a1)
{
  return qword_24712B9E0[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Proto_Gnss_Emergency_AidMask(char *a1, char *a2)
{
  return qword_24712B9E0[*a1] == qword_24712B9E0[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_AidMask(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_AidMask and conformance Proto_Gnss_Emergency_AidMask();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_AidMask@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized Proto_Gnss_Emergency_AidMask.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance Proto_Gnss_Emergency_AidMask()
{
  return qword_24712B9E0[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_AidMask@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized Proto_Gnss_Emergency_AidMask.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Proto_Gnss_Emergency_AidMask(void *a1@<X8>)
{
  *a1 = qword_24712B9E0[*v1];
}

void *static Proto_Gnss_Emergency_AidMask.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_AidMask.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AidMask(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_AidMask.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GanssCommonAidMask(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_GanssCommonAidMask and conformance Proto_Gnss_Emergency_GanssCommonAidMask();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_GanssCommonAidMask.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssCommonAidMask.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssCommonAidMask(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssCommonAidMask;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GanssGenericAidMask(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_GanssGenericAidMask and conformance Proto_Gnss_Emergency_GanssGenericAidMask();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_GanssGenericAidMask.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssGenericAidMask.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssGenericAidMask(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssGenericAidMask.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GanssSignalIdMask(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_GanssSignalIdMask and conformance Proto_Gnss_Emergency_GanssSignalIdMask();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_GanssSignalIdMask@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized Proto_Gnss_Emergency_GanssSignalIdMask.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_GanssSignalIdMask@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized Proto_Gnss_Emergency_GanssSignalIdMask.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_GanssSignalIdMask.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssSignalIdMask.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssSignalIdMask(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssSignalIdMask;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_AssistanceRequest(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_AssistanceRequest and conformance Proto_Gnss_Emergency_AssistanceRequest();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_AssistanceRequest.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_AssistanceRequest.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AssistanceRequest(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AssistanceRequest;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_UtranSfnGpsUncertainty(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_UtranSfnGpsUncertainty and conformance Proto_Gnss_Emergency_UtranSfnGpsUncertainty();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_UtranSfnGpsUncertainty.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_UtranSfnGpsUncertainty.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_UtranSfnGpsUncertainty(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_UtranSfnGpsUncertainty;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GpsDopplerUncMpsExt(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_GpsDopplerUncMpsExt and conformance Proto_Gnss_Emergency_GpsDopplerUncMpsExt();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_GpsDopplerUncMpsExt.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GpsDopplerUncMpsExt.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GpsDopplerUncMpsExt(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GpsDopplerUncMpsExt.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_MeasurementAndEstimateResponseType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_MeasurementAndEstimateResponseType and conformance Proto_Gnss_Emergency_MeasurementAndEstimateResponseType();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_MeasurementAndEstimateResponseType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_MeasurementAndEstimateResponseType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MeasurementAndEstimateResponseType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MeasurementAndEstimateResponseType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_AfltAction(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_AfltAction and conformance Proto_Gnss_Emergency_AfltAction();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_AfltAction.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_AfltAction.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AfltAction(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AfltAction;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_WlanMeasurementResult(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Proto_Gnss_Emergency_WlanMeasurementResult and conformance Proto_Gnss_Emergency_WlanMeasurementResult();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static Proto_Gnss_Emergency_WlanMeasurementResult.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_WlanMeasurementResult.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_WlanMeasurementResult(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_WlanMeasurementResult.allCases.getter;
}

uint64_t Proto_Gnss_Emergency_Configuration.heloEnabled.getter()
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t Proto_Gnss_Emergency_Configuration.heloEnabled.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t (*Proto_Gnss_Emergency_Configuration.heloEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_Configuration.hasHeloEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Configuration.clearHeloEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.getter()
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t (*Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_Configuration.hasEarlyReturnEnabled.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Configuration.clearEarlyReturnEnabled()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 24)) = 2;
}

double Proto_Gnss_Emergency_Configuration.targetVerticalUncertaintyM.getter()
{
  return Proto_Gnss_Emergency_Configuration.targetVerticalUncertaintyM.getter(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t Proto_Gnss_Emergency_Configuration.targetVerticalUncertaintyM.setter(double a1)
{
  return Proto_Gnss_Emergency_Configuration.targetVerticalUncertaintyM.setter(type metadata accessor for Proto_Gnss_Emergency_Configuration, a1);
}

uint64_t (*Proto_Gnss_Emergency_Configuration.targetVerticalUncertaintyM.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL Proto_Gnss_Emergency_Configuration.hasTargetVerticalUncertaintyM.getter()
{
  return Proto_Gnss_Emergency_Configuration.hasTargetVerticalUncertaintyM.getter(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Configuration.clearTargetVerticalUncertaintyM()()
{
}

int *Proto_Gnss_Emergency_Configuration.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  *(unsigned char *)(a1 + result[6]) = 2;
  uint64_t v3 = a1 + result[7];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 16);
  if (*(unsigned char *)(v1 + 24)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.modify;
}

void Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 24) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasLatitudeDegrees.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 24) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearLatitudeDegrees()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 16) = 0;
  *(unsigned char *)(v5 + 24) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 32);
  if (*(unsigned char *)(v1 + 40)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 32) = a1;
  *(unsigned char *)(v7 + 40) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 32);
  if (*(unsigned char *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.modify;
}

void Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 32) = v4;
  *(unsigned char *)(v10 + 40) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasLongitudeDegrees.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 40) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearLongitudeDegrees()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 40) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.altitudeMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 48);
  if (*(unsigned char *)(v1 + 56)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.altitudeMeters.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 48) = a1;
  *(unsigned char *)(v7 + 56) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.altitudeMeters.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 48);
  if (*(unsigned char *)(v5 + 56)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.altitudeMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.altitudeMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 48) = v4;
  *(unsigned char *)(v10 + 56) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasAltitudeMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 56) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearAltitudeMeters()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 48) = 0;
  *(unsigned char *)(v5 + 56) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 64);
  if (*(unsigned char *)(v1 + 72)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 64) = a1;
  *(unsigned char *)(v7 + 72) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 64);
  if (*(unsigned char *)(v5 + 72)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 64) = v4;
  *(unsigned char *)(v10 + 72) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasAchievedHorizontalUncertaintyMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 72) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearAchievedHorizontalUncertaintyMeters()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 64) = 0;
  *(unsigned char *)(v5 + 72) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 80);
  if (*(unsigned char *)(v1 + 88)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 80) = a1;
  *(unsigned char *)(v7 + 88) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 80);
  if (*(unsigned char *)(v5 + 88)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 80) = v4;
  *(unsigned char *)(v10 + 88) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasAchievedVerticalUncertaintyMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 88) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearAchievedVerticalUncertaintyMeters()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 80) = 0;
  *(unsigned char *)(v5 + 88) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.ttffSeconds.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 96);
  if (*(unsigned char *)(v1 + 104)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.ttffSeconds.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 96) = a1;
  *(unsigned char *)(v7 + 104) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.ttffSeconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 96);
  if (*(unsigned char *)(v5 + 104)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.ttffSeconds.modify;
}

void Proto_Gnss_Emergency_SummaryReport.ttffSeconds.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 96) = v4;
  *(unsigned char *)(v10 + 104) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasTtffSeconds.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 104) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearTtffSeconds()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 96) = 0;
  *(unsigned char *)(v5 + 104) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.technologySource.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 112)) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 + 108);
  }
}

uint64_t Proto_Gnss_Emergency_SummaryReport.technologySource.setter(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v7 + 108) = a1;
  *(unsigned char *)(v7 + 112) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.technologySource.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v5 + 108);
  if (*(unsigned char *)(v5 + 112)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_SummaryReport.technologySource.modify;
}

void Proto_Gnss_Emergency_SummaryReport.technologySource.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 108) = v4;
  *(unsigned char *)(v10 + 112) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasTechnologySource.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 112) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearTechnologySource()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 108) = 0;
  *(unsigned char *)(v5 + 112) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.methodType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 113) == 18) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 113);
  }
}

uint64_t Proto_Gnss_Emergency_SummaryReport.methodType.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 113) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.methodType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 113);
  if (v6 == 18) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.methodType.modify;
}

void Proto_Gnss_Emergency_SummaryReport.methodType.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 113);
  swift_beginAccess();
  unsigned char *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasMethodType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 113) != 18;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearMethodType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 113) = 18;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.sessionType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 114) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 114);
  }
}

uint64_t Proto_Gnss_Emergency_SummaryReport.sessionType.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 114) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.sessionType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 114);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.sessionType.modify;
}

void Proto_Gnss_Emergency_SummaryReport.sessionType.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 114);
  swift_beginAccess();
  unsigned char *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasSessionType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 114) != 4;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearSessionType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 114) = 4;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.protocolType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 115) == 7) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 115);
  }
}

uint64_t Proto_Gnss_Emergency_SummaryReport.protocolType.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 115) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.protocolType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 115);
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.protocolType.modify;
}

void Proto_Gnss_Emergency_SummaryReport.protocolType.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 115);
  swift_beginAccess();
  unsigned char *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasProtocolType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 115) != 7;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearProtocolType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 115) = 7;
}

double Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.getter()
{
  return Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.getter(type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 120) = a1;
  *(unsigned char *)(v7 + 128) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 120);
  if (*(unsigned char *)(v5 + 128)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.modify;
}

void Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 120) = v4;
  *(unsigned char *)(v10 + 128) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasRequestedResponseTimeoutSeconds.getter()
{
  return Proto_Gnss_Emergency_SummaryReport.hasRequestedResponseTimeoutSeconds.getter(type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearRequestedResponseTimeoutSeconds()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 120) = 0;
  *(unsigned char *)(v5 + 128) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 136);
  if (*(unsigned char *)(v1 + 144)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 136) = a1;
  *(unsigned char *)(v7 + 144) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 136);
  if (*(unsigned char *)(v5 + 144)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 136) = v4;
  *(unsigned char *)(v10 + 144) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasRequestedHorizontalAccuracyMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 144) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearRequestedHorizontalAccuracyMeters()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 136) = 0;
  *(unsigned char *)(v5 + 144) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 152);
  if (*(unsigned char *)(v1 + 160)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.setter(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 152) = a1;
  *(unsigned char *)(v7 + 160) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 152);
  if (*(unsigned char *)(v5 + 160)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 152) = v4;
  *(unsigned char *)(v10 + 160) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasRequestedVerticalAccuracyMeters.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 160) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearRequestedVerticalAccuracyMeters()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 152) = 0;
  *(unsigned char *)(v5 + 160) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.posReqType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 161) == 8) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 161);
  }
}

uint64_t Proto_Gnss_Emergency_SummaryReport.posReqType.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 161) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.posReqType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 161);
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.posReqType.modify;
}

void Proto_Gnss_Emergency_SummaryReport.posReqType.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 161);
  swift_beginAccess();
  unsigned char *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasPosReqType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 161) != 8;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearPosReqType()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 161) = 8;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.errorCode.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 162) == 17) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 162);
  }
}

uint64_t Proto_Gnss_Emergency_SummaryReport.errorCode.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 162) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.errorCode.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 162);
  if (v6 == 17) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.errorCode.modify;
}

void Proto_Gnss_Emergency_SummaryReport.errorCode.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 162);
  swift_beginAccess();
  unsigned char *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasErrorCode.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 162) != 17;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearErrorCode()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 162) = 17;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.heloEnabled.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 163) & 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.heloEnabled.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 163) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.heloEnabled.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 163) & 1;
  return Proto_Gnss_Emergency_SummaryReport.heloEnabled.modify;
}

void Proto_Gnss_Emergency_SummaryReport.heloEnabled.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 163) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasHeloEnabled.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 163) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearHeloEnabled()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 163) = 2;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.heloInjected.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 164) & 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.heloInjected.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 164) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.heloInjected.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 164) & 1;
  return Proto_Gnss_Emergency_SummaryReport.heloInjected.modify;
}

void Proto_Gnss_Emergency_SummaryReport.heloInjected.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 164) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasHeloInjected.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 164) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearHeloInjected()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(unsigned char *)(v5 + 164) = 2;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.assistanceUsed.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 176)) {
    return 0;
  }
  else {
    return *(void *)(v1 + 168);
  }
}

uint64_t Proto_Gnss_Emergency_SummaryReport.assistanceUsed.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(void *)(v7 + 168) = a1;
  *(unsigned char *)(v7 + 176) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.assistanceUsed.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 168);
  if (*(unsigned char *)(v5 + 176)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return Proto_Gnss_Emergency_SummaryReport.assistanceUsed.modify;
}

void Proto_Gnss_Emergency_SummaryReport.assistanceUsed.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 168) = v4;
  *(unsigned char *)(v10 + 176) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasAssistanceUsed.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 176) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearAssistanceUsed()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(void *)(v5 + 168) = 0;
  *(unsigned char *)(v5 + 176) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.sessionID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 184)) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 + 180);
  }
}

uint64_t Proto_Gnss_Emergency_SummaryReport.sessionID.setter(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v7 + 180) = a1;
  *(unsigned char *)(v7 + 184) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.sessionID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v5 + 180);
  if (*(unsigned char *)(v5 + 184)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_SummaryReport.sessionID.modify;
}

void Proto_Gnss_Emergency_SummaryReport.sessionID.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 180) = v4;
  *(unsigned char *)(v10 + 184) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasSessionID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 184) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearSessionID()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    uint64_t v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 180) = 0;
  *(unsigned char *)(v5 + 184) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_SummaryReport.init()(type metadata accessor for Proto_Gnss_Emergency_SummaryReport, &one-time initialization token for defaultInstance, &static Proto_Gnss_Emergency_SummaryReport._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_SummaryReport._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplPort.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.suplPort.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplPort.setter(int a1)
{
  return Proto_Gnss_Emergency_SuplConfig.suplPort.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.suplPort.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSuplPort.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.hasSuplPort.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearSuplPort()()
{
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplServer.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.suplServer.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplServer.setter(uint64_t a1, uint64_t a2)
{
  return Proto_Gnss_Emergency_SuplConfig.suplServer.setter(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.suplServer.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSuplServer.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.hasSuplServer.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearSuplServer()()
{
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableMsa.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.enableMsa.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableMsa.setter(char a1)
{
  return Proto_Gnss_Emergency_SuplConfig.enableMsa.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.enableMsa.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasEnableMsa.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 28)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearEnableMsa()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 28)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableLppRel13WlanMeas.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.enableLppRel13WlanMeas.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableLppRel13WlanMeas.setter(char a1)
{
  return Proto_Gnss_Emergency_SuplConfig.enableLppRel13WlanMeas.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.enableLppRel13WlanMeas.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasEnableLppRel13WlanMeas.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 32)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearEnableLppRel13WlanMeas()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 32)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.supportsLppRel13WlanMeasTypeRssi.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36)) & 1;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.supportsLppRel13WlanMeasTypeRssi.setter(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.supportsLppRel13WlanMeasTypeRssi.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSupportsLppRel13WlanMeasTypeRssi.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearSupportsLppRel13WlanMeasTypeRssi()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.supportsLppRel13LocationSource.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40)) & 1;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.supportsLppRel13LocationSource.setter(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.supportsLppRel13LocationSource.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSupportsLppRel13LocationSource.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearSupportsLppRel13LocationSource()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40)) = 2;
}

int *Proto_Gnss_Emergency_SuplConfig.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = (void *)(a1 + result[6]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  *(unsigned char *)(a1 + result[9]) = 2;
  *(unsigned char *)(a1 + result[10]) = 2;
  return result;
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.isServingCell.getter()
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_Configuration.heloEnabled.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 20)) & 1;
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.isServingCell.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_Configuration.heloEnabled.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.isServingCell.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasIsServingCell.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearIsServingCell()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mcc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mcc.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.mcc.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasMcc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMcc.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearMcc()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mnc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mnc.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.mnc.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasMnc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMnc.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearMnc()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.tac.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.tac.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.tac.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasTac.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasTac.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearTac()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.cellid.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.cellid.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.cellid.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasCellid.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasCellid.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearCellid()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.pci.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.pci.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.pci.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasPci.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasPci.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearPci()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrp.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrp.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrp.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrp.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.rsrp.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasRsrp.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasRsrp.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearRsrp()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrq.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrq.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.rsrq.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasRsrq.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasRsrq.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearRsrq()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.ta.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.ta.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.ta.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.ta.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.ta.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 52);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasTa.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasTa.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearTa()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.dlearfcn.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.dlearfcn.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.dlearfcn.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.dlearfcn.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.dlearfcn.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 56);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasDlearfcn.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasDlearfcn.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearDlearfcn()()
{
}

int *Proto_Gnss_Emergency_LteCellInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[11];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[12];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + result[13];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + result[14];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.isServingCell.getter()
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.isServingCell.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.isServingCell.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasIsServingCell.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearIsServingCell()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.mcc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mcc.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 24));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.mcc.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mcc.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.mcc.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasMcc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMcc.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasMcc.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 4) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearMcc()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.clearMcc()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.mnc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mnc.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 28));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.mnc.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mnc.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.mnc.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasMnc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMnc.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasMnc.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 4) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearMnc()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.clearMnc()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.lac.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.tac.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 32));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.lac.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.tac.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.lac.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasLac.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasTac.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasTac.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 4) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearLac()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.clearTac()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.cellid.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.cellid.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 36));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.cellid.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.cellid.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.cellid.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasCellid.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasCellid.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasCellid.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 36) + 4) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearCellid()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.clearCellid()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

int *Proto_Gnss_Emergency_GsmCellInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_GsmCellInfo.init()(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo, a1);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.isServingCell.getter()
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.isServingCell.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.isServingCell.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasIsServingCell.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearIsServingCell()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.mcc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.mcc.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.mcc.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasMcc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMcc.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearMcc()()
{
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.mnc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.mnc.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.mnc.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasMnc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMnc.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearMnc()()
{
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.lac.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.lac.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.lac.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasLac.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasTac.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearLac()()
{
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.cellid.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.cellid.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.cellid.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasCellid.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasCellid.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearCellid()()
{
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.psc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.pci.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 40));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.psc.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.pci.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.psc.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasPsc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasPci.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasPci.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 40) + 4) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearPsc()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.clearPci()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.freqMode.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.freqMode.setter(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.freqMode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasFreqMode.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44)) != 4;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearFreqMode()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44)) = 4;
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.dluarfcn.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrq.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 48));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.dluarfcn.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrq.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.dluarfcn.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasDluarfcn.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasRsrq.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasRsrq.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 48) + 4) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearDluarfcn()()
{
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.clearRsrq()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

int *Proto_Gnss_Emergency_WcdmaCellInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(a1 + result[11]) = 4;
  uint64_t v8 = a1 + result[12];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_LocationId.cellType.getter()
{
  return Proto_Gnss_Emergency_LocationId.cellType.getter(type metadata accessor for Proto_Gnss_Emergency_LocationId);
}

uint64_t Proto_Gnss_Emergency_LocationId.cellType.setter(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_LocationId.cellType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_LocationId.hasCellType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 32)) != 7;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocationId.clearCellType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 32)) = 7;
}

uint64_t Proto_Gnss_Emergency_LocationId.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Proto_Gnss_Emergency_LocationId.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Proto_Gnss_Emergency_LocationId.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t Proto_Gnss_Emergency_LocationId.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v2;
  a1[2] = v2;
  uint64_t v3 = type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + *(int *)(v3 + 32)) = 7;
  return result;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.responseTimeSeconds.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.suplPort.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplPort.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 20));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.responseTimeSeconds.setter(int a1)
{
  return Proto_Gnss_Emergency_SuplConfig.suplPort.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplPort.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementRequest.responseTimeSeconds.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementRequest.hasResponseTimeSeconds.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.hasSuplPort.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSuplPort.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 20) + 4) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementRequest.clearResponseTimeSeconds()()
{
}

uint64_t Proto_Gnss_Emergency_SuplConfig.clearSuplPort()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.isRssiRequested.getter()
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 24)) & 1;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.isRssiRequested.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementRequest.isRssiRequested.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementRequest.hasIsRssiRequested.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementRequest.clearIsRssiRequested()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 24)) = 2;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(a1 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.bssid.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.bssid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.bssid.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return Proto_Gnss_Emergency_WlanMeasurementElement.bssid.modify;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.bssid.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  if (a2)
  {
    outlined copy of Data._Representation(*(void *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }
  else
  {
    uint64_t result = outlined consume of Data?(*(void *)v3, *(void *)(v3 + 8));
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
  }
  return result;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasBssid.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20) + 8) >> 60 != 15;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearBssid()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_247109500;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.isServingFlagPresent.getter()
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.isServingFlagPresent.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.isServingFlagPresent.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasIsServingFlagPresent.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearIsServingFlagPresent()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 24)) = 2;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.servingFlag.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.enableMsa.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableMsa.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 28)) & 1;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.servingFlag.setter(char a1)
{
  return Proto_Gnss_Emergency_SuplConfig.enableMsa.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableMsa.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.servingFlag.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasServingFlag.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 28)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearServingFlag()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 28)) = 2;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.apChannelFrequencyNumber.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.apChannelFrequencyNumber.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.apChannelFrequencyNumber.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasApChannelFrequencyNumber.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasTac.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearApChannelFrequencyNumber()()
{
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.rssiDbm.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.rssiDbm.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.rssiDbm.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasRssiDbm.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasCellid.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearRssiDbm()()
{
}

double Proto_Gnss_Emergency_WlanMeasurementElement.init()@<D0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0);
  double result = 0.0;
  *(_OWORD *)(a1 + v2[5]) = xmmword_247109500;
  *(unsigned char *)(a1 + v2[6]) = 2;
  *(unsigned char *)(a1 + v2[7]) = 2;
  uint64_t v4 = a1 + v2[8];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[9];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_WlanMeasurementElement._bssid()
{
  return 0;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.result.getter()
{
  return Proto_Gnss_Emergency_WlanMeasurementList.result.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.result.setter(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementList.result.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementList.hasResult.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0) + 24)) != 6;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementList.clearResult()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0) + 24)) = 6;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList, a1);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.setter(uint64_t a1)
{
  return Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + *(int *)(v2 + 24)) = 6;
  return result;
}

uint64_t Proto_Gnss_Emergency_QoP.isValid.getter()
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.isValid.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.isValid.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasIsValid.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearIsValid()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_QoP.horizontalAccuracy.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.horizontalAccuracy.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.horizontalAccuracy.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasHorizontalAccuracy.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMcc.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearHorizontalAccuracy()()
{
}

uint64_t Proto_Gnss_Emergency_QoP.verticalAccuracy.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.verticalAccuracy.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.verticalAccuracy.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasVerticalAccuracy.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMnc.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearVerticalAccuracy()()
{
}

uint64_t Proto_Gnss_Emergency_QoP.maxLocationAge.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.maxLocationAge.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.tac.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.maxLocationAge.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasMaxLocationAge.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasTac.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearMaxLocationAge()()
{
}

uint64_t Proto_Gnss_Emergency_QoP.delay.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.delay.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.cellid.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.delay.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasDelay.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasCellid.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearDelay()()
{
}

int *Proto_Gnss_Emergency_QoP.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_GsmCellInfo.init()(type metadata accessor for Proto_Gnss_Emergency_QoP, a1);
}

int *Proto_Gnss_Emergency_GsmCellInfo.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  *(unsigned char *)(a2 + result[5]) = 2;
  uint64_t v5 = a2 + result[6];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a2 + result[7];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a2 + result[8];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a2 + result[9];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_SLPAddress.isValid.getter()
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.isValid.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*Proto_Gnss_Emergency_SLPAddress.isValid.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SLPAddress.hasIsValid.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SLPAddress.clearIsValid()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 24)) = 2;
}

uint64_t Proto_Gnss_Emergency_SLPAddress.slpAddressType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t Proto_Gnss_Emergency_SLPAddress.slpAddressType.setter(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SLPAddress.slpAddressType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SLPAddress.hasSlpAddressType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28)) != 5;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SLPAddress.clearSlpAddressType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28)) = 5;
}

uint64_t Proto_Gnss_Emergency_SLPAddress.fQdn.getter()
{
  return Proto_Gnss_Emergency_SLPAddress.fQdn.getter(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.fQdn.setter(uint64_t a1, uint64_t a2)
{
  return Proto_Gnss_Emergency_SLPAddress.fQdn.setter(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*Proto_Gnss_Emergency_SLPAddress.fQdn.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SLPAddress.hasFQdn.getter()
{
  return Proto_Gnss_Emergency_SLPAddress.hasFQdn.getter(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SLPAddress.clearFQdn()()
{
}

uint64_t Proto_Gnss_Emergency_SLPAddress.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.getter(type metadata accessor for Proto_Gnss_Emergency_SLPAddress, a1);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.unknownFields.setter(uint64_t a1)
{
  return Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Proto_Gnss_Emergency_SLPAddress.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + v2[6]) = 2;
  *((unsigned char *)a1 + v2[7]) = 5;
  uint64_t v4 = (void *)((char *)a1 + v2[8]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t Proto_Gnss_Emergency_Notification.isValid.getter()
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t Proto_Gnss_Emergency_Notification.isValid.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.heloEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t (*Proto_Gnss_Emergency_Notification.isValid.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_Notification.hasIsValid.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Notification.clearIsValid()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_Notification.emergencyCallLocationPresent.getter()
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.getter(type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t Proto_Gnss_Emergency_Notification.emergencyCallLocationPresent.setter(char a1)
{
  return Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t (*Proto_Gnss_Emergency_Notification.emergencyCallLocationPresent.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_Notification.hasEmergencyCallLocationPresent.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Notification.clearEmergencyCallLocationPresent()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 24)) = 2;
}

uint64_t Proto_Gnss_Emergency_Notification.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  *(unsigned char *)(a1 + *(int *)(result + 20)) = 2;
  *(unsigned char *)(a1 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(inited + 20), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  unint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }
  *a1 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  *((unsigned char *)a1 + v7[6]) = 2;
  *((unsigned char *)a1 + v7[7]) = 5;
  uint64_t v8 = (void *)((char *)a1 + v7[8]);
  *uint64_t v8 = 0;
  v8[1] = 0;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.setter(uint64_t a1)
{
  return Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?, type metadata accessor for Proto_Gnss_Emergency_SLPAddress, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

void (*Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    *((unsigned char *)v10 + v6[6]) = 2;
    *((unsigned char *)v10 + v6[7]) = 5;
    uint64_t v12 = (void *)((char *)v10 + v6[8]);
    *uint64_t v12 = 0;
    v12[1] = 0;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  }
  else
  {
    outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }
  return Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.modify;
}

void Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.modify(uint64_t a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_SuplInitVer2Extension.hasESlpaddress.getter()
{
  return Proto_Gnss_Emergency_SuplInitVer2Extension.hasESlpaddress.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplInitVer2Extension.clearESlpaddress()()
{
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.triggerType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.triggerType.setter(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplInitVer2Extension.triggerType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplInitVer2Extension.hasTriggerType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24)) != 4;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplInitVer2Extension.clearTriggerType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24)) = 4;
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  uint64_t v3 = a1 + *(int *)(inited + 20);
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + *(int *)(inited + 24)) = 4;
  return result;
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_SuplInitVer2Extension._eSlpaddress@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of Proto_Gnss_Emergency_SuplInitVer2Extension._eSlpaddress(type metadata accessor for Proto_Gnss_Emergency_SLPAddress, a1);
}

uint64_t Proto_Gnss_Emergency_Init.posMethod.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 16) == 18) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t Proto_Gnss_Emergency_Init.posMethod.setter(char a1)
{
  return Proto_Gnss_Emergency_Init.posMethod.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Init, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass, (void (*)(uint64_t))Proto_Gnss_Emergency_Init._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_Init.posMethod.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 18) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_Init.posMethod.modify;
}

void Proto_Gnss_Emergency_Init.posMethod.modify(uint64_t *a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_Init.hasPosMethod.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 16) != 18;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearPosMethod()()
{
}

uint64_t Proto_Gnss_Emergency_Init.qop.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 2;
  uint64_t v8 = a1 + v7[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
}

uint64_t Proto_Gnss_Emergency_Init.qop.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of Proto_Gnss_Emergency_SLPAddress(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_QoP);
  uint64_t v13 = type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_Init.qop.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    uint64_t v11 = &v9[v6[6]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[7]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[8]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[9]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  }
  else
  {
    outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_QoP);
  }
  return Proto_Gnss_Emergency_Init.qop.modify;
}

void Proto_Gnss_Emergency_Init.qop.modify(uint64_t a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_Init.hasQop.getter()
{
  return Proto_Gnss_Emergency_Init.hasQop.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearQop()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_Init.slpAddress.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }
  *a1 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  *((unsigned char *)a1 + v7[6]) = 2;
  *((unsigned char *)a1 + v7[7]) = 5;
  uint64_t v8 = (void *)((char *)a1 + v7[8]);
  *uint64_t v8 = 0;
  v8[1] = 0;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
}

uint64_t Proto_Gnss_Emergency_Init.slpAddress.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of Proto_Gnss_Emergency_SLPAddress(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  uint64_t v13 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_Init.slpAddress.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    *((unsigned char *)v9 + v6[6]) = 2;
    *((unsigned char *)v9 + v6[7]) = 5;
    uint64_t v11 = (void *)((char *)v9 + v6[8]);
    *uint64_t v11 = 0;
    v11[1] = 0;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  }
  else
  {
    outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }
  return Proto_Gnss_Emergency_Init.slpAddress.modify;
}

void Proto_Gnss_Emergency_Init.slpAddress.modify(uint64_t a1, char a2)
{
}

void Proto_Gnss_Emergency_Init.qop.modify(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 40);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  size_t v8 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of Proto_Gnss_Emergency_SLPAddress(*(void *)(*(void *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL Proto_Gnss_Emergency_Init.hasSlpAddress.getter()
{
  return Proto_Gnss_Emergency_Init.hasQop.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

BOOL Proto_Gnss_Emergency_Init.hasQop.getter(uint64_t *a1, uint64_t (*a2)(void), void *a3, uint64_t (*a4)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v11, a1);
  uint64_t v13 = a4(0);
  BOOL v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
  return v14;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearSlpAddress()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_Init.notification.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 2;
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
}

uint64_t Proto_Gnss_Emergency_Init.notification.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of Proto_Gnss_Emergency_SLPAddress(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_Notification);
  uint64_t v13 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_Init.notification.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    v9[*(int *)(v6 + 24)] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  }
  else
  {
    outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Notification);
  }
  return Proto_Gnss_Emergency_Init.notification.modify;
}

void Proto_Gnss_Emergency_Init.notification.modify(uint64_t a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_Init.hasNotification.getter()
{
  return Proto_Gnss_Emergency_Init.hasQop.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearNotification()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_Init.suplInitv2Extension.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(inited - 8) + 48))(v5, 1, inited) != 1) {
    return outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(inited + 20);
  uint64_t v9 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(unsigned char *)(a1 + *(int *)(inited + 24)) = 4;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
}

uint64_t Proto_Gnss_Emergency_Init.suplInitv2Extension.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of Proto_Gnss_Emergency_SLPAddress(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(inited - 8) + 56))(v8, 0, 1, inited);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_Init.suplInitv2Extension.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  uint64_t v7 = *(void *)(inited - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, inited) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(inited + 20)];
    uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v9[*(int *)(inited + 24)] = 4;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  }
  else
  {
    outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  }
  return Proto_Gnss_Emergency_Init.suplInitv2Extension.modify;
}

void Proto_Gnss_Emergency_Init.suplInitv2Extension.modify(uint64_t a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_Init.hasSuplInitv2Extension.getter()
{
  return Proto_Gnss_Emergency_Init.hasQop.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearSuplInitv2Extension()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(inited - 8) + 56))(v3, 1, 1, inited);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_Init.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_SummaryReport.init()(type metadata accessor for Proto_Gnss_Emergency_Init, &one-time initialization token for defaultInstance, &static Proto_Gnss_Emergency_Init._StorageClass.defaultInstance, a1);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.init()@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_Init._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t Proto_Gnss_Emergency_SuplContext.suplPort.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.suplPort.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.suplPort.setter(int a1)
{
  return Proto_Gnss_Emergency_SuplConfig.suplPort.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.suplPort.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasSuplPort.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.hasSuplPort.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearSuplPort()()
{
}

uint64_t Proto_Gnss_Emergency_SuplContext.suplServer.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.suplServer.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplServer.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t Proto_Gnss_Emergency_SuplContext.suplServer.setter(uint64_t a1, uint64_t a2)
{
  return Proto_Gnss_Emergency_SuplConfig.suplServer.setter(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplServer.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.suplServer.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasSuplServer.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.hasSuplServer.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSuplServer.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 24) + 8) != 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearSuplServer()()
{
}

uint64_t Proto_Gnss_Emergency_SuplConfig.clearSuplServer()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SuplContext.enableMsa.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.enableMsa.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.enableMsa.setter(char a1)
{
  return Proto_Gnss_Emergency_SuplConfig.enableMsa.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.enableMsa.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasEnableMsa.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 28)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearEnableMsa()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 28)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.imsi.getter()
{
  return Proto_Gnss_Emergency_SLPAddress.fQdn.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.fQdn.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 32));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t Proto_Gnss_Emergency_SuplContext.imsi.setter(uint64_t a1, uint64_t a2)
{
  return Proto_Gnss_Emergency_SLPAddress.fQdn.setter(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.fQdn.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.imsi.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasImsi.getter()
{
  return Proto_Gnss_Emergency_SLPAddress.hasFQdn.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

BOOL Proto_Gnss_Emergency_SLPAddress.hasFQdn.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 32) + 8) != 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearImsi()()
{
}

uint64_t Proto_Gnss_Emergency_SLPAddress.clearFQdn()(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SuplContext.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  unint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 2;
  *(unsigned char *)(a1 + v7[6]) = 2;
  uint64_t v8 = a1 + v7[7];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
}

uint64_t Proto_Gnss_Emergency_SuplContext.config.setter(uint64_t a1)
{
  return Proto_Gnss_Emergency_SuplContext.config.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?, type metadata accessor for Proto_Gnss_Emergency_Configuration, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

void (*Proto_Gnss_Emergency_SuplContext.config.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[v6[5]] = 2;
    v10[v6[6]] = 2;
    uint64_t v12 = &v10[v6[7]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  }
  else
  {
    outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_Configuration);
  }
  return Proto_Gnss_Emergency_SuplContext.config.modify;
}

void Proto_Gnss_Emergency_SuplContext.config.modify(uint64_t a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_SuplContext.hasConfig.getter()
{
  return Proto_Gnss_Emergency_SuplContext.hasConfig.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?, type metadata accessor for Proto_Gnss_Emergency_SuplContext, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearConfig()()
{
}

uint64_t Proto_Gnss_Emergency_SuplContext.nsuuid.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.nsuuid.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.nsuuid.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasNsuuid.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40) + 8) != 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearNsuuid()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t Proto_Gnss_Emergency_SuplContext.enableLppRel13WlanMeas.getter()
{
  return Proto_Gnss_Emergency_SuplContext.enableLppRel13WlanMeas.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.enableLppRel13WlanMeas.setter(char a1)
{
  return Proto_Gnss_Emergency_SuplContext.enableLppRel13WlanMeas.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.enableLppRel13WlanMeas.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasEnableLppRel13WlanMeas.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 44)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearEnableLppRel13WlanMeas()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 44)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.supportsLppRel13WlanMeasTypeRssi.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48)) & 1;
}

uint64_t Proto_Gnss_Emergency_SuplContext.supportsLppRel13WlanMeasTypeRssi.setter(char a1)
{
  uint64_t result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.supportsLppRel13WlanMeasTypeRssi.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasSupportsLppRel13WlanMeasTypeRssi.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearSupportsLppRel13WlanMeasTypeRssi()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.getter()
{
  return Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.setter(char a1)
{
  return Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 52);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasSupportsLppRel13LocationSource.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 52)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearSupportsLppRel13LocationSource()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 52)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = (void *)(a1 + v2[6]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  *(unsigned char *)(a1 + v2[7]) = 2;
  unint64_t v5 = (void *)(a1 + v2[8]);
  *unint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = a1 + v2[9];
  uint64_t v7 = type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  size_t v9 = (void *)(a1 + v2[10]);
  *size_t v9 = 0;
  v9[1] = 0;
  *(unsigned char *)(a1 + v2[11]) = 2;
  *(unsigned char *)(a1 + v2[12]) = 2;
  *(unsigned char *)(a1 + v2[13]) = 2;
  return result;
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_SuplContext._config@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of Proto_Gnss_Emergency_SuplInitVer2Extension._eSlpaddress(type metadata accessor for Proto_Gnss_Emergency_Configuration, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_SuplInitVer2Extension._eSlpaddress@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

uint64_t Proto_Gnss_Emergency_SessionStatus.sessionID.getter()
{
  return Proto_Gnss_Emergency_SessionStatus.sessionID.getter(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

uint64_t Proto_Gnss_Emergency_SessionStatus.sessionID.setter(int a1)
{
  return Proto_Gnss_Emergency_SessionStatus.sessionID.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SessionStatus, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass, (void (*)(uint64_t))Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_SessionStatus.sessionID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v5 + 16);
  if (*(unsigned char *)(v5 + 20)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_SessionStatus.sessionID.modify;
}

void Proto_Gnss_Emergency_SessionStatus.sessionID.modify(uint64_t *a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasSessionID.getter()
{
  return Proto_Gnss_Emergency_SessionStatus.hasSessionID.getter(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearSessionID()()
{
}

uint64_t Proto_Gnss_Emergency_SessionStatus.posMethod.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 21) == 18) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 21);
  }
}

uint64_t Proto_Gnss_Emergency_SessionStatus.posMethod.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 21) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.posMethod.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 21);
  if (v6 == 18) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SessionStatus.posMethod.modify;
}

void Proto_Gnss_Emergency_SessionStatus.posMethod.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 21);
  swift_beginAccess();
  unsigned char *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasPosMethod.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 21) != 18;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearPosMethod()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 21) = 18;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.status.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 22) == 33) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 22);
  }
}

uint64_t Proto_Gnss_Emergency_SessionStatus.status.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 22) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.status.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 22);
  if (v6 == 33) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SessionStatus.status.modify;
}

void Proto_Gnss_Emergency_SessionStatus.status.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 22);
  swift_beginAccess();
  unsigned char *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasStatus.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 22) != 33;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearStatus()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 22) = 33;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.endCause.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 23) == 24) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 23);
  }
}

uint64_t Proto_Gnss_Emergency_SessionStatus.endCause.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 23) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.endCause.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 23);
  if (v6 == 24) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SessionStatus.endCause.modify;
}

void Proto_Gnss_Emergency_SessionStatus.endCause.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 23);
  swift_beginAccess();
  unsigned char *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasEndCause.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 23) != 24;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearEndCause()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 23) = 24;
}

double Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 24);
  if (*(unsigned char *)(v1 + 32)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 24) = a1;
  *(unsigned char *)(v6 + 32) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 24);
  if (*(unsigned char *)(v5 + 32)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.modify;
}

void Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 24) = v4;
  *(unsigned char *)(v10 + 32) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasHorzAccuracyRequested.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 32) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearHorzAccuracyRequested()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 32) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.lat.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 40);
  if (*(unsigned char *)(v1 + 48)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.lat.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 40) = a1;
  *(unsigned char *)(v6 + 48) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.lat.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 40);
  if (*(unsigned char *)(v5 + 48)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.lat.modify;
}

void Proto_Gnss_Emergency_SessionStatus.lat.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 40) = v4;
  *(unsigned char *)(v10 + 48) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasLat.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 48) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearLat()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 40) = 0;
  *(unsigned char *)(v4 + 48) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.lon.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 56);
  if (*(unsigned char *)(v1 + 64)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.lon.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 56) = a1;
  *(unsigned char *)(v6 + 64) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.lon.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 56);
  if (*(unsigned char *)(v5 + 64)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.lon.modify;
}

void Proto_Gnss_Emergency_SessionStatus.lon.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 56) = v4;
  *(unsigned char *)(v10 + 64) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasLon.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 64) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearLon()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 56) = 0;
  *(unsigned char *)(v4 + 64) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.alt.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 72);
  if (*(unsigned char *)(v1 + 80)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.alt.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 72) = a1;
  *(unsigned char *)(v6 + 80) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.alt.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 72);
  if (*(unsigned char *)(v5 + 80)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.alt.modify;
}

void Proto_Gnss_Emergency_SessionStatus.alt.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 72) = v4;
  *(unsigned char *)(v10 + 80) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasAlt.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 80) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearAlt()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 72) = 0;
  *(unsigned char *)(v4 + 80) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 88);
  if (*(unsigned char *)(v1 + 96)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 88) = a1;
  *(unsigned char *)(v6 + 96) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 88);
  if (*(unsigned char *)(v5 + 96)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.modify;
}

void Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 88) = v4;
  *(unsigned char *)(v10 + 96) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasUncSemiMajor.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 96) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearUncSemiMajor()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 96) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 104);
  if (*(unsigned char *)(v1 + 112)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 104) = a1;
  *(unsigned char *)(v6 + 112) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 104);
  if (*(unsigned char *)(v5 + 112)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.modify;
}

void Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 104) = v4;
  *(unsigned char *)(v10 + 112) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasUncSemiMinor.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 112) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearUncSemiMinor()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 104) = 0;
  *(unsigned char *)(v4 + 112) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.uncAlt.getter()
{
  return Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.getter(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

double Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v2 + 120);
  if (*(unsigned char *)(v2 + 128)) {
    return 0.0;
  }
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.uncAlt.setter(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 120) = a1;
  *(unsigned char *)(v6 + 128) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.uncAlt.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 120);
  if (*(unsigned char *)(v5 + 128)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.uncAlt.modify;
}

void Proto_Gnss_Emergency_SessionStatus.uncAlt.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 120) = v4;
  *(unsigned char *)(v10 + 128) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasUncAlt.getter()
{
  return Proto_Gnss_Emergency_SummaryReport.hasRequestedResponseTimeoutSeconds.getter(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasRequestedResponseTimeoutSeconds.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 128) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearUncAlt()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 120) = 0;
  *(unsigned char *)(v4 + 128) = 1;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.ephProvided.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 129) & 1;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.ephProvided.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 129) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.ephProvided.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 129) & 1;
  return Proto_Gnss_Emergency_SessionStatus.ephProvided.modify;
}

void Proto_Gnss_Emergency_SessionStatus.ephProvided.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 129) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasEphProvided.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 129) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearEphProvided()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 129) = 2;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 130) & 1;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 130) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 130) & 1;
  return Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.modify;
}

void Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 130) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasReferenceTimeProvided.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 130) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearReferenceTimeProvided()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 130) = 2;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 131) & 1;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 131) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 131) & 1;
  return Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.modify;
}

void Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 131) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasReferenceLocationProvided.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 131) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearReferenceLocationProvided()()
{
  uint64_t v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 131) = 2;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.nwRefLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v7[10];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[11];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
}

int *Proto_Gnss_Emergency_NetworkReferenceLocation.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1 + result[10];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[11];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.nwRefLocation.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of Proto_Gnss_Emergency_SLPAddress(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  uint64_t v13 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_SessionStatus.nwRefLocation.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v9[v6[9]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v9[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    void v16[4] = 1;
    char v17 = &v9[v6[11]];
    *(_DWORD *)char v17 = 0;
    void v17[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  }
  else
  {
    outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  }
  return Proto_Gnss_Emergency_SessionStatus.nwRefLocation.modify;
}

void Proto_Gnss_Emergency_SessionStatus.nwRefLocation.modify(uint64_t a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasNwRefLocation.getter()
{
  return Proto_Gnss_Emergency_Init.hasQop.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?, type metadata accessor for Proto_Gnss_Emergency_SessionStatus, &OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearNwRefLocation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_SessionStatus.nwRefTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  uint64_t v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
}

int *Proto_Gnss_Emergency_NetworkReferenceTime.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.nwRefTime.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of Proto_Gnss_Emergency_SLPAddress(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  uint64_t v13 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_SessionStatus.nwRefTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  }
  else
  {
    outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  }
  return Proto_Gnss_Emergency_SessionStatus.nwRefTime.modify;
}

void Proto_Gnss_Emergency_SessionStatus.nwRefTime.modify(uint64_t a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasNwRefTime.getter()
{
  return Proto_Gnss_Emergency_Init.hasQop.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?, type metadata accessor for Proto_Gnss_Emergency_SessionStatus, &OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearNwRefTime()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_SessionStatus.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_SummaryReport.init()(type metadata accessor for Proto_Gnss_Emergency_SessionStatus, &one-time initialization token for defaultInstance, &static Proto_Gnss_Emergency_SessionStatus._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_SessionStatus._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.msPart.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.suplPort.getter(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.msPart.setter(int a1)
{
  return Proto_Gnss_Emergency_SuplConfig.suplPort.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t (*Proto_Gnss_Emergency_ClsGpsCellTime.msPart.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsGpsCellTime.hasMsPart.getter()
{
  return Proto_Gnss_Emergency_SuplConfig.hasSuplPort.getter(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsGpsCellTime.clearMsPart()()
{
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.lsPart.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.getter(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.lsPart.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t (*Proto_Gnss_Emergency_ClsGpsCellTime.lsPart.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsGpsCellTime.hasLsPart.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMcc.getter(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsGpsCellTime.clearLsPart()()
{
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsGpsCellTime.init()(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.setter(uint64_t a1)
{
  return Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

void (*Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?);
  }
  else
  {
    outlined init with take of Proto_Gnss_Emergency_SLPAddress((uint64_t)v5, (uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  }
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.modify;
}

void Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.modify(uint64_t a1, char a2)
{
}

BOOL Proto_Gnss_Emergency_ClsUtranCellTime.hasUtranGpsTimingCellFrames.getter()
{
  return Proto_Gnss_Emergency_SuplInitVer2Extension.hasESlpaddress.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

BOOL Proto_Gnss_Emergency_SuplInitVer2Extension.hasESlpaddress.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 20), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsUtranCellTime.clearUtranGpsTimingCellFrames()()
{
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.clearESlpaddress()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.refCellSfn.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.refCellSfn.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mcc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*Proto_Gnss_Emergency_ClsUtranCellTime.refCellSfn.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsUtranCellTime.hasRefCellSfn.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMcc.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsUtranCellTime.clearRefCellSfn()()
{
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.refCellPsc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.refCellPsc.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.mnc.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*Proto_Gnss_Emergency_ClsUtranCellTime.refCellPsc.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsUtranCellTime.hasRefCellPsc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasMnc.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}