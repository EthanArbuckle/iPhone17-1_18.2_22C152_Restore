uint64_t __swift_get_extra_inhabitant_index_237Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t vars8;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1 + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication.TypeEnum(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t protocol witness for Message.isInitialized.getter in conformance CLP_LogEntry_AONLoc_Request()
{
  return MEMORY[0x270F44C98]();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_BtIndication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_18Tm_0);
}

uint64_t getEnumTagSinglePayload for Proto_Gpsd_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_237Tm_37);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SvReferencePoint@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_SvReferencePoint.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_SvReferencePoint.init(rawValue:)(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.decodeMessage<A>(decoder:)();
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v49 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v47 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v7 - 8);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  v13 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 15;
  v14 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType) = 15;
  v41 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power) = 2;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  uint64_t v42 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  uint64_t v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v44 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated) = 2;
  v45 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available) = 2;
  v46 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown) = 2;
  v48 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake) = 2;
  uint64_t v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v19, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  LODWORD(v19) = *(_DWORD *)v20;
  LOBYTE(v20) = *(unsigned char *)(v20 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v19;
  *(unsigned char *)(v12 + 4) = v20;
  v21 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  LOBYTE(v21) = *v21;
  swift_beginAccess();
  unsigned char *v13 = (_BYTE)v21;
  v22 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  LOBYTE(v22) = *v22;
  swift_beginAccess();
  unsigned char *v14 = (_BYTE)v22;
  v23 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  LOBYTE(v23) = *v23;
  v24 = v41;
  swift_beginAccess();
  unsigned char *v24 = (_BYTE)v23;
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  uint64_t v26 = v47;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  uint64_t v27 = v42;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v26, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  swift_endAccess();
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  uint64_t v29 = v49;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v30 = v43;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v29, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  swift_endAccess();
  v31 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  LOBYTE(v31) = *v31;
  v32 = v44;
  swift_beginAccess();
  unsigned char *v32 = (_BYTE)v31;
  v33 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  LOBYTE(v33) = *v33;
  v34 = v45;
  swift_beginAccess();
  unsigned char *v34 = (_BYTE)v33;
  v35 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  LOBYTE(v35) = *v35;
  v36 = v46;
  swift_beginAccess();
  unsigned char *v36 = (_BYTE)v35;
  v37 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  LOBYTE(v37) = *v37;
  v38 = v48;
  swift_beginAccess();
  unsigned char *v38 = (_BYTE)v37;
  return v1;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246F5BCA4);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_484Tm_6);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    uint64_t v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_DWORD *)v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v24 = v11[9];
    uint64_t v25 = &v9[v24];
    uint64_t v26 = &v10[v24];
    v25[4] = v26[4];
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    uint64_t v27 = v11[10];
    uint64_t v28 = &v9[v27];
    uint64_t v29 = &v10[v27];
    *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
    v28[4] = v29[4];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    v9[v11[13]] = v10[v11[13]];
    uint64_t v30 = v11[14];
    v31 = &v9[v30];
    v32 = &v10[v30];
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    v33 = *(void (**)(char *, void, uint64_t, int *))(v12 + 56);
    swift_bridgeObjectRetain();
    v33(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_583Tm_0);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  v9 = (void *)(a1 + v7[6]);
  void *v9 = 0;
  v9[1] = 0;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(a1 + v7[8]) = 4;
  uint64_t v11 = a1 + v7[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[10];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  *(unsigned char *)(a1 + v7[11]) = 2;
  *(unsigned char *)(a1 + v7[12]) = 2;
  *(unsigned char *)(a1 + v7[13]) = 4;
  uint64_t v13 = a1 + v7[14];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    v5(v6, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t __swift_get_extra_inhabitant_index_582Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_582Tm_0);
}

uint64_t __swift_store_extra_inhabitant_index_583Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  }
  return result;
}

uint64_t __swift_store_extra_inhabitant_index_259Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

void *__swift_store_extra_inhabitant_index_484Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      int v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t ALWiFiScanResult.init(pb:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v49 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v50 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v54);
  v53 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v45 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ALWiFiScanResult();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanResult.init()();
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  uint64_t v51 = a2;
  v23(a2, v22, v19);
  LOBYTE(v19) = CLP_LogEntry_PrivateData_WifiScanResult.hasScanTimestamp.getter();
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOcTm_0(a1, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  if (v19)
  {
    CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.getter((uint64_t)v15);
    BOOL v24 = CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter();
    _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
    if (v24)
    {
      CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.getter((uint64_t)v15);
      ALTimeStamp.init(pb:)((uint64_t)v15);
      uint64_t v25 = type metadata accessor for ALTimeStamp();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 0, 1, v25);
      ALWiFiScanResult._scanTimestamp.setter();
    }
  }
  else
  {
    _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void *)(*(void *)a1 + 16);
  uint64_t v45 = *(void *)a1;
  uint64_t v46 = a1;
  if (v27)
  {
    uint64_t v28 = v26 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    uint64_t v29 = *(void *)(v49 + 72);
    uint64_t v30 = (void (**)(char *, char *, uint64_t))(v52 + 16);
    uint64_t v48 = v52 + 32;
    uint64_t v49 = v29;
    uint64_t v47 = v52 + 8;
    swift_bridgeObjectRetain();
    v32 = v53;
    uint64_t v31 = v54;
    do
    {
      uint64_t v33 = v50;
      _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOcTm_0(v28, v50, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      v34 = (void (*)(unsigned char *, void))ALWiFiScanResult._scanTimestamp.modify();
      ALWiFiScanSingleAccessPoint.init(pb:ts:)(v33);
      v34(v55, 0);
      (*v30)(v32, v9, v31);
      v35 = (void (*)(unsigned char *, void))ALWiFiScanResult._accessPoints.modify();
      v37 = v36;
      unint64_t v38 = *v36;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v37 = v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1, v38, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ALWiFiScanSingleAccessPoint>, MEMORY[0x263F209D8], MEMORY[0x263F209D8]);
        unint64_t *v37 = v38;
      }
      unint64_t v41 = *(void *)(v38 + 16);
      unint64_t v40 = *(void *)(v38 + 24);
      if (v41 >= v40 >> 1)
      {
        unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, v38, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ALWiFiScanSingleAccessPoint>, MEMORY[0x263F209D8], MEMORY[0x263F209D8]);
        unint64_t *v37 = v38;
      }
      *(void *)(v38 + 16) = v41 + 1;
      uint64_t v42 = v52;
      unint64_t v43 = v38
          + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))
          + *(void *)(v42 + 72) * v41;
      v32 = v53;
      uint64_t v31 = v54;
      (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v43, v53, v54);
      v35(v55, 0);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v31);
      v28 += v49;
      --v27;
    }
    while (v27);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0(v46, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = (void *)(a1 + v8);
  uint64_t v12 = (void *)(a2 + v8);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  uint64_t v22 = a1 + v19;
  uint64_t v23 = a2 + v19;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  *(unsigned char *)(v22 + 4) = *(unsigned char *)(v23 + 4);
  uint64_t v24 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  uint64_t v25 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t ALWiFiScanSingleAccessPoint.init(pb:ts:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v20 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Mode?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Band?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanSingleAccessPoint.init(_:)();
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasMac.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.mac.getter();
    ALWiFiScanSingleAccessPoint._mac.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasSsid.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.getter();
    ALWiFiScanSingleAccessPoint._ssid.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasRssiDb.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter();
    char v21 = 0;
    ALWiFiScanSingleAccessPoint._rssidB.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasChannel.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.channel.getter();
    char v22 = 0;
    ALWiFiScanSingleAccessPoint._channel.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasAgeS.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.getter();
    char v23 = 0;
    ALWiFiScanSingleAccessPoint._ageSec.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasIsMoving.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.getter();
    ALWiFiScanSingleAccessPoint._isMoving.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasFrequencyKhz.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.getter();
    char v24 = 0;
    ALWiFiScanSingleAccessPoint._frequencyKhz.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasBand.getter())
  {
    char v15 = CLP_LogEntry_PrivateData_WifiAccessPoint.band.getter();
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, **((unsigned int **)&unk_265204E30 + v15), v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v11, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    ALWiFiScanSingleAccessPoint._band.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasMode.getter())
  {
    char v16 = CLP_LogEntry_PrivateData_WifiAccessPoint.mode.getter();
    uint64_t v17 = v20;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v20, **((unsigned int **)&unk_265204E50 + v16), v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v17, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v7, 0, 1, v2);
    ALWiFiScanSingleAccessPoint._mode.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasIsApplePersonalHotspot.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.getter();
    ALWiFiScanSingleAccessPoint._isAph.setter();
  }
  return _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Indication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_WiFiIndication);
}

BOOL CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 20) + 8) & 1) == 0;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode();
          goto LABEL_12;
        case 5:
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 9:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
LABEL_12:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasMac.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.mac.getter()
{
  return CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.getter(uint64_t (*a1)(void))
{
  char v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 20));
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t destroy for CLP_LogEntry_AONLoc_Indication(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 36));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL5Cn0.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 40) + 4) & 1) == 0;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 36) + 4) & 1) == 0;
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 40);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

BOOL CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 24) + 8) != 0;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasRssiDb.getter()
{
  return CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasSsid.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasMode.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32)) != 4;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasBand.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52)) != 4;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasAgeS.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.channel.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 28));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.band.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

float CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasIsApplePersonalHotspot.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44)) != 2;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasFrequencyKhz.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56) + 4) & 1) == 0;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasIsMoving.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48)) != 2;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasChannel.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 4) & 1) == 0;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;

  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t initializeWithCopy for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t ALTimeStamp.init(pb:)(uint64_t a1)
{
  ALTimeStamp.init()();
  if (CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter())
  {
    CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter();
    ALTimeStamp._cfAbsoluteTimeSec.setter();
  }
  if (CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter())
  {
    CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter();
    ALTimeStamp._machAbsoluteTimeSec.setter();
  }
  if (CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter())
  {
    CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter();
    ALTimeStamp._machContinuousTimeSec.setter();
  }
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(a1);
}

BOOL CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 8) & 1) == 0;
}

BOOL CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 8) & 1) == 0;
}

BOOL CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 28);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

double CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

double CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 20);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

double CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter()
{
  return CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

void *initializeWithCopy for CLP_LogEntry_PrivateData_Accel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  unint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    size_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    unint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    char v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)char v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_259Tm_10);
}

uint64_t destroy for CLP_LogEntry_PrivateData_Accel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6, v5);
  }
  return result;
}

uint64_t __swift_get_extra_inhabitant_index_258Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_258Tm_10);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    uint64_t v4 = 0;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t ALWiFiNotification.init(pb:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanResult?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x270FA5388](v11 - 8);
  unint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiNotification.NotiType?);
  MEMORY[0x270FA5388](v17 - 8);
  size_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotification.init()();
  if (CLP_LogEntry_PrivateData_WifiNotification.hasType.getter())
  {
    char v20 = CLP_LogEntry_PrivateData_WifiNotification.type.getter();
    ALWiFiNotification.NotiType.init(_:)(v20, (uint64_t)v19);
    uint64_t v21 = type metadata accessor for ALWiFiNotification.NotiType();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 0, 1, v21);
    ALWiFiNotification._type.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasEventReceiptTime.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.getter((uint64_t)v13);
    ALTimeStamp.init(pb:)((uint64_t)v13);
    uint64_t v22 = type metadata accessor for ALTimeStamp();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v16, 0, 1, v22);
    ALWiFiNotification._timestamp.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasScan.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.scan.getter(v7);
    ALWiFiScanResult.init(pb:)((uint64_t)v7, (uint64_t)v10);
    uint64_t v23 = type metadata accessor for ALWiFiScanResult();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v10, 0, 1, v23);
    ALWiFiNotification._scanResult.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasAssociatedState.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.associatedState.getter((uint64_t)v4);
    CLP_LogEntry_PrivateData_WifiAssociationState.mac.getter();
    _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v4, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
    ALWiFiNotification._associatedMac.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasSimulated.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.simulated.getter();
    ALWiFiNotification._simulated.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasAvailable.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.available.getter();
    ALWiFiNotification._available.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasIsApAwake.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.isApAwake.getter();
    ALWiFiNotification._isApAwake.setter();
  }
  return _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 2;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiNotification);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(uint64_t *a1, uint64_t (*a2)(void), void *a3, uint64_t (*a4)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v11, a1);
  uint64_t v13 = a4(0);
  BOOL v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
  return v14;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned char *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 & 1;
}

uint64_t outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ALWiFiNotification.NotiType.init(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20970];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20960];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20988];
      break;
    case 4:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20958];
      break;
    case 5:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20980];
      break;
    case 6:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20928];
      break;
    case 7:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20918];
      break;
    case 8:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20950];
      break;
    case 9:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20938];
      break;
    case 10:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20930];
      break;
    case 11:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20940];
      break;
    case 12:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20948];
      break;
    case 13:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20978];
      break;
    case 14:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20920];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F20968];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALWiFiNotification.NotiType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.mac.getter()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!CLP_LogEntry_PrivateData_WifiAssociationState.hasIsAssociated.getter()) {
    return 0;
  }
  if (!CLP_LogEntry_PrivateData_WifiAssociationState.hasAp.getter()) {
    return 0;
  }
  CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter((uint64_t)v2);
  BOOL v3 = CLP_LogEntry_PrivateData_WifiAccessPoint.hasMac.getter();
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  if (!v3) {
    return 0;
  }
  CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter((uint64_t)v2);
  uint64_t v4 = CLP_LogEntry_PrivateData_WifiAccessPoint.mac.getter();
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v4;
}

BOOL CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

BOOL CLP_LogEntry_PrivateData_WifiAssociationState.hasAp.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

BOOL CLP_LogEntry_PrivateData_WifiAssociationState.hasIsAssociated.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20)) != 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.simulated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.available.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasType.getter(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  return *v2 != 15;
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasType.getter()
{
  return CLP_LogEntry_PrivateData_WifiNotification.hasType.getter(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasScan.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.type.getter(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  if (*v2 == 15) {
    return 0;
  }
  else {
    return *v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.type.getter()
{
  return CLP_LogEntry_PrivateData_WifiNotification.type.getter(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.scan.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  *a1 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
}

uint64_t __swift_get_extra_inhabitant_index_483Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      BOOL v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_483Tm_6);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasAssociatedState.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasSimulated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasIsApAwake.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasAvailable.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

BOOL CLP_LogEntry_PrivateData_WifiScanResult.hasScanTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v11 - 1) + 48))(v9, 1, v11) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + v11[5];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a3 + v11[6];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a3 + v11[7];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WifiScanResult()
{
  return CLP_LogEntry_PrivateData_WifiScanResult.decodeMessage<A>(decoder:)();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246DD8098);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WifiScanType@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_WifiScanType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_WifiScanType.init(rawValue:)(unint64_t result)
{
  if (result >= 0xF) {
    return 15;
  }
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_Indication()
{
  return CLP_LogEntry_AONLoc_Indication.decodeMessage<A>(decoder:)();
}

uint64_t CLP_LogEntry_AONLoc_Indication.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_16;
        case 2:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_16;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 11:
          swift_beginAccess();
          type metadata accessor for Proto_Gpsd_Response(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gpsd_Response and conformance Proto_Gpsd_Response;
          goto LABEL_15;
        case 12:
          swift_beginAccess();
          type metadata accessor for Proto_Gpsd_Indication(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gpsd_Indication and conformance Proto_Gpsd_Indication;
          goto LABEL_15;
        case 21:
        case 31:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response;
          goto LABEL_15;
        case 22:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication;
          goto LABEL_15;
        case 32:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication;
LABEL_15:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v11, v10);
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_16:
          uint64_t v2 = v9;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum);
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Indication._StorageClass);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.associatedState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 2;
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246F5BB5C);
}

void ALXPCClient.onData(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v9);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v24 = v3;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v7;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v26 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v21 = v13 + 4;
    outlined copy of Data._Representation(a1, a2);
    uint64_t v15 = Data.description.getter();
    uint64_t v22 = v6;
    uint64_t v16 = v15;
    unint64_t v18 = v17;
    outlined consume of Data._Representation(a1, a2);
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v3 = v24;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);
    _os_log_impl(&dword_246DB2000, v10, v11, "receive %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v14, -1, -1);
    MEMORY[0x24C54A990](v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v22);
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  size_t v19 = *(void **)(v3 + 16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v19, sel_onData_, isa);
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t ResultHandler.onData(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - v11;
  xpclog.getter((uint64_t)&v27 - v11);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v30 = v10;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v29 = v6;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v31 = v7;
    uint64_t v28 = v17;
    uint64_t v33 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v27 = v16 + 4;
    outlined copy of Data._Representation(a1, a2);
    uint64_t v18 = v3;
    uint64_t v19 = Data.description.getter();
    unint64_t v21 = v20;
    outlined consume of Data._Representation(a1, a2);
    uint64_t v22 = v19;
    uint64_t v3 = v18;
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);
    _os_log_impl(&dword_246DB2000, v13, v14, "onData,callback,%s", v16, 0xCu);
    uint64_t v23 = v28;
    swift_arrayDestroy();
    uint64_t v24 = v23;
    uint64_t v7 = v31;
    MEMORY[0x24C54A990](v24, -1, -1);
    uint64_t v25 = v16;
    uint64_t v6 = v29;
    MEMORY[0x24C54A990](v25, -1, -1);
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v3 + 24))(a1, a2);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t static ALLogger.core.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t xpclog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for xpclog, (uint64_t)xpclog, a1);
}

uint64_t partial apply for closure #2 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1, unint64_t a2)
{
  return closure #2 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(a1, a2, *(void (**)(uint64_t, void))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t closure #2 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, void), uint64_t a4)
{
  v44 = a3;
  uint64_t v45 = a4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ALWiFiNotifications();
  uint64_t v10 = *(void *)(v42 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v42);
  uint64_t v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)v36 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v36 - v17;
  outlined copy of Data._Representation(a1, a2);
  uint64_t result = ALWiFiNotifications.init(data:)(a1, a2, (uint64_t)v18);
  if (!v4)
  {
    uint64_t v41 = v7;
    corelog.getter((uint64_t)v9);
    unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    uint64_t v21 = v42;
    v20(v16, v18, v42);
    v20(v13, v18, v21);
    unint64_t v40 = v9;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v25 = (_DWORD *)swift_slowAlloc();
      int v37 = v24;
      uint64_t v26 = v25;
      *uint64_t v25 = 134349312;
      v36[1] = v25 + 1;
      uint64_t v27 = *(void *)(ALWiFiNotifications.results.getter() + 16);
      swift_bridgeObjectRelease();
      unint64_t v38 = v22;
      uint64_t v28 = *(void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v39 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v28(v16, v21);
      uint64_t v47 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v26 + 6) = 1026;
      int v29 = ALWiFiNotifications.isLastBatch.getter() & 1;
      v28(v13, v21);
      uint64_t v30 = (uint64_t (*)(char *, uint64_t))v28;
      uint64_t v22 = v38;
      int v46 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_246DB2000, v22, (os_log_type_t)v37, "#WiFi,dataCallback,results,%{public}ld,last,%{BOOL,public}d", (uint8_t *)v26, 0x12u);
      MEMORY[0x24C54A990](v26, -1, -1);
    }
    else
    {
      uint64_t v31 = *(void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v39 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v31(v13, v21);
      v31(v16, v21);
      uint64_t v30 = (uint64_t (*)(char *, uint64_t))v31;
    }
    uint64_t v32 = v41;
    uint64_t v33 = v43;

    (*(void (**)(char *, uint64_t))(v33 + 8))(v40, v32);
    uint64_t v34 = ALWiFiNotifications.results.getter();
    char v35 = ALWiFiNotifications.isLastBatch.getter();
    v44(v34, v35 & 1);
    swift_bridgeObjectRelease();
    return v30(v18, v21);
  }
  return result;
}

uint64_t corelog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for corelog, (uint64_t)corelog, a1);
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t ALWiFiNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v15 - v12;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3) {
    return outlined consume of Data._Representation(a1, a2);
  }
  _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOcTm_0((uint64_t)v13, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  ALWiFiNotifications.init(pb:)((uint64_t)v11, a3);
  outlined consume of Data._Representation(a1, a2);
  return _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0((uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t ALWiFiNotifications.init(pb:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  uint64_t v38 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  char v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ALWiFiNotification();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for ALWiFiNotifications();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotifications.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v17, v14);
  if (CLP_LogEntry_AONLoc_Indication.hasType.getter()
    && (uint64_t v18 = v38,
        unint64_t v40 = v10,
        v41[0] = CLP_LogEntry_AONLoc_Indication.type.getter(),
        v41[39] = 4,
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && CLP_LogEntry_AONLoc_Indication.hasWifiIndication.getter())
  {
    CLP_LogEntry_AONLoc_Indication.wifiIndication.getter(v13);
    uint64_t v19 = *v13;
    uint64_t v20 = *(void *)(*v13 + 16);
    if (v20)
    {
      char v35 = v13;
      uint64_t v36 = a1;
      uint64_t v21 = v19 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v38 = *(void *)(v18 + 72);
      uint64_t v39 = v7;
      uint64_t v37 = v8 + 32;
      uint64_t v34 = v19;
      swift_bridgeObjectRetain();
      do
      {
        _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOcTm_0(v21, (uint64_t)v6, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        uint64_t v22 = v6;
        ALWiFiNotification.init(pb:)((uint64_t)v6);
        uint64_t v23 = a2;
        int v24 = (void (*)(unsigned char *, void))ALWiFiNotifications._results.modify();
        uint64_t v26 = v25;
        unint64_t v27 = *v25;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v26 = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, v27, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALWiFiNotification>, MEMORY[0x263F20990], MEMORY[0x263F20990]);
          *uint64_t v26 = v27;
        }
        unint64_t v30 = *(void *)(v27 + 16);
        unint64_t v29 = *(void *)(v27 + 24);
        if (v30 >= v29 >> 1)
        {
          unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v27, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALWiFiNotification>, MEMORY[0x263F20990], MEMORY[0x263F20990]);
          *uint64_t v26 = v27;
        }
        *(void *)(v27 + 16) = v30 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v27+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v30, v40, v39);
        v24(v41, 0);
        v21 += v38;
        --v20;
        a2 = v23;
        char v6 = v22;
      }
      while (v20);
      swift_bridgeObjectRelease();
      uint64_t v13 = v35;
      a1 = v36;
    }
    CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter();
    ALWiFiNotifications._isLastBatch.setter();
    _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0(a1, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v31 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
    uint64_t v32 = (uint64_t)v13;
  }
  else
  {
    uint64_t v31 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    uint64_t v32 = a1;
  }
  return _s10ALProtobuf27CLP_LogEntry_AONLoc_RequestV13ResultOptionsVWOhTm_0(v32, v31);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter(uint64_t (*a1)(void))
{
  int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 28));
  return (v2 == 2) | v2 & 1u;
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter()
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(char *a1, char *a2)
{
  return qword_247109498[*a1] == qword_247109498[*a2];
}

BOOL CLP_LogEntry_AONLoc_Indication.hasType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 33) != 7;
}

uint64_t CLP_LogEntry_AONLoc_Indication.type.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 33) == 7) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 33);
  }
}

BOOL CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

BOOL CLP_LogEntry_AONLoc_Indication.hasWifiIndication.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiIndication.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, void *a5@<X8>)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, a1);
  uint64_t v15 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v13, 1, v15) != 1) {
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, (uint64_t)a5, a4);
  }
  *a5 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  uint64_t v16 = (char *)a5 + *(int *)(v15 + 24);
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  *((unsigned char *)a5 + *(int *)(v15 + 28)) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t __swift_get_extra_inhabitant_index_18Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_18Tm);
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiIndication.getter@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.wifiIndication.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_AONLoc_Indication._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for CLP_LogEntry_AONLoc_Response(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t destroy for CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  MEMORY[0x270FA5388]();
  uint64_t v48 = (uint64_t)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  MEMORY[0x270FA5388]();
  uint64_t v47 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  MEMORY[0x270FA5388]();
  uint64_t v46 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  MEMORY[0x270FA5388]();
  uint64_t v45 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Response?);
  MEMORY[0x270FA5388]();
  uint64_t v41 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  *(_DWORD *)(v1 + 28) = 0;
  *(_WORD *)(v1 + 32) = 1793;
  uint64_t v39 = v1 + 33;
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  uint64_t v40 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  uint64_t v11 = type metadata accessor for Proto_Gpsd_Indication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  uint64_t v42 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1, v13);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  uint64_t v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  v14();
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  swift_beginAccess();
  uint64_t v19 = *(void *)(a1 + 16);
  char v20 = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v19;
  *(unsigned char *)(v1 + 24) = v20;
  swift_beginAccess();
  LODWORD(v19) = *(_DWORD *)(a1 + 28);
  char v21 = *(unsigned char *)(a1 + 32);
  swift_beginAccess();
  *(_DWORD *)(v1 + 28) = v19;
  *(unsigned char *)(v1 + 32) = v21;
  swift_beginAccess();
  LOBYTE(v19) = *(unsigned char *)(a1 + 33);
  swift_beginAccess();
  *(unsigned char *)(v1 + 33) = v19;
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  uint64_t v23 = v41;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, v41, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v23, v8, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  swift_endAccess();
  uint64_t v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  uint64_t v25 = v24;
  uint64_t v26 = v45;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v45, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  uint64_t v27 = v40;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v26, v27, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  swift_endAccess();
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  uint64_t v29 = v46;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, v46, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v30 = v42;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v29, v30, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  swift_endAccess();
  uint64_t v31 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  uint64_t v32 = v47;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v47, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  uint64_t v33 = v43;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v32, v33, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  swift_endAccess();
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v35 = v44;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v29, v35, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  swift_endAccess();
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  uint64_t v37 = v48;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v48, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  swift_release();
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v37, v17, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  swift_endAccess();
  return v1;
}

uint64_t outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined assign with take of Proto_Gpsd_Response?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_19Tm);
}

void *__swift_store_extra_inhabitant_index_19Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246DD8160);
}

uint64_t __swift_store_extra_inhabitant_index_238Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_BtIndication(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_19Tm_0);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Response(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Response);
}

uint64_t storeEnumTagSinglePayload for Proto_Gpsd_Indication(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_238Tm_37);
}

uint64_t type metadata accessor for Proto_Gpsd_Indication(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for Proto_Gpsd_Indication);
}

uint64_t storeEnumTagSinglePayload for Proto_Gpsd_Response(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2470F91E0);
}

uint64_t type metadata accessor for Proto_Gpsd_Response(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for Proto_Gpsd_Response);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_WiFiIndication()
{
  return CLP_LogEntry_AONLoc_WiFiIndication.decodeMessage<A>(decoder:)();
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 11) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WifiAccessPoint@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  *(unsigned char *)(a2 + v8) = 4;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  *(unsigned char *)(a2 + v13) = 2;
  uint64_t v14 = a1[14];
  *(unsigned char *)(a2 + a1[13]) = 4;
  uint64_t v15 = a2 + v14;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WifiNotification@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_WifiNotification._StorageClass.defaultInstance, a2);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Wgs84Ecef@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  return result;
}

uint64_t getEnumTagSinglePayload for Proto_Gpsd_Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2470F9118);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_OperatingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_WiFiIndication@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 28);
  unsigned int v6 = (char *)a2 + *(int *)(a1 + 24);
  *(void *)unsigned int v6 = 0;
  v6[8] = 1;
  *((unsigned char *)a2 + v5) = 2;
  return result;
}

void *initializeWithCopy for CLP_LogEntry_AONLoc_WiFiIndication(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  return a1;
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_Indication@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WifiAssociationState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 24);
  *(unsigned char *)(a2 + *(int *)(a1 + 20)) = 2;
  uint64_t v5 = a2 + v4;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_AONLoc_Indication.TypeEnum.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t specialized CLP_LogEntry_AONLoc_Indication.TypeEnum.init(rawValue:)(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
      return result;
    case 10:
      uint64_t result = 1;
      break;
    case 11:
      uint64_t result = 2;
      break;
    case 20:
      uint64_t result = 3;
      break;
    case 21:
      uint64_t result = 4;
      break;
    case 30:
      uint64_t result = 5;
      break;
    case 31:
      uint64_t result = 6;
      break;
    default:
      uint64_t result = 7;
      break;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiScanType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Accel@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  UnknownStorage.init()();
  int v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  unsigned int v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return CLP_LogEntry_PrivateData_WifiAssociationState.decodeMessage<A>(decoder:)();
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiScanType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication.TypeEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WifiNotification()
{
  return CLP_LogEntry_PrivateData_WifiNotification.decodeMessage<A>(decoder:)();
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_14;
        case 2:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_16;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType();
          goto LABEL_11;
        case 4:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType();
LABEL_11:
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 5:
        case 8:
        case 9:
        case 10:
        case 11:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_16;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState;
          goto LABEL_14;
        case 7:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult;
          uint64_t v11 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult;
LABEL_14:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(v11, v10);
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_16:
          uint64_t v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType);
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiNotification._StorageClass);
}

uint64_t ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000) == 0)
  {
    uint64_t v6 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 240))(v10);
    ALResultOptions.intervalSec.setter();
    v6(v10, 0);
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  char v8 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t))(*(void *)v3 + 280);
  swift_retain();
  swift_retain();
  v8(partial apply for closure #1 in ALFWiFiScanResultsRequester.register(callback:intervalSec:), v3, partial apply for closure #2 in ALFWiFiScanResultsRequester.register(callback:intervalSec:), v7);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALResultOptions();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ALProtoRequest();
  (*(void (**)(void))(*(void *)a1 + 120))();
  ALProtoRequest.__allocating_init(wifiResultOptions:)((uint64_t)v4);
  uint64_t v5 = dispatch thunk of ALProtoRequest.serializedData()();
  swift_release();
  return v5;
}

uint64_t partial apply for closure #1 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)()
{
  return closure #1 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(v0);
}

uint64_t sub_246DBCE38()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t ALFWiFiScanResultsRequester.__allocating_init(queue:)(uint64_t a1)
{
  return ALFResultsRequesterData.init(queue:)(a1);
}

uint64_t ALFWiFiScanResultsRequester.__deallocating_deinit()
{
  uint64_t v0 = ALFResultsRequesterData.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t ObjC metadata update function for ALFWiFiScanResultsRequester()
{
  return type metadata accessor for ALFWiFiScanResultsRequester();
}

uint64_t type metadata accessor for ALFWiFiScanResultsRequester()
{
  uint64_t result = type metadata singleton initialization cache for ALFWiFiScanResultsRequester;
  if (!type metadata singleton initialization cache for ALFWiFiScanResultsRequester) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ALFWiFiScanResultsRequester()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for ALFWiFiScanResultsRequester(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ALFWiFiScanResultsRequester);
}

uint64_t dispatch thunk of ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 328))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of ALFWiFiScanResultsRequester.query(options:callback:start:end:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t ResultHandler.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t key path getter for ALFResultsRequesterData._options : ALFResultsRequesterData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 120))();
}

uint64_t key path setter for ALFResultsRequesterData._options : ALFResultsRequesterData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ALResultOptions();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 128))(v6);
}

uint64_t ALFResultsRequesterData._options.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ALResultOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ALFResultsRequesterData._options.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ALResultOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ALFResultsRequesterData._options.modify())()
{
  return ALFResultsRequesterData._options.modify;
}

uint64_t variable initialization expression of ALFResultsRequesterData._label()
{
  return 0;
}

uint64_t key path getter for ALFResultsRequesterData._label : ALFResultsRequesterData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for ALFResultsRequesterData._label : ALFResultsRequesterData(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t ALFResultsRequesterData._label.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__label);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ALFResultsRequesterData._label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__label);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ALFResultsRequesterData._label.modify())()
{
  return ALFResultsRequesterData._label.modify;
}

uint64_t variable initialization expression of ALFResultsRequesterData._repeatHandler()
{
  return 0;
}

uint64_t ALFResultsRequesterData.__allocating_init(queue:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__label);
  *uint64_t v3 = 0;
  v3[1] = 0;
  *(void *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler) = 0;
  uint64_t v4 = (void *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  *uint64_t v4 = 0;
  v4[1] = 0;
  ALResultOptions.init()();
  *(void *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__queue) = a1;
  return v2;
}

uint64_t ALFResultsRequesterData.init(queue:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ALResultOptions();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__label);
  *uint64_t v7 = 0;
  v7[1] = 0;
  *(void *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler) = 0;
  char v8 = (void *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  *char v8 = 0;
  v8[1] = 0;
  ALResultOptions.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options, v6, v3);
  *(void *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__queue) = a1;
  return v1;
}

uint64_t key path getter for ALFResultsRequesterData.options : ALFResultsRequesterData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 224))();
}

uint64_t key path setter for ALFResultsRequesterData.options : ALFResultsRequesterData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ALResultOptions();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 232))(v6);
}

uint64_t ALFResultsRequesterData.options.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t ALFResultsRequesterData.options.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ALResultOptions();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  (*(void (**)(char *))(*(void *)v1 + 128))(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*ALFResultsRequesterData.options.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for ALResultOptions();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  (*(void (**)(void))(*(void *)v1 + 120))();
  return ALFResultsRequesterData.options.modify;
}

void ALFResultsRequesterData.options.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[2] + 16);
  v4((*a1)[4], v3[5], v3[1]);
  uint64_t v5 = (void *)v3[4];
  size_t v6 = (void *)v3[5];
  uint64_t v8 = v3[2];
  uint64_t v7 = (void *)v3[3];
  uint64_t v9 = *v3;
  uint64_t v10 = v3[1];
  if (a2)
  {
    v4(v3[3], v3[4], v3[1]);
    (*(void (**)(void *))(*(void *)v9 + 128))(v7);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v5, v10);
    v11(v6, v10);
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 128))(v3[4]);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v10);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t key path getter for ALFResultsRequesterData.label : ALFResultsRequesterData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for ALFResultsRequesterData.label : ALFResultsRequesterData(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 256);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t ALFResultsRequesterData.label.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 144))();
  if (v2) {
    return v1;
  }
  id v4 = objc_msgSend(self, sel_mainBundle);
  id v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (!v5) {
    return 0x6B6E556C6562616CLL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t ALFResultsRequesterData.label.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t (*ALFResultsRequesterData.label.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 144))();
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t v6 = v4;
  }
  else
  {
    id v7 = objc_msgSend(self, sel_mainBundle);
    id v8 = objc_msgSend(v7, sel_bundleIdentifier);

    if (v8)
    {
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v6 = v9;
    }
    else
    {
      unint64_t v6 = 0xEC0000006E776F6ELL;
      uint64_t v5 = 0x6B6E556C6562616CLL;
    }
  }
  *a1 = v5;
  a1[1] = v6;
  return ALFResultsRequesterData.label.modify;
}

uint64_t ALFResultsRequesterData.label.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[2] + 152);
  if ((a2 & 1) == 0) {
    return v4(*a1, v2);
  }
  swift_bridgeObjectRetain();
  v4(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t ALFResultsRequesterData.register(payload:dataCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v15 = OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler;
  if (*(void *)(v5 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler))
  {
    allog.getter((uint64_t)&v35 - v13);
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17))
    {

      swift_release_n();
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v36 = v8;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v38 = v19;
    uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v5 + 248))();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246DB2000, v16, v17, "register,%{public}s,already exist", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v19, -1, -1);
    MEMORY[0x24C54A990](v18, -1, -1);

    uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    uint64_t v23 = v14;
  }
  else
  {
    uint64_t v36 = v8;
    uint64_t v24 = *(void **)(v5 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__queue);
    type metadata accessor for ResultHandler();
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = 0;
    v25[3] = a3;
    v25[4] = a4;
    v25[5] = partial apply for implicit closure #3 in implicit closure #2 in ALFResultsRequesterData.register(payload:dataCallback:);
    v25[6] = v5;
    type metadata accessor for ALXPCClient();
    swift_allocObject();
    swift_retain();
    id v26 = v24;
    swift_retain();
    swift_retain();
    v25[2] = ALXPCClient.init(queue:callback:)(v26, (uint64_t)v25);
    swift_release();
    *(void *)(v5 + v15) = v25;
    swift_release();
    uint64_t v27 = *(void *)(v5 + v15);
    if (v27 && *(void *)(v27 + 16))
    {
      swift_retain();
      swift_retain();
      dispatch thunk of ALXPCClient.send(_:)();
      swift_release();
      swift_release();
    }
    allog.getter((uint64_t)v12);
    swift_retain_n();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v38 = v31;
      uint64_t v32 = (*(uint64_t (**)(void))(*(void *)v5 + 248))();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246DB2000, v28, v29, "register,%{public}s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C54A990](v31, -1, -1);
      MEMORY[0x24C54A990](v30, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    uint64_t v23 = v12;
  }
  return v22(v23, v36);
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in ALFResultsRequesterData.register(payload:dataCallback:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t type metadata accessor for ResultHandler()
{
  return self;
}

uint64_t ALFResultsRequesterData.register(request:dataCallback:)(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = v3;
  unint64_t v6 = (uint64_t (**)(uint64_t))(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  *unint64_t v6 = a1;
  v6[1] = a2;
  swift_retain();
  uint64_t v8 = outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?(v7);
  uint64_t result = a1(v8);
  if (!v4)
  {
    uint64_t v11 = result;
    unint64_t v12 = v10;
    (*(void (**)(void))(*(void *)v2 + 272))();
    return outlined consume of Data._Representation(v11, v12);
  }
  return result;
}

Swift::Void __swiftcall ALFResultsRequesterData.onInterrupt()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v28 - v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  unint64_t v10 = *(uint64_t (**)(uint64_t))(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  if (v10)
  {
    uint64_t v32 = v2;
    uint64_t v11 = swift_retain();
    uint64_t v15 = v10(v11);
    unint64_t v17 = v16;
    uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler);
    if (v18 && *(void *)(v18 + 16))
    {
      swift_retain();
      swift_retain();
      dispatch thunk of ALXPCClient.send(_:)();
      swift_release();
      swift_release();
    }
    allog.getter((uint64_t)v9);
    outlined copy of Data._Representation(v15, v17);
    outlined copy of Data._Representation(v15, v17);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_t v31 = v19;
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v34 = v30;
      os_log_type_t v29 = v21;
      *(_DWORD *)unint64_t v21 = 136315138;
      uint64_t v28 = v21 + 4;
      outlined copy of Data._Representation(v15, v17);
      uint64_t v22 = Data.description.getter();
      unint64_t v24 = v23;
      outlined consume of Data._Representation(v15, v17);
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v15, v17);
      outlined consume of Data._Representation(v15, v17);
      os_log_t v25 = v31;
      id v26 = v29;
      _os_log_impl(&dword_246DB2000, v31, v20, "onInterrupt,resend request %s", v29, 0xCu);
      uint64_t v27 = v30;
      swift_arrayDestroy();
      MEMORY[0x24C54A990](v27, -1, -1);
      MEMORY[0x24C54A990](v26, -1, -1);
      outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?((uint64_t)v10);

      outlined consume of Data._Representation(v15, v17);
    }
    else
    {
      outlined consume of Data._Representation(v15, v17);
      outlined consume of Data._Representation(v15, v17);
      outlined consume of Data._Representation(v15, v17);
      outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?((uint64_t)v10);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v32);
  }
  else
  {
    allog.getter((uint64_t)v7);
    unint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, (os_log_type_t)v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_246DB2000, v12, (os_log_type_t)v13, "_requestPayloadGet,nil", v14, 2u);
      MEMORY[0x24C54A990](v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }
}

Swift::Void __swiftcall ALFResultsRequesterData.unregister()()
{
  *(void *)(v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler) = 0;
  swift_release();
}

uint64_t ALFResultsRequesterData.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options;
  uint64_t v2 = type metadata accessor for ALResultOptions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?(*(void *)(v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet));
  return v0;
}

uint64_t ALFResultsRequesterData.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options;
  uint64_t v2 = type metadata accessor for ALResultOptions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?(*(void *)(v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet));
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in ALFResultsRequesterData.onInterrupt()()
{
  v0._countAndFlagsBits = 0x727265746E496E6FLL;
  v0._object = (void *)0xEC0000002C747075;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t ObjC metadata update function for ALFResultsRequesterData()
{
  return type metadata accessor for ALFResultsRequesterData();
}

uint64_t type metadata accessor for ALFResultsRequesterData()
{
  uint64_t result = type metadata singleton initialization cache for ALFResultsRequesterData;
  if (!type metadata singleton initialization cache for ALFResultsRequesterData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ALFResultsRequesterData()
{
  uint64_t result = type metadata accessor for ALResultOptions();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ALFResultsRequesterData(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ALFResultsRequesterData);
}

uint64_t dispatch thunk of ALFResultsRequesterData._options.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._options.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._options.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._label.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._label.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._label.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.__allocating_init(queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.options.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.options.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.options.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.label.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.label.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.label.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.register(payload:dataCallback:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.register(request:dataCallback:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.onInterrupt()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.updateOptions(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.unregister()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.query(options:dataDallback:start:end:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.queryCancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

void ALFResultsRequesterData._requestPayloadGet.setter()
{
}

Swift::Bool __swiftcall isAvailable()()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PersistentConfig();
  static PersistentConfig.instance.getter();
  dispatch thunk of PersistentConfig.addSuite(named:)();
  swift_release();
  type metadata accessor for PlatformInfo();
  static PlatformInfo.instance.getter();
  char v4 = dispatch thunk of PlatformInfo.isAvailable.getter();
  swift_release();
  allog.getter((uint64_t)v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    int64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int64_t v7 = 67240192;
    v9[3] = v4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_246DB2000, v5, v6, "AONSense.isAvailable,%{BOOL,public}d", v7, 8u);
    MEMORY[0x24C54A990](v7, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000) == 0)
  {
    os_log_type_t v6 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 240))(v10);
    ALResultOptions.intervalSec.setter();
    v6(v10, 0);
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  int64_t v8 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t))(*(void *)v3 + 280);
  swift_retain();
  swift_retain();
  v8(partial apply for closure #1 in ALFBtAdvResultsRequester.register(callback:intervalSec:), v3, partial apply for closure #2 in ALFBtAdvResultsRequester.register(callback:intervalSec:), v7);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALResultOptions();
  MEMORY[0x270FA5388](v2 - 8);
  char v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ALProtoRequest();
  (*(void (**)(void))(*(void *)a1 + 120))();
  ALProtoRequest.__allocating_init(btResultOptions:)((uint64_t)v4);
  uint64_t v5 = dispatch thunk of ALProtoRequest.serializedData()();
  swift_release();
  return v5;
}

uint64_t partial apply for closure #1 in ALFBtAdvResultsRequester.register(callback:intervalSec:)()
{
  return closure #1 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(v0);
}

uint64_t closure #2 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, void), uint64_t a4)
{
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  int64_t v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ALBtNotifications();
  uint64_t v10 = *(void *)(v42 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v42);
  uint64_t v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  unint64_t v16 = (char *)v36 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v36 - v17;
  outlined copy of Data._Representation(a1, a2);
  uint64_t result = ALBtNotifications.init(data:)(a1, a2, (uint64_t)v18);
  if (!v4)
  {
    uint64_t v41 = v7;
    corelog.getter((uint64_t)v9);
    os_log_type_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    uint64_t v21 = v42;
    v20(v16, v18, v42);
    v20(v13, v18, v21);
    uint64_t v40 = v9;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      os_log_t v25 = (_DWORD *)swift_slowAlloc();
      int v37 = v24;
      id v26 = v25;
      *os_log_t v25 = 134349312;
      v36[1] = v25 + 1;
      uint64_t v27 = *(void *)(ALBtNotifications.results.getter() + 16);
      swift_bridgeObjectRelease();
      uint64_t v38 = v22;
      uint64_t v28 = *(void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v39 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v28(v16, v21);
      uint64_t v47 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v26 + 6) = 1026;
      int v29 = ALBtNotifications.isLastBatch.getter() & 1;
      v28(v13, v21);
      uint64_t v30 = (uint64_t (*)(char *, uint64_t))v28;
      uint64_t v22 = v38;
      int v46 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_246DB2000, v22, (os_log_type_t)v37, "#BT,dataCallback,results,%{public}ld,last,%{BOOL,public}d", (uint8_t *)v26, 0x12u);
      MEMORY[0x24C54A990](v26, -1, -1);
    }
    else
    {
      os_log_t v31 = *(void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v39 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v31(v13, v21);
      v31(v16, v21);
      uint64_t v30 = (uint64_t (*)(char *, uint64_t))v31;
    }
    uint64_t v32 = v41;
    uint64_t v33 = v43;

    (*(void (**)(char *, uint64_t))(v33 + 8))(v40, v32);
    uint64_t v34 = ALBtNotifications.results.getter();
    char v35 = ALBtNotifications.isLastBatch.getter();
    v44(v34, v35 & 1);
    swift_bridgeObjectRelease();
    return v30(v18, v21);
  }
  return result;
}

uint64_t sub_246DBF948()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1, unint64_t a2)
{
  return closure #2 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(a1, a2, *(void (**)(uint64_t, void))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t ALFBtAdvResultsRequester.__allocating_init(queue:)(uint64_t a1)
{
  return ALFResultsRequesterData.init(queue:)(a1);
}

uint64_t ALFBtAdvResultsRequester.__deallocating_deinit()
{
  uint64_t v0 = ALFResultsRequesterData.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t ObjC metadata update function for ALFBtAdvResultsRequester()
{
  return type metadata accessor for ALFBtAdvResultsRequester();
}

uint64_t type metadata accessor for ALFBtAdvResultsRequester()
{
  uint64_t result = type metadata singleton initialization cache for ALFBtAdvResultsRequester;
  if (!type metadata singleton initialization cache for ALFBtAdvResultsRequester) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t method lookup function for ALFBtAdvResultsRequester(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ALFBtAdvResultsRequester);
}

uint64_t dispatch thunk of ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 328))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of ALFBtAdvResultsRequester.query(options:callback:start:end:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t ALXPCClient._callback.getter()
{
  return swift_unknownObjectRetain();
}

id ALXPCClient._connection.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t ALXPCClient.__allocating_init(queue:callback:)(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  ALXPCClient.init(queue:callback:)(a1, a2);
  return v4;
}

uint64_t ALXPCClient.init(queue:callback:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v43 = v5;
  uint64_t v44 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v41 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v40 - v9;
  *(void *)(v2 + 16) = a2;
  type metadata accessor for ALServiceDelegate();
  uint64_t v42 = a2;
  swift_unknownObjectRetain();
  unint64_t v11 = static ALServiceDelegate.serviceName()();
  unint64_t v13 = v12;
  xpclog.getter((uint64_t)v10);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t aBlock = v17;
    *(_DWORD *)unint64_t v16 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &aBlock);
    uint64_t v18 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_246DB2000, v14, v15, "Try connecting xpc service %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v17, -1, -1);
    MEMORY[0x24C54A990](v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v18);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v43);
  }
  id v19 = objc_allocWithZone(MEMORY[0x263F08D68]);
  os_log_type_t v20 = (void *)MEMORY[0x24C54A1B0](v11, v13);
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v19, sel_initWithMachServiceName_options_, v20, 0);

  *(void *)(v3 + 24) = v21;
  objc_msgSend(v21, sel_setExportedObject_, v3);
  uint64_t v22 = self;
  id v23 = v21;
  id v24 = objc_msgSend(v22, sel_interfaceWithProtocol_, &unk_26FB590B0);
  objc_msgSend(v23, sel_setExportedInterface_, v24);

  id v25 = *(id *)(v3 + 24);
  id v26 = objc_msgSend(v22, sel_interfaceWithProtocol_, &unk_26FB590B0);
  objc_msgSend(v25, sel_setRemoteObjectInterface_, v26);

  uint64_t v27 = *(void **)(v3 + 24);
  uint64_t v50 = partial apply for implicit closure #3 in implicit closure #2 in ALXPCClient.init(queue:callback:);
  uint64_t v51 = v3;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v47 = 1107296256;
  uint64_t v48 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v49 = &block_descriptor;
  uint64_t v28 = _Block_copy(&aBlock);
  id v29 = v27;
  swift_retain();
  swift_release();
  objc_msgSend(v29, sel_setInterruptionHandler_, v28);
  _Block_release(v28);

  uint64_t v30 = *(void **)(v3 + 24);
  uint64_t v50 = partial apply for implicit closure #5 in implicit closure #4 in ALXPCClient.init(queue:callback:);
  uint64_t v51 = v3;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v47 = 1107296256;
  uint64_t v48 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v49 = &block_descriptor_3;
  os_log_t v31 = _Block_copy(&aBlock);
  swift_retain();
  id v32 = v30;
  swift_release();
  objc_msgSend(v32, sel_setInvalidationHandler_, v31);
  _Block_release(v31);

  uint64_t v33 = *(void **)(v3 + 24);
  uint64_t v34 = v40;
  objc_msgSend(v33, sel__setQueue_, v40);
  objc_msgSend(v33, sel_activate);
  uint64_t v35 = v41;
  xpclog.getter(v41);
  swift_retain();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 67240192;
    LODWORD(aBlock) = objc_msgSend(*(id *)(v3 + 24), sel_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_246DB2000, v36, v37, "Connected to xpc service pid: %{public}d", v38, 8u);
    MEMORY[0x24C54A990](v38, -1, -1);

    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
    swift_release();
  }

  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v35, v43);
  return v3;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t implicit closure #5 in implicit closure #4 in ALXPCClient.init(queue:callback:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v5);
  Logger._fault(_:function:file:line:)(partial apply for implicit closure #1 in ALXPCClient.invalidationHandler(), a1, (unint64_t)"invalidationHandler()", 21, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/XPC/ALXPCClient.swift", 76, 2);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Void __swiftcall ALXPCClient.onInterrupt()()
{
  objc_msgSend(*(id *)(v0 + 16), sel_onInterrupt);
}

uint64_t ALXPCClient.send(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)v33 - v11;
  unint64_t v13 = *(void **)(v3 + 24);
  aBlock[4] = (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in ALXPCClient.send(_:);
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_6;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v15 = objc_msgSend(v13, sel_remoteObjectProxyWithErrorHandler_, v14);
  _Block_release(v14);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALXPCProtocol);
  if (swift_dynamicCast())
  {
    unint64_t v16 = (void *)v36;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v16, sel_onData_, isa);

    xpclog.getter((uint64_t)v12);
    outlined copy of Data._Representation(a1, a2);
    outlined copy of Data._Representation(a1, a2);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v35 = v6;
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      aBlock[0] = v21;
      uint64_t v34 = v7;
      *(_DWORD *)os_log_type_t v20 = 136446210;
      v33[1] = v20 + 4;
      outlined copy of Data._Representation(a1, a2);
      uint64_t v22 = Data.description.getter();
      v33[2] = v16;
      uint64_t v23 = v22;
      unint64_t v25 = v24;
      outlined consume of Data._Representation(a1, a2);
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(a1, a2);
      outlined consume of Data._Representation(a1, a2);
      _os_log_impl(&dword_246DB2000, v18, v19, "sent %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C54A990](v21, -1, -1);
      MEMORY[0x24C54A990](v20, -1, -1);
      swift_unknownObjectRelease();

      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v12, v35);
    }
    else
    {
      outlined consume of Data._Representation(a1, a2);
      outlined consume of Data._Representation(a1, a2);

      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
  }
  else
  {
    xpclog.getter((uint64_t)v10);
    swift_retain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v35 = v6;
      *(_DWORD *)id v29 = 138543362;
      aBlock[0] = (uint64_t)v13;
      id v30 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v31 = v34;
      *(void *)uint64_t v34 = v13;
      swift_release_n();
      _os_log_impl(&dword_246DB2000, v27, v28, "remoteObjectProxyWithErrorHandler failed%{public}@", v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      uint64_t v32 = v31;
      uint64_t v6 = v35;
      MEMORY[0x24C54A990](v32, -1, -1);
      MEMORY[0x24C54A990](v29, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

id ALXPCClient.interruptionHandler()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v5);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138543362;
    uint64_t v15 = v2;
    uint64_t v9 = *(void **)(v1 + 24);
    unint64_t v16 = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v11 = v14;
    void *v14 = v9;
    uint64_t v2 = v15;
    swift_release_n();
    _os_log_impl(&dword_246DB2000, v6, v7, "client,interruptionHandler %{public}@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v11, -1, -1);
    MEMORY[0x24C54A990](v8, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return objc_msgSend(*(id *)(v1 + 16), sel_onInterrupt);
}

uint64_t ALXPCClient.proxyErrorHandler(error:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  xpclog.getter((uint64_t)v5);
  uint64_t v8 = a1;
  Logger._fault(_:function:file:line:)(partial apply for implicit closure #1 in ALXPCClient.proxyErrorHandler(error:), v7, (unint64_t)"proxyErrorHandler(error:)", 25, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/XPC/ALXPCClient.swift", 76, 2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ALXPCClient.deinit()
{
  swift_unknownObjectRelease();

  return v0;
}

uint64_t ALXPCClient.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t partial apply for implicit closure #5 in implicit closure #4 in ALXPCClient.init(queue:callback:)()
{
  return implicit closure #5 in implicit closure #4 in ALXPCClient.init(queue:callback:)(v0);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ALXPCClient.send(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t partial apply for implicit closure #1 in ALXPCClient.proxyErrorHandler(error:)()
{
  _StringGuts.grow(_:)(21);
  v0._object = (void *)0x800000024713A280;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  swift_getErrorValue();
  v1._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t type metadata accessor for ALXPCClient()
{
  return self;
}

uint64_t method lookup function for ALXPCClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ALXPCClient);
}

uint64_t dispatch thunk of ALXPCClient.__allocating_init(queue:callback:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ALXPCClient.onData(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ALXPCClient.onInterrupt()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of ALXPCClient.send(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t partial apply for implicit closure #1 in ALXPCClient.invalidationHandler()()
{
  _StringGuts.grow(_:)(43);
  v1._object = (void *)0x800000024713A2C0;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  Swift::String v2 = *(void **)(v0 + 24);
  id v3 = objc_msgSend(v2, sel_description);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x20646970202CLL;
  v8._object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  uint64_t v12 = objc_msgSend(v2, sel_processIdentifier);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x737469786520;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  return HIDWORD(v12);
}

id ALServiceDelegate._listener.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener);
}

id ALServiceDelegate._queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue);
}

uint64_t ALServiceDelegate._dataService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService;
  swift_beginAccess();
  return outlined init with copy of ALXPCDataService(v3, a1);
}

uint64_t outlined init with copy of ALXPCDataService(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t ALServiceDelegate._dataService.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0(v3);
  outlined init with take of ALXPCDataService(a1, v3);
  return swift_endAccess();
}

uint64_t outlined init with take of ALXPCDataService(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t (*ALServiceDelegate._dataService.modify())()
{
  return ALFResultsRequesterData._label.modify;
}

char *ALServiceDelegate.__allocating_init(queue:dataService:)(void *a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return ALServiceDelegate.init(queue:dataService:)(a1, a2);
}

char *ALServiceDelegate.init(queue:dataService:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::String v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue] = a1;
  uint64_t v26 = a2;
  outlined init with copy of ALXPCDataService(a2, (uint64_t)&v2[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService]);
  id v9 = objc_allocWithZone(MEMORY[0x263F08D88]);
  Swift::String v10 = v2;
  id v25 = a1;
  uint64_t v11 = (void *)MEMORY[0x24C54A1B0](0xD000000000000017, 0x800000024713A2E0);
  id v12 = objc_msgSend(v9, sel_initWithMachServiceName_, v11);

  *(void *)&v10[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener] = v12;
  uint64_t v13 = (objc_class *)type metadata accessor for ALServiceDelegate();
  v29.receiver = v10;
  v29.super_class = v13;
  uint64_t v14 = (char *)objc_msgSendSuper2(&v29, sel_init);
  uint64_t v15 = *(void **)&v14[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener];
  uint64_t v16 = *(void *)&v14[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue];
  uint64_t v17 = v14;
  objc_msgSend(v15, sel__setQueue_, v16);
  objc_msgSend(v15, sel_setDelegate_, v17);
  objc_msgSend(v15, sel_activate);
  xpclog.getter((uint64_t)v8);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v28 = v21;
    uint64_t v24 = v5;
    *(_DWORD *)os_log_type_t v20 = 136446210;
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x800000024713A2E0, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_246DB2000, v18, v19, "serviceName %{public}s started", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v21, -1, -1);
    MEMORY[0x24C54A990](v20, -1, -1);

    __swift_destroy_boxed_opaque_existential_0(v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v24);
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_0(v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v17;
}

unint64_t static ALServiceDelegate.serviceName()()
{
  return 0xD000000000000017;
}

uint64_t type metadata accessor for ALServiceDelegate()
{
  return self;
}

Swift::Bool __swiftcall ALServiceDelegate.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized ALServiceDelegate.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

Swift::Bool __swiftcall ALServiceDelegate.checkEntitlement(_:)(NSXPCConnection a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v4);
  Swift::String v8 = &v20[-v7];
  id v9 = (void *)MEMORY[0x24C54A1B0](0xD000000000000017, 0x800000024713A2E0);
  id v10 = [(objc_class *)a1.super.isa valueForEntitlement:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v21, (uint64_t)v23);
  outlined init with copy of Any?((uint64_t)v23, (uint64_t)&v21);
  if (*((void *)&v22 + 1))
  {
    if swift_dynamicCast() && (v20[15])
    {
      xpclog.getter((uint64_t)v8);
      uint64_t v11 = a1.super.isa;
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 67240192;
        LODWORD(v21) = [(objc_class *)v11 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_246DB2000, v12, v13, "Entitlement check passed for pid: %{public}d", v14, 8u);
        MEMORY[0x24C54A990](v14, -1, -1);
      }
      else
      {
      }
      Swift::Bool v15 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v21);
  }
  xpclog.getter((uint64_t)v6);
  uint64_t v16 = a1.super.isa;
  id v12 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 67240192;
    LODWORD(v21) = [(objc_class *)v16 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_246DB2000, v12, v17, "Entitlement check failed for pid:%{public}d, connection rejected", v18, 8u);
    MEMORY[0x24C54A990](v18, -1, -1);
  }
  else
  {
  }
  Swift::Bool v15 = 0;
  Swift::String v8 = v6;
LABEL_15:

  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v8, v2);
  outlined destroy of Any?((uint64_t)v23);
  return v15;
}

uint64_t ALServiceDelegate.onData(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  id v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v30 - v10;
  id v12 = objc_msgSend(self, sel_currentConnection);
  if (v12)
  {
    os_log_type_t v13 = v12;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v2;
    uint64_t v33 = partial apply for implicit closure #2 in implicit closure #1 in ALServiceDelegate.onData(_:);
    uint64_t v34 = v14;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    uint64_t v32 = &block_descriptor_0;
    Swift::Bool v15 = _Block_copy(aBlock);
    uint64_t v16 = v2;
    swift_release();
    id v17 = objc_msgSend(v13, sel_remoteObjectProxyWithErrorHandler_, v15);
    _Block_release(v15);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALXPCProtocol);
    if (swift_dynamicCast())
    {
      uint64_t v18 = v30[1];
      (*(void (**)(void *__return_ptr))((*MEMORY[0x263F8EED0] & *v16) + 0x68))(aBlock);
      os_log_type_t v19 = v32;
      os_log_type_t v20 = v33;
      __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v32);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v18;
      long long v22 = (void (*)(uint64_t, uint64_t, void (*)(), uint64_t, void *, void *, uint64_t (*)()))*((void *)v20 + 1);
      swift_unknownObjectRetain();
      v22(a1, a2, partial apply for implicit closure #4 in implicit closure #3 in ALServiceDelegate.onData(_:), v21, v13, v19, v20);
      swift_release();

      swift_unknownObjectRelease();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
    }
    else
    {
      xpclog.getter((uint64_t)v11);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        objc_super v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)objc_super v29 = 0;
        _os_log_impl(&dword_246DB2000, v27, v28, "Invalid proxy", v29, 2u);
        MEMORY[0x24C54A990](v29, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
  }
  else
  {
    xpclog.getter((uint64_t)v9);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_246DB2000, v24, v25, "Invalid current connnection", v26, 2u);
      MEMORY[0x24C54A990](v26, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t implicit closure #2 in implicit closure #1 in ALServiceDelegate.onData(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  xpclog.getter((uint64_t)v5);
  uint64_t v8 = a1;
  Logger._fault(_:function:file:line:)(partial apply for implicit closure #1 in ALXPCClient.proxyErrorHandler(error:), v7, (unint64_t)"proxyErrorHandler(error:)", 25, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/XPC/ALXPCService.swift", 77, 2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Void __swiftcall ALServiceDelegate.onInterrupt()()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v3);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_246DB2000, v4, v5, "service,onInterrupt", v6, 2u);
    MEMORY[0x24C54A990](v6, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t ALServiceDelegate.interruptionHandler(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v7);
  uint64_t v8 = a1;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v17 = v4;
    uint64_t v18 = v2;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138543362;
    if (a1)
    {
      os_log_type_t v19 = v8;
      id v12 = v8;
    }
    else
    {
      a1 = 0;
      os_log_type_t v19 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v13 = v16;
    *uint64_t v16 = a1;

    _os_log_impl(&dword_246DB2000, v9, v10, "service,interruptionHandler,%{public}@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v13, -1, -1);
    MEMORY[0x24C54A990](v11, -1, -1);
    uint64_t v4 = v17;
  }
  else
  {

    id v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return ALServiceDelegate.invalidationHandler(_:)(a1);
}

uint64_t ALServiceDelegate.invalidationHandler(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  os_log_type_t v10 = &v31[-v9];
  if (a1)
  {
    id v11 = a1;
    xpclog.getter((uint64_t)v10);
    id v12 = v11;
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    int v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v35 = v4;
      uint64_t v17 = v16;
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138543618;
      uint64_t v33 = v2;
      v36[0] = v12;
      int v32 = v15;
      os_log_type_t v19 = v12;
      uint64_t v34 = v5;
      uint64_t v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = a1;

      *(_WORD *)(v17 + 12) = 1026;
      unsigned int v21 = [v20 processIdentifier];

      LODWORD(v36[0]) = v21;
      uint64_t v2 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v5 = v34;
      _os_log_impl(&dword_246DB2000, v13, (os_log_type_t)v32, "service,invalidationHandler,%{public}@,pid,%{public}d,exited", (uint8_t *)v17, 0x12u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C54A990](v18, -1, -1);
      uint64_t v22 = v17;
      uint64_t v4 = v35;
      MEMORY[0x24C54A990](v22, -1, -1);
    }
    else
    {

      os_log_type_t v13 = v12;
    }

    uint64_t v28 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
    (*(void (**)(void *__return_ptr, uint64_t))((*MEMORY[0x263F8EED0] & *v2) + 0x68))(v36, v28);
    uint64_t v29 = v37;
    uint64_t v30 = v38;
    __swift_project_boxed_opaque_existential_1(v36, v37);
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v30 + 16))(v12, v29, v30);

    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  }
  else
  {
    xpclog.getter((uint64_t)v8);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v25 = 138543362;
      v36[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = 0;
      _os_log_impl(&dword_246DB2000, v23, v24, "serviceIvalidationHandler, invalid %{public}@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C54A990](v26, -1, -1);
      MEMORY[0x24C54A990](v25, -1, -1);
    }

    return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

id ALServiceDelegate.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ALServiceDelegate.init()()
{
}

id ALServiceDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ALServiceDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized ALServiceDelegate.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  objc_super v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v46 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v43 - v8;
  xpclog.getter((uint64_t)&v43 - v8);
  os_log_type_t v10 = a1;
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v43 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 67240450;
    uint64_t v45 = v4;
    LODWORD(aBlock) = [v10 processIdentifier];
    uint64_t v44 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 8) = 2114;
    uint64_t aBlock = v10;
    os_log_type_t v14 = v10;
    objc_super v2 = v44;
    uint64_t v4 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    int v15 = v43;
    *uint64_t v43 = v10;

    _os_log_impl(&dword_246DB2000, v11, v12, "New XPC Connection from process:%{public}d, details:(%{public}@)", (uint8_t *)v13, 0x12u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v15, -1, -1);
    MEMORY[0x24C54A990](v13, -1, -1);
  }
  else
  {

    id v11 = v10;
  }

  uint64_t v18 = *(void (**)(void, void))(v5 + 8);
  uint64_t v16 = v5 + 8;
  uint64_t v17 = v18;
  v18(v9, v4);
  char v19 = (*(uint64_t (**))((*MEMORY[0x263F8EED0] & *v2) + 0x90))(v10);
  if (v19)
  {
    uint64_t v45 = v16;
    [v10 setExportedObject:v2];
    uint64_t v20 = self;
    unsigned int v21 = v2;
    id v22 = objc_msgSend(v20, sel_interfaceWithProtocol_, &unk_26FB590B0);
    [v10 setExportedInterface:v22];

    id v23 = objc_msgSend(v20, sel_interfaceWithProtocol_, &unk_26FB590B0);
    [v10 setRemoteObjectInterface:v23];

    uint64_t v24 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v21;
    *(void *)(v25 + 24) = v24;
    uint64_t v51 = partial apply for closure #1 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:);
    uint64_t v52 = v25;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v48 = 1107296256;
    uint64_t v49 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v50 = &block_descriptor_15;
    uint64_t v26 = _Block_copy(&aBlock);
    id v27 = v21;
    swift_release();
    [v10 setInterruptionHandler:v26];
    _Block_release(v26);
    uint64_t v28 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v27;
    *(void *)(v29 + 24) = v28;
    uint64_t v51 = partial apply for closure #2 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:);
    uint64_t v52 = v29;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v48 = 1107296256;
    uint64_t v49 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v50 = &block_descriptor_22;
    uint64_t v30 = _Block_copy(&aBlock);
    uint64_t v31 = (char *)v27;
    swift_release();
    [v10 setInvalidationHandler:v30];
    _Block_release(v30);
    [v10 _setQueue:*(void *)&v31[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue]];
    [v10 activate];
    xpclog.getter(v46);
    int v32 = v10;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v43 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 67240450;
      LODWORD(v44) = v35;
      LODWORD(aBlock) = [v32 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 8) = 2114;
      uint64_t aBlock = v32;
      char v37 = v19;
      uint64_t v38 = v17;
      uint64_t v39 = v4;
      uint64_t v40 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v41 = v43;
      *uint64_t v43 = v32;

      uint64_t v4 = v39;
      uint64_t v17 = v38;
      char v19 = v37;
      _os_log_impl(&dword_246DB2000, v33, (os_log_type_t)v44, "Activated Connection from process:%{public}d, details:(%{public}@)", (uint8_t *)v36, 0x12u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24C54A990](v41, -1, -1);
      MEMORY[0x24C54A990](v36, -1, -1);
    }
    else
    {

      uint64_t v33 = v32;
    }

    v17(v46, v4);
  }
  return v19 & 1;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_246DC2F30()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_246DC2FC8()
{
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #4 in implicit closure #3 in ALServiceDelegate.onData(_:)()
{
  id v1 = *(void **)(v0 + 16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_onData_, isa);
}

uint64_t dispatch thunk of ALXPCDataService.subscribe(_:cb:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of ALXPCDataService.unsubscribe(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for ALServiceDelegate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ALServiceDelegate);
}

uint64_t dispatch thunk of ALServiceDelegate.__allocating_init(queue:dataService:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ALServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ALServiceDelegate.onData(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ALServiceDelegate.onInterrupt()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t sub_246DC3148()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
}

uint64_t objectdestroy_11Tm()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #2 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
}

void partial apply for closure #1 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:)(void (*a1)(void))
{
  uint64_t v3 = *(void *)(v1 + 24) + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x24C54A9F0](v3);
  a1();
}

Swift::String __swiftcall prettyFunctionName(_:_:)(Swift::String a1, Swift::String a2)
{
  object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v4 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 16 * v5;
    uint64_t v8 = *(void *)(v6 + 16);
    uint64_t v7 = *(void **)(v6 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = 35;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = countAndFlagsBits;
    v10._object = object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v8;
    object = v7;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = countAndFlagsBits;
  os_log_type_t v12 = object;
  result._object = v12;
  result._uint64_t countAndFlagsBits = v11;
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t Logger._fault(_:function:file:line:)(uint64_t (*a1)(void), void *a2, unint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t result = a1();
  uint64_t v15 = result;
  unint64_t v17 = v16;
  if (a8)
  {
    unint64_t v14 = HIDWORD(a6);
    if (!HIDWORD(a6))
    {
      if (a6 >> 11 == 27)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      LODWORD(v14) = WORD1(a6);
      if (WORD1(a6) <= 0x10u)
      {
        if ((a6 & 0xFFFFFF80) == 0)
        {
          if (a6 > 0xFF)
          {
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
          unsigned int v18 = (a6 + 1);
          goto LABEL_10;
        }
LABEL_28:
        int v30 = (a6 & 0x3F) << 8;
        unsigned int v31 = (v30 | (a6 >> 6)) + 33217;
        unsigned int v32 = (v30 | (a6 >> 6) & 0x3F) << 8;
        unsigned int v33 = (((v32 | (a6 >> 12) & 0x3F) << 8) | (a6 >> 18)) - 2122219023;
        unsigned int v34 = (v32 | (a6 >> 12)) + 8487393;
        if (v14) {
          unsigned int v18 = v33;
        }
        else {
          unsigned int v18 = v34;
        }
        if (a6 < 0x800) {
          unsigned int v18 = v31;
        }
LABEL_10:
        uint64_t v40 = (v18 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v18) >> 3)) & 7)));
        goto LABEL_11;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (!a6)
  {
    __break(1u);
    goto LABEL_26;
  }
LABEL_11:
  uint64_t result = static String._fromUTF8Repairing(_:)();
  a6 = result;
  a2 = v19;
  if ((a5 & 1) == 0)
  {
    if (a3) {
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  unint64_t v14 = HIDWORD(a3);
  if (HIDWORD(a3))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (a3 >> 11 == 27)
  {
LABEL_46:
    __break(1u);
    return result;
  }
  LODWORD(v14) = WORD1(a3);
  if (WORD1(a3) > 0x10u)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    int v35 = (a3 & 0x3F) << 8;
    unsigned int v36 = (v35 | (a3 >> 6)) + 33217;
    unsigned int v37 = (v35 | (a3 >> 6) & 0x3F) << 8;
    unsigned int v38 = (((v37 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
    unsigned int v39 = (v37 | (a3 >> 12)) + 8487393;
    if (v14) {
      unsigned int v20 = v38;
    }
    else {
      unsigned int v20 = v39;
    }
    if (a3 < 0x800) {
      unsigned int v20 = v36;
    }
    goto LABEL_20;
  }
  if ((a3 & 0xFFFFFF80) != 0) {
    goto LABEL_38;
  }
  if (a3 > 0xFF)
  {
    __break(1u);
    goto LABEL_45;
  }
  unsigned int v20 = (a3 + 1);
LABEL_20:
  uint64_t v40 = (v20 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v20) >> 3)) & 7)));
LABEL_21:
  v21._uint64_t countAndFlagsBits = static String._fromUTF8Repairing(_:)();
  id v23 = v22;
  v24._uint64_t countAndFlagsBits = a6;
  v24._object = a2;
  v21._object = v23;
  Swift::String v25 = prettyFunctionName(_:_:)(v24, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v26 = static os_log_type_t.fault.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  id v27 = Logger.logObject.getter();
  if (os_log_type_enabled(v27, v26))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v40 = v29;
    *(_DWORD *)uint64_t v28 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25._countAndFlagsBits, (unint64_t)v25._object, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_246DB2000, v27, v26, "fault,func,%s,message,%s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v29, -1, -1);
    MEMORY[0x24C54A990](v28, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  reportBug(type:subType:subTypeContext:fatalCallback:)(0x746C756166, 0xE500000000000000, v25._countAndFlagsBits, (unint64_t)v25._object, 0, 0, 0, 0);
  return swift_bridgeObjectRelease();
}

uint64_t Logger._fatal(_:function:file:line:)(uint64_t (*a1)(void), void *a2, unint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v46 = a1();
  if (a8)
  {
    unint64_t v18 = HIDWORD(a6);
    if (HIDWORD(a6)) {
      goto LABEL_21;
    }
    if (a6 >> 11 != 27)
    {
      LODWORD(v18) = WORD1(a6);
      if (WORD1(a6) > 0x10u) {
        goto LABEL_22;
      }
      if ((a6 & 0xFFFFFF80) != 0) {
        goto LABEL_24;
      }
      if (a6 <= 0xFF)
      {
        Swift::String v9 = v17;
        unsigned int v19 = (a6 + 1);
        goto LABEL_10;
      }
      __break(1u);
LABEL_31:
      __break(1u);
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_43;
  }
  if (!a6) {
    goto LABEL_20;
  }
  Swift::String v9 = v17;
  while (1)
  {
    uint64_t v10 = static String._fromUTF8Repairing(_:)();
    a2 = v17;
    if ((a5 & 1) == 0)
    {
      if (a3) {
        goto LABEL_43;
      }
      __break(1u);
    }
    unint64_t v18 = HIDWORD(a3);
    if (HIDWORD(a3)) {
      goto LABEL_23;
    }
    if (a3 >> 11 == 27) {
      goto LABEL_33;
    }
    LODWORD(v18) = WORD1(a3);
    if (WORD1(a3) > 0x10u) {
      goto LABEL_31;
    }
    if ((a3 & 0xFFFFFF80) != 0) {
      break;
    }
    if (a3 <= 0xFF)
    {
      unsigned int v30 = (a3 + 1);
      goto LABEL_42;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    Swift::String v9 = v17;
    int v20 = (a6 & 0x3F) << 8;
    unsigned int v21 = (v20 | (a6 >> 6)) + 33217;
    unsigned int v22 = (v20 | (a6 >> 6) & 0x3F) << 8;
    unsigned int v23 = (((v22 | (a6 >> 12) & 0x3F) << 8) | (a6 >> 18)) - 2122219023;
    unsigned int v24 = (v22 | (a6 >> 12)) + 8487393;
    if (v18) {
      unsigned int v19 = v23;
    }
    else {
      unsigned int v19 = v24;
    }
    if (a6 < 0x800) {
      unsigned int v19 = v21;
    }
LABEL_10:
    uint64_t v47 = (v19 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v19) >> 3)) & 7)));
  }
  int v25 = (a3 & 0x3F) << 8;
  unsigned int v26 = (v25 | (a3 >> 6)) + 33217;
  unsigned int v27 = (v25 | (a3 >> 6) & 0x3F) << 8;
  unsigned int v28 = (((v27 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
  unsigned int v29 = (v27 | (a3 >> 12)) + 8487393;
  if (v18) {
    unsigned int v30 = v28;
  }
  else {
    unsigned int v30 = v29;
  }
  if (a3 < 0x800) {
    unsigned int v30 = v26;
  }
LABEL_42:
  uint64_t v47 = (v30 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v30) >> 3)) & 7)));
LABEL_43:
  v31._uint64_t countAndFlagsBits = static String._fromUTF8Repairing(_:)();
  unsigned int v33 = v32;
  v34._uint64_t countAndFlagsBits = v10;
  v34._object = a2;
  v31._object = v33;
  Swift::String v35 = prettyFunctionName(_:_:)(v34, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LOBYTE(v33) = static os_log_type_t.error.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unsigned int v36 = Logger.logObject.getter();
  os_log_type_t type = v33;
  if (os_log_type_enabled(v36, (os_log_type_t)v33))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v47 = v44;
    *(_DWORD *)uint64_t v37 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35._countAndFlagsBits, (unint64_t)v35._object, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, (unint64_t)v9, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_246DB2000, v36, type, "fatal,func,%s,message,%s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v44, -1, -1);
    MEMORY[0x24C54A990](v37, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v46;
  *(void *)(v38 + 24) = v9;
  *(void *)(v38 + 32) = a6;
  *(void *)(v38 + 40) = a7;
  *(unsigned char *)(v38 + 48) = a8;
  *(void *)(v38 + 56) = a9;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  reportBug(type:subType:subTypeContext:fatalCallback:)(0x6C61746166, 0xE500000000000000, v35._countAndFlagsBits, (unint64_t)v35._object, v46, v9, (void (*)(void))partial apply for closure #1 in Logger._fatal(_:function:file:line:), v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  objc_msgSend(self, sel_sleepForTimeInterval_, 10.0);
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v39._object = (void *)0x800000024713A3F0;
  v39._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v39);
  Double.write<A>(to:)();
  uint64_t v40 = v47;
  uint64_t v41 = (void *)v48;
  uint64_t v47 = v46;
  unint64_t v48 = (unint64_t)v9;
  swift_bridgeObjectRetain();
  v42._uint64_t countAndFlagsBits = v40;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *ALLogger.subsystem.unsafeMutableAddressor()
{
  return &static ALLogger.subsystem;
}

unint64_t static ALLogger.subsystem.getter()
{
  return 0xD000000000000013;
}

uint64_t one-time initialization function for core(uint64_t a1)
{
  return one-time initialization function for core(a1, static ALLogger.core);
}

uint64_t ALLogger.core.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for core, (uint64_t)static ALLogger.core);
}

uint64_t static ALLogger.core.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for core, (uint64_t)static ALLogger.core, a1);
}

uint64_t one-time initialization function for util(uint64_t a1)
{
  return one-time initialization function for core(a1, static ALLogger.util);
}

uint64_t ALLogger.util.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for util, (uint64_t)static ALLogger.util);
}

uint64_t static ALLogger.util.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for util, (uint64_t)static ALLogger.util, a1);
}

uint64_t one-time initialization function for xpc(uint64_t a1)
{
  return one-time initialization function for core(a1, static ALLogger.xpc);
}

uint64_t ALLogger.xpc.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for xpc, (uint64_t)static ALLogger.xpc);
}

uint64_t static ALLogger.xpc.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for xpc, (uint64_t)static ALLogger.xpc, a1);
}

uint64_t one-time initialization function for rpc(uint64_t a1)
{
  return one-time initialization function for core(a1, static ALLogger.rpc);
}

uint64_t one-time initialization function for core(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t ALLogger.rpc.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for rpc, (uint64_t)static ALLogger.rpc);
}

uint64_t static ALLogger.rpc.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for rpc, (uint64_t)static ALLogger.rpc, a1);
}

uint64_t ALLogger.deinit()
{
  return v0;
}

uint64_t ALLogger.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t ALLogger.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t one-time initialization function for corelog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, corelog, &one-time initialization token for core, (uint64_t)static ALLogger.core);
}

uint64_t corelog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for corelog, (uint64_t)corelog);
}

uint64_t one-time initialization function for allog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, allog, &one-time initialization token for core, (uint64_t)static ALLogger.core);
}

uint64_t allog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for allog, (uint64_t)allog);
}

uint64_t allog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for allog, (uint64_t)allog, a1);
}

uint64_t one-time initialization function for rpclog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, rpclog, &one-time initialization token for rpc, (uint64_t)static ALLogger.rpc);
}

uint64_t rpclog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for rpclog, (uint64_t)rpclog);
}

uint64_t rpclog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for rpclog, (uint64_t)rpclog, a1);
}

uint64_t one-time initialization function for utillog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, utillog, &one-time initialization token for util, (uint64_t)static ALLogger.util);
}

uint64_t utillog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for utillog, (uint64_t)utillog);
}

uint64_t utillog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for utillog, (uint64_t)utillog, a1);
}

uint64_t one-time initialization function for xpclog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, xpclog, &one-time initialization token for xpc, (uint64_t)static ALLogger.xpc);
}

uint64_t one-time initialization function for corelog(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v7, a2);
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v9 = __swift_project_value_buffer(v7, a4);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  return v10(v8, v9, v7);
}

uint64_t xpclog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for xpclog, (uint64_t)xpclog);
}

uint64_t ALLogger.core.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, v6);
  uint64_t v10 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v16[3] = MEMORY[0x263F8D310];
    v16[4] = MEMORY[0x263F8D378];
    v16[0] = 7104878;
    v16[1] = 0xE300000000000000;
  }
  else
  {
    uint64_t v14 = a2;
    uint64_t v15 = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v13);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v9, a2);
    outlined init with take of ALXPCDataService(&v13, (uint64_t)v16);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
  _print_unlocked<A, B>(_:_:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
}

uint64_t sub_246DC44D4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

void partial apply for closure #1 in Logger._fatal(_:function:file:line:)()
{
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for ALLogger()
{
  return self;
}

uint64_t method lookup function for ALLogger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ALLogger);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void reportBug(type:subType:subTypeContext:fatalCallback:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v67 = a8;
  uint64_t v15 = type metadata accessor for Logger();
  unint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v63 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v68 = (char *)&v58 - v19;
  id v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08AA8]), sel_init);
  Class v70 = (Class)objc_msgSend(objc_allocWithZone(MEMORY[0x263F7C078]), sel_init);
  int v20 = (void *)MEMORY[0x24C54A1B0](0xD000000000000010, 0x800000024713A430);
  uint64_t v60 = a1;
  unint64_t v64 = a2;
  unsigned int v21 = (void *)MEMORY[0x24C54A1B0](a1, a2);
  uint64_t v61 = a3;
  unint64_t v65 = a4;
  unsigned int v22 = (void *)MEMORY[0x24C54A1B0](a3, a4);
  uint64_t v69 = v15;
  unint64_t v66 = (unint64_t)a6;
  uint64_t v62 = a5;
  if (a6) {
    a6 = (void *)MEMORY[0x24C54A1B0](a5, a6);
  }
  id v23 = objc_msgSend(v71, sel_processName);
  if (!v23)
  {
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v23 = (id)MEMORY[0x24C54A1B0](v24);
    swift_bridgeObjectRelease();
  }
  id v25 = [(objc_class *)v70 signatureWithDomain:v20 type:v21 subType:v22 subtypeContext:a6 detectedProcess:v23 triggerThresholdValues:0];

  if (!v25)
  {
    uint64_t v42 = utillog.unsafeMutableAddressor();
    uint64_t v43 = v63;
    uint64_t v44 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v63, v42, v69);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = a7;
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v48 = 0;
      _os_log_impl(&dword_246DB2000, v45, v46, "reportBugBlocking,signature,nil", v48, 2u);
      uint64_t v49 = v48;
      a7 = v47;
      MEMORY[0x24C54A990](v49, -1, -1);
    }

    uint64_t v50 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v43, v44);
    if (a7) {
      a7(v50);
    }
    goto LABEL_24;
  }
  if (a7) {
    double v26 = 0.0;
  }
  else {
    double v26 = 6.0;
  }
  uint64_t v27 = utillog.unsafeMutableAddressor();
  unint64_t v28 = v16;
  unsigned int v29 = v68;
  uint64_t v30 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v68, v27, v69);
  unint64_t v31 = v66;
  swift_bridgeObjectRetain_n();
  unint64_t v32 = v64;
  swift_bridgeObjectRetain_n();
  unint64_t v33 = v65;
  swift_bridgeObjectRetain_n();
  Swift::String v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  LODWORD(v63) = v35;
  BOOL v36 = os_log_type_enabled(v34, v35);
  v59 = a7;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    aBlock[0] = v58;
    *(_DWORD *)uint64_t v37 = 136315906;
    swift_bridgeObjectRetain();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v64 = v28;
    *(_WORD *)(v37 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v33, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 22) = 2080;
    if (v31) {
      uint64_t v38 = v62;
    }
    else {
      uint64_t v38 = 45;
    }
    id v39 = v25;
    if (v31) {
      unint64_t v40 = v31;
    }
    else {
      unint64_t v40 = 0xE100000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    id v25 = v39;
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 32) = 2048;
    uint64_t v72 = *(void *)&v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_246DB2000, v34, (os_log_type_t)v63, "reportBug,type:%s,subtype:%s,context:%s,delay:%f", (uint8_t *)v37, 0x2Au);
    uint64_t v41 = v58;
    swift_arrayDestroy();
    MEMORY[0x24C54A990](v41, -1, -1);
    MEMORY[0x24C54A990](v37, -1, -1);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v68, v69);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
  }
  aBlock[0] = 0;
  id v51 = v25;
  static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  if (aBlock[0])
  {

    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v53 = swift_allocObject();
    uint64_t v54 = (uint64_t)v59;
    uint64_t v55 = v67;
    *(void *)(v53 + 16) = v59;
    *(void *)(v53 + 24) = v55;
    aBlock[4] = (uint64_t)partial apply for closure #1 in reportBug(type:subType:subTypeContext:fatalCallback:);
    aBlock[5] = v53;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
    void aBlock[3] = (uint64_t)&block_descriptor_1;
    v56 = _Block_copy(aBlock);
    outlined copy of (@escaping @callee_guaranteed () -> ())?(v54);
    swift_release();
    Class v57 = v70;
    [(objc_class *)v70 snapshotWithSignature:isa delay:0 events:0 payload:0 actions:v56 reply:v26];
    _Block_release(v56);

    Class v70 = isa;
    id v71 = v51;
LABEL_24:

    return;
  }
  __break(1u);
}

uint64_t logginResponse(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  os_log_type_t v12 = (char *)&v42 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v42 - v13;
  if (a1)
  {
    id v45 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v46 = v15;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(void *)(a1 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v17 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v48);
    }
    else
    {
      long long v48 = 0u;
      long long v49 = 0u;
    }
    outlined destroy of AnyHashable((uint64_t)v47);
    if (*((void *)&v49 + 1))
    {
      type metadata accessor for NSNumber();
      if (swift_dynamicCast())
      {
        id v18 = v45;
        if (objc_msgSend(v45, sel_BOOLValue))
        {
          swift_bridgeObjectRelease();
          uint64_t v19 = utillog.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v19, v2);
          int v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v20, v21))
          {
            unsigned int v22 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unsigned int v22 = 0;
            _os_log_impl(&dword_246DB2000, v20, v21, "reportBug,successful", v22, 2u);
            MEMORY[0x24C54A990](v22, -1, -1);
          }

          return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v14, v2);
        }
        uint64_t v32 = utillog.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v32, v2);
        swift_bridgeObjectRetain();
        unint64_t v33 = Logger.logObject.getter();
        int v34 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v33, (os_log_type_t)v34))
        {

          swift_bridgeObjectRelease_n();
LABEL_33:

          return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
        }
        int v43 = v34;
        os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        uint64_t v44 = v42;
        *(_DWORD *)os_log_type_t v35 = 136315138;
        id v45 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v46 = v36;
        AnyHashable.init<A>(_:)();
        if (*(void *)(a1 + 16)
          && (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v38 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v37, (uint64_t)&v48);
        }
        else
        {
          long long v48 = 0u;
          long long v49 = 0u;
        }
        outlined destroy of AnyHashable((uint64_t)v47);
        if (*((void *)&v49 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v39 = (uint64_t)v45;
            unint64_t v40 = v46;
LABEL_32:
            v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v44);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_246DB2000, v33, (os_log_type_t)v43, "reportBug,failed,reason,%s ", v35, 0xCu);
            uint64_t v41 = v42;
            swift_arrayDestroy();
            MEMORY[0x24C54A990](v41, -1, -1);
            MEMORY[0x24C54A990](v35, -1, -1);

            goto LABEL_33;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v48);
        }
        unint64_t v40 = 0xE700000000000000;
        uint64_t v39 = 0x6E776F6E6B6E75;
        goto LABEL_32;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)&v48);
    }
    uint64_t v28 = utillog.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v28, v2);
    unsigned int v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v31 = 0;
      _os_log_impl(&dword_246DB2000, v29, v30, "reportBug,response,malformed", v31, 2u);
      MEMORY[0x24C54A990](v31, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  else
  {
    uint64_t v24 = utillog.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v24, v2);
    id v25 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_246DB2000, v25, (os_log_type_t)v26, "reportBug,response,nil", v27, 2u);
      MEMORY[0x24C54A990](v27, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_246DC53EC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in reportBug(type:subType:subTypeContext:fatalCallback:)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  uint64_t result = logginResponse(_:)(a1);
  if (v2) {
    return v2(result);
  }
  return result;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x24C54A320](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Request);
}

uint64_t CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.hasMachContinuousTimeNs.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearMachContinuousTimeNs()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.processID.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_AONLoc_Request.processID.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.processID.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.hasProcessID.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearProcessID()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.transactionID.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_AONLoc_Request.transactionID.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.transactionID.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.hasTransactionID.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearTransactionID()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.type.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_AONLoc_Request.type.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.type.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.type.modify;
}

uint64_t CLP_LogEntry_AONLoc_Request.type.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result + *(int *)(result + 8)) = *(unsigned char *)(result + 12);
  return result;
}

BOOL CLP_LogEntry_AONLoc_Request.hasType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32)) = 5;
}

uint64_t CLP_LogEntry_AONLoc_Request.resultOptions.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  char v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  }
  uint64_t v8 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v8;
  a1[2] = v8;
  UnknownStorage.init()();
  *((unsigned char *)a1 + v7[8]) = 2;
  uint64_t v9 = (char *)a1 + v7[9];
  *(_DWORD *)uint64_t v9 = 0;
  _DWORD v9[4] = 1;
  uint64_t v10 = (char *)a1 + v7[10];
  *(_DWORD *)uint64_t v10 = 0;
  v10[4] = 1;
  uint64_t v11 = (char *)a1 + v7[11];
  *(_DWORD *)uint64_t v11 = 0;
  v11[4] = 1;
  os_log_type_t v12 = (char *)a1 + v7[12];
  *(_DWORD *)os_log_type_t v12 = 0;
  v12[4] = 1;
  uint64_t v13 = (char *)a1 + v7[13];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  uint64_t v14 = (char *)a1 + v7[14];
  *(void *)uint64_t v14 = 0;
  v14[8] = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v2;
  a1[2] = v2;
  uint64_t v3 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + v3[8]) = 2;
  int v5 = (char *)a1 + v3[9];
  *(_DWORD *)int v5 = 0;
  v5[4] = 1;
  uint64_t v6 = (char *)a1 + v3[10];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  char v7 = (char *)a1 + v3[11];
  *(_DWORD *)char v7 = 0;
  v7[4] = 1;
  uint64_t v8 = (char *)a1 + v3[12];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  uint64_t v9 = (char *)a1 + v3[13];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = (char *)a1 + v3[14];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t CLP_LogEntry_AONLoc_Request.resultOptions.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  int v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CLP_LogEntry_AONLoc_Request.resultOptions.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    *uint64_t v10 = MEMORY[0x263F8EE78];
    v10[1] = v12;
    v10[2] = v12;
    UnknownStorage.init()();
    *((unsigned char *)v10 + v6[8]) = 2;
    uint64_t v13 = (char *)v10 + v6[9];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = (char *)v10 + v6[10];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    unint64_t v15 = (char *)v10 + v6[11];
    *(_DWORD *)unint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = (char *)v10 + v6[12];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    char v17 = (char *)v10 + v6[13];
    *(void *)char v17 = 0;
    v17[8] = 1;
    id v18 = (char *)v10 + v6[14];
    *(void *)id v18 = 0;
    v18[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  }
  return CLP_LogEntry_AONLoc_Request.resultOptions.modify;
}

void CLP_LogEntry_AONLoc_Request.resultOptions.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_AONLoc_Request.hasResultOptions.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearResultOptions()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_AONLoc_Request.gpsdRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_Request);
  }
  Proto_Gpsd_Request.init()(a1);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
}

uint64_t CLP_LogEntry_AONLoc_Request.gpsdRequest.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for Proto_Gpsd_Request);
  uint64_t v4 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CLP_LogEntry_AONLoc_Request.gpsdRequest.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_Request(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    Proto_Gpsd_Request.init()((uint64_t)v10);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v10, type metadata accessor for Proto_Gpsd_Request);
  }
  return CLP_LogEntry_AONLoc_Request.gpsdRequest.modify;
}

void CLP_LogEntry_AONLoc_Request.gpsdRequest.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_AONLoc_Request.hasGpsdRequest.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 40), (uint64_t)v3, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  uint64_t v5 = type metadata accessor for Proto_Gpsd_Request(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearGpsdRequest()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  uint64_t v2 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t (*CLP_LogEntry_AONLoc_Request.unknownFields.modify())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

ALProtobuf::CLP_LogEntry_AONLoc_Request::TypeEnum __swiftcall CLP_LogEntry_AONLoc_Request.TypeEnum.init()()
{
  return 0;
}

uint64_t CLP_LogEntry_AONLoc_Request.TypeEnum.rawValue.getter(char a1)
{
  return qword_2471094D0[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum(char *a1, char *a2)
{
  return qword_2471094D0[*a1] == qword_2471094D0[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void protocol witness for Enum.init() in conformance CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_AONLoc_Request.TypeEnum.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return qword_2471094D0[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_AONLoc_Request.TypeEnum.init(rawValue:)();
  *a1 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum(void *a1@<X8>)
{
  *a1 = qword_2471094D0[*v1];
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) & 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasRepeat.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearRepeat()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.batchSize.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.batchSize.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.batchSize.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasBatchSize.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearBatchSize()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

float CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.setter(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasRepeatIntervalSec.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearRepeatIntervalSec()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

float CLP_LogEntry_AONLoc_Request.ResultOptions.maxAgeSec.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.maxAgeSec.setter(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.maxAgeSec.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.modify(uint64_t result)
{
  uint64_t v1 = *(void *)result + *(int *)(result + 12);
  *(_DWORD *)uint64_t v1 = *(_DWORD *)(result + 8);
  *(unsigned char *)(v1 + 4) = 0;
  return result;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasMaxAgeSec.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearMaxAgeSec()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.minimalRssiDb.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.minimalRssiDb.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.minimalRssiDb.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasMinimalRssiDb.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearMinimalRssiDb()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request.ResultOptions.btTypes()
{
  return MEMORY[0x263F8EE78];
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.btTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.btTypes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.wifiBands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.wifiBands.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.wifiBands.modify())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.channels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.channels.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.channels.modify())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

double CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.setter(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasStartCfaTimeSec.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearStartCfaTimeSec()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

double CLP_LogEntry_AONLoc_Request.ResultOptions.endCfaTimeSec.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.endCfaTimeSec.setter(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.endCfaTimeSec.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8) + *(int *)(result + 16);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = 0;
  return result;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasEndCfaTimeSec.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearEndCfaTimeSec()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.unknownFields.modify())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request.ResultOptions._repeat()
{
  return 2;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request.ResultOptions._startCfaTimeSec()
{
  return 0;
}

uint64_t CLP_LogEntry_AONLoc_Request.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  *(unsigned char *)(a1 + v2[8]) = 5;
  uint64_t v6 = a1 + v2[9];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1 + v2[10];
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._processID()
{
  return 0x100000000;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._type()
{
  return 5;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._gpsdRequest@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gpsd_Request, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

void *static CLP_LogEntry_AONLoc_Request.TypeEnum.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_AONLoc_Request.TypeEnum.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
}

uint64_t CLP_LogEntry_AONLoc_Response.requestType.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_AONLoc_Response.requestType.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Response.requestType.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_Response.hasRequestType.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Response.clearRequestType()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20)) = 5;
}

uint64_t CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t (*CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()()
{
}

uint64_t CLP_LogEntry_AONLoc_Response.resultCode.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28));
  if (v1 == 10) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_AONLoc_Response.resultCode.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Response.resultCode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 10) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_Response.hasResultCode.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28)) != 10;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Response.clearResultCode()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28)) = 10;
}

int *CLP_LogEntry_AONLoc_Response.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(unsigned char *)(a1 + result[5]) = 5;
  uint64_t v3 = a1 + result[6];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  *(unsigned char *)(a1 + result[7]) = 10;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Response._resultCode()
{
  return 10;
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.machContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 24));
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.machContinuousTimeNs.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_WiFiIndication.machContinuousTimeNs.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_WiFiIndication.hasMachContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

BOOL CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_WiFiIndication.clearMachContinuousTimeNs()()
{
}

uint64_t CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = (v4 == 2) | v4 & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_WiFiIndication.hasIsLastBatch.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_WiFiIndication.clearIsLastBatch()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.modify())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.init()@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.init()(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.machContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.machContinuousTimeNs.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t (*CLP_LogEntry_AONLoc_BtIndication.machContinuousTimeNs.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_BtIndication.hasMachContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_BtIndication.clearMachContinuousTimeNs()()
{
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.isLastBatch.getter()
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.isLastBatch.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_BtIndication.isLastBatch.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = (v4 == 2) | v4 & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_BtIndication.hasIsLastBatch.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_BtIndication.clearIsLastBatch()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*CLP_LogEntry_AONLoc_BtIndication.unknownFields.modify())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.init()@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.init()(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.init()@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  uint64_t v3 = a1(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(v3 + 24);
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  *((unsigned char *)a2 + *(int *)(v3 + 28)) = 2;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 24)) {
    return 0;
  }
  else {
    return *(void *)(v1 + 16);
  }
}

uint64_t CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(void *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + 24) = 0;
  return result;
}

void (*CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.modify;
}

void CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 24) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasMachContinuousTimeNs.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 24) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearMachContinuousTimeNs()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Indication.transactionID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 32)) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 + 28);
  }
}

uint64_t CLP_LogEntry_AONLoc_Indication.transactionID.setter(int a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v6 + 28) = a1;
  *(unsigned char *)(v6 + 32) = 0;
  return result;
}

void (*CLP_LogEntry_AONLoc_Indication.transactionID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v5 + 28);
  if (*(unsigned char *)(v5 + 32)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_AONLoc_Indication.transactionID.modify;
}

void CLP_LogEntry_AONLoc_Indication.transactionID.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 28) = v4;
  *(unsigned char *)(v10 + 32) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasTransactionID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 32) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearTransactionID()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(_DWORD *)(v4 + 28) = 0;
  *(unsigned char *)(v4 + 32) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Indication.type.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 33) = a1;
  return result;
}

void (*CLP_LogEntry_AONLoc_Indication.type.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 33);
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_AONLoc_Indication.type.modify;
}

void CLP_LogEntry_AONLoc_Indication.type.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 33);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearType()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 33) = 7;
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Response?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_Response);
  }
  Proto_Gpsd_Response.init()(a1);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for Proto_Gpsd_Response?, type metadata accessor for Proto_Gpsd_Response, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

void (*CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Response?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    Proto_Gpsd_Response.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Response);
  }
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify;
}

void CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for Proto_Gpsd_Response);
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter((uint64_t)v3, &demangling cache variable for type metadata for Proto_Gpsd_Response?, type metadata accessor for Proto_Gpsd_Response, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v4, type metadata accessor for Proto_Gpsd_Response);
  }
  else
  {
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(*(void *)(*(void *)a1 + 48), &demangling cache variable for type metadata for Proto_Gpsd_Response?, type metadata accessor for Proto_Gpsd_Response, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for Proto_Gpsd_Response?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, type metadata accessor for Proto_Gpsd_Response);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()()
{
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdIndication.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_Indication(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_Indication);
  }
  Proto_Gpsd_Indication.init()(a1);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdIndication.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for Proto_Gpsd_Indication?, type metadata accessor for Proto_Gpsd_Indication, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

void (*CLP_LogEntry_AONLoc_Indication.gpsdIndication.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    Proto_Gpsd_Indication.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Indication);
  }
  return CLP_LogEntry_AONLoc_Indication.gpsdIndication.modify;
}

void CLP_LogEntry_AONLoc_Indication.gpsdIndication.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for Proto_Gpsd_Indication);
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter((uint64_t)v3, &demangling cache variable for type metadata for Proto_Gpsd_Indication?, type metadata accessor for Proto_Gpsd_Indication, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v4, type metadata accessor for Proto_Gpsd_Indication);
  }
  else
  {
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(*(void *)(*(void *)a1 + 48), &demangling cache variable for type metadata for Proto_Gpsd_Indication?, type metadata accessor for Proto_Gpsd_Indication, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasGpsdIndication.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for Proto_Gpsd_Indication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, type metadata accessor for Proto_Gpsd_Indication);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearGpsdIndication()()
{
}

uint64_t CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v12);
    *(void *)(v3 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v3 + v10);
  uint64_t v14 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  uint64_t v15 = v13 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v15, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.wifiResponse.getter(&OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiResponse.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

void (*CLP_LogEntry_AONLoc_Indication.wifiResponse.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    uint64_t v11 = &v9[v6[6]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    v9[v6[7]] = 10;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  return CLP_LogEntry_AONLoc_Indication.wifiResponse.modify;
}

void CLP_LogEntry_AONLoc_Indication.wifiResponse.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_Response);
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v4, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  else
  {
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(*(void *)(*(void *)a1 + 48), &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasWifiResponse.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearWifiResponse()()
{
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiIndication.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

void (*CLP_LogEntry_AONLoc_Indication.wifiIndication.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    void *v9 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    *((unsigned char *)v9 + *(int *)(v6 + 28)) = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  }
  return CLP_LogEntry_AONLoc_Indication.wifiIndication.modify;
}

void CLP_LogEntry_AONLoc_Indication.wifiIndication.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v4, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  }
  else
  {
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(*(void *)(*(void *)a1 + 48), &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearWifiIndication()()
{
}

uint64_t CLP_LogEntry_AONLoc_Indication.btResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.wifiResponse.getter(&OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiResponse.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a2 + v9[5]) = 5;
  uint64_t v10 = a2 + v9[6];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(a2 + v9[7]) = 10;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
}

uint64_t CLP_LogEntry_AONLoc_Indication.btResponse.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

void (*CLP_LogEntry_AONLoc_Indication.btResponse.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    uint64_t v11 = &v9[v6[6]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    v9[v6[7]] = 10;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  return CLP_LogEntry_AONLoc_Indication.btResponse.modify;
}

void CLP_LogEntry_AONLoc_Indication.btResponse.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_Response);
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v4, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  else
  {
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(*(void *)(*(void *)a1 + 48), &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasBtResponse.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearBtResponse()()
{
}

uint64_t CLP_LogEntry_AONLoc_Indication.btIndication.getter@<X0>(void *a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.wifiIndication.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.btIndication.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v9 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v18 = swift_allocObject();
    unsigned int v29 = v9;
    uint64_t v19 = a1;
    int v20 = a3;
    os_log_type_t v21 = a4;
    unsigned int v22 = a5;
    uint64_t v23 = v18;
    uint64_t v24 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v24);
    *(void *)(v5 + v17) = v23;
    a5 = v22;
    a4 = v21;
    a3 = v20;
    a1 = v19;
    uint64_t v9 = v29;
    swift_release();
  }
  uint64_t v25 = *(void *)(v5 + v17);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v16, a3);
  uint64_t v26 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v16, 0, 1, v26);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v16, (uint64_t)v14, v9);
  uint64_t v27 = v25 + *a5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v14, v27, v9);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_AONLoc_Indication.btIndication.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    void *v9 = MEMORY[0x263F8EE78];
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    *((unsigned char *)v9 + *(int *)(v6 + 28)) = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  }
  return CLP_LogEntry_AONLoc_Indication.btIndication.modify;
}

void CLP_LogEntry_AONLoc_Indication.btIndication.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v4, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  }
  else
  {
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(*(void *)(*(void *)a1 + 48), &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasBtIndication.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearBtIndication()()
{
}

uint64_t CLP_LogEntry_AONLoc_Indication.TypeEnum.rawValue.getter(char a1)
{
  return qword_247109498[a1];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  return qword_247109498[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_AONLoc_Indication.TypeEnum.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(void *a1@<X8>)
{
  *a1 = qword_247109498[*v1];
}

uint64_t CLP_LogEntry_AONLoc_Indication.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v2) = static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Indication._storage()
{
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  return swift_retain();
}

void *static CLP_LogEntry_AONLoc_Indication.TypeEnum.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_AONLoc_Indication.TypeEnum.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_AONLoc_Indication.TypeEnum.allCases.getter;
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(a1 + v7[8]) = 5;
  uint64_t v11 = a1 + v7[9];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a1 + v7[10];
  uint64_t v14 = type metadata accessor for Proto_Gpsd_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.request.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CLP_LogEntry_AONLoc_LogEntry.request.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    v10[v6[8]] = 5;
    uint64_t v15 = &v10[v6[9]];
    uint64_t v16 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    uint64_t v17 = &v10[v6[10]];
    uint64_t v18 = type metadata accessor for Proto_Gpsd_Request(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  }
  return CLP_LogEntry_AONLoc_LogEntry.request.modify;
}

void CLP_LogEntry_AONLoc_LogEntry.request.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_AONLoc_LogEntry.hasRequest.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 20), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_LogEntry.clearRequest()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.indication.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.indication.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CLP_LogEntry_AONLoc_LogEntry.indication.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  }
  return CLP_LogEntry_AONLoc_LogEntry.indication.modify;
}

void CLP_LogEntry_AONLoc_LogEntry.indication.modify(uint64_t a1, char a2)
{
}

void CLP_LogEntry_AONLoc_Request.resultOptions.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(int *)(*(void *)a1 + 48);
  size_t v9 = *(void **)(*(void *)a1 + 32);
  uint64_t v10 = *(void **)(*(void *)a1 + 40);
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v8;
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(*(void *)(*(void *)a1 + 40), (uint64_t)v9, a5);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, a3);
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, a5);
  }
  else
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(**(void **)a1 + v8, a3);
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  free(v10);
  free(v9);
  free(v13);
  free(v7);
}

BOOL CLP_LogEntry_AONLoc_LogEntry.hasIndication.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_LogEntry.clearIndication()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_AONLoc_Request.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t CLP_LogEntry_AONLoc_Request.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_LogEntry._request@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_AONLoc_Request, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_LogEntry._indication@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_AONLoc_Indication, a1);
}

void *CLP_LogEntry_AONLoc_Request.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_Request.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_Request.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Request._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Request._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "process_id";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "transaction_id";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "type";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "result_options";
  *((void *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 11;
  *(void *)uint64_t v18 = "gpsd_request";
  *((void *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "UPDATE_RESULT_OPTIONS";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 11;
  *(void *)uint64_t v12 = "GNSS_REQUEST";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 21;
  *(void *)uint64_t v14 = "WIFI_RESULT";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 31;
  *(void *)uint64_t v15 = "BT_RESULT";
  *(void *)(v15 + 8) = 9;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_247108600;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "repeat";
  *(void *)(v5 + 8) = 6;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "batch_size";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "repeat_interval_sec";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "max_age_sec";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "minimal_rssi_db";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "bt_types";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "wifi_bands";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v26 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "channels";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  unsigned int v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 11;
  *(void *)unsigned int v22 = "start_cfa_time_sec";
  *(void *)(v22 + 8) = 18;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 12;
  *(void *)uint64_t v24 = "end_cfa_time_sec";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Response._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Response._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "request_type";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "mach_continuous_time_ns";
  *((void *)v10 + 1) = 23;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "result_code";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "mach_continuous_time_ns";
  *(void *)(v5 + 8) = 23;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "transaction_id";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 11;
  *(void *)uint64_t v13 = "gpsd_response";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 12;
  *(void *)uint64_t v15 = "gpsd_indication";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 21;
  *(void *)uint64_t v17 = "wifi_response";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 22;
  *(void *)uint64_t v19 = "wifi_indication";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 31;
  *(void *)os_log_type_t v21 = "bt_response";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 32;
  *(void *)unsigned int v22 = "bt_indication";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v21;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  os_log_type_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_247108630;
  uint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 1;
  *(void *)unint64_t v5 = "ERROR_MESSAGE";
  *(void *)(v5 + 8) = 13;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 11;
  *(void *)size_t v9 = "GNSS_RESPONSE";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 12;
  *(void *)uint64_t v11 = "GNSS_INDICATION";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 21;
  *(void *)uint64_t v13 = "WIFI_RESPONSE";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 22;
  *(void *)uint64_t v15 = "WIFI_INDICATION";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 31;
  *(void *)uint64_t v17 = "BT_RESPONSE";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 32;
  *(void *)uint64_t v19 = "BT_INDICATION";
  *((void *)v19 + 1) = 13;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "request";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 3;
  *(void *)unint64_t v10 = "indication";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "GLONASS_SLOT_SOURCE_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 36;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "GLONASS_SLOT_SOURCE_UNSET";
  *(void *)(v10 + 8) = 25;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "GLONASS_SLOT_SOURCE_UNCLEAR";
  *((void *)v12 + 1) = 27;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "GLONASS_SLOT_SOURCE_DECODED_OVER_THE_AIR";
  *((void *)v14 + 1) = 40;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "GLONASS_SLOT_SOURCE_POSITION_KNOWLEDGE";
  *(void *)(v15 + 8) = 38;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109510;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SATELLITE_SYSTEM_UNKNOWN";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SATELLITE_SYSTEM_GPS";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SATELLITE_SYSTEM_GLONASS";
  *((void *)v12 + 1) = 24;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "SATELLITE_SYSTEM_BEIDOU";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 8;
  *(void *)uint64_t v16 = "SATELLITE_SYSTEM_GALILEO";
  *((void *)v16 + 1) = 24;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 16;
  *(void *)uint64_t v18 = "SATELLITE_SYSTEM_QZSS";
  *((void *)v18 + 1) = 21;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 32;
  *(void *)int v20 = "SATELLITE_SYSTEM_SBAS";
  *((void *)v20 + 1) = 21;
  unsigned char v20[16] = 2;
  v9();
  os_log_type_t v21 = (void *)(v5 + 7 * v2);
  unsigned int v22 = (char *)v21 + v1[14];
  void *v21 = 64;
  *(void *)unsigned int v22 = "SATELLITE_SYSTEM_NAVIC";
  *((void *)v22 + 1) = 22;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v32;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Band._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Band._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_247109520;
  uint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 0;
  *(void *)unint64_t v5 = "BAND_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 21;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v32 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "BAND_UNSET";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v32 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "BAND_GPS_QZSS_L1CA";
  *((void *)v11 + 1) = 18;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v32 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "BAND_GPS_QZSS_L2C";
  *((void *)v13 + 1) = 17;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v32 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "BAND_GPS_QZSS_L5";
  *((void *)v15 + 1) = 16;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v32 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "BAND_GLONASS_L1F";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v32 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "BAND_BEIDOU_B1i";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v32 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "BAND_BEIDOU_B2a";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  unsigned int v22 = v32 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "BAND_GALILEO_E1";
  *(void *)(v22 + 8) = 15;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v32 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "BAND_GALILEO_E5a";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v32 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "BAND_SBAS_L1";
  *((void *)v26 + 1) = 12;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v32 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "BAND_BEIDOU_B1c";
  *((void *)v28 + 1) = 15;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v32 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "BAND_NAVIC_L5";
  *((void *)v30 + 1) = 13;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "FULL_SV_TIME_SOURCE_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 36;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "FULL_SV_TIME_SOURCE_UNSET";
  *(void *)(v10 + 8) = 25;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "FULL_SV_TIME_SOURCE_NEWLY_DECODED_FROM_SV";
  *((void *)v12 + 1) = 41;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "FULL_SV_TIME_SOURCE_PREV_DECODED_FROM_SV";
  *((void *)v14 + 1) = 40;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "FULL_SV_TIME_SOURCE_POSITION_AND_OTHER_SV_TIME";
  *((void *)v16 + 1) = 46;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "FULL_SV_TIME_SOURCE_POSITION_ONLY";
  *((void *)v18 + 1) = 33;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MEASUREMENT_DETECTION_METHOD_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 45;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MEASUREMENT_DETECTION_METHOD_UNSET";
  *(void *)(v10 + 8) = 34;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MEASUREMENT_DETECTION_METHOD_NOT_DETECTED";
  *((void *)v12 + 1) = 41;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "MEASUREMENT_DETECTION_METHOD_ENERGY_BINS";
  *((void *)v14 + 1) = 40;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "MEASUREMENT_DETECTION_METHOD_CODE_TRACKING";
  *((void *)v16 + 1) = 42;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "MEASUREMENT_DETECTION_METHOD_FREQUENCY_TRACKING";
  *((void *)v18 + 1) = 47;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)int v20 = "MEASUREMENT_DETECTION_METHOD_PHASE_TRACKING";
  *((void *)v20 + 1) = 43;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "MULTIPATH_INDICATOR_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 36;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "MULTIPATH_INDICATOR_UNSET";
  *(void *)(v9 + 8) = 25;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "MULTIPATH_INDICATOR_UNKNOWN";
  *((void *)v11 + 1) = 27;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "MULTIPATH_INDICATOR_PRESENT";
  *((void *)v13 + 1) = 27;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "MULTIPATH_INDICATOR_NOT_PRESENT";
  *(void *)(v14 + 8) = 31;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SV_POSITION_SOURCE_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 35;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SV_POSITION_SOURCE_UNSET";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SV_POSITION_SOURCE_EPHEMERIS_OVER_THE_AIR";
  *((void *)v12 + 1) = 41;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "SV_POSITION_SOURCE_BROADCAST_EPHEMERIS_FILE";
  *((void *)v14 + 1) = 43;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "SV_POSITION_SOURCE_LONG_TERM_ORBIT_MOBILE_CALC_deprecated";
  *((void *)v16 + 1) = 57;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "SV_POSITION_SOURCE_LONG_TERM_PREDICTIONS_FILE";
  *((void *)v18 + 1) = 45;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)int v20 = "SV_POSITION_SOURCE_SHORT_TERM_PREDICTIONS_FILE";
  *((void *)v20 + 1) = 46;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "SV_HEALTH_INDICATION_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 37;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "SV_HEALTH_INDICATION_UNSET";
  *(void *)(v9 + 8) = 26;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "SV_HEALTH_INDICATION_UNKNOWN";
  *((void *)v11 + 1) = 28;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "SV_HEALTH_INDICATION_HEALTHY";
  *((void *)v13 + 1) = 28;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "SV_HEALTH_INDICATION_UNHEALTHY";
  *(void *)(v14 + 8) = 30;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "IONO_CORR_SOURCE_UNKNOWN";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "IONO_CORR_SOURCE_KLOBUCHAR_MODEL";
  *((void *)v10 + 1) = 32;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "IONO_CORR_SOURCE_GLOBAL_PREDICTIONS";
  *(void *)(v11 + 8) = 35;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 45;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNSET";
  *(void *)(v10 + 8) = 43;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNKNOWN";
  *((void *)v12 + 1) = 45;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_NOT_CHANGING";
  *((void *)v14 + 1) = 50;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_CHANGING";
  *(void *)(v15 + 8) = 46;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2471085E0;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)uint64_t v4 = "GLONASS_LEAP_SECOND_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 36;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "GLONASS_LEAP_SECOND_UNSET";
  *(void *)(v8 + 8) = 25;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "GLONASS_LEAP_SECOND_NONE";
  *((void *)v10 + 1) = 24;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "GLONASS_LEAP_SECOND_POSITIVE";
  *((void *)v12 + 1) = 28;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "GLONASS_LEAP_SECOND_NEGATIVE";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "GLONASS_LEAP_SECOND_NOT_YET_DEFINED";
  *((void *)v16 + 1) = 35;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SV_REFERENCE_POINT_UNKNOWN";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SV_REFERENCE_POINT_CENTER_OF_MASS";
  *(void *)(v10 + 8) = 33;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SV_REFERENCE_POINT_L1_ANTENNA";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "SV_REFERENCE_POINT_L5_ANTENNA";
  *((void *)v14 + 1) = 29;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v21;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  os_log_type_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_247108630;
  uint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 1;
  *(void *)unint64_t v5 = "gps_prn";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "glonass_id";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "beidou_ranging_code";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "galileo_spreading_code";
  *((void *)v13 + 1) = 22;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "qzss_prn";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "sbas_prn";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "navic_prn";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "system";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "constel_id";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "cm_code_lock";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "cl_code_lock";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "c_nav_bit";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "c_nav_frame";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "tow_decoded";
  *(void *)(v15 + 8) = 11;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "code_lock";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "c_nav_bit";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "c_nav_frame";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "tow_decoded";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "code_lock";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "symbol";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "nav_bit";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "string";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "tod_decoded";
  *(void *)(v14 + 8) = 11;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "e1bc_code_lock";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "e1c_code_lock";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "e1b_page";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "tow_decoded";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_247108600;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "e5b_prim_code_lock";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "e5a_prim_code_lock";
  *(void *)(v9 + 8) = 18;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "e5_alt_boc_prim_code_lock";
  *((void *)v11 + 1) = 25;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "e5b_data_bit";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "e5a_data_bit";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "e5b_sec_code_lock";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "e5a_sec_code_lock";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v26 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "e5b_page_sync";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  unsigned int v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "e5a_page_sync";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "tow_decoded";
  *((void *)v24 + 1) = 11;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "code_lock";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "symbol";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "message";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v28;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_247109540;
  uint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "band";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "gps_l1";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "gps_l2c";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "gps_l5";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "glonass_l1f";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "beidou_b1";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "beidou_b2";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "galileo_e1";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "galileo_e5";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "sbas_l1";
  *((void *)v24 + 1) = 7;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "navic_l5";
  *((void *)v26 + 1) = 8;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "time_nanoseconds";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "time_unc_nanoseconds";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "uncertainty_adjusted_by_external_tool";
  *(void *)(v11 + 8) = 37;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "frequency_offset_ppb";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "frequency_offset_unc_ppb";
  *((void *)v10 + 1) = 24;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "uncertainty_adjusted_by_external_tool";
  *(void *)(v11 + 8) = 37;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "frequency_offset_ppb";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "frequency_offset_unc_ppb";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "cycle_slip_detected";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "uncertainty_adjusted_by_external_tool";
  *((void *)v14 + 1) = 37;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "phase_start_time_nanoseconds";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "phase_end_time_nanoseconds";
  *(void *)(v10 + 8) = 26;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "accumulated_phase_nanoseconds";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "accumulated_phase_unc_nanoseconds";
  *((void *)v14 + 1) = 33;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "cycle_slips_detected";
  *(void *)(v15 + 8) = 20;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "sv_time";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "frequency_offset";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "cn0_dbhz";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "derived_full_sv_time_nanoseconds";
  *(void *)(v6 + 8) = 32;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "derived_full_sv_time_unc_nanoseconds";
  *((void *)v10 + 1) = 36;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "full_sv_time_source";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "innovation";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "residual";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "final_uncertainty";
  *(void *)(v11 + 8) = 17;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v38;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  char v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_247109550;
  uint64_t v4 = v38 + v3;
  unint64_t v5 = v38 + v3 + v1[14];
  *(void *)(v38 + v3) = 1;
  *(void *)unint64_t v5 = "jammer_cn0_dbHz";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "snr_at_correlator_output";
  *(void *)(v9 + 8) = 24;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "full_sv_time";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "sv_time_usage_nanoseconds";
  *((void *)v13 + 1) = 25;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "frequency_offset_usage_ppb";
  *((void *)v15 + 1) = 26;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "carrier_phase_usage_nanoseconds";
  *((void *)v17 + 1) = 31;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "noncoherent_interval_count";
  *((void *)v19 + 1) = 26;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "coherent_integration_ms";
  *((void *)v21 + 1) = 23;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "sv_time_detection_method";
  *(void *)(v22 + 8) = 24;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "frequency_detection_method";
  *((void *)v24 + 1) = 26;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "channel_id";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "code_lock_duration_seconds";
  *((void *)v28 + 1) = 26;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "frequency_lock_duration_seconds";
  *((void *)v30 + 1) = 31;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "metadata";
  *((void *)v32 + 1) = 8;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v4 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "metadata_format";
  *((void *)v34 + 1) = 15;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v4 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "top_correlation_peaks";
  *((void *)v36 + 1) = 21;
  v36[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v34;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_247109560;
  uint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 1;
  *(void *)unint64_t v5 = "id";
  *(void *)(v5 + 8) = 2;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "sync_state";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "start_time_nanoseconds";
  *((void *)v11 + 1) = 22;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "end_time_nanoseconds";
  *((void *)v13 + 1) = 20;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "applicability_time_nanoseconds";
  *((void *)v15 + 1) = 30;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "sv_time";
  *((void *)v17 + 1) = 7;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "frequency_offset";
  *((void *)v19 + 1) = 16;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "phase_tracking";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "extension";
  *(void *)(v22 + 8) = 9;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "cn0_dbHz";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "multipath_indicator";
  *((void *)v26 + 1) = 19;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "averaged_frequency_offset";
  *((void *)v28 + 1) = 25;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "is_usable";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "averaged_frequency_offset_from_phase_tracking";
  *((void *)v32 + 1) = 45;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "frequency_noise_ppb_per_second_per_rtHz";
  *(void *)(v6 + 8) = 39;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "phase_noise_ppb_per_rtHz";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "frequency_variance_ppb2";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "phase_variance_nanoseconds2";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "clock_jump_detected";
  *(void *)(v15 + 8) = 19;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "frequency_correction_ppb";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "cummulative_phase_correction_nanoseconds";
  *(void *)(v10 + 8) = 40;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "current_temperature_degrees_celsius";
  *((void *)v12 + 1) = 35;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "current_temperature_rate_degrees_per_second";
  *((void *)v14 + 1) = 43;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "avg_temperature_over_last_epoch_degrees_celsius";
  *(void *)(v15 + 8) = 47;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "offset_nanoseconds";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "sub_nanosecond_offset_nanoseconds";
  *(void *)(v10 + 8) = 33;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "offset_uncertainty_nanoseconds";
  *((void *)v12 + 1) = 30;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "drift_ppb";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "drift_uncertainty_ppb";
  *(void *)(v15 + 8) = 21;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "clock_nanoseconds";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "model";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "corrections";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "receiver_to_gps_time";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "clock";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "measurements";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "x";
  *(void *)(v6 + 8) = 1;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "y";
  *((void *)v10 + 1) = 1;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "z";
  *(void *)(v11 + 8) = 1;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "band";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "tropospheric_nanoseconds";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ionospheric_nanoseconds";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "tx_group_delay_nanoseconds";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "ionospheric_model";
  *(void *)(v15 + 8) = 17;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "applicable_time_nanoseconds";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "position";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 2;
  *(void *)unint64_t v6 = "fit_validity_start_time_ns";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 3;
  *(void *)unint64_t v10 = "fit_validity_end_time_ns";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "x_position_ecef_coefficients";
  *((void *)v12 + 1) = 28;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "y_position_ecef_coefficients";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 6;
  *(void *)uint64_t v15 = "z_position_ecef_coefficients";
  *(void *)(v15 + 8) = 28;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  uint64_t v51;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  id v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_247109570;
  uint64_t v4 = v51 + v3;
  unint64_t v5 = v51 + v3 + v1[14];
  *(void *)(v51 + v3) = 1;
  *(void *)unint64_t v5 = "id";
  *(void *)(v5 + 8) = 2;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v51 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "reference_time_nanoseconds";
  *(void *)(v9 + 8) = 26;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v51 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "position_source";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v51 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "anchor_positions";
  *((void *)v13 + 1) = 16;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v51 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "clock_bias_correction_nanoseconds";
  *((void *)v15 + 1) = 33;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v51 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "clock_frequency_correction_ppb";
  *((void *)v17 + 1) = 30;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v51 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "clock_frequency_change_correction_ppb_per_sec";
  *((void *)v19 + 1) = 45;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v51 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "range_accuracy_position_m";
  *((void *)v21 + 1) = 25;
  v21[16] = 2;
  v8();
  unsigned int v22 = v51 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "range_accuracy_clock_nanoseconds";
  *(void *)(v22 + 8) = 32;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v51 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "over_the_air_from_sv_health_l1";
  *((void *)v24 + 1) = 30;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v51 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "over_the_air_from_other_sv_health_l1";
  *((void *)v26 + 1) = 36;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v51 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "assistance_file_health_l1";
  *((void *)v28 + 1) = 25;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v51 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "ms_based_health_l1";
  *((void *)v30 + 1) = 18;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v51 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "integrity_health_l1";
  *((void *)v32 + 1) = 19;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v51 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "sv_band_corrections";
  *((void *)v34 + 1) = 19;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v51 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "polynomial_orbit";
  *((void *)v36 + 1) = 16;
  v36[16] = 2;
  v8();
  unint64_t v37 = v51 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 18;
  *(void *)unint64_t v37 = "over_the_air_from_sv_health_l5";
  *(void *)(v37 + 8) = 30;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v51 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 19;
  *(void *)uint64_t v39 = "over_the_air_from_other_sv_health_l5";
  *((void *)v39 + 1) = 36;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v51 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 20;
  *(void *)uint64_t v41 = "assistance_file_health_l5";
  *((void *)v41 + 1) = 25;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v51 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 21;
  *(void *)int v43 = "ms_based_health_l5";
  *((void *)v43 + 1) = 18;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v51 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 22;
  *(void *)id v45 = "integrity_health_l5";
  *((void *)v45 + 1) = 19;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v51 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 23;
  *(void *)uint64_t v47 = "clock_frequency_accel_correction_ppb_per_sec_per_sec";
  *((void *)v47 + 1) = 52;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v51 + v3 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 24;
  *(void *)long long v49 = "sv_reference_point";
  *((void *)v49 + 1) = 18;
  v49[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "band";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "rf_time_bias_nanoseconds";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "rf_time_bias_uncertainty_nanoseconds";
  *((void *)v12 + 1) = 36;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "automatic_gain_control_db";
  *((void *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "time_of_change";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "new_leap_second";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "current_leap_second";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "change_knowledge";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "new_leap_second";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time_nanoseconds";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "offset_nanoseconds";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "drift_ppb";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "accel_ppb_per_second";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "week";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "leap_second";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "conversion";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "collection_time_nanoseconds";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "offset_time_nanoseconds";
  *((void *)v10 + 1) = 23;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "four_week_period";
  *(void *)(v5 + 8) = 16;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "day";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "leap_second_deprecated";
  *((void *)v11 + 1) = 22;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "gps_time_conversion";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "utc_conversion_deprecated";
  *(void *)(v14 + 8) = 25;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "applicable_time_nanoSeconds";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "offset_nanoSeconds";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "drift_ppb";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2471085E0;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "week";
  *(void *)(v4 + 8) = 4;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "leap_second_deprecated";
  *(void *)(v8 + 8) = 22;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "gps_time_conversion";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "glonass_time_conversion";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "galileo_time_conversion";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "utc_time_conversion_deprecated";
  *((void *)v16 + 1) = 30;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "week";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "leap_second_deprecated";
  *(void *)(v10 + 8) = 22;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "gps_time_conversion";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "utc_time_conversion_deprecated";
  *((void *)v14 + 1) = 30;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "gps_time_conversion";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "week";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "gps";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "glonass";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "beidou";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "galileo";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "navic";
  *(void *)(v15 + 8) = 5;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "decode_time_full_gps_ns";
  *(void *)(v5 + 8) = 23;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "alpha0";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "alpha1";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "alpha2";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "alpha3";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "beta0";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "beta1";
  *((void *)v19 + 1) = 5;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "beta2";
  *((void *)v21 + 1) = 5;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "beta3";
  *(void *)(v22 + 8) = 5;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "x";
  *(void *)(v6 + 8) = 1;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "y";
  *((void *)v10 + 1) = 1;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "z";
  *(void *)(v11 + 8) = 1;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "id";
  *(void *)(v6 + 8) = 2;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "band";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "sv_reference_point";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "offset_xyz_m";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ios_absolute_sec";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "mach_absolute_sec";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "mach_continuous_sec";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "received_timestamp";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "meas_report";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "sv_info";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "rx_band_corrections";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "time_conversion";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "meas_applicability_time_mach_continuous_sec";
  *((void *)v17 + 1) = 43;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "meas_applicability_time_uncertainty_sec";
  *((void *)v19 + 1) = 39;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "klobuchar_model";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "apc_sv_offset";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_LogEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_LogEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_record_time";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 4;
  *(void *)unint64_t v10 = "private_data_capture";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "cf_absolute_time_s";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "mach_absolute_time_s";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "mach_continuous_time_s";
  *((void *)v12 + 1) = 22;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "pipelined_monotonic_time_ns";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1004;
  *(void *)unint64_t v6 = "gpsd_log_entry";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1018;
  *(void *)unint64_t v10 = "aonloc_log_entry";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "CLRF_UNKNOWN";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "CLRF_WGS84";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "CLRF_CHINA_SHIFTED";
  *(void *)(v11 + 8) = 18;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v34;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_247109560;
  uint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 0;
  *(void *)unint64_t v5 = "LT_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "LT_GPS";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "LT_NMEA";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "LT_ACCESSORY";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "LT_WIFI";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "LT_SKYHOOK_OBSOLETE";
  *((void *)v17 + 1) = 19;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "LT_CELL";
  *((void *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "LT_LAC";
  *((void *)v21 + 1) = 6;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "LT_MCC";
  *(void *)(v22 + 8) = 6;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "LT_GPS_COARSE";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "LT_PIPELINE";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "LT_WIFI2";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "LT_COMPENSATED";
  *((void *)v30 + 1) = 14;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "LT_LOIOVERRIDE";
  *((void *)v32 + 1) = 14;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "CLIENT_SATELLITE_CONSTELLATION_UNKNOWN";
  *(void *)(v6 + 8) = 38;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "CLIENT_SATELLITE_CONSTELLATION_GPS";
  *(void *)(v10 + 8) = 34;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "CLIENT_SATELLITE_CONSTELLATION_GLONASS";
  *((void *)v12 + 1) = 38;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "CLIENT_SATELLITE_CONSTELLATION_BEIDOU";
  *((void *)v14 + 1) = 37;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "CLIENT_SATELLITE_CONSTELLATION_GALILEO";
  *((void *)v16 + 1) = 38;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "CLIENT_SATELLITE_CONSTELLATION_QZSS";
  *((void *)v18 + 1) = 35;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)int v20 = "CLIENT_SATELLITE_CONSTELLATION_NAVIC";
  *((void *)v20 + 1) = 36;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "BATCHED_LOCATION_FIX_TYPE_UNKNOWN";
  *(void *)(v6 + 8) = 33;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "BATCHED_LOCATION_FIX_TYPE_SCALED_INTERPOLATED";
  *(void *)(v10 + 8) = 45;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_INTERPOLATED";
  *((void *)v12 + 1) = 50;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_GNSS_FIX";
  *((void *)v14 + 1) = 46;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "BATCHED_LOCATION_FIX_TYPE_GNSS_FIX";
  *(void *)(v15 + 8) = 34;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "GNSS_MODE_OF_OPERATION_UNKNOWN";
  *(void *)(v6 + 8) = 30;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "GNSS_MODE_OF_OPERATION_1HZ";
  *((void *)v10 + 1) = 26;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "GNSS_MODE_OF_OPERATION_RHYTHMIC";
  *(void *)(v11 + 8) = 31;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_UNKNOWN";
  *(void *)(v6 + 8) = 35;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_INVALID";
  *(void *)(v10 + 8) = 35;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_NON_WAKING";
  *((void *)v12 + 1) = 38;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_WAKING";
  *((void *)v14 + 1) = 34;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "RHYTHMIC_GNSS_PROACTIVE_NON_WAKING";
  *(void *)(v15 + 8) = 34;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "BATCH_MODE_UNKNOWN";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "BATCH_MODE_DISABLE_ON_WAKE";
  *((void *)v10 + 1) = 26;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "BATCH_MODE_ALLOW_DARK_WAKE";
  *(void *)(v11 + 8) = 26;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "OPERATING_MODE_UNKNOWN";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "OPERATING_MODE_NORMAL";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "OPERATING_MODE_TIME";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "OPERATING_MODE_SKIP_DEBOUNCE";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "PIPELINE_OPERATING_MODE_UNKNOWN";
  *(void *)(v6 + 8) = 31;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PIPELINE_OPERATING_MODE_INDOOR";
  *((void *)v10 + 1) = 30;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "PIPELINE_OPERATING_MODE_REGIONAL";
  *(void *)(v11 + 8) = 32;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  char *v98;
  void *v99;
  char *v100;
  void *v101;
  char *v102;
  void *v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;
  char *v108;
  void *v109;
  char *v110;
  void *v111;
  char *v112;
  void *v113;
  char *v114;
  void *v115;
  char *v116;
  void *v117;
  char *v118;
  void *v119;
  char *v120;
  void *v121;
  char *v122;
  void *v123;
  char *v124;
  void *v125;
  char *v126;
  void *v127;
  char *v128;
  void *v129;
  char *v130;
  unint64_t v131;
  void *v132;
  char *v133;
  void *v134;
  char *v135;
  void *v136;
  char *v137;
  void *v138;
  char *v139;
  void *v140;
  char *v141;
  void *v142;
  char *v143;
  void *v144;
  char *v145;
  uint64_t v147;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v147 = swift_allocObject();
  *(_OWORD *)(v147 + 16) = xmmword_24710FE00;
  uint64_t v4 = v147 + v3;
  unint64_t v5 = v147 + v3 + v1[14];
  *(void *)(v147 + v3) = 0;
  *(void *)unint64_t v5 = "DM_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v147 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "DM_FROZEN";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v147 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "DM_STATIC";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v147 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "DM_MOVING";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v147 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "DM_WALKING";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v147 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "DM_DRIVING";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v147 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "DM_CYCLING";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v147 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "DM_SEMI_STATIONARY";
  *((void *)v21 + 1) = 18;
  v21[16] = 2;
  v8();
  unsigned int v22 = v147 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "DM_RUNNING";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v147 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "DM_MOVING_COARSE";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v147 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "DM_IN_VEHICLE_FROZEN";
  *((void *)v26 + 1) = 20;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v147 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "DM_IN_VEHICLE_STATIC";
  *((void *)v28 + 1) = 20;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v147 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 41;
  *(void *)os_log_type_t v30 = "DM_WALKING_SLOW";
  *((void *)v30 + 1) = 15;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v147 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 52;
  *(void *)uint64_t v32 = "DM_VEHICULAR_IN_HAND";
  *((void *)v32 + 1) = 20;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v147 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 56;
  *(void *)int v34 = "DM_DRIVING_OTHER";
  *((void *)v34 + 1) = 16;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v147 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 61;
  *(void *)unint64_t v36 = "DM_MACHINE_WORKOUT";
  *((void *)v36 + 1) = 18;
  v36[16] = 2;
  v8();
  unint64_t v37 = v147 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 62;
  *(void *)unint64_t v37 = "DM_WORKOUT";
  *(void *)(v37 + 8) = 10;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v147 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 63;
  *(void *)uint64_t v39 = "DM_MULTI_SPORT_TRANSITION";
  *((void *)v39 + 1) = 25;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v147 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 64;
  *(void *)uint64_t v41 = "DM_INDOOR_SOCCER";
  *((void *)v41 + 1) = 16;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v147 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 65;
  *(void *)int v43 = "DM_AUSTRALIAN_FOOTBALL";
  *((void *)v43 + 1) = 22;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v147 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 66;
  *(void *)id v45 = "DM_PICKLEBALL";
  *((void *)v45 + 1) = 13;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v147 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 100;
  *(void *)uint64_t v47 = "DM_CYCLING_LEG";
  *((void *)v47 + 1) = 14;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v147 + v3 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 2010;
  *(void *)long long v49 = "DM_STATIONARY_CYCLING";
  *((void *)v49 + 1) = 21;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v147 + v3 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 2020;
  *(void *)id v51 = "DM_CALISTHENICS";
  *((void *)v51 + 1) = 15;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v147 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 2022;
  *(void *)uint64_t v53 = "DM_FUNCTIONAL_STRENGTH";
  *((void *)v53 + 1) = 22;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v147 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 2024;
  *(void *)uint64_t v55 = "DM_CORE_TRAINING";
  *((void *)v55 + 1) = 16;
  v55[16] = 2;
  v8();
  v56 = (void *)(v147 + v3 + 26 * v2);
  Class v57 = (char *)v56 + v1[14];
  void *v56 = 2048;
  *(void *)Class v57 = "DM_ELLIPTICAL";
  *((void *)v57 + 1) = 13;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v147 + v3 + 27 * v2);
  v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 2061;
  *(void *)v59 = "DM_CROSS_TRAINING";
  *((void *)v59 + 1) = 17;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v147 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 2065;
  *(void *)uint64_t v61 = "DM_STAIR_CLIMBING";
  *((void *)v61 + 1) = 17;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v147 + v3 + 29 * v2);
  v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 2068;
  *(void *)v63 = "DM_JUMP_ROPE";
  *((void *)v63 + 1) = 12;
  v63[16] = 2;
  v8();
  unint64_t v64 = (void *)(v147 + v3 + 30 * v2);
  unint64_t v65 = (char *)v64 + v1[14];
  *unint64_t v64 = 2071;
  *(void *)unint64_t v65 = "DM_ROWING";
  *((void *)v65 + 1) = 9;
  v65[16] = 2;
  v8();
  unint64_t v66 = (void *)(v147 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *unint64_t v66 = 2101;
  *(void *)uint64_t v67 = "DM_COOL_DOWN";
  *((void *)v67 + 1) = 12;
  v67[16] = 2;
  v8();
  v68 = v147 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 2105;
  *(void *)v68 = "DM_PILATES";
  *(void *)(v68 + 8) = 10;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v147 + v3 + 33 * v2);
  Class v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 2150;
  *(void *)Class v70 = "DM_YOGA";
  *((void *)v70 + 1) = 7;
  v70[16] = 2;
  v8();
  id v71 = (void *)(v147 + v3 + 34 * v2);
  uint64_t v72 = (char *)v71 + v1[14];
  *id v71 = 3015;
  *(void *)uint64_t v72 = "DM_DANCING";
  *((void *)v72 + 1) = 10;
  v72[16] = 2;
  v8();
  v73 = (void *)(v147 + v3 + 35 * v2);
  v74 = (char *)v73 + v1[14];
  *v73 = 3016;
  *(void *)v74 = "DM_STEP_TRAINING";
  *((void *)v74 + 1) = 16;
  v74[16] = 2;
  v8();
  v75 = (void *)(v147 + v3 + 36 * v2);
  v76 = (char *)v75 + v1[14];
  *v75 = 11805;
  *(void *)v76 = "DM_PUSHING_WHEELCHAIR";
  *((void *)v76 + 1) = 21;
  v76[16] = 2;
  v8();
  v77 = (void *)(v147 + v3 + 37 * v2);
  v78 = (char *)v77 + v1[14];
  *v77 = 12150;
  *(void *)v78 = "DM_INDOOR_RUNNING";
  *((void *)v78 + 1) = 17;
  v78[16] = 2;
  v8();
  v79 = (void *)(v147 + v3 + 38 * v2);
  v80 = (char *)v79 + v1[14];
  *v79 = 15030;
  *(void *)v80 = "DM_BADMINTON";
  *((void *)v80 + 1) = 12;
  v80[16] = 2;
  v8();
  v81 = (void *)(v147 + v3 + 39 * v2);
  v82 = (char *)v81 + v1[14];
  *v81 = 15055;
  *(void *)v82 = "DM_BASKETBALL";
  *((void *)v82 + 1) = 13;
  v82[16] = 2;
  v8();
  v83 = (void *)(v147 + v3 + 40 * v2);
  v84 = (char *)v83 + v1[14];
  *v83 = 15100;
  *(void *)v84 = "DM_BOXING";
  *((void *)v84 + 1) = 9;
  v84[16] = 2;
  v8();
  v85 = (void *)(v147 + v3 + 41 * v2);
  v86 = (char *)v85 + v1[14];
  *v85 = 15110;
  *(void *)v86 = "DM_KICKBOXING";
  *((void *)v86 + 1) = 13;
  v86[16] = 2;
  v8();
  v87 = (void *)(v147 + v3 + 42 * v2);
  v88 = (char *)v87 + v1[14];
  *v87 = 15150;
  *(void *)v88 = "DM_CRICKET";
  *((void *)v88 + 1) = 10;
  v88[16] = 2;
  v8();
  v89 = (void *)(v147 + v3 + 43 * v2);
  v90 = (char *)v89 + v1[14];
  *v89 = 15230;
  *(void *)v90 = "DM_AMERICAN_FOOTBALL";
  *((void *)v90 + 1) = 20;
  v90[16] = 2;
  v8();
  v91 = (void *)(v147 + v3 + 44 * v2);
  v92 = (char *)v91 + v1[14];
  *v91 = 15240;
  *(void *)v92 = "DM_DISC_SPORTS";
  *((void *)v92 + 1) = 14;
  v92[16] = 2;
  v8();
  v93 = (void *)(v147 + v3 + 45 * v2);
  v94 = (char *)v93 + v1[14];
  *v93 = 15255;
  *(void *)v94 = "DM_GOLFING";
  *((void *)v94 + 1) = 10;
  v94[16] = 2;
  v8();
  v95 = (void *)(v147 + v3 + 46 * v2);
  v96 = (char *)v95 + v1[14];
  *v95 = 15330;
  *(void *)v96 = "DM_HANDBALL";
  *((void *)v96 + 1) = 11;
  v96[16] = 2;
  v8();
  v97 = (void *)(v147 + v3 + 47 * v2);
  v98 = (char *)v97 + v1[14];
  *v97 = 15350;
  *(void *)v98 = "DM_OUTDOOR_HOCKEY";
  *((void *)v98 + 1) = 17;
  v98[16] = 2;
  v8();
  v99 = (void *)(v147 + v3 + 48 * v2);
  v100 = (char *)v99 + v1[14];
  *v99 = 15360;
  *(void *)v100 = "DM_INDOOR_HOCKEY";
  *((void *)v100 + 1) = 16;
  v100[16] = 2;
  v8();
  v101 = (void *)(v147 + v3 + 49 * v2);
  v102 = (char *)v101 + v1[14];
  *v101 = 15460;
  *(void *)v102 = "DM_LACROSSE";
  *((void *)v102 + 1) = 11;
  v102[16] = 2;
  v8();
  v103 = (void *)(v147 + v3 + 50 * v2);
  v104 = (char *)v103 + v1[14];
  *v103 = 15562;
  *(void *)v104 = "DM_RUGBY";
  *((void *)v104 + 1) = 8;
  v104[16] = 2;
  v8();
  v105 = (void *)(v147 + v3 + 51 * v2);
  v106 = (char *)v105 + v1[14];
  *v105 = 15592;
  *(void *)v106 = "DM_OUTDOOR_SKATING_SPORTS";
  *((void *)v106 + 1) = 25;
  v106[16] = 2;
  v8();
  v107 = (void *)(v147 + v3 + 52 * v2);
  v108 = (char *)v107 + v1[14];
  *v107 = 15610;
  *(void *)v108 = "DM_OUTDOOR_SOCCER";
  *((void *)v108 + 1) = 17;
  v108[16] = 2;
  v8();
  v109 = (void *)(v147 + v3 + 53 * v2);
  v110 = (char *)v109 + v1[14];
  *v109 = 15620;
  *(void *)v110 = "DM_SOFTBALL";
  *((void *)v110 + 1) = 11;
  v110[16] = 2;
  v8();
  v111 = (void *)(v147 + v3 + 54 * v2);
  v112 = (char *)v111 + v1[14];
  *v111 = 15652;
  *(void *)v112 = "DM_SQUASH";
  *((void *)v112 + 1) = 9;
  v112[16] = 2;
  v8();
  v113 = (void *)(v147 + v3 + 55 * v2);
  v114 = (char *)v113 + v1[14];
  *v113 = 15660;
  *(void *)v114 = "DM_TABLE_TENNIS";
  *((void *)v114 + 1) = 15;
  v114[16] = 2;
  v8();
  v115 = (void *)(v147 + v3 + 56 * v2);
  v116 = (char *)v115 + v1[14];
  *v115 = 15670;
  *(void *)v116 = "DM_TAI_CHI";
  *((void *)v116 + 1) = 10;
  v116[16] = 2;
  v8();
  v117 = (void *)(v147 + v3 + 57 * v2);
  v118 = (char *)v117 + v1[14];
  *v117 = 15675;
  *(void *)v118 = "DM_TENNIS";
  *((void *)v118 + 1) = 9;
  v118[16] = 2;
  v8();
  v119 = (void *)(v147 + v3 + 58 * v2);
  v120 = (char *)v119 + v1[14];
  *v119 = 15710;
  *(void *)v120 = "DM_VOLLEYBALL";
  *((void *)v120 + 1) = 13;
  v120[16] = 2;
  v8();
  v121 = (void *)(v147 + v3 + 59 * v2);
  v122 = (char *)v121 + v1[14];
  *v121 = 15733;
  *(void *)v122 = "DM_TRACK_AND_FIELD";
  *((void *)v122 + 1) = 18;
  v122[16] = 2;
  v8();
  v123 = (void *)(v147 + v3 + 60 * v2);
  v124 = (char *)v123 + v1[14];
  *v123 = 17150;
  *(void *)v124 = "DM_INDOOR_WALKING";
  *((void *)v124 + 1) = 17;
  v124[16] = 2;
  v8();
  v125 = (void *)(v147 + v3 + 61 * v2);
  v126 = (char *)v125 + v1[14];
  *v125 = 18070;
  *(void *)v126 = "DM_OUTDOOR_ROWING";
  *((void *)v126 + 1) = 17;
  v126[16] = 2;
  v8();
  v127 = (void *)(v147 + v3 + 62 * v2);
  v128 = (char *)v127 + v1[14];
  *v127 = 18200;
  *(void *)v128 = "DM_SCUBA_DIVING";
  *((void *)v128 + 1) = 15;
  v128[16] = 2;
  v8();
  v129 = (void *)(v147 + v3 + 63 * v2);
  v130 = (char *)v129 + v1[14];
  *v129 = 18225;
  *(void *)v130 = "DM_PADDLE_SPORTS";
  *((void *)v130 + 1) = 16;
  v130[16] = 2;
  v8();
  v131 = v147 + v3 + (v2 << 6) + v1[14];
  *(void *)(v4 + (v2 << 6)) = 18240;
  *(void *)v131 = "DM_SWIMMING";
  *(void *)(v131 + 8) = 11;
  *(unsigned char *)(v131 + 16) = 2;
  v8();
  v132 = (void *)(v147 + v3 + 65 * v2);
  v133 = (char *)v132 + v1[14];
  *v132 = 19030;
  *(void *)v133 = "DM_INDOOR_SKATING_SPORTS";
  *((void *)v133 + 1) = 24;
  v133[16] = 2;
  v8();
  v134 = (void *)(v147 + v3 + 66 * v2);
  v135 = (char *)v134 + v1[14];
  *v134 = 19090;
  *(void *)v135 = "DM_CROSS_COUNTRY_SKIING";
  *((void *)v135 + 1) = 23;
  v135[16] = 2;
  v8();
  v136 = (void *)(v147 + v3 + 67 * v2);
  v137 = (char *)v136 + v1[14];
  *v136 = 19150;
  *(void *)v137 = "DM_DOWNHILL_SKIING";
  *((void *)v137 + 1) = 18;
  v137[16] = 2;
  v8();
  v138 = (void *)(v147 + v3 + 68 * v2);
  v139 = (char *)v138 + v1[14];
  *v138 = 19160;
  *(void *)v139 = "DM_SNOWBOARDING";
  *((void *)v139 + 1) = 15;
  v139[16] = 2;
  v8();
  v140 = (void *)(v147 + v3 + 69 * v2);
  v141 = (char *)v140 + v1[14];
  *v140 = 90603;
  *(void *)v141 = "DM_OUTDOOR_WHEELCHAIR";
  *((void *)v141 + 1) = 21;
  v141[16] = 2;
  v8();
  v142 = (void *)(v147 + v3 + 70 * v2);
  v143 = (char *)v142 + v1[14];
  *v142 = 515621;
  *(void *)v143 = "DM_BASEBALL";
  *((void *)v143 + 1) = 11;
  v143[16] = 2;
  v8();
  v144 = (void *)(v147 + v3 + 71 * v2);
  v145 = (char *)v144 + v1[14];
  *v144 = 515652;
  *(void *)v145 = "DM_RACQUETBALL";
  *((void *)v145 + 1) = 14;
  v145[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "RT_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "RT_UNAVAILABLE";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "RT_SMALL";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "RT_LARGE";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 1001;
  *(void *)uint64_t v14 = "RT_UNACHIEVABLE";
  *(void *)(v14 + 8) = 15;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "BC_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "BC_NONE";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "BC_USB";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "BC_EXTERNAL";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "BC_ARCAS";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SE_FIDELITY_LEVEL_UNKNOWN";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SE_FIDELITY_LEVEL_UNAVAILABLE";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SE_FIDELITY_LEVEL_COARSE";
  *((void *)v12 + 1) = 24;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "SE_FIDELITY_LEVEL_HIGH_RESOLUTION";
  *((void *)v14 + 1) = 33;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = -1;
  *(void *)unint64_t v5 = "CC_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 0;
  *(void *)size_t v9 = "CC_UNRELIABLE";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 1;
  *(void *)uint64_t v11 = "CC_2DWEAK";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 2;
  *(void *)uint64_t v13 = "CC_2DSTRONG";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 3;
  *(void *)uint64_t v15 = "CC_3DWEAK";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 4;
  *(void *)uint64_t v17 = "CC_3D";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 5;
  *(void *)uint64_t v19 = "CC_3DSTRONG";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 6;
  *(void *)os_log_type_t v21 = "CC_MAX";
  *((void *)v21 + 1) = 6;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "FM_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "FM_DEFAULT";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "FM_NAVIGATION";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "FM_SWIM";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "FM_GAMING";
  *(void *)(v15 + 8) = 9;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "AP_MODE_UNKNOWN";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "AP_MODE_IBSS";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "AP_MODE_INFRA";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "AP_MODE_ANY";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "BAND_2GHz";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "BAND_5GHz";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "BAND_6GHz";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v36;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_24710FE10;
  uint64_t v4 = v36 + v3;
  unint64_t v5 = v36 + v3 + v1[14];
  *(void *)(v36 + v3) = 0;
  *(void *)unint64_t v5 = "WS_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v36 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "WS_HARVEST_2_GHZ_SET1";
  *(void *)(v9 + 8) = 21;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v36 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "WS_HARVEST_2_GHZ_SET2";
  *((void *)v11 + 1) = 21;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v36 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "WS_HARVEST_5_GHZ_SET1";
  *((void *)v13 + 1) = 21;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v36 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "WS_HARVEST_5_GHZ_SET2";
  *((void *)v15 + 1) = 21;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v36 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "WS_HARVEST_5_GHZ_SET3";
  *((void *)v17 + 1) = 21;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v36 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "WS_CACHED";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v36 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "WS_LOW_PRIORITY";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  unsigned int v22 = v36 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "WS_CHANNEL";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v36 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "WS_FAST";
  *((void *)v24 + 1) = 7;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v36 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "WS_STAGE1";
  *((void *)v26 + 1) = 9;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v36 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "WS_STAGE2";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v36 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "WS_NORMAL";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v36 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "WS_CUSTOM_SCAN_PARAMETERS";
  *((void *)v32 + 1) = 25;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v36 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "WS_5GHZ_STAGE1";
  *((void *)v34 + 1) = 14;
  v34[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v36;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_24710FE10;
  uint64_t v4 = v36 + v3;
  unint64_t v5 = v36 + v3 + v1[14];
  *(void *)(v36 + v3) = 0;
  *(void *)unint64_t v5 = "WN_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v36 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "WN_AVAILABLE";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v36 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "WN_POWER";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v36 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "WN_SCAN_READY";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v36 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "WN_SCAN";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v36 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "WN_SCAN_ERROR";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v36 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "WN_SCAN_ERROR_BUSY";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v36 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "WN_LINK_STATUS";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  unsigned int v22 = v36 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "WN_ROAM";
  *(void *)(v22 + 8) = 7;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v36 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "WN_BACKGROUND_ENTRY";
  *((void *)v24 + 1) = 19;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v36 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "WN_BACKGROUND_EXIT";
  *((void *)v26 + 1) = 18;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v36 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "WN_TRACKING_AVAILABLE";
  *((void *)v28 + 1) = 21;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v36 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "WN_WOW";
  *((void *)v30 + 1) = 6;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v36 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "WN_SCAN_CACHE";
  *((void *)v32 + 1) = 13;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v36 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "WN_PEER_RANGING";
  *((void *)v34 + 1) = 15;
  v34[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "LOCATION_SERVICES_ENABLED_UNKNOWN";
  *(void *)(v6 + 8) = 33;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "LOCATION_SERVICES_ENABLED_NO";
  *(void *)(v10 + 8) = 28;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "LOCATION_SERVICES_ENABLED_YES";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "LOCATION_SERVICES_ENABLED_UNAVAILABLE";
  *((void *)v14 + 1) = 37;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "DATA_AVAILABILITY_UNKNOWN";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "DATA_AVAILABILITY_UNAVAILABLE";
  *((void *)v10 + 1) = 29;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "DATA_AVAILABILITY_AVAILABLE";
  *(void *)(v11 + 8) = 27;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "INDOOR_OUTDOOR_TYPE_UNKNOWN";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "INDOOR_OUTDOOR_TYPE_INDOOR";
  *((void *)v10 + 1) = 26;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "INDOOR_OUTDOOR_TYPE_OUTDOOR";
  *(void *)(v11 + 8) = 27;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "INDOOR_OUTDOOR_CONFIDENCE_UNKNOWN";
  *(void *)(v6 + 8) = 33;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "INDOOR_OUTDOOR_CONFIDENCE_LOW";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "INDOOR_OUTDOOR_CONFIDENCE_MEDIUM";
  *((void *)v12 + 1) = 32;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "INDOOR_OUTDOOR_CONFIDENCE_HIGH";
  *((void *)v14 + 1) = 30;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "cf_absolute_time_s";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "mach_absolute_time_s";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "mach_continuous_time_s";
  *(void *)(v11 + 8) = 22;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "x_mps2";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "y_mps2";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "z_mps2";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "x_radps";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "y_radps";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "z_radps";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "pressure";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "temperature";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "latitude";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "longitude";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  uint64_t v49;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  long long v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_24710FE20;
  uint64_t v4 = v49 + v3;
  unint64_t v5 = v49 + v3 + v1[14];
  *(void *)(v49 + v3) = 1;
  *(void *)unint64_t v5 = "suitability";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v49 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "coordinate";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v49 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "horizontal_accuracy";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v49 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "altitude";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v49 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "vertical_accuracy";
  *((void *)v15 + 1) = 17;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v49 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "speed";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v49 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "speed_accuracy";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v49 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "course";
  *((void *)v21 + 1) = 6;
  v21[16] = 2;
  v8();
  unsigned int v22 = v49 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "course_accuracy";
  *(void *)(v22 + 8) = 15;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v49 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "timestamp";
  *((void *)v24 + 1) = 9;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v49 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "confidence";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v49 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "lifespan";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v49 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "type";
  *((void *)v30 + 1) = 4;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v49 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "raw_coordinate";
  *((void *)v32 + 1) = 14;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v49 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "raw_course";
  *((void *)v34 + 1) = 10;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v49 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "floor";
  *((void *)v36 + 1) = 5;
  v36[16] = 2;
  v8();
  unint64_t v37 = v49 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)unint64_t v37 = "integrity";
  *(void *)(v37 + 8) = 9;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v49 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 18;
  *(void *)uint64_t v39 = "reference_frame";
  *((void *)v39 + 1) = 15;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v49 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 19;
  *(void *)uint64_t v41 = "raw_reference_frame";
  *((void *)v41 + 1) = 19;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v49 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 20;
  *(void *)int v43 = "signal_environment_type";
  *((void *)v43 + 1) = 23;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v49 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 21;
  *(void *)id v45 = "ellipsoidal_altitude";
  *((void *)v45 + 1) = 20;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v49 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 22;
  *(void *)uint64_t v47 = "from_simulation_controller";
  *((void *)v47 + 1) = 26;
  v47[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "ST_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ST_ROUTE_GUIDANCE";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "ST_OTHER";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 0xFFFFLL;
  *(void *)uint64_t v14 = "ST_ANY";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = -1;
  *(void *)unint64_t v6 = "LI_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 0;
  *(void *)unint64_t v10 = "LI_NONE";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 25;
  *(void *)uint64_t v12 = "LI_LOW";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 50;
  *(void *)uint64_t v14 = "LI_MEDIUM";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 75;
  *(void *)uint64_t v15 = "LI_HIGH";
  *(void *)(v15 + 8) = 7;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "raw_unmodified_course";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "raw_unmodified_course_unc";
  *(void *)(v10 + 8) = 25;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "is_static";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "is_mounted";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "value";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "std";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "constellation";
  *(void *)(v5 + 8) = 13;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "sat_id";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "elevation_deg";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "azimuth_deg";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "l1_cn0";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "l5_cn0";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "is_tracked";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "is_phase_tracked";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  char *v98;
  void *v99;
  char *v100;
  void *v101;
  char *v102;
  void *v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;
  char *v108;
  void *v109;
  char *v110;
  void *v111;
  char *v112;
  void *v113;
  char *v114;
  uint64_t v116;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v116 = swift_allocObject();
  *(_OWORD *)(v116 + 16) = xmmword_24710FE30;
  uint64_t v4 = v116 + v3;
  unint64_t v5 = v116 + v3 + v1[14];
  *(void *)(v116 + v3) = 1;
  *(void *)unint64_t v5 = "odometer";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v116 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "delta_distance";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v116 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "delta_distance_accuracy";
  *((void *)v11 + 1) = 23;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v116 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "timestamp_gps";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v116 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "mach_time";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v116 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "horz_unc_semi_maj";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v116 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "horz_unc_semi_min";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v116 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "horz_unc_semi_maj_az";
  *((void *)v21 + 1) = 20;
  v21[16] = 2;
  v8();
  unsigned int v22 = v116 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "is_fitness_match";
  *(void *)(v22 + 8) = 16;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v116 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "match_quality";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v116 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "match_coordinate";
  *((void *)v26 + 1) = 16;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v116 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "match_course";
  *((void *)v28 + 1) = 12;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v116 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "match_form_of_way";
  *((void *)v30 + 1) = 17;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v116 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "match_road_class";
  *((void *)v32 + 1) = 16;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v116 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "match_shifted";
  *((void *)v34 + 1) = 13;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v116 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "pressure";
  *((void *)v36 + 1) = 8;
  v36[16] = 2;
  v8();
  unint64_t v37 = v116 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)unint64_t v37 = "undulation_model";
  *(void *)(v37 + 8) = 16;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v116 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 18;
  *(void *)uint64_t v39 = "undulation";
  *((void *)v39 + 1) = 10;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v116 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 19;
  *(void *)uint64_t v41 = "special_coordinate";
  *((void *)v41 + 1) = 18;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v116 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 20;
  *(void *)int v43 = "special_horizontal_accuracy";
  *((void *)v43 + 1) = 27;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v116 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 21;
  *(void *)id v45 = "mach_continuous_time";
  *((void *)v45 + 1) = 20;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v116 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 22;
  *(void *)uint64_t v47 = "origin_device";
  *((void *)v47 + 1) = 13;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v116 + v3 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 23;
  *(void *)long long v49 = "is_matcher_propagated_coordinates";
  *((void *)v49 + 1) = 33;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v116 + v3 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 24;
  *(void *)id v51 = 0x247143000;
  *((void *)v51 + 1) = 16;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v116 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 25;
  *(void *)uint64_t v53 = "slope";
  *((void *)v53 + 1) = 5;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v116 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 26;
  *(void *)uint64_t v55 = "max_abs_slope";
  *((void *)v55 + 1) = 13;
  v55[16] = 2;
  v8();
  v56 = (void *)(v116 + v3 + 26 * v2);
  Class v57 = (char *)v56 + v1[14];
  void *v56 = 27;
  *(void *)Class v57 = "ground_altitude";
  *((void *)v57 + 1) = 15;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v116 + v3 + 27 * v2);
  v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 28;
  *(void *)v59 = "ground_altitude_uncertainty";
  *((void *)v59 + 1) = 27;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v116 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 29;
  *(void *)uint64_t v61 = "smoothed_gps_altitude";
  *((void *)v61 + 1) = 21;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v116 + v3 + 29 * v2);
  v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 30;
  *(void *)v63 = "smoothed_gps_altitude_uncertainty";
  *((void *)v63 + 1) = 33;
  v63[16] = 2;
  v8();
  unint64_t v64 = (void *)(v116 + v3 + 30 * v2);
  unint64_t v65 = (char *)v64 + v1[14];
  *unint64_t v64 = 31;
  *(void *)unint64_t v65 = "is_simulated_or_spoofed";
  *((void *)v65 + 1) = 23;
  v65[16] = 2;
  v8();
  unint64_t v66 = (void *)(v116 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *unint64_t v66 = 32;
  *(void *)uint64_t v67 = "raw_horizontal_accuracy";
  *((void *)v67 + 1) = 23;
  v67[16] = 2;
  v8();
  v68 = v116 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 33;
  *(void *)v68 = "raw_course_accuracy";
  *(void *)(v68 + 8) = 19;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v116 + v3 + 33 * v2);
  Class v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 34;
  *(void *)Class v70 = "is_coordinate_fused";
  *((void *)v70 + 1) = 19;
  v70[16] = 2;
  v8();
  id v71 = (void *)(v116 + v3 + 34 * v2);
  uint64_t v72 = (char *)v71 + v1[14];
  *id v71 = 35;
  *(void *)uint64_t v72 = "fused_coordinate";
  *((void *)v72 + 1) = 16;
  v72[16] = 2;
  v8();
  v73 = (void *)(v116 + v3 + 35 * v2);
  v74 = (char *)v73 + v1[14];
  *v73 = 36;
  *(void *)v74 = "fused_horizontal_accuracy";
  *((void *)v74 + 1) = 25;
  v74[16] = 2;
  v8();
  v75 = (void *)(v116 + v3 + 36 * v2);
  v76 = (char *)v75 + v1[14];
  *v75 = 37;
  *(void *)v76 = "fused_reference_frame";
  *((void *)v76 + 1) = 21;
  v76[16] = 2;
  v8();
  v77 = (void *)(v116 + v3 + 37 * v2);
  v78 = (char *)v77 + v1[14];
  *v77 = 38;
  *(void *)v78 = "fused_course";
  *((void *)v78 + 1) = 12;
  v78[16] = 2;
  v8();
  v79 = (void *)(v116 + v3 + 38 * v2);
  v80 = (char *)v79 + v1[14];
  *v79 = 39;
  *(void *)v80 = "fused_course_accuracy";
  *((void *)v80 + 1) = 21;
  v80[16] = 2;
  v8();
  v81 = (void *)(v116 + v3 + 39 * v2);
  v82 = (char *)v81 + v1[14];
  *v81 = 40;
  *(void *)v82 = "estimated_worst_case_error";
  *((void *)v82 + 1) = 26;
  v82[16] = 2;
  v8();
  v83 = (void *)(v116 + v3 + 40 * v2);
  v84 = (char *)v83 + v1[14];
  *v83 = 41;
  *(void *)v84 = "pre_fusing_altitude";
  *((void *)v84 + 1) = 19;
  v84[16] = 2;
  v8();
  v85 = (void *)(v116 + v3 + 41 * v2);
  v86 = (char *)v85 + v1[14];
  *v85 = 42;
  *(void *)v86 = "pre_fusing_vertical_accuracy";
  *((void *)v86 + 1) = 28;
  v86[16] = 2;
  v8();
  v87 = (void *)(v116 + v3 + 42 * v2);
  v88 = (char *)v87 + v1[14];
  *v87 = 43;
  *(void *)v88 = "is_coordinate_fused_with_vl";
  *((void *)v88 + 1) = 27;
  v88[16] = 2;
  v8();
  v89 = (void *)(v116 + v3 + 43 * v2);
  v90 = (char *)v89 + v1[14];
  *v89 = 44;
  *(void *)v90 = "fused_altitude";
  *((void *)v90 + 1) = 14;
  v90[16] = 2;
  v8();
  v91 = (void *)(v116 + v3 + 44 * v2);
  v92 = (char *)v91 + v1[14];
  *v91 = 45;
  *(void *)v92 = "fused_vertical_accuracy";
  *((void *)v92 + 1) = 23;
  v92[16] = 2;
  v8();
  v93 = (void *)(v116 + v3 + 45 * v2);
  v94 = (char *)v93 + v1[14];
  *v93 = 46;
  *(void *)v94 = "satellite_visibility_report";
  *((void *)v94 + 1) = 27;
  v94[16] = 2;
  v8();
  v95 = (void *)(v116 + v3 + 46 * v2);
  v96 = (char *)v95 + v1[14];
  *v95 = 47;
  *(void *)v96 = "gnss_content";
  *((void *)v96 + 1) = 12;
  v96[16] = 2;
  v8();
  v97 = (void *)(v116 + v3 + 47 * v2);
  v98 = (char *)v97 + v1[14];
  *v97 = 48;
  *(void *)v98 = "raw_altitude";
  *((void *)v98 + 1) = 12;
  v98[16] = 2;
  v8();
  v99 = (void *)(v116 + v3 + 48 * v2);
  v100 = (char *)v99 + v1[14];
  *v99 = 49;
  *(void *)v100 = "estimated_position_context_state";
  *((void *)v100 + 1) = 32;
  v100[16] = 2;
  v8();
  v101 = (void *)(v116 + v3 + 49 * v2);
  v102 = (char *)v101 + v1[14];
  *v101 = 50;
  *(void *)v102 = "estimated_position_context_state_probability_indoor";
  *((void *)v102 + 1) = 51;
  v102[16] = 2;
  v8();
  v103 = (void *)(v116 + v3 + 50 * v2);
  v104 = (char *)v103 + v1[14];
  *v103 = 51;
  *(void *)v104 = "estimated_position_context_state_probability_outdoor";
  *((void *)v104 + 1) = 52;
  v104[16] = 2;
  v8();
  v105 = (void *)(v116 + v3 + 51 * v2);
  v106 = (char *)v105 + v1[14];
  *v105 = 52;
  *(void *)v106 = "map_matcher_type";
  *((void *)v106 + 1) = 16;
  v106[16] = 2;
  v8();
  v107 = (void *)(v116 + v3 + 52 * v2);
  v108 = (char *)v107 + v1[14];
  *v107 = 53;
  *(void *)v108 = "is_route_hints_triggered_map_matching";
  *((void *)v108 + 1) = 37;
  v108[16] = 2;
  v8();
  v109 = (void *)(v116 + v3 + 53 * v2);
  v110 = (char *)v109 + v1[14];
  *v109 = 54;
  *(void *)v110 = "loi_location_source_accuracy";
  *((void *)v110 + 1) = 28;
  v110[16] = 2;
  v8();
  v111 = (void *)(v116 + v3 + 54 * v2);
  v112 = (char *)v111 + v1[14];
  *v111 = 55;
  *(void *)v112 = "batched_location_fix_type";
  *((void *)v112 + 1) = 25;
  v112[16] = 2;
  v8();
  v113 = (void *)(v116 + v3 + 55 * v2);
  v114 = (char *)v113 + v1[14];
  *v113 = 56;
  *(void *)v114 = "is_wifi_fix_with_associated_ap";
  *((void *)v114 + 1) = 30;
  v114[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MQ_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MQ_NONE";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MQ_STRONG";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "MQ_AMBIGUOUS";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = -1;
  *(void *)unint64_t v6 = "UM_INVALID";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 0;
  *(void *)unint64_t v10 = "UM_UNKNOWN";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 1;
  *(void *)uint64_t v12 = "UM_DMA";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 2;
  *(void *)uint64_t v14 = "UM_EGM08";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "OD_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "OD_LOCAL";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "OD_REMOTE";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "GNSS_CONTENT_UNKNOWN";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "GNSS_CONTENT_NONE";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "GNSS_CONTENT_PRESENT";
  *(void *)(v11 + 8) = 20;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "PC_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PC_INDOOR";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "PC_OUTDOOR";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MM_TYPE_UNKNOWN";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MM_TYPE_VEHICLE";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MM_TYPE_PEDESTRIAN";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "MM_TYPE_BICYCLE";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "LOI_LOCATION_SOURCE_ACCURACY_UNKNOWN";
  *(void *)(v6 + 8) = 36;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "LOI_LOCATION_SOURCE_ACCURACY_LOW";
  *((void *)v10 + 1) = 32;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "LOI_LOCATION_SOURCE_ACCURACY_HIGH";
  *(void *)(v11 + 8) = 33;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "altitude";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "vertical_accuracy";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "undulation";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "undulation_model";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "location_type";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "active";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "speed";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "mach_continuous_time";
  *((void *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "mach_absolute_time";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "true_heading";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "when";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "where";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "speed";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "uncertainty";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v32;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Location._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Location._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_247109520;
  uint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)unint64_t v5 = "event_receipt_time";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "client";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "location";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "location_private";
  *((void *)v13 + 1) = 16;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "status";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "active";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "odometer";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "signal_quality";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "vehicle_speed";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "vehicle_heading";
  *((void *)v24 + 1) = 15;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "xtra_file_available";
  *((void *)v26 + 1) = 19;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "motion_detected";
  *((void *)v28 + 1) = 15;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "location_derived_speed";
  *((void *)v30 + 1) = 22;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "SQ_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "SQ_POOR";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "SQ_GOOD";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "MD_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "MD_YES";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "MD_NO";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "locations";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "locations_private";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "gnss_mode_of_operation";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "active_gnss_session";
  *(void *)(v10 + 8) = 19;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "rhythmic_mode";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "current_modes_of_operation";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "has_subscribed_rhythmic_client";
  *(void *)(v15 + 8) = 30;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v36;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_24710FE10;
  uint64_t v4 = v36 + v3;
  unint64_t v5 = v36 + v3 + v1[14];
  *(void *)(v36 + v3) = 1;
  *(void *)unint64_t v5 = "type";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v36 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "confidence";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v36 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "mounted_state";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v36 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "mounted_confidence";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v36 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "is_standing";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v36 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "tilt";
  *((void *)v17 + 1) = 4;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v36 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "timestamp_DEPRECATED";
  *((void *)v19 + 1) = 20;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v36 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "is_vehicle_connected";
  *((void *)v21 + 1) = 20;
  v21[16] = 2;
  v8();
  unsigned int v22 = v36 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "exit_state";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v36 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "est_exit_time";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v36 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "start_time_DEPRECATED";
  *((void *)v26 + 1) = 21;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v36 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "raw_type";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v36 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "raw_confidence";
  *((void *)v30 + 1) = 14;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v36 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "timestamp";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v36 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "start_time";
  *((void *)v34 + 1) = 10;
  v34[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "MO_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "MO_NOT_MOUNTED";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "MO_MOUNTED";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "C_UNKNOWN";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "C_LOW";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "C_MEDIUM";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "C_HIGH";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "VE_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "VE_NO_DETECTION";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "VE_PREHEAT";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "VE_DETECTED";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "client";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "activity";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "activity_type";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "start_time_DEPRECATED";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "start_time";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "predicted_workout_type";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "session_id";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "overview_id";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "workout_type";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "workout_location_type";
  *((void *)v14 + 1) = 21;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "workout_mode";
  *(void *)(v15 + 8) = 12;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  char *v98;
  void *v99;
  char *v100;
  void *v101;
  char *v102;
  void *v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;
  char *v108;
  void *v109;
  char *v110;
  void *v111;
  char *v112;
  void *v113;
  char *v114;
  void *v115;
  char *v116;
  void *v117;
  char *v118;
  void *v119;
  char *v120;
  void *v121;
  char *v122;
  void *v123;
  char *v124;
  void *v125;
  char *v126;
  void *v127;
  char *v128;
  void *v129;
  char *v130;
  unint64_t v131;
  void *v132;
  char *v133;
  void *v134;
  char *v135;
  uint64_t v137;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v137 = swift_allocObject();
  *(_OWORD *)(v137 + 16) = xmmword_24710FE40;
  uint64_t v4 = v137 + v3;
  unint64_t v5 = v137 + v3 + v1[14];
  *(void *)(v137 + v3) = 0;
  *(void *)unint64_t v5 = "WT_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 19;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v137 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "WT_NoWorkout";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v137 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "WT_Walking";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v137 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "WT_Running";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v137 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "WT_Cycling";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v137 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "WT_OutdoorCycling";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v137 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "WT_IndoorCycling";
  *((void *)v19 + 1) = 16;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v137 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "WT_Yoga";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  unsigned int v22 = v137 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "WT_Dancing";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v137 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "WT_CrossTraining";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v137 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "WT_Elliptical";
  *((void *)v26 + 1) = 13;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v137 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "WT_Climbing";
  *((void *)v28 + 1) = 11;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v137 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "WT_StairClimbing";
  *((void *)v30 + 1) = 16;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v137 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "WT_Rowing";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v137 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "WT_ResistanceTraining";
  *((void *)v34 + 1) = 21;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v137 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 15;
  *(void *)unint64_t v36 = "WT_GenericWorkout";
  *((void *)v36 + 1) = 17;
  v36[16] = 2;
  v8();
  unint64_t v37 = v137 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)unint64_t v37 = "WT_OutdoorWalking";
  *(void *)(v37 + 8) = 17;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v137 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 17;
  *(void *)uint64_t v39 = "WT_IndoorWalking";
  *((void *)v39 + 1) = 16;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v137 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 18;
  *(void *)uint64_t v41 = "WT_OutdoorRunning";
  *((void *)v41 + 1) = 17;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v137 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 19;
  *(void *)int v43 = "WT_IndoorRunning";
  *((void *)v43 + 1) = 16;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v137 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 20;
  *(void *)id v45 = "WT_Swimming";
  *((void *)v45 + 1) = 11;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v137 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 21;
  *(void *)uint64_t v47 = "WT_OutdoorWheelchairWalk";
  *((void *)v47 + 1) = 24;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v137 + v3 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 22;
  *(void *)long long v49 = "WT_OutdoorWheelchairRun";
  *((void *)v49 + 1) = 23;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v137 + v3 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 23;
  *(void *)id v51 = "WT_Calisthenics";
  *((void *)v51 + 1) = 15;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v137 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 24;
  *(void *)uint64_t v53 = "WT_DownhillSkiing";
  *((void *)v53 + 1) = 17;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v137 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 25;
  *(void *)uint64_t v55 = "WT_Hiking";
  *((void *)v55 + 1) = 9;
  v55[16] = 2;
  v8();
  v56 = (void *)(v137 + v3 + 26 * v2);
  Class v57 = (char *)v56 + v1[14];
  void *v56 = 26;
  *(void *)Class v57 = "WT_UndeterminedWorkout";
  *((void *)v57 + 1) = 22;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v137 + v3 + 27 * v2);
  v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 27;
  *(void *)v59 = "WT_Unknown";
  *((void *)v59 + 1) = 10;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v137 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 28;
  *(void *)uint64_t v61 = "WT_Golfing";
  *((void *)v61 + 1) = 10;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v137 + v3 + 29 * v2);
  v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 29;
  *(void *)v63 = "WT_FunctionalStrength";
  *((void *)v63 + 1) = 21;
  v63[16] = 2;
  v8();
  unint64_t v64 = (void *)(v137 + v3 + 30 * v2);
  unint64_t v65 = (char *)v64 + v1[14];
  *unint64_t v64 = 30;
  *(void *)unint64_t v65 = "WT_CoolDown";
  *((void *)v65 + 1) = 11;
  v65[16] = 2;
  v8();
  unint64_t v66 = (void *)(v137 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *unint64_t v66 = 31;
  *(void *)uint64_t v67 = "WT_CoreTraining";
  *((void *)v67 + 1) = 15;
  v67[16] = 2;
  v8();
  v68 = v137 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 32;
  *(void *)v68 = "WT_TaiChi";
  *(void *)(v68 + 8) = 9;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v137 + v3 + 33 * v2);
  Class v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 33;
  *(void *)Class v70 = "WT_Pilates";
  *((void *)v70 + 1) = 10;
  v70[16] = 2;
  v8();
  id v71 = (void *)(v137 + v3 + 34 * v2);
  uint64_t v72 = (char *)v71 + v1[14];
  *id v71 = 34;
  *(void *)uint64_t v72 = "WT_MultiSportTransition";
  *((void *)v72 + 1) = 23;
  v72[16] = 2;
  v8();
  v73 = (void *)(v137 + v3 + 35 * v2);
  v74 = (char *)v73 + v1[14];
  *v73 = 35;
  *(void *)v74 = "WT_Kickboxing";
  *((void *)v74 + 1) = 13;
  v74[16] = 2;
  v8();
  v75 = (void *)(v137 + v3 + 36 * v2);
  v76 = (char *)v75 + v1[14];
  *v75 = 36;
  *(void *)v76 = "WT_OutdoorRowing";
  *((void *)v76 + 1) = 16;
  v76[16] = 2;
  v8();
  v77 = (void *)(v137 + v3 + 37 * v2);
  v78 = (char *)v77 + v1[14];
  *v77 = 37;
  *(void *)v78 = "WT_CrossCountrySkiing";
  *((void *)v78 + 1) = 21;
  v78[16] = 2;
  v8();
  v79 = (void *)(v137 + v3 + 38 * v2);
  v80 = (char *)v79 + v1[14];
  *v79 = 38;
  *(void *)v80 = "WT_Snowboarding";
  *((void *)v80 + 1) = 15;
  v80[16] = 2;
  v8();
  v81 = (void *)(v137 + v3 + 39 * v2);
  v82 = (char *)v81 + v1[14];
  *v81 = 39;
  *(void *)v82 = "WT_PaddleSports";
  *((void *)v82 + 1) = 15;
  v82[16] = 2;
  v8();
  v83 = (void *)(v137 + v3 + 40 * v2);
  v84 = (char *)v83 + v1[14];
  *v83 = 40;
  *(void *)v84 = "WT_OutdoorSoccer";
  *((void *)v84 + 1) = 16;
  v84[16] = 2;
  v8();
  v85 = (void *)(v137 + v3 + 41 * v2);
  v86 = (char *)v85 + v1[14];
  *v85 = 41;
  *(void *)v86 = "WT_IndoorSoccer";
  *((void *)v86 + 1) = 15;
  v86[16] = 2;
  v8();
  v87 = (void *)(v137 + v3 + 42 * v2);
  v88 = (char *)v87 + v1[14];
  *v87 = 42;
  *(void *)v88 = "WT_AustralianFootball";
  *((void *)v88 + 1) = 21;
  v88[16] = 2;
  v8();
  v89 = (void *)(v137 + v3 + 43 * v2);
  v90 = (char *)v89 + v1[14];
  *v89 = 43;
  *(void *)v90 = "WT_AmericanFootball";
  *((void *)v90 + 1) = 19;
  v90[16] = 2;
  v8();
  v91 = (void *)(v137 + v3 + 44 * v2);
  v92 = (char *)v91 + v1[14];
  *v91 = 44;
  *(void *)v92 = "WT_DiscSports";
  *((void *)v92 + 1) = 13;
  v92[16] = 2;
  v8();
  v93 = (void *)(v137 + v3 + 45 * v2);
  v94 = (char *)v93 + v1[14];
  *v93 = 45;
  *(void *)v94 = "WT_Rugby";
  *((void *)v94 + 1) = 8;
  v94[16] = 2;
  v8();
  v95 = (void *)(v137 + v3 + 46 * v2);
  v96 = (char *)v95 + v1[14];
  *v95 = 46;
  *(void *)v96 = "WT_Lacrosse";
  *((void *)v96 + 1) = 11;
  v96[16] = 2;
  v8();
  v97 = (void *)(v137 + v3 + 47 * v2);
  v98 = (char *)v97 + v1[14];
  *v97 = 47;
  *(void *)v98 = "WT_OutdoorSkatingSports";
  *((void *)v98 + 1) = 23;
  v98[16] = 2;
  v8();
  v99 = (void *)(v137 + v3 + 48 * v2);
  v100 = (char *)v99 + v1[14];
  *v99 = 48;
  *(void *)v100 = "WT_IndoorSkatingSports";
  *((void *)v100 + 1) = 22;
  v100[16] = 2;
  v8();
  v101 = (void *)(v137 + v3 + 49 * v2);
  v102 = (char *)v101 + v1[14];
  *v101 = 49;
  *(void *)v102 = "WT_IndoorHockey";
  *((void *)v102 + 1) = 15;
  v102[16] = 2;
  v8();
  v103 = (void *)(v137 + v3 + 50 * v2);
  v104 = (char *)v103 + v1[14];
  *v103 = 50;
  *(void *)v104 = "WT_OutdoorHockey";
  *((void *)v104 + 1) = 16;
  v104[16] = 2;
  v8();
  v105 = (void *)(v137 + v3 + 51 * v2);
  v106 = (char *)v105 + v1[14];
  *v105 = 51;
  *(void *)v106 = "WT_Basketball";
  *((void *)v106 + 1) = 13;
  v106[16] = 2;
  v8();
  v107 = (void *)(v137 + v3 + 52 * v2);
  v108 = (char *)v107 + v1[14];
  *v107 = 52;
  *(void *)v108 = "WT_Tennis";
  *((void *)v108 + 1) = 9;
  v108[16] = 2;
  v8();
  v109 = (void *)(v137 + v3 + 53 * v2);
  v110 = (char *)v109 + v1[14];
  *v109 = 53;
  *(void *)v110 = "WT_Badminton";
  *((void *)v110 + 1) = 12;
  v110[16] = 2;
  v8();
  v111 = (void *)(v137 + v3 + 54 * v2);
  v112 = (char *)v111 + v1[14];
  *v111 = 54;
  *(void *)v112 = "WT_Racquetball";
  *((void *)v112 + 1) = 14;
  v112[16] = 2;
  v8();
  v113 = (void *)(v137 + v3 + 55 * v2);
  v114 = (char *)v113 + v1[14];
  *v113 = 55;
  *(void *)v114 = "WT_Pickleball";
  *((void *)v114 + 1) = 13;
  v114[16] = 2;
  v8();
  v115 = (void *)(v137 + v3 + 56 * v2);
  v116 = (char *)v115 + v1[14];
  *v115 = 56;
  *(void *)v116 = "WT_Volleyball";
  *((void *)v116 + 1) = 13;
  v116[16] = 2;
  v8();
  v117 = (void *)(v137 + v3 + 57 * v2);
  v118 = (char *)v117 + v1[14];
  *v117 = 57;
  *(void *)v118 = "WT_Squash";
  *((void *)v118 + 1) = 9;
  v118[16] = 2;
  v8();
  v119 = (void *)(v137 + v3 + 58 * v2);
  v120 = (char *)v119 + v1[14];
  *v119 = 58;
  *(void *)v120 = "WT_Handball";
  *((void *)v120 + 1) = 11;
  v120[16] = 2;
  v8();
  v121 = (void *)(v137 + v3 + 59 * v2);
  v122 = (char *)v121 + v1[14];
  *v121 = 59;
  *(void *)v122 = "WT_TrackAndField";
  *((void *)v122 + 1) = 16;
  v122[16] = 2;
  v8();
  v123 = (void *)(v137 + v3 + 60 * v2);
  v124 = (char *)v123 + v1[14];
  *v123 = 60;
  *(void *)v124 = "WT_Softball";
  *((void *)v124 + 1) = 11;
  v124[16] = 2;
  v8();
  v125 = (void *)(v137 + v3 + 61 * v2);
  v126 = (char *)v125 + v1[14];
  *v125 = 61;
  *(void *)v126 = "WT_Baseball";
  *((void *)v126 + 1) = 11;
  v126[16] = 2;
  v8();
  v127 = (void *)(v137 + v3 + 62 * v2);
  v128 = (char *)v127 + v1[14];
  *v127 = 62;
  *(void *)v128 = "WT_Cricket";
  *((void *)v128 + 1) = 10;
  v128[16] = 2;
  v8();
  v129 = (void *)(v137 + v3 + 63 * v2);
  v130 = (char *)v129 + v1[14];
  *v129 = 63;
  *(void *)v130 = "WT_TableTennis";
  *((void *)v130 + 1) = 14;
  v130[16] = 2;
  v8();
  v131 = v137 + v3 + (v2 << 6) + v1[14];
  *(void *)(v4 + (v2 << 6)) = 64;
  *(void *)v131 = "WT_JumpRope";
  *(void *)(v131 + 8) = 11;
  *(unsigned char *)(v131 + 16) = 2;
  v8();
  v132 = (void *)(v137 + v3 + 65 * v2);
  v133 = (char *)v132 + v1[14];
  *v132 = 65;
  *(void *)v133 = "WT_Boxing";
  *((void *)v133 + 1) = 9;
  v133[16] = 2;
  v8();
  v134 = (void *)(v137 + v3 + 66 * v2);
  v135 = (char *)v134 + v1[14];
  *v134 = 66;
  *(void *)v135 = "WT_StepTraining";
  *((void *)v135 + 1) = 15;
  v135[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "WLT_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "WLT_Unknown";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "WLT_Indoor";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "WLT_Outdoor";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "WLT_Tbd";
  *(void *)(v15 + 8) = 7;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "WM_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "WM_NORMAL";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "WM_TYPE_2";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "start_time";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "end_time";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "event_type";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "event_time";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "workout_settings";
  *(void *)(v14 + 8) = 16;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v43;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_24710FE50;
  uint64_t v4 = v43 + v3;
  unint64_t v5 = v43 + v3 + v1[14];
  *(void *)(v43 + v3) = 0;
  *(void *)unint64_t v5 = "ET_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 19;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v43 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "ET_WorkoutDidStart";
  *(void *)(v9 + 8) = 18;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v43 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "ET_WorkoutDidStop";
  *((void *)v11 + 1) = 17;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v43 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "ET_WorkoutWillPause";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v43 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "ET_WorkoutWillResume";
  *((void *)v15 + 1) = 20;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v43 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "ET_WorkoutSuggestedStop";
  *((void *)v17 + 1) = 23;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v43 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "ET_WorkoutPredictionStartDidMute";
  *((void *)v19 + 1) = 32;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v43 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "ET_WorkoutLocationUpdate";
  *((void *)v21 + 1) = 24;
  v21[16] = 2;
  v8();
  unsigned int v22 = v43 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "ET_WorkoutPredictedWorkoutDetected";
  *(void *)(v22 + 8) = 34;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v43 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "ET_WorkoutPredictedWorkoutLabelUpdate";
  *((void *)v24 + 1) = 37;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v43 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "ET_WorkoutPredictedWorkoutEnded";
  *((void *)v26 + 1) = 31;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v43 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "ET_WorkoutShouldAlertUserForPredictedWorkout";
  *((void *)v28 + 1) = 44;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v43 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "ET_WorkoutRetractStopAlert";
  *((void *)v30 + 1) = 26;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v43 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "ET_WorkoutSessionDidBegin";
  *((void *)v32 + 1) = 25;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v43 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "ET_WorkoutSessionDidSetCurrentWorkoutType";
  *((void *)v34 + 1) = 41;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v43 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 15;
  *(void *)unint64_t v36 = "ET_WorkoutSessionDidEnd";
  *((void *)v36 + 1) = 23;
  v36[16] = 2;
  v8();
  unint64_t v37 = v43 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)unint64_t v37 = "ET_WorkoutSessionDidManuallyPause";
  *(void *)(v37 + 8) = 33;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v43 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 17;
  *(void *)uint64_t v39 = "ET_WorkoutSessionDidManuallyResume";
  *((void *)v39 + 1) = 34;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v43 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 18;
  *(void *)uint64_t v41 = "ET_WorkoutSessionDetectedChangeInWorkoutType";
  *((void *)v41 + 1) = 44;
  v41[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v28;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_247109540;
  uint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "gender";
  *(void *)(v5 + 8) = 6;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v28 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "height_m";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v28 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "weight_kg";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v28 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "vo2max";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v28 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "age";
  *((void *)v15 + 1) = 3;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v28 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "hrmin";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v28 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "hrmax";
  *((void *)v19 + 1) = 5;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v28 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "hronset";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  unsigned int v22 = v28 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "pal";
  *(void *)(v22 + 8) = 3;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v28 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "condition";
  *((void *)v24 + 1) = 9;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v28 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "run_vo2max";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "NG_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "NG_MALE";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "NG_FEMALE";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109510;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "UC_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "UC_ABLE_BODIED";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "UC_AMPUTATION";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "UC_SPINA_BIFIDA";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "UC_SPINAL_CORD_INJURY_HIGH";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "UC_SPINAL_CORD_INJURY_MID";
  *((void *)v18 + 1) = 25;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)int v20 = "UC_SPINAL_CORD_INJURY_LOW";
  *((void *)v20 + 1) = 25;
  unsigned char v20[16] = 2;
  v9();
  os_log_type_t v21 = (void *)(v5 + 7 * v2);
  unsigned int v22 = (char *)v21 + v1[14];
  void *v21 = 7;
  *(void *)unsigned int v22 = "UC_OTHER";
  *((void *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ground_altitude_above_wgs84_m";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ground_altitude_above_wgs84_unc_m";
  *((void *)v12 + 1) = 33;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "undulation_m";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "slope_in_direction_of_travel";
  *((void *)v16 + 1) = 28;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "max_abs_slope";
  *((void *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)int v20 = "client";
  *((void *)v20 + 1) = 6;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v34;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_247109560;
  uint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 1;
  *(void *)unint64_t v5 = "applicable_time";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "latitude_deg";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "longitude_deg";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "course_deg";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "course_unc_deg";
  *((void *)v15 + 1) = 14;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "road_width_m";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "start_latitude_deg";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "start_longitude_deg";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "road_length_m";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "speed_mps";
  *((void *)v24 + 1) = 9;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "is_one_way";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "is_rail_way";
  *((void *)v28 + 1) = 11;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "is_tunnel";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "is_bridge";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "applicable_time";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "search_point_latitude_deg";
  *(void *)(v9 + 8) = 25;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "search_point_longitude_deg";
  *((void *)v11 + 1) = 26;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "search_radius_m";
  *((void *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "is_close_to_tunnel";
  *((void *)v15 + 1) = 18;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "is_close_to_bridge";
  *((void *)v17 + 1) = 18;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "is_tunnel";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "is_bridge";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v36;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_24710FE10;
  uint64_t v4 = v36 + v3;
  unint64_t v5 = v36 + v3 + v1[14];
  *(void *)(v36 + v3) = 1;
  *(void *)unint64_t v5 = "applicable_time";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "latitude_deg";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "longitude_deg";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "horizontal_unc_m";
  *((void *)v13 + 1) = 16;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "altitude_m";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "vertical_unc_m";
  *((void *)v17 + 1) = 14;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "reference_frame";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "course_at_exit_deg";
  *((void *)v21 + 1) = 18;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "course_at_exit_unc_deg";
  *(void *)(v22 + 8) = 22;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "tunnel_width_at_exit_m";
  *((void *)v24 + 1) = 22;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "is_tunnel_curved";
  *((void *)v26 + 1) = 16;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "start_latitude_deg";
  *((void *)v28 + 1) = 18;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "start_longitude_deg";
  *((void *)v30 + 1) = 19;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "tunnel_length_m";
  *((void *)v32 + 1) = 15;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v4 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "end_point_distance_from_current_solution_m";
  *((void *)v34 + 1) = 42;
  v34[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "road_id";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "start_latitude_deg";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "start_longitude_deg";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "end_latitude_deg";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "end_longitude_deg";
  *(void *)(v15 + 8) = 17;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "applicable_time";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "route_type";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "step_type";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "route_hint_data";
  *(void *)(v15 + 8) = 15;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)uint64_t v4 = "RT_UNKNOWN";
  *(void *)(v4 + 8) = 10;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "RT_PEDESTRIAN";
  *(void *)(v8 + 8) = 13;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "RT_VEHICLE";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "RT_TRANSIT";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "RT_BICYCLE";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "RT_FERRY";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "RT_RIDESHARE";
  *((void *)v18 + 1) = 12;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "event_receipt_time";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "applicable_time";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "client";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "transmission_state";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "sample_count";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "time_offset_sec";
  *((void *)v17 + 1) = 15;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "speed_mps";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "slip_detected";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "sensor_type";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "TS_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "TS_PARK";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "TS_REVERSE";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "TS_DRIVE";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "TS_NEUTRAL";
  *(void *)(v15 + 8) = 10;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "ST_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "ST_COMBINED";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "previous";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "current";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "about_to_sleep";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "recently_woke";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "level";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "charged";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "connected";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "charger_type";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "was_connected";
  *((void *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "charger_family";
  *((void *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v32;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_247109520;
  uint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)unint64_t v5 = "event_receipt_time";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "client";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "notification_data";
  *((void *)v11 + 1) = 17;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "reachability";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "battery";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "airplane_mode";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "display_on";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "lock_screen";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "is_battery_saver_mode_enabled";
  *(void *)(v22 + 8) = 29;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "push_service_connected";
  *((void *)v24 + 1) = 22;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "wireless_modem_clients";
  *((void *)v26 + 1) = 22;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "thermal_level";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "restricted_mode";
  *((void *)v30 + 1) = 15;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  uint64_t v45;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  id v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_24710FE60;
  uint64_t v4 = v45 + v3;
  unint64_t v5 = v45 + v3 + v1[14];
  *(void *)(v45 + v3) = 0;
  *(void *)unint64_t v5 = "NT_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v45 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "NT_INIT";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v45 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "NT_SHUTDOWN";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v45 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "NT_SLEEP";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v45 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "NT_WAKE";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v45 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "NT_LINGER";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v45 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "NT_PENALTY_FREE";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v45 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "NT_REACHABILITY";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  unsigned int v22 = v45 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "NT_BATTERY";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v45 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "NT_AIRPLANE_MODE";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v45 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "NT_MIGRATION";
  *((void *)v26 + 1) = 12;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v45 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "NT_DISPLAY";
  *((void *)v28 + 1) = 10;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v45 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "NT_LOCKSCREEN";
  *((void *)v30 + 1) = 13;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v45 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "NT_PUSH_SERVICE";
  *((void *)v32 + 1) = 15;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v45 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "NT_WIRELESS_MODEM";
  *((void *)v34 + 1) = 17;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v45 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 15;
  *(void *)unint64_t v36 = "NT_THERMAL";
  *((void *)v36 + 1) = 10;
  v36[16] = 2;
  v8();
  unint64_t v37 = v45 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)unint64_t v37 = "NT_RESTRICTED_POWER_MODE";
  *(void *)(v37 + 8) = 24;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v45 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 17;
  *(void *)uint64_t v39 = "NT_BATTERY_SAVER_MODE";
  *((void *)v39 + 1) = 21;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v45 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 18;
  *(void *)uint64_t v41 = "NT_METRIC_HEARTBEAT";
  *((void *)v41 + 1) = 19;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v45 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 19;
  *(void *)int v43 = "NT_BOOT_AFTER_UNCLEAN_SHUTDOWN";
  *((void *)v43 + 1) = 30;
  v43[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "coarse_signal_environment";
  *(void *)(v10 + 8) = 25;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "high_resolution_signal_environment";
  *((void *)v12 + 1) = 34;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "client";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = -1;
  *(void *)unint64_t v5 = "SE_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 0;
  *(void *)size_t v9 = "SE_UNAVAILABLE";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 1;
  *(void *)uint64_t v11 = "SE_RURAL";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 2;
  *(void *)uint64_t v13 = "SE_URBAN";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 3;
  *(void *)uint64_t v15 = "SE_DENSE_URBAN";
  *((void *)v15 + 1) = 14;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 4;
  *(void *)uint64_t v17 = "SE_DENSE_URBAN_CANYON";
  *((void *)v17 + 1) = 21;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 5;
  *(void *)uint64_t v19 = "SE_MARINE";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 6;
  *(void *)os_log_type_t v21 = "SE_FOLIAGE";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "type";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "fidelity_level";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "x_uT";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "y_uT";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "z_uT";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "calibrated";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "lower_bound";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "upper_bound";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "accel_pose_x_high";
  *(void *)(v5 + 8) = 17;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "accel_var_xyz_low";
  *(void *)(v9 + 8) = 17;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "gyro_num_samples_sufficient";
  *((void *)v11 + 1) = 27;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "gyro_var_x_high";
  *((void *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "consecutive_requirement";
  *((void *)v15 + 1) = 23;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "is_vehicular_low_confidence";
  *((void *)v17 + 1) = 27;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "is_vehicular_high_confidence";
  *((void *)v19 + 1) = 28;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "consistent_steps_protection";
  *((void *)v21 + 1) = 27;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  uint64_t v53;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_24710FE70;
  uint64_t v4 = v53 + v3;
  unint64_t v5 = v53 + v3 + v1[14];
  *(void *)(v53 + v3) = 1;
  *(void *)unint64_t v5 = "timestamp";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v53 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "start_time";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v53 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "first_step_time";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v53 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "count";
  *((void *)v13 + 1) = 5;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v53 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "distance_m";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v53 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "raw_distance_m";
  *((void *)v17 + 1) = 14;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v53 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "floors_ascended";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v53 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "floors_descended";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  unsigned int v22 = v53 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "current_pace_spm";
  *(void *)(v22 + 8) = 16;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v53 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "current_cadence";
  *((void *)v24 + 1) = 15;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v53 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "active_time";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v53 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "record_id";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v53 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "source_id";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v53 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "is_odometer_distance";
  *((void *)v32 + 1) = 20;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v53 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "is_odometer_pace";
  *((void *)v34 + 1) = 16;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v53 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "accelerometer_pace";
  *((void *)v36 + 1) = 18;
  v36[16] = 2;
  v8();
  unint64_t v37 = v53 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)unint64_t v37 = "push_count";
  *(void *)(v37 + 8) = 10;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v53 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 18;
  *(void *)uint64_t v39 = "workout_type";
  *((void *)v39 + 1) = 12;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v53 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 19;
  *(void *)uint64_t v41 = "pedometer_arm_constrainted_state";
  *((void *)v41 + 1) = 32;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v53 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 20;
  *(void *)int v43 = "elevation_ascended_cm";
  *((void *)v43 + 1) = 21;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v53 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 21;
  *(void *)id v45 = "elevation_descended_cm";
  *((void *)v45 + 1) = 22;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v53 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 22;
  *(void *)uint64_t v47 = "false_steps_suppressed";
  *((void *)v47 + 1) = 22;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v53 + v3 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 23;
  *(void *)long long v49 = "distance_source";
  *((void *)v49 + 1) = 15;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v53 + v3 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 24;
  *(void *)id v51 = "false_step_detector_state";
  *((void *)v51 + 1) = 25;
  v51[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "DS_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "DS_GPS";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "DS_ENERGY_BASED_CALIBRATED";
  *((void *)v12 + 1) = 26;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "DS_ENERGY_BASED_UNCALIBRATED";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "DS_CADENCE_BASED_CALIBRATED";
  *((void *)v16 + 1) = 27;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "DS_CADENCE_BASED_UNCALIBRATED";
  *((void *)v18 + 1) = 29;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "x";
  *(void *)(v6 + 8) = 1;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "y";
  *((void *)v10 + 1) = 1;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "z";
  *(void *)(v11 + 8) = 1;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "w";
  *(void *)(v6 + 8) = 1;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "x";
  *(void *)(v10 + 8) = 1;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "y";
  *((void *)v12 + 1) = 1;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "z";
  *((void *)v14 + 1) = 1;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v28;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_247109540;
  uint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "magnetic_field";
  *(void *)(v5 + 8) = 14;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "unassisted_magnetic_field";
  *(void *)(v9 + 8) = 25;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "magnetic_heading";
  *((void *)v11 + 1) = 16;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "true_heading";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "accuracy";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "calibration_level";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "using_database_bias";
  *((void *)v19 + 1) = 19;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "magnitude";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "inclination";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "horizontal";
  *((void *)v24 + 1) = 10;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "quaternion";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "compass";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "compass_cal_quality";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "gyro_magnitude";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "is_location_available";
  *(void *)(v15 + 8) = 21;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "quaternion";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "user_acceleration";
  *(void *)(v9 + 8) = 17;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "rotation_rate";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "magnetic_field";
  *((void *)v13 + 1) = 14;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "magnetic_field_calibration_level";
  *((void *)v15 + 1) = 32;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "doing_yaw_correction";
  *((void *)v17 + 1) = 20;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "doing_bias_estimation";
  *((void *)v19 + 1) = 21;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "is_initialized";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "heading";
  *(void *)(v22 + 8) = 7;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "timestamp";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "device_motion";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "fsync";
  *((void *)v11 + 1) = 5;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "client_id";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "mode";
  *((void *)v15 + 1) = 4;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "status";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "accuracy";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "vision_compass_bias";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "x";
  *(void *)(v5 + 8) = 1;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "y";
  *(void *)(v9 + 8) = 1;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "z";
  *((void *)v11 + 1) = 1;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "magnitude";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "horizontal";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "declination";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "inclination";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "timestamp";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_247108600;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "mac";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "ssid";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "rssi_db";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "mode";
  *((void *)v13 + 1) = 4;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "channel";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "age_s";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "is_apple_personal_hotspot";
  *((void *)v19 + 1) = 25;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v26 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "is_moving";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  unsigned int v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "band";
  *(void *)(v22 + 8) = 4;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "frequency_khz";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "is_associated";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "ap";
  *((void *)v10 + 1) = 2;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "scan_timestamp";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "access_point";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v28;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_247109540;
  uint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "event_receipt_time";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "client";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "scan_type";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "power";
  *((void *)v15 + 1) = 5;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "associated_state";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "scan";
  *((void *)v19 + 1) = 4;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "simulated";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "available";
  *(void *)(v22 + 8) = 9;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "is_involuntary_link_down";
  *((void *)v24 + 1) = 24;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "is_ap_awake";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "state";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "state_probability";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "measurement_source";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "GA_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "GA_UNKNOWN";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "GA_LOW";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "GA_HIGH";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MS_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MS_AMBIENT_LIGHT";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MS_PROXIMITY";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "MS_FUSED_MULTIPLE";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "latitude_deg";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "longitude_deg";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "coordinates";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "base_height_above_ground_m";
  *(void *)(v9 + 8) = 26;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "height_above_base_m";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "has_terrain_elevation";
  *((void *)v13 + 1) = 21;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "terrain_elevation_m";
  *((void *)v15 + 1) = 19;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "min_base_height_m";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "max_base_height_m";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "top_height_m";
  *((void *)v21 + 1) = 12;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "sections";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "building_hash";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "building_id";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "receipt_time";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "buildings";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "building_hashes_in_previous_query_but_not_current_query";
  *((void *)v12 + 1) = 55;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "query_location_coordinate";
  *((void *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "branch_coordinates";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "branch_type";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "branch_number";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "branch_width_mm";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "branch_length_mm";
  *(void *)(v15 + 8) = 16;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "BranchType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "BranchType_UNKNOWN";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "BranchType_LEAFY";
  *((void *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "BranchType_NON_LEAFY";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "north_latitude_deg";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "west_longitude_deg";
  *(void *)(v9 + 8) = 18;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "south_latitude_deg";
  *((void *)v11 + 1) = 18;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "east_longitude_deg";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "vertex";
  *(void *)(v14 + 8) = 6;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "bounding_box";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "branches";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "tree_id";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "tree_type";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "reliability_score_DEPRECATED";
  *((void *)v16 + 1) = 28;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "tree_features";
  *((void *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)int v20 = "branch_count";
  *((void *)v20 + 1) = 12;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "TreeType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "TreeType_UNKNOWN";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "TreeType_STANDARD_ACACIA";
  *((void *)v12 + 1) = 24;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "TreeType_NONSTANDARD_ACACIA";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "has_branch_widths";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "has_branch_lengths";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "receipt_time";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "trees";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "contains_branch_geometry";
  *(void *)(v11 + 8) = 24;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "wrist_orientation";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "crown_orientation";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "WatchOrientationType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 37;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "WatchOrientationType_Unknown";
  *(void *)(v10 + 8) = 28;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "WatchOrientationType_Left";
  *((void *)v12 + 1) = 25;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "WatchOrientationType_Right";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "applicable_time";
  *(void *)(v4 + 8) = 15;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50728];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "on_wrist";
  *(void *)(v8 + 8) = 8;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "on_wrist_sensor";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "on_wrist_confidence";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "is_on_charger";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "is_forced_on_wrist_enabled";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "is_wrist_detection_enabled";
  *((void *)v18 + 1) = 26;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "WristStateType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 31;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "WristStateType_Unknown";
  *(void *)(v10 + 8) = 22;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "WristStateType_On";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "WristStateType_Off";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "WristStateConfidenceType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 41;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "WristStateConfidenceType_None";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "WristStateConfidenceType_Low";
  *((void *)v12 + 1) = 28;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "WristStateConfidenceType_High";
  *((void *)v14 + 1) = 29;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "client";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "watch_orientation";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "wrist_state";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "user_specific_place_type";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "place_type";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "preferred_name";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "loi_uuid_identifier";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "USPT_UNKNOWN";
  *(void *)(v5 + 8) = 12;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "USPT_HOME";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "USPT_WORK";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "USPT_SCHOOL";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "USPT_GYM";
  *(void *)(v14 + 8) = 8;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "PIPT_AREA_OF_INTEREST";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PIPT_POINT_OF_INTEREST";
  *((void *)v10 + 1) = 22;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "PIPT_ADDRESS";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "receipt_time";
  *(void *)(v4 + 8) = 12;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50728];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "arrival_time";
  *(void *)(v8 + 8) = 12;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "departure_time";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "detection_time";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "place_inference";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "coordinate";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "horizontal_accuracy_m";
  *((void *)v18 + 1) = 21;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "start_time_cfat_sec";
  *(void *)(v5 + 8) = 19;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "mct_timestamp_sec";
  *(void *)(v9 + 8) = 17;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "confidence";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "estimated_state_probability_outdoor";
  *((void *)v15 + 1) = 35;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "daylight_confidence";
  *((void *)v17 + 1) = 19;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "is_astronomical_daytime";
  *((void *)v19 + 1) = 23;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "current_lux";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_24710FE90;
  uint64_t v4 = v39 + v3;
  unint64_t v5 = v39 + v3 + v1[14];
  *(void *)(v39 + v3) = 1;
  *(void *)unint64_t v5 = "cf_absolute_timestamp_sec";
  *(void *)(v5 + 8) = 25;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "mach_continuous_timestamp_sec";
  *(void *)(v9 + 8) = 29;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "sample_interval_sec";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "d_pos_x_m";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "d_pos_Y_m";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "d_pos_z_m";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "d_vel_x_mps";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "d_vel_y_mps";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "d_vel_z_mps";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "q_x";
  *((void *)v24 + 1) = 3;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "q_y";
  *((void *)v26 + 1) = 3;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "q_z";
  *((void *)v28 + 1) = 3;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "q_w";
  *((void *)v30 + 1) = 3;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "reference_frame";
  *((void *)v32 + 1) = 15;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v4 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "is_delta_position_valid";
  *((void *)v34 + 1) = 23;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v4 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "is_delta_velocity_valid";
  *((void *)v36 + 1) = 23;
  v36[16] = 2;
  v8();
  unint64_t v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)unint64_t v37 = "is_attitude_valid";
  *(void *)(v37 + 8) = 17;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "RF_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "RF_X_ARBITRARY_Z_VERTICAL";
  *((void *)v10 + 1) = 25;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "RF_X_TRUE_NORTH_Z_VERTICAL";
  *(void *)(v11 + 8) = 26;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v41;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionMethod._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionMethod._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_24711E360;
  uint64_t v4 = v41 + v3;
  unint64_t v5 = v41 + v3 + v1[14];
  *(void *)(v41 + v3) = 0;
  *(void *)unint64_t v5 = "PositionMethod_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 31;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v41 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "PositionMethod_kNoPosition";
  *(void *)(v9 + 8) = 26;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v41 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "PositionMethod_kAgps_SetAssisted";
  *((void *)v11 + 1) = 32;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v41 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "PositionMethod_kAgps_SetBased";
  *((void *)v13 + 1) = 29;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v41 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "PositionMethod_kAgps_SetAssistedPreferred";
  *((void *)v15 + 1) = 41;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v41 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "PositionMethod_kAgps_SetBasedPreferred";
  *((void *)v17 + 1) = 38;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v41 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "PositionMethod_kAGnss_SetAssisted";
  *((void *)v19 + 1) = 33;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v41 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "PositionMethod_kAGnss_SetBased";
  *((void *)v21 + 1) = 30;
  v21[16] = 2;
  v8();
  unsigned int v22 = v41 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "PositionMethod_kAGnss_SetAssistedPreferred";
  *(void *)(v22 + 8) = 42;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v41 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "PositionMethod_kAGnss_SetBasedPreferred";
  *((void *)v24 + 1) = 39;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v41 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "PositionMethod_kAutonomousGps";
  *((void *)v26 + 1) = 29;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v41 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "PositionMethod_kAutonomousGnss";
  *((void *)v28 + 1) = 30;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v41 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "PositionMethod_kAflt";
  *((void *)v30 + 1) = 20;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v41 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "PositionMethod_kEcid";
  *((void *)v32 + 1) = 20;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v41 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "PositionMethod_kEotd";
  *((void *)v34 + 1) = 20;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v41 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 15;
  *(void *)unint64_t v36 = "PositionMethod_kOtdoa";
  *((void *)v36 + 1) = 21;
  v36[16] = 2;
  v8();
  unint64_t v37 = v41 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)unint64_t v37 = "PositionMethod_kHistoricalDataRetrieval";
  *(void *)(v37 + 8) = 39;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v41 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 17;
  *(void *)uint64_t v39 = "PositionMethod_kSessionInfoQuery";
  *((void *)v39 + 1) = 32;
  v39[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionReqType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionReqType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109510;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PositionReqType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 32;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "PositionReqType_kUnknown";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "PositionReqType_kCpSingleshot";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "PositionReqType_kCpPeriodic";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "PositionReqType_kSuplPosSingleShot";
  *((void *)v16 + 1) = 34;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "PositionReqType_kSuplPosPeriodic";
  *((void *)v18 + 1) = 32;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)int v20 = "PositionReqType_kSuplTriggerPeriodic";
  *((void *)v20 + 1) = 36;
  unsigned char v20[16] = 2;
  v9();
  os_log_type_t v21 = (void *)(v5 + 7 * v2);
  unsigned int v22 = (char *)v21 + v1[14];
  void *v21 = 7;
  *(void *)unsigned int v22 = "PositionReqType_kSuplTriggerAreaEvent";
  *((void *)v22 + 1) = 37;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionSession._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionSession._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PositionSession_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 32;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "PositionSession_kUnknown";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "PositionSession_kControlPlane";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "PositionSession_kUserPlane";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionProtocol._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionProtocol._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)uint64_t v4 = "PositionProtocol_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 33;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "PositionProtocol_kUnknown";
  *(void *)(v8 + 8) = 25;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "PositionProtocol_kRRLP";
  *((void *)v10 + 1) = 22;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "PositionProtocol_kRRC";
  *((void *)v12 + 1) = 21;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "PositionProtocol_kLPP";
  *((void *)v14 + 1) = 21;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "PositionProtocol_kCdma";
  *((void *)v16 + 1) = 22;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "PositionProtocol_kNrLPP";
  *((void *)v18 + 1) = 23;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SessionErrorCode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SessionErrorCode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_24710FE90;
  uint64_t v4 = v39 + v3;
  unint64_t v5 = v39 + v3 + v1[14];
  *(void *)(v39 + v3) = 0;
  *(void *)unint64_t v5 = "SessionErrorCode_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 33;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "SessionErrorCode_kUnknown";
  *(void *)(v9 + 8) = 25;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "SessionErrorCode_kSuccess";
  *((void *)v11 + 1) = 25;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "SessionErrorCode_kUeAbort";
  *((void *)v13 + 1) = 25;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "SessionErrorCode_kNetworkAbort";
  *((void *)v15 + 1) = 30;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "SessionErrorCode_kSuplSocketErr";
  *((void *)v17 + 1) = 31;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "SessionErrorCode_kSuplInputErr";
  *((void *)v19 + 1) = 30;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "SessionErrorCode_kSuplSSLFailed";
  *((void *)v21 + 1) = 31;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "SessionErrorCode_kSuplConnReadFail";
  *(void *)(v22 + 8) = 34;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "SessionErrorCode_kSuplConnWriteFail";
  *((void *)v24 + 1) = 35;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "SessionErrorCode_kSuplSessionTimeout";
  *((void *)v26 + 1) = 36;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "SessionErrorCode_kNotEnoughSats";
  *((void *)v28 + 1) = 31;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "SessionErrorCode_kAssistanceDataMissing";
  *((void *)v30 + 1) = 39;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "SessionErrorCode_kMethodNotSupported";
  *((void *)v32 + 1) = 36;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v4 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "SessionErrorCode_kNotAccomplishedGpsTimingCell";
  *((void *)v34 + 1) = 46;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v4 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 15;
  *(void *)unint64_t v36 = "SessionErrorCode_kNotEnoughGanssSats";
  *((void *)v36 + 1) = 36;
  v36[16] = 2;
  v8();
  unint64_t v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)unint64_t v37 = "SessionErrorCode_kGanssAssistanceDataMissing";
  *(void *)(v37 + 8) = 44;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_TriggerType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_TriggerType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "TriggerType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "TriggerType_kUnknown";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "TriggerType_kPeriodic";
  *((void *)v12 + 1) = 21;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "TriggerType_kAreaEvent";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v70;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Status._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Status._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Class v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = xmmword_24711E370;
  uint64_t v4 = v70 + v3;
  unint64_t v5 = v70 + v3 + v1[14];
  *(void *)(v70 + v3) = 0;
  *(void *)unint64_t v5 = "Status_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 23;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "Status_kNone";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "Status_kSuplInitAccepted";
  *((void *)v11 + 1) = 24;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "Status_kConnSuccess";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "Status_kConnSocketErr";
  *((void *)v15 + 1) = 21;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "Status_kConnInputErr";
  *((void *)v17 + 1) = 20;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "Status_kConnSslFailed";
  *((void *)v19 + 1) = 21;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "Status_kReadSocketErr";
  *((void *)v21 + 1) = 21;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "Status_kReadInputErr";
  *(void *)(v22 + 8) = 20;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "Status_kWriteSocketErr";
  *((void *)v24 + 1) = 22;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "Status_kWriteInputErr";
  *((void *)v26 + 1) = 21;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "Status_kConnClose";
  *((void *)v28 + 1) = 17;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "Status_kConnCloseFailed";
  *((void *)v30 + 1) = 23;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "Status_kGetFdSocketErr";
  *((void *)v32 + 1) = 22;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v4 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "Status_kSuplPosInitSent";
  *((void *)v34 + 1) = 23;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v4 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 15;
  *(void *)unint64_t v36 = "Status_kNwAsstTimeReceived";
  *((void *)v36 + 1) = 26;
  v36[16] = 2;
  v8();
  unint64_t v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)unint64_t v37 = "Status_kNwAsstPositionReceived";
  *(void *)(v37 + 8) = 30;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v4 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 17;
  *(void *)uint64_t v39 = "Status_kNwAsstEphemerisReceived";
  *((void *)v39 + 1) = 31;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v4 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 18;
  *(void *)uint64_t v41 = "Status_kPositionRequestReceived";
  *((void *)v41 + 1) = 31;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v4 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 19;
  *(void *)int v43 = "Status_kPositionResponseSuccess";
  *((void *)v43 + 1) = 31;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v4 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 20;
  *(void *)id v45 = "Status_kPositionResponseUndefined";
  *((void *)v45 + 1) = 33;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v4 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 21;
  *(void *)uint64_t v47 = "Status_kPositionResponseNotEnoughSats";
  *((void *)v47 + 1) = 37;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v4 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 22;
  *(void *)long long v49 = "Status_kPositionResponseAssdataMissing";
  *((void *)v49 + 1) = 38;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v4 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 23;
  *(void *)id v51 = "Status_kPositionResponseMethodNotSupported";
  *((void *)v51 + 1) = 42;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v4 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 24;
  *(void *)uint64_t v53 = "Status_kMeasurementRequestReceived";
  *((void *)v53 + 1) = 34;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v4 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 25;
  *(void *)uint64_t v55 = "Status_kMeasurementResponseSuccess";
  *((void *)v55 + 1) = 34;
  v55[16] = 2;
  v8();
  v56 = (void *)(v4 + 26 * v2);
  Class v57 = (char *)v56 + v1[14];
  void *v56 = 26;
  *(void *)Class v57 = "Status_kMeasurementResponseUndefined";
  *((void *)v57 + 1) = 36;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v4 + 27 * v2);
  v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 27;
  *(void *)v59 = "Status_kMeasurementResponseNotEnoughSats";
  *((void *)v59 + 1) = 40;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v4 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 28;
  *(void *)uint64_t v61 = "Status_kMeasurementResponseAssdataMissing";
  *((void *)v61 + 1) = 41;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v4 + 29 * v2);
  v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 29;
  *(void *)v63 = "Status_kMeasurementResponseMethodNotSupported";
  *((void *)v63 + 1) = 45;
  v63[16] = 2;
  v8();
  unint64_t v64 = (void *)(v4 + 30 * v2);
  unint64_t v65 = (char *)v64 + v1[14];
  *unint64_t v64 = 30;
  *(void *)unint64_t v65 = "Status_kSuplEndSent";
  *((void *)v65 + 1) = 19;
  v65[16] = 2;
  v8();
  unint64_t v66 = (void *)(v4 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *unint64_t v66 = 31;
  *(void *)uint64_t v67 = "Status_kSuplEndReceived";
  *((void *)v67 + 1) = 23;
  v67[16] = 2;
  v8();
  v68 = v4 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 32;
  *(void *)v68 = "Status_kWlanMeasurementAborted";
  *(void *)(v68 + 8) = 30;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  uint64_t v53;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EndCause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EndCause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_24710FE70;
  uint64_t v4 = v53 + v3;
  unint64_t v5 = v53 + v3 + v1[14];
  *(void *)(v53 + v3) = 0;
  *(void *)unint64_t v5 = "EndCause_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 25;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "EndCause_kNone";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "EndCause_kUnspecified";
  *((void *)v11 + 1) = 21;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "EndCause_kSystemFailure";
  *((void *)v13 + 1) = 23;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "EndCause_kProtocolError";
  *((void *)v15 + 1) = 23;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "EndCause_kDataMissing";
  *((void *)v17 + 1) = 21;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "EndCause_kUnexpectedDataValue";
  *((void *)v19 + 1) = 29;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "EndCause_kPosMethodFailure";
  *((void *)v21 + 1) = 26;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "EndCause_kPosMethodMismatch";
  *(void *)(v22 + 8) = 27;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "EndCause_kPosProtocolMismatch";
  *((void *)v24 + 1) = 29;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "EndCause_kTargetSETnotReachable";
  *((void *)v26 + 1) = 31;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "EndCause_kVersionNotSupported";
  *((void *)v28 + 1) = 29;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "EndCause_kResourceShortage";
  *((void *)v30 + 1) = 26;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "EndCause_kInvalidSessionId";
  *((void *)v32 + 1) = 26;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v4 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "EndCause_kUnexpectedMessage";
  *((void *)v34 + 1) = 27;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v4 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 15;
  *(void *)unint64_t v36 = "EndCause_kNonProxyModeNotSupported";
  *((void *)v36 + 1) = 34;
  v36[16] = 2;
  v8();
  unint64_t v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)unint64_t v37 = "EndCause_kProxyModeNotSupported";
  *(void *)(v37 + 8) = 31;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v4 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 17;
  *(void *)uint64_t v39 = "EndCause_kPositioningNotPermitted";
  *((void *)v39 + 1) = 33;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v4 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 18;
  *(void *)uint64_t v41 = "EndCause_kAuthNetFailure";
  *((void *)v41 + 1) = 24;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v4 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 19;
  *(void *)int v43 = "EndCause_kAuthSuplinitFailure";
  *((void *)v43 + 1) = 29;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v4 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 20;
  *(void *)id v45 = "EndCause_kServiceNotSupported";
  *((void *)v45 + 1) = 29;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v4 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 21;
  *(void *)uint64_t v47 = "EndCause_kIncompatibleProtectionLevel";
  *((void *)v47 + 1) = 37;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v4 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 22;
  *(void *)long long v49 = "EndCause_kInsufficientInterval";
  *((void *)v49 + 1) = 30;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v4 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 23;
  *(void *)id v51 = "EndCause_kNoSUPLCoverage";
  *((void *)v51 + 1) = 24;
  v51[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ConnectionStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ConnectionStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "ConnectionStatus_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 33;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ConnectionStatus_kNone";
  *(void *)(v10 + 8) = 22;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "ConnectionStatus_kConnSuccess";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "ConnectionStatus_kSocketErr";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "ConnectionStatus_kInputErr";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "ConnectionStatus_kSslFailed";
  *((void *)v18 + 1) = 27;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)uint64_t v4 = "CellType_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 25;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "CellType_kUnavailable";
  *(void *)(v8 + 8) = 21;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "CellType_kGSM";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "CellType_kWCDMA";
  *((void *)v12 + 1) = 15;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "CellType_kCDMA";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "CellType_kHRPD";
  *((void *)v16 + 1) = 14;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "CellType_kLTE";
  *((void *)v18 + 1) = 13;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_FreqMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_FreqMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "FreqMode_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "FreqMode_kUnknown";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "FreqMode_kFDD";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "FreqMode_kTDD";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SLPAddressType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SLPAddressType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "SLPAddressType_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 31;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "SLPAddressType_kUnknown";
  *(void *)(v9 + 8) = 23;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "SLPAddressType_kIpV4";
  *((void *)v11 + 1) = 20;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "SLPAddressType_kIpV6";
  *((void *)v13 + 1) = 20;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "SLPAddressType_kFQDN";
  *(void *)(v14 + 8) = 20;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ErrorCodes._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ErrorCodes._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 0;
  *(void *)unint64_t v5 = "ErrorCodes_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 27;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "ErrorCodes_kSuccess";
  *(void *)(v9 + 8) = 19;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "ErrorCodes_kErrorUndefined";
  *((void *)v11 + 1) = 26;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "ErrorCodes_kErrorNotEnoughSats";
  *((void *)v13 + 1) = 30;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "ErrorCodes_kErrorAssdataMissing";
  *((void *)v15 + 1) = 31;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "ErrorCodes_kErrorMethodNotSupported";
  *((void *)v17 + 1) = 35;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "ErrorCodes_kErrorNotAccomplishedGpsTimingCell";
  *((void *)v19 + 1) = 45;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "ErrorCodes_kErrorNotEnoughGanssSats";
  *((void *)v21 + 1) = 35;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "ErrorCodes_kErrorGanssAssdataMissing";
  *(void *)(v22 + 8) = 36;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsModemState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsModemState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "ClsModemState_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 30;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ClsModemState_kUnknown";
  *(void *)(v10 + 8) = 22;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "ClsModemState_kClsCellDch";
  *((void *)v12 + 1) = 25;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "ClsModemState_kClsCellFach";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "ClsModemState_kClsInvalidState";
  *(void *)(v15 + 8) = 30;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SessionProtocol._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SessionProtocol._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2471085E0;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)uint64_t v4 = "SessionProtocol_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 32;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "SessionProtocol_kUnknown";
  *(void *)(v8 + 8) = 24;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "SessionProtocol_kSessionCplane";
  *((void *)v10 + 1) = 30;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "SessionProtocol_kSessionUplane";
  *((void *)v12 + 1) = 30;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "SessionProtocol_kSessionUser";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "SessionProtocol_kSessionModem";
  *((void *)v16 + 1) = 29;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PosProtocol._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PosProtocol._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)uint64_t v4 = "PosProtocol_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 28;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "PosProtocol_kUnknown";
  *(void *)(v8 + 8) = 20;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "PosProtocol_kRrlp";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "PosProtocol_kRrc";
  *((void *)v12 + 1) = 16;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "PosProtocol_kLpp";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "PosProtocol_kCdma";
  *((void *)v16 + 1) = 17;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "PosProtocol_kNrLpp";
  *((void *)v18 + 1) = 18;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MethodType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MethodType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MethodType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MethodType_kUnknown";
  *(void *)(v10 + 8) = 19;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MethodType_kMethodMsassisted";
  *((void *)v12 + 1) = 28;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "MethodType_kMethodMsbased";
  *((void *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "MethodType_kMethodStandalone";
  *(void *)(v15 + 8) = 28;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Environment._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Environment._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "Environment_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "Environment_kBadArea";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "Environment_kNotBadArea";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "Environment_kMixedArea";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "Environment_kEnvInvalid";
  *(void *)(v15 + 8) = 23;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AdditionalInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AdditionalInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "AdditionalInfo_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 31;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "AdditionalInfo_kOnlyReturnInfoRequested";
  *(void *)(v10 + 8) = 39;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "AdditionalInfo_kMayReturnAdditionalInfo";
  *((void *)v12 + 1) = 39;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "AdditionalInfo_kAdditionalInfoInvalid";
  *((void *)v14 + 1) = 37;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v21;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GnssId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GnssId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  os_log_type_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_247108630;
  uint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 0;
  *(void *)unint64_t v5 = "GnssId_kGnssInvalid";
  *(void *)(v5 + 8) = 19;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "GnssId_kGnssGps";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "GnssId_kGnssGalileo";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "GnssId_kGnssSbs";
  *((void *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 8;
  *(void *)uint64_t v15 = "GnssId_kGnssModGps";
  *((void *)v15 + 1) = 18;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 16;
  *(void *)uint64_t v17 = "GnssId_kGnssQzss";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 32;
  *(void *)uint64_t v19 = "GnssId_kGnssGlonass";
  *((void *)v19 + 1) = 19;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SupportedGADShapes._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SupportedGADShapes._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109510;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SupportedGADShapes_kSupportGadShapesNoLocation";
  *(void *)(v6 + 8) = 46;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SupportedGADShapes_kSupportGadShapesEllipsoidPoint";
  *(void *)(v10 + 8) = 50;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SupportedGADShapes_kSupportGadShapesPointUncertainCircle";
  *((void *)v12 + 1) = 56;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "SupportedGADShapes_kSupportGadShapesPointUncertainEllipse";
  *((void *)v14 + 1) = 57;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 8;
  *(void *)uint64_t v16 = "SupportedGADShapes_kSupportGadShapesPolygon";
  *((void *)v16 + 1) = 43;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 16;
  *(void *)uint64_t v18 = "SupportedGADShapes_kSupportGadShapesPointAltitude";
  *((void *)v18 + 1) = 49;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 32;
  *(void *)int v20 = "SupportedGADShapes_kSupportGadShapesPointAltitudeUncertainEllipsoid";
  *((void *)v20 + 1) = 67;
  unsigned char v20[16] = 2;
  v9();
  os_log_type_t v21 = (void *)(v5 + 7 * v2);
  unsigned int v22 = (char *)v21 + v1[14];
  void *v21 = 64;
  *(void *)unsigned int v22 = "SupportedGADShapes_kSupportGadShapesEllipsoidArc";
  *((void *)v22 + 1) = 48;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_FixType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_FixType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "FixType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "FixType_kUnknown";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "FixType_kFixType2d";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "FixType_kFixType3d";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsNetworkType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsNetworkType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2471085E0;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)uint64_t v4 = "ClsNetworkType_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 31;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "ClsNetworkType_kClsGeranNetwork";
  *(void *)(v8 + 8) = 31;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "ClsNetworkType_kClsUtranNetwork";
  *((void *)v10 + 1) = 31;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ClsNetworkType_kClsEutranNetwork";
  *((void *)v12 + 1) = 32;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "ClsNetworkType_kClsInvalidNetwork";
  *((void *)v14 + 1) = 33;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "ClsNetworkType_kClsCdmaNetwork";
  *((void *)v16 + 1) = 30;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v19;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GnssTimeId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GnssTimeId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2471085E0;
  uint64_t v4 = v19 + v3;
  unint64_t v5 = v19 + v3 + v1[14];
  *(void *)(v19 + v3) = 0;
  *(void *)unint64_t v5 = "GnssTimeId_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 27;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "GnssTimeId_kGnssTimeIdGps";
  *(void *)(v9 + 8) = 25;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "GnssTimeId_kGnssTimeIdQzss";
  *((void *)v11 + 1) = 26;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "GnssTimeId_kGnssTimeIdGlonass";
  *((void *)v13 + 1) = 29;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "GnssTimeId_kGnssTimeIdGalileo";
  *((void *)v15 + 1) = 29;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "GnssTimeId_kGnssTimeInvalid";
  *((void *)v17 + 1) = 27;
  v17[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ShapeType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ShapeType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 0;
  *(void *)unint64_t v5 = "ShapeType_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 26;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "ShapeType_kShapeTypeEllipsoidPoint";
  *(void *)(v9 + 8) = 34;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "ShapeType_kShapeTypePointUncertainCircle";
  *((void *)v11 + 1) = 40;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "ShapeType_kShapeTypePointUncertainEllipse";
  *((void *)v13 + 1) = 41;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "ShapeType_kShapeTypePolygon";
  *((void *)v15 + 1) = 27;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "ShapeType_kShapeTypePointAltitude";
  *((void *)v17 + 1) = 33;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "ShapeType_kShapeTypePointAltitudeUncertainEllipsoid";
  *((void *)v19 + 1) = 51;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "ShapeType_kShapeTypeEllipsoidArc";
  *((void *)v21 + 1) = 32;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "ShapeType_kShapeTypeNoLocation";
  *(void *)(v22 + 8) = 30;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_VelocityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_VelocityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "VelocityType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 29;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "VelocityType_kVelocityTypeHorizontalVelocity";
  *(void *)(v10 + 8) = 44;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "VelocityType_kVelocityTypeHorizontalWithVerticalVelocity";
  *((void *)v12 + 1) = 56;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "VelocityType_kVelocityTypeHorizontalVelocityWithUncertainty";
  *((void *)v14 + 1) = 59;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "VelocityType_kVelocityTypeHorizontalWithVerticalVelocityAndUncertainty";
  *((void *)v16 + 1) = 70;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "VelocityType_kVelocityTypeInvalid";
  *((void *)v18 + 1) = 33;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MultipathIndicator._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MultipathIndicator._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MultipathIndicator_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 35;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MultipathIndicator_kMultiPathNotMeasured";
  *(void *)(v10 + 8) = 40;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MultipathIndicator_kMultiPathLow";
  *((void *)v12 + 1) = 32;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "MultipathIndicator_kMultiPathMedium";
  *((void *)v14 + 1) = 35;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "MultipathIndicator_kMultiPathHigh";
  *((void *)v16 + 1) = 33;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "MultipathIndicator_kMultiPathInvalid";
  *((void *)v18 + 1) = 36;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)uint64_t v4 = "GanssId_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 24;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "GanssId_kGanssIdSbas";
  *(void *)(v8 + 8) = 20;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "GanssId_kGanssIdModernisedGps";
  *((void *)v10 + 1) = 29;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "GanssId_kGanssIdQzss";
  *((void *)v12 + 1) = 20;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "GanssId_kGanssIdGlonass";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "GanssId_kGanssIdGalileo";
  *((void *)v16 + 1) = 23;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "GanssId_kGanssIdInvalid";
  *((void *)v18 + 1) = 23;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MeasurementsResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MeasurementsResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MeasurementsResult_kMeasurementsResultNone";
  *(void *)(v6 + 8) = 42;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MeasurementsResult_kMeasurementsResultGps";
  *(void *)(v10 + 8) = 41;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MeasurementsResult_kMeasurementsResultGanss";
  *((void *)v12 + 1) = 43;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "MeasurementsResult_kMeasurementsResultError";
  *((void *)v14 + 1) = 43;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LcsGanssId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LcsGanssId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "LcsGanssId_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "LcsGanssId_kLcsGanssIdGalileo";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "LcsGanssId_kLcsGanssIdSbas";
  *((void *)v12 + 1) = 26;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "LcsGanssId_kLcsGanssIdModGps";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "LcsGanssId_kLcsGanssIdQzss";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "LcsGanssId_kLcsGanssIdGlonass";
  *((void *)v18 + 1) = 29;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)int v20 = "LcsGanssId_kLcsGanssIdInvalid";
  *((void *)v20 + 1) = 29;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AidMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AidMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_247108600;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 0;
  *(void *)unint64_t v5 = "AidMask_kAidmaskNone";
  *(void *)(v5 + 8) = 20;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "AidMask_kAidmaskAlmanac";
  *(void *)(v9 + 8) = 23;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "AidMask_kAidmaskUtcmodel";
  *((void *)v11 + 1) = 24;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "AidMask_kAidmaskIonosmodel";
  *((void *)v13 + 1) = 26;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 8;
  *(void *)uint64_t v15 = "AidMask_kAidmaskNavigation";
  *((void *)v15 + 1) = 26;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 16;
  *(void *)uint64_t v17 = "AidMask_kAidmaskDgpsCorrections";
  *((void *)v17 + 1) = 31;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 32;
  *(void *)uint64_t v19 = "AidMask_kAidmaskRefloc";
  *((void *)v19 + 1) = 22;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v26 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 64;
  *(void *)os_log_type_t v21 = "AidMask_kAidmaskReftime";
  *((void *)v21 + 1) = 23;
  v21[16] = 2;
  v8();
  unsigned int v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 128;
  *(void *)unsigned int v22 = "AidMask_kAidmaskAcqassistance";
  *(void *)(v22 + 8) = 29;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 256;
  *(void *)uint64_t v24 = "AidMask_kAidmaskTimeintegrity";
  *((void *)v24 + 1) = 29;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssCommonAidMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssCommonAidMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "GanssCommonAidMask_kNone";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "GanssCommonAidMask_kRefTime";
  *(void *)(v10 + 8) = 27;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "GanssCommonAidMask_kRefLocation";
  *((void *)v12 + 1) = 31;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "GanssCommonAidMask_kAddIonosModel";
  *((void *)v14 + 1) = 33;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssGenericAidMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssGenericAidMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_247108600;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 0;
  *(void *)unint64_t v5 = "GanssGenericAidMask_kNone";
  *(void *)(v5 + 8) = 25;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "GanssGenericAidMask_kRealTimeIntegrity";
  *(void *)(v9 + 8) = 38;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "GanssGenericAidMask_kAlmanac";
  *((void *)v11 + 1) = 28;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "GanssGenericAidMask_kNavigationModel";
  *((void *)v13 + 1) = 36;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 8;
  *(void *)uint64_t v15 = "GanssGenericAidMask_kRefMeasInfo";
  *((void *)v15 + 1) = 32;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 16;
  *(void *)uint64_t v17 = "GanssGenericAidMask_kUtcModel";
  *((void *)v17 + 1) = 29;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 32;
  *(void *)uint64_t v19 = "GanssGenericAidMask_kTimeModelGnss";
  *((void *)v19 + 1) = 34;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v26 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 64;
  *(void *)os_log_type_t v21 = "GanssGenericAidMask_kDataBitAssist";
  *((void *)v21 + 1) = 34;
  v21[16] = 2;
  v8();
  unsigned int v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 128;
  *(void *)unsigned int v22 = "GanssGenericAidMask_kAuxillaryInfo";
  *(void *)(v22 + 8) = 34;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 256;
  *(void *)uint64_t v24 = "GanssGenericAidMask_kAddAssistDataChoices";
  *((void *)v24 + 1) = 41;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssSignalIdMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssSignalIdMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "GanssSignalIdMask_kGanssSignalIdNone";
  *(void *)(v6 + 8) = 36;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "GanssSignalIdMask_kGanssSignalId1";
  *(void *)(v10 + 8) = 33;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "GanssSignalIdMask_kGanssSignalId2";
  *((void *)v12 + 1) = 33;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "GanssSignalIdMask_kGanssSignalId3";
  *((void *)v14 + 1) = 33;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AssistanceRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AssistanceRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "AssistanceRequest_kAssistanceRequestNone";
  *(void *)(v6 + 8) = 40;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "AssistanceRequest_kAssistanceRequestGps";
  *((void *)v10 + 1) = 39;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "AssistanceRequest_kAssistanceRequestGanss";
  *(void *)(v11 + 8) = 41;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_UtranSfnGpsUncertainty._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_UtranSfnGpsUncertainty._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "UtranSfnGpsUncertainty_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 39;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "UtranSfnGpsUncertainty_kUtranSfnGpsUncertaintyLessThan10ms";
  *(void *)(v10 + 8) = 58;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "UtranSfnGpsUncertainty_kUtranSfnGpsUncertaintyMoreThan10ms";
  *((void *)v12 + 1) = 58;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "UtranSfnGpsUncertainty_kUtranSfnGpsUncertaintyNotPresent";
  *((void *)v14 + 1) = 56;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsDopplerUncMpsExt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsDopplerUncMpsExt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)uint64_t v4 = "GpsDopplerUncMpsExt_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 36;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "GpsDopplerUncMpsExt_k60";
  *(void *)(v8 + 8) = 23;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "GpsDopplerUncMpsExt_k80";
  *((void *)v10 + 1) = 23;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "GpsDopplerUncMpsExt_k100";
  *((void *)v12 + 1) = 24;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "GpsDopplerUncMpsExt_k120";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "GpsDopplerUncMpsExt_kNoInfo";
  *((void *)v16 + 1) = 27;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "GpsDopplerUncMpsExt_kNotPresent";
  *((void *)v18 + 1) = 31;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MeasurementAndEstimateResponseType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MeasurementAndEstimateResponseType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MeasurementAndEstimateResponseType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 51;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MeasurementAndEstimateResponseType_kInvalid";
  *(void *)(v10 + 8) = 43;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MeasurementAndEstimateResponseType_kGpsMeasAvailable";
  *((void *)v12 + 1) = 52;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "MeasurementAndEstimateResponseType_kLocationEstimateAvailable";
  *((void *)v14 + 1) = 61;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AfltAction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AfltAction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "AfltAction_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "AfltAction_kInvalid";
  *(void *)(v10 + 8) = 19;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "AfltAction_kDoNotSend";
  *((void *)v12 + 1) = 21;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "AfltAction_kSend";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WlanMeasurementResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WlanMeasurementResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2471085E0;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)uint64_t v4 = "WlanMeasurementResult_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 38;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "WlanMeasurementResult_kUnknown";
  *(void *)(v8 + 8) = 30;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "WlanMeasurementResult_kSuccess";
  *((void *)v10 + 1) = 30;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "WlanMeasurementResult_kRequestInvalid";
  *((void *)v12 + 1) = 37;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "WlanMeasurementResult_kRequestTimeout";
  *((void *)v14 + 1) = 37;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "WlanMeasurementResult_kRequestFailed";
  *((void *)v16 + 1) = 36;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Configuration._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Configuration._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "helo_enabled";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "early_return_enabled";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "target_vertical_uncertainty_m";
  *(void *)(v11 + 8) = 29;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v43;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SummaryReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SummaryReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_24710FE50;
  uint64_t v4 = v43 + v3;
  unint64_t v5 = v43 + v3 + v1[14];
  *(void *)(v43 + v3) = 1;
  *(void *)unint64_t v5 = "latitude_degrees";
  *(void *)(v5 + 8) = 16;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v43 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "longitude_degrees";
  *(void *)(v9 + 8) = 17;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v43 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "altitude_meters";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v43 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "achieved_horizontal_uncertainty_meters";
  *((void *)v13 + 1) = 38;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v43 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "achieved_vertical_uncertainty_meters";
  *((void *)v15 + 1) = 36;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v43 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "ttff_seconds";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v43 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "technology_source";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v43 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "method_type";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  unsigned int v22 = v43 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "session_type";
  *(void *)(v22 + 8) = 12;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v43 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "protocol_type";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v43 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "requested_response_timeout_seconds";
  *((void *)v26 + 1) = 34;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v43 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "requested_horizontal_accuracy_meters";
  *((void *)v28 + 1) = 36;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v43 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "requested_vertical_accuracy_meters";
  *((void *)v30 + 1) = 34;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v43 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "pos_req_type";
  *((void *)v32 + 1) = 12;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v43 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "error_code";
  *((void *)v34 + 1) = 10;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v43 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "helo_enabled";
  *((void *)v36 + 1) = 12;
  v36[16] = 2;
  v8();
  unint64_t v37 = v43 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)unint64_t v37 = "helo_injected";
  *(void *)(v37 + 8) = 13;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v43 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 18;
  *(void *)uint64_t v39 = "assistance_used";
  *((void *)v39 + 1) = 15;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v43 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 19;
  *(void *)uint64_t v41 = "session_id";
  *((void *)v41 + 1) = 10;
  v41[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SuplConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SuplConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "supl_port";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "supl_server";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "enable_msa";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "enable_lpp_rel13_wlan_meas";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "supports_lpp_rel13_wlan_meas_type_rssi";
  *((void *)v16 + 1) = 38;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "supports_lpp_rel13_location_source";
  *((void *)v18 + 1) = 34;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LteCellInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LteCellInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_247108600;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "is_serving_cell";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "mcc";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "mnc";
  *((void *)v11 + 1) = 3;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "tac";
  *((void *)v13 + 1) = 3;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "cellid";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "pci";
  *((void *)v17 + 1) = 3;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "rsrp";
  *((void *)v19 + 1) = 4;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v26 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "rsrq";
  *((void *)v21 + 1) = 4;
  v21[16] = 2;
  v8();
  unsigned int v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "ta";
  *(void *)(v22 + 8) = 2;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "dlearfcn";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GsmCellInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GsmCellInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "is_serving_cell";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "mcc";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "mnc";
  *((void *)v11 + 1) = 3;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "lac";
  *((void *)v13 + 1) = 3;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "cellid";
  *(void *)(v14 + 8) = 6;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WcdmaCellInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WcdmaCellInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "is_serving_cell";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "mcc";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "mnc";
  *((void *)v11 + 1) = 3;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "lac";
  *((void *)v13 + 1) = 3;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "cellid";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "psc";
  *((void *)v17 + 1) = 3;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "freq_mode";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "dluarfcn";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LocationId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LocationId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "cell_type";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "lte_cell_info_vect";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "gsm_cell_info_vect";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "wcdma_cell_info_vect";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WlanMeasurementRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WlanMeasurementRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "response_time_seconds";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "is_rssi_requested";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WlanMeasurementElement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WlanMeasurementElement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "bssid";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "is_serving_flag_present";
  *(void *)(v10 + 8) = 23;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "serving_flag";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "ap_channel_frequency_number";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "rssi_dbm";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WlanMeasurementList._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WlanMeasurementList._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "result";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "meas";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_QoP._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_QoP._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "is_valid";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "horizontal_accuracy";
  *(void *)(v10 + 8) = 19;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "vertical_accuracy";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "max_location_age";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "delay";
  *(void *)(v15 + 8) = 5;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SLPAddress._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SLPAddress._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "is_valid";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "slp_address_type";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "f_qdn";
  *((void *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "_ipaddress";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Notification._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Notification._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "is_valid";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "emergency_call_location_present";
  *((void *)v10 + 1) = 31;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SuplInitVer2Extension._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SuplInitVer2Extension._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "e_slpaddress";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "trigger_type";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Init._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Init._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "pos_method";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "qop";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "slp_address";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "notification";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "supl_initv2_extension";
  *(void *)(v14 + 8) = 21;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SuplContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SuplContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "supl_port";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "supl_server";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "enable_msa";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "imsi";
  *((void *)v13 + 1) = 4;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "config";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "nsuuid";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "enable_lpp_rel13_wlan_meas";
  *((void *)v19 + 1) = 26;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "supports_lpp_rel13_wlan_meas_type_rssi";
  *((void *)v21 + 1) = 38;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "supports_lpp_rel13_location_source";
  *(void *)(v22 + 8) = 34;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v38;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SessionStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SessionStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  char v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_247109550;
  uint64_t v4 = v38 + v3;
  unint64_t v5 = v38 + v3 + v1[14];
  *(void *)(v38 + v3) = 1;
  *(void *)unint64_t v5 = "session_id";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "pos_method";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "status";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "end_cause";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "horz_accuracy_requested";
  *((void *)v15 + 1) = 23;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "lat";
  *((void *)v17 + 1) = 3;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "lon";
  *((void *)v19 + 1) = 3;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "alt";
  *((void *)v21 + 1) = 3;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "unc_semi_major";
  *(void *)(v22 + 8) = 14;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "unc_semi_minor";
  *((void *)v24 + 1) = 14;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "unc_alt";
  *((void *)v26 + 1) = 7;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "eph_provided";
  *((void *)v28 + 1) = 12;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "reference_time_provided";
  *((void *)v30 + 1) = 23;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "reference_location_provided";
  *((void *)v32 + 1) = 27;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v4 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "nw_ref_location";
  *((void *)v34 + 1) = 15;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v4 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "nw_ref_time";
  *((void *)v36 + 1) = 11;
  v36[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsGpsCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsGpsCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ms_part";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "ls_part";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsUtranCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsUtranCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "utran_gps_timing_cell_frames";
  *(void *)(v5 + 8) = 28;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "ref_cell_sfn";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "ref_cell_psc";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "round_trip_time";
  *((void *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "modem_state";
  *(void *)(v14 + 8) = 11;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Plmn._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Plmn._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "mcc";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "mnc";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "three_digit_mnc";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SessionInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SessionInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "session_protocol";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "pos_protocol";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "session_id";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_24710FE90;
  uint64_t v4 = v39 + v3;
  unint64_t v5 = v39 + v3 + v1[14];
  *(void *)(v39 + v3) = 1;
  *(void *)unint64_t v5 = "interval";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "method";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "response_time";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "horizontal_accuracy";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "velocity_requested";
  *((void *)v15 + 1) = 18;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "horizontal_confidence";
  *((void *)v17 + 1) = 21;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "vertical_accuracy";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "vertical_confidence";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "vertical_requested";
  *(void *)(v22 + 8) = 18;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "assistance_availability";
  *((void *)v24 + 1) = 23;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "requested_gnss";
  *((void *)v26 + 1) = 14;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "loc_cordinate_type_allowed";
  *((void *)v28 + 1) = 26;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "velocity_types";
  *((void *)v30 + 1) = 14;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "report_amount";
  *((void *)v32 + 1) = 13;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v4 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "pos_protocol";
  *((void *)v34 + 1) = 12;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v4 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "session_id";
  *((void *)v36 + 1) = 10;
  v36[16] = 2;
  v8();
  unint64_t v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)unint64_t v37 = "horizontal_accuracy_meters";
  *(void *)(v37 + 8) = 26;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_UtranGpsTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_UtranGpsTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ue_utran_cell_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "gps_umts_time_difference";
  *((void *)v10 + 1) = 24;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ref_frame_msb";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "gps_tow_subms";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ref_frame_msb";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "delta_tow";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "utran_time";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "geran_time_based";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "geran_time_assisted";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsTimeMeasuredParams._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsTimeMeasuredParams._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "gps_time_measured_type";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "gps_time_measured";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsTOD._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsTOD._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "gps_todmsec";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "gps_todfrac";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "gps_todunc";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LocationInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LocationInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "gps_tow";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "gps_week";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "gps_time_uncertainty";
  *((void *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "fix_type";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "gps_todpresent";
  *((void *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "gps_tod";
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_247109530;
  uint64_t v4 = v14 + v3 + v1[14];
  *(void *)(v14 + v3) = 1;
  *(void *)uint64_t v4 = "cell_info_present";
  *(void *)(v4 + 8) = 17;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50728];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v14 + v3 + v2 + v1[14];
  *(void *)(v14 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "lac";
  *(void *)(v8 + 8) = 3;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v14 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "cell_id";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v14 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "plmn";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_UtranGanssTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_UtranGanssTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "utran_timing_of_cell_frames";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ref_sfn";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ref_psc";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "cell_info";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GeranGanssTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GeranGanssTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ref_frame_msb";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "ref_frame_number";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "cell_info";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v28;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsEutranCell._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsEutranCell._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_247109540;
  uint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "physical_cell_id";
  *(void *)(v5 + 8) = 16;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "earfcn";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "sfn";
  *((void *)v11 + 1) = 3;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "cgi_info_present";
  *((void *)v13 + 1) = 16;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "plmn";
  *((void *)v15 + 1) = 4;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "eutran_cell_id";
  *((void *)v17 + 1) = 14;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "sec_from_frame_start";
  *((void *)v19 + 1) = 20;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "frac_sec_from_frame_start";
  *((void *)v21 + 1) = 25;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "frame_drift";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "ref_time_uncertainty";
  *((void *)v24 + 1) = 20;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "bs_align";
  *((void *)v26 + 1) = 8;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "utran_time";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "geran_time";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "eutran_time";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssTimeMeasuredParams._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssTimeMeasuredParams._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ganss_time_measured_type";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "ganss_time_measured";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssLocationInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssLocationInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "time_id";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ganss_tod";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ganss_tod_frac";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "ganss_tod_uncertainty";
  *((void *)v14 + 1) = 21;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "fix_type";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "reference_gnss";
  *((void *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EllipsoidPoint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EllipsoidPoint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "latitude";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "longitude";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PointUncertainCircle._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PointUncertainCircle._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "point";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "uncertain_radius";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PointUncertainEllipse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PointUncertainEllipse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "point";
  *(void *)(v5 + 8) = 5;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "semi_major_axis";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "semi_minor_axis";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "orientation_angle";
  *((void *)v13 + 1) = 17;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "confidence";
  *(void *)(v14 + 8) = 10;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "point";
  *(void *)(v4 + 8) = 5;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "altitude";
  *(void *)(v8 + 8) = 8;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "semi_major_axis";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "semi_minor_axis";
  *((void *)v12 + 1) = 15;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "orientation_angle";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "uncertain_altitude";
  *((void *)v16 + 1) = 18;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "confidence";
  *((void *)v18 + 1) = 10;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EllipsoidArc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EllipsoidArc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "point";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "inner_radius";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "uncertain_radius";
  *((void *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "offset_angle";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "included_angle";
  *((void *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "confidence";
  *((void *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PointAltitude._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PointAltitude._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "point";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "altitude";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Polygon._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Polygon._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "no_of_points";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "points";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ShapeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ShapeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109510;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "point_uncertain_circle";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "point_uncertain_ellipse";
  *(void *)(v10 + 8) = 23;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "point_altitude_uncertain_ellipsoid";
  *((void *)v12 + 1) = 34;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "ellipsoid_arc";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "ellipsoid_point";
  *((void *)v16 + 1) = 15;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "point_altitude";
  *((void *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)int v20 = "polygon";
  *((void *)v20 + 1) = 7;
  unsigned char v20[16] = 2;
  v9();
  os_log_type_t v21 = (void *)(v5 + 7 * v2);
  unsigned int v22 = (char *)v21 + v1[14];
  void *v21 = 8;
  *(void *)unsigned int v22 = "no_location";
  *((void *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LocEstimate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LocEstimate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "shape_type";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "shape";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_HorizontalVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_HorizontalVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "bearing";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "horizontal_speed";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_HorizWithVertVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_HorizWithVertVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "bearing";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "horizontal_speed";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "vertical_speed";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "vertical_speed_direction";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_HorizWithUncertaintyVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_HorizWithUncertaintyVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "bearing";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "horizontal_speed";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "uncertainty_speed";
  *(void *)(v11 + 8) = 17;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "bearing";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "horizontal_speed";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "vertical_speed";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "vertical_speed_direction";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "horiz_uncertainty_speed";
  *((void *)v16 + 1) = 23;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "vert_uncertainty_speed";
  *((void *)v18 + 1) = 22;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_VelocityInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_VelocityInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "_horizontal";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "_horiz_with_vert";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "_horiz_with_uncertainty";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "_horiz_with_vert_uncertainty";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_VelocityEstimate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_VelocityEstimate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "velocity_type";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "velocity";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "result";
  *(void *)(v5 + 8) = 6;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "response_type";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "session_info";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "location_info";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "ganss_location_info";
  *((void *)v15 + 1) = 19;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "loc_estimate";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "velocity_estimate";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "technology_source";
  *((void *)v21 + 1) = 17;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssMeasurementElement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssMeasurementElement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "doppler";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "satellite_id";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "cn_ratio";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "pseudo_range_rms_error";
  *((void *)v13 + 1) = 22;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "multi_path";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "code_phase";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "integer_code_phase";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "carrier_quality_ind";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "adr";
  *(void *)(v22 + 8) = 3;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssSignalMeasurementInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssSignalMeasurementInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "signal_id";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "code_phase_ambiguity";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "measurement_count";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "measurement";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ganss_id";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "signal_measurement_info";
  *((void *)v10 + 1) = 23;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssMeasurements._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssMeasurements._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "time_id";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "ganss_tod";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "ganss_tod_frac";
  *((void *)v11 + 1) = 14;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "tod_delta";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "ganss_tod_uncertainity";
  *((void *)v15 + 1) = 22;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "measured_time_params";
  *((void *)v17 + 1) = 20;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "ganss_measurements_count";
  *((void *)v19 + 1) = 24;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "ganss_measurement";
  *((void *)v21 + 1) = 17;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsMeasurementElement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsMeasurementElement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "doppler";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "whole_chips";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "frac_chips";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "satellite_id";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "cn_ratio";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "pseudo_range_rms_error";
  *((void *)v17 + 1) = 22;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "multi_path";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "code_phase";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "integer_code_phase";
  *(void *)(v22 + 8) = 18;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsMeasurements._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsMeasurements._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "gps_tow";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v24 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "gps_week";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v24 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "gps_time_uncertainty";
  *((void *)v11 + 1) = 20;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v24 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "nr_of_sats";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v24 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "measurements";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v24 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "measured_time_params";
  *((void *)v17 + 1) = 20;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v24 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "code_phase_ambiguity";
  *((void *)v19 + 1) = 20;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v24 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "gps_todpresent";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  unsigned int v22 = v24 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "gps_tod";
  *(void *)(v22 + 8) = 7;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MeasurementReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MeasurementReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "result";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "response_type";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "session_info";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "gps_measurements";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "ganss_measurements";
  *((void *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "more_ganss_measurements";
  *((void *)v18 + 1) = 23;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)int v20 = "is_meas_in_cdma_time";
  *((void *)v20 + 1) = 20;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsAssistanceRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsAssistanceRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "aid_mask";
  *(void *)(v4 + 8) = 8;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50728];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "g_week";
  *(void *)(v8 + 8) = 6;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "g_toe";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "num_of_sats";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "sat_id";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "iode";
  *((void *)v16 + 1) = 4;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "toe_limit";
  *((void *)v18 + 1) = 9;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssTimeModelElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssTimeModelElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ganss_to_ids";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "delta_t";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssDataBitAssist._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssDataBitAssist._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2471085E0;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "ganss_tod";
  *(void *)(v4 + 8) = 9;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50728];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "ganss_tod_frac";
  *(void *)(v8 + 8) = 14;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "ganss_signal_id";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "ganss_data_bit_interval_k";
  *((void *)v12 + 1) = 25;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "ganss_data_bit_no_of_sats";
  *((void *)v14 + 1) = 25;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "ganss_sat_id_info";
  *((void *)v16 + 1) = 17;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssStoredSatDataElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssStoredSatDataElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "ganss_sat_id";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "ganss_sat_iod";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssNavModelAddData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssNavModelAddData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "ganss_week_day";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ganss_toe";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ganss_ttoe_limit";
  *((void *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "ganss_sat_related_data_info_array_count";
  *((void *)v14 + 1) = 39;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "ganss_sat_related_data_info_array";
  *(void *)(v15 + 8) = 33;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssAddAssistDataChoices._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssAddAssistDataChoices._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "ganss_orbit_model_id";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ganss_clock_model_id";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ganss_utc_model_id";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "ganss_almanac_model_id";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssAidRequestPerGanss._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssAidRequestPerGanss._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "ganss_id";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ganss_generic_aid_mask";
  *(void *)(v10 + 8) = 22;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ganss_time_model_info_array_count";
  *((void *)v12 + 1) = 33;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "ganss_time_model_info_array";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "ganss_data_bit_assist";
  *((void *)v16 + 1) = 21;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "ganss_nav_model_add_data";
  *((void *)v18 + 1) = 24;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)int v20 = "ganss_add_assist_data_choices";
  *((void *)v20 + 1) = 29;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssAssistanceRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssAssistanceRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "ganss_common_aid_mask";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ganss_time_req_pref_info_array_count";
  *(void *)(v10 + 8) = 36;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ganss_time_req_pref_info_array";
  *((void *)v12 + 1) = 30;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "glonass_not_of_leap_sec_requested";
  *((void *)v14 + 1) = 33;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "ganss_add_ionos_model";
  *((void *)v16 + 1) = 21;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "ganss_aid_data_req_array_count";
  *((void *)v18 + 1) = 30;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)int v20 = "ganss_aid_data_req_array";
  *((void *)v20 + 1) = 24;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AssistanceNeededReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AssistanceNeededReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "result";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "response_type";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "session_info";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "assistance_request";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "ganss_assistance_request";
  *(void *)(v15 + 8) = 24;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EutranCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EutranCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "no_of_cells";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "eutran_cell_info";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsGeranCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsGeranCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "bsic";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "time_slot";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "bit_number";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "bcch_carrier";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "ref_frame";
  *((void *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "timing_advance";
  *((void *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)int v20 = "obit_number";
  *((void *)v20 + 1) = 11;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsTowCdmaCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsTowCdmaCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "int_part";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "frac_part";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CtsEutranCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CtsEutranCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "physical_cell_id";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "earfcn";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "sfnk";
  *(void *)(v11 + 8) = 4;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CtsCdmaCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CtsCdmaCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "cdma_tow";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "week_num";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "absolute_rms_acc";
  *(void *)(v11 + 8) = 16;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellTimeData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellTimeData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "eutran_time";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "cdma_time";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellTimeAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellTimeAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "cell_time_assistance_type";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "cell_time_data";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_TowAssist._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_TowAssist._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "tlm_msg";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "sat_id";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "anti_spoof";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "alert";
  *((void *)v14 + 1) = 5;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "tlm_reserved";
  *(void *)(v15 + 8) = 12;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsReferenceTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsReferenceTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "gps_tow";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "gps_week";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "gps_time_uncertainty";
  *((void *)v11 + 1) = 20;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "nr_of_sats";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "tow_assist";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "gps_week_cycle_number";
  *((void *)v17 + 1) = 21;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "session_protocol";
  *((void *)v19 + 1) = 16;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "pos_protocol";
  *((void *)v21 + 1) = 12;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "session_id";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v34;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ReferenceLocation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ReferenceLocation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_247109560;
  uint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 1;
  *(void *)unint64_t v5 = "shape_type";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "hemisphere";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "altitude";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "latitude";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "longitude";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "direction_of_alt";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "semi_major_uncert";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "semi_minor_uncert";
  *((void *)v21 + 1) = 17;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "major_axis";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "alt_uncert";
  *((void *)v24 + 1) = 10;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "confidence";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "session_protocol";
  *((void *)v28 + 1) = 16;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "pos_protocol";
  *((void *)v30 + 1) = 12;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "session_id";
  *((void *)v32 + 1) = 10;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v72;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsEphemeris._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsEphemeris._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_24711E380;
  uint64_t v4 = v72 + v3;
  unint64_t v5 = v72 + v3 + v1[14];
  *(void *)(v72 + v3) = 1;
  *(void *)unint64_t v5 = "ephem_af0";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "ephem_m0";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "ephem_e";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "ephem_apower_half";
  *((void *)v13 + 1) = 17;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "ephem_omega_a0";
  *((void *)v15 + 1) = 14;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "ephem_i0";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "ephem_w";
  *((void *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "ephem_omega_dot";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "ephem_iodc";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "ephem_toc";
  *((void *)v24 + 1) = 9;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "ephem_af1";
  *((void *)v26 + 1) = 9;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "ephem_crs";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "ephem_delta_n";
  *((void *)v30 + 1) = 13;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "ephem_cuc";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v4 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "ephem_cus";
  *((void *)v34 + 1) = 9;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v4 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "toe";
  *((void *)v36 + 1) = 3;
  v36[16] = 2;
  v8();
  unint64_t v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)unint64_t v37 = "ephem_cic";
  *(void *)(v37 + 8) = 9;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v4 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 18;
  *(void *)uint64_t v39 = "ephem_cis";
  *((void *)v39 + 1) = 9;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v4 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 19;
  *(void *)uint64_t v41 = "ephem_crc";
  *((void *)v41 + 1) = 9;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v4 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 20;
  *(void *)int v43 = "ephem_idot";
  *((void *)v43 + 1) = 10;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v4 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 21;
  *(void *)id v45 = "sat_id";
  *((void *)v45 + 1) = 6;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v4 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 22;
  *(void *)uint64_t v47 = "ephem_ura";
  *((void *)v47 + 1) = 9;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v4 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 23;
  *(void *)long long v49 = "ephem_sv_health";
  *((void *)v49 + 1) = 15;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v4 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 24;
  *(void *)id v51 = "ephem_af2";
  *((void *)v51 + 1) = 9;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v4 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 25;
  *(void *)uint64_t v53 = "sat_status";
  *((void *)v53 + 1) = 10;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v4 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 26;
  *(void *)uint64_t v55 = "ephem_code_on_l2";
  *((void *)v55 + 1) = 16;
  v55[16] = 2;
  v8();
  v56 = (void *)(v4 + 26 * v2);
  Class v57 = (char *)v56 + v1[14];
  void *v56 = 27;
  *(void *)Class v57 = "ephem_l2_pflag";
  *((void *)v57 + 1) = 14;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v4 + 27 * v2);
  v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 28;
  *(void *)v59 = "ephem_tgd";
  *((void *)v59 + 1) = 9;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v4 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 29;
  *(void *)uint64_t v61 = "ephem_fit_flag";
  *((void *)v61 + 1) = 14;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v4 + 29 * v2);
  v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 30;
  *(void *)v63 = "ephem_aodo";
  *((void *)v63 + 1) = 10;
  v63[16] = 2;
  v8();
  unint64_t v64 = (void *)(v4 + 30 * v2);
  unint64_t v65 = (char *)v64 + v1[14];
  *unint64_t v64 = 31;
  *(void *)unint64_t v65 = "reserved1";
  *((void *)v65 + 1) = 9;
  v65[16] = 2;
  v8();
  unint64_t v66 = (void *)(v4 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *unint64_t v66 = 32;
  *(void *)uint64_t v67 = "reserved2";
  *((void *)v67 + 1) = 9;
  v67[16] = 2;
  v8();
  v68 = v4 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 33;
  *(void *)v68 = "reserved3";
  *(void *)(v68 + 8) = 9;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v4 + 33 * v2);
  Class v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 34;
  *(void *)Class v70 = "reserved4";
  *((void *)v70 + 1) = 9;
  v70[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsNavigationModel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsNavigationModel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "nr_of_sats";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ephemeris";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "session_protocol";
  *((void *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "pos_protocol";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "session_id";
  *(void *)(v15 + 8) = 10;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CplaneContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CplaneContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "config";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "cdma_context";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EmergConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EmergConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "helo_enabled";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "imsi";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "cplane_config";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "supl_config";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v32;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsAcqElement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsAcqElement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_247109520;
  uint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)unint64_t v5 = "code_phase";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "doppler0";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "doppler1";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "doppler_uncer";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "int_code_phase";
  *((void *)v15 + 1) = 14;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "gps_bit_number";
  *((void *)v17 + 1) = 14;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "code_phase_search_window";
  *((void *)v19 + 1) = 24;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "azimuth";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "elevation";
  *(void *)(v22 + 8) = 9;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "sat_id";
  *((void *)v24 + 1) = 6;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "azimuth_lsb";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "elevation_lsb";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "doppler_uncer_ext";
  *((void *)v30 + 1) = 17;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsAcqAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsAcqAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "gps_tow";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "nr_of_sats";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "cell_time_assistance";
  *((void *)v11 + 1) = 20;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "acquisition";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "confidence";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "session_protocol";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "pos_protocol";
  *((void *)v19 + 1) = 12;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "session_id";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellFTAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellFTAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "result";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "network_type";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "cell_time";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_NetworkReferenceLocation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_NetworkReferenceLocation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  int v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_247108630;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "latitude_degrees";
  *(void *)(v4 + 8) = 16;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50728];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "longitude_degrees";
  *(void *)(v8 + 8) = 17;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "altitude_meters";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "ver_uncert_meters";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "horz_uncert_meters";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "horz_confidence";
  *((void *)v16 + 1) = 15;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "vert_confidence";
  *((void *)v18 + 1) = 15;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_NetworkReferenceTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_NetworkReferenceTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "gps_tow_seconds";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "gps_week";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "gps_time_uncertainty";
  *(void *)(v11 + 8) = 20;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Is801VelocityInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Is801VelocityInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "horz";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "heading";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "vertical";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Is801ClockInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Is801ClockInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "bias";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "drift";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Is801HeightInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Is801HeightInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "altitude";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "altitude_unc";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v30;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Is801LocationInd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Is801LocationInd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  os_log_type_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_24711E390;
  uint64_t v4 = v30 + v3;
  unint64_t v5 = v30 + v3 + v1[14];
  *(void *)(v30 + v3) = 1;
  *(void *)unint64_t v5 = "latitude";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "longitude";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "loc_unc_ang";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "loc_unc_a";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "loc_unc_p";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "fix_type";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "velocity_included";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "velocity";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "clock_included";
  *(void *)(v22 + 8) = 14;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "clock";
  *((void *)v24 + 1) = 5;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "altitude_included";
  *((void *)v26 + 1) = 17;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "altitude";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MeasurementReportWithEstimate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MeasurementReportWithEstimate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "result";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "response_type";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "session_info";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "gps_measurements";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "location_indication";
  *((void *)v16 + 1) = 19;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "aflt_action";
  *((void *)v18 + 1) = 11;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)int v20 = "is_meas_in_cdma_time";
  *((void *)v20 + 1) = 20;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Cdma1xContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Cdma1xContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "include1x_msb";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "optimize_gnss_meas_with1x_msb";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "optimize_aflt_meas_with1x_msb";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "use_cdma_time_for_meas";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Result._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Result._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_247108600;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 0;
  *(void *)unint64_t v5 = "RESULT_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 23;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "kSuccess";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "kAborted";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "kDropped";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "kInUse";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "kInvalidArgument";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "kPermissionDenied";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v26 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "kTimeout";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  unsigned int v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "kUnavailable";
  *(void *)(v22 + 8) = 12;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "kCompletedWithFailure";
  *((void *)v24 + 1) = 21;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_GnssContent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_GnssContent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2471085E0;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)uint64_t v4 = "GnssContent_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 28;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50718];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "GnssContent_kNone";
  *(void *)(v8 + 8) = 17;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "GnssContent_kSomeInsignificant";
  *((void *)v10 + 1) = 30;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "GnssContent_kSomeSignificant";
  *((void *)v12 + 1) = 28;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "GnssContent_kSufficientFor2DFix";
  *((void *)v14 + 1) = 31;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "GnssContent_kSufficientFor3DFix";
  *((void *)v16 + 1) = 31;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_EstimationTechnology._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_EstimationTechnology._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "EstimationTechnology_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 37;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "EstimationTechnology_kNotInitialized";
  *(void *)(v10 + 8) = 36;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "EstimationTechnology_kSingleShot";
  *((void *)v12 + 1) = 32;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "EstimationTechnology_kFiltered";
  *((void *)v14 + 1) = 30;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "EstimationTechnology_kFilteredIns";
  *(void *)(v15 + 8) = 33;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_TimeQuality._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_TimeQuality._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "TimeQuality_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "TimeQuality_kUnknown";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "TimeQuality_kTimeFromSyncCellNetwork";
  *((void *)v12 + 1) = 36;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "TimeQuality_kTimeFromAssistance";
  *((void *)v14 + 1) = 31;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "TimeQuality_kTimeFromPosition";
  *((void *)v16 + 1) = 29;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "TimeQuality_kTimeFromTOW";
  *((void *)v18 + 1) = 24;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)int v20 = "TimeQuality_kTimeFromTOWConfirmed";
  *((void *)v20 + 1) = 33;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_PositionAssistType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_PositionAssistType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PositionAssistType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 35;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "PositionAssistType_kNormalReference";
  *(void *)(v10 + 8) = 35;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "PositionAssistType_kNormalSuitableForTightCoupling";
  *((void *)v12 + 1) = 50;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "PositionAssistType_kTunnelExit";
  *((void *)v14 + 1) = 30;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_MotionActivityContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_MotionActivityContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_247108600;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 0;
  *(void *)unint64_t v5 = "MAC_kUnknown";
  *(void *)(v5 + 8) = 12;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "MAC_kRunning";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "MAC_kMoving";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "MAC_kWalking";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "MAC_kDriving";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "MAC_kCycling";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "MAC_kSwimming";
  *((void *)v19 + 1) = 13;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v26 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "MAC_kWheelchair";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  unsigned int v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "MAC_PROTOBUF_DEFAULT";
  *(void *)(v22 + 8) = 20;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "MAC_kAirborne";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_MovingState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_MovingState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MS_kUnknown";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MS_kFrozen";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MS_kNotMoving";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "MS_kMoving";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "MS_PROTOBUF_DEFAULT";
  *(void *)(v15 + 8) = 19;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Reliability._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Reliability._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "REL_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "REL_kNotSet";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 10;
  *(void *)uint64_t v12 = "REL_kVeryLow";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 25;
  *(void *)uint64_t v14 = "REL_kLow";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 50;
  *(void *)uint64_t v16 = "REL_kMedium";
  *((void *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 75;
  *(void *)uint64_t v18 = "REL_kHigh";
  *((void *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_DeviceMountState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_DeviceMountState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "DMS_kUnknown";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "DMS_kMounted";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "DMS_kNotMounted";
  *((void *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "DMS_PROTOBUF_DEFAULT";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_SignalEnvironmentType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_SignalEnvironmentType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247109510;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 0;
  *(void *)unint64_t v5 = "kSignalEnvUnavailable";
  *(void *)(v5 + 8) = 21;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "kSignalEnvRural";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "kSignalEnvUrban";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "kSignalEnvDenseUrban";
  *((void *)v13 + 1) = 20;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "kSignalEnvDenseUrbanCanyon";
  *((void *)v15 + 1) = 26;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "kSignalEnvMarine";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "kSignalEnvFoliage";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 15;
  *(void *)os_log_type_t v21 = "SIGNAL_ENV_PROTOBUF_DEFAULT";
  *((void *)v21 + 1) = 27;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_DeleteGnssDataBitMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_DeleteGnssDataBitMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "DeleteGnssDataBitMask_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 38;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "DeleteGnssDataBitMask_UeReset";
  *((void *)v10 + 1) = 29;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v30;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Position._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Position._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  os_log_type_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_24711E390;
  uint64_t v4 = v30 + v3;
  unint64_t v5 = v30 + v3 + v1[14];
  *(void *)(v30 + v3) = 1;
  *(void *)unint64_t v5 = "latitude";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v30 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "longitude";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v30 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "alt_wgs84";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v30 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "undulation";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v30 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "vertical_uncertainty";
  *((void *)v15 + 1) = 20;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v30 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "semi_major_horizontal_uncertainty";
  *((void *)v17 + 1) = 33;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v30 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "semi_minor_horizontal_uncertainty";
  *((void *)v19 + 1) = 33;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v30 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "semi_major_azimuth_horizontal_uncertainty";
  *((void *)v21 + 1) = 41;
  v21[16] = 2;
  v8();
  unsigned int v22 = v30 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "source";
  *(void *)(v22 + 8) = 6;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v30 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "reliability";
  *((void *)v24 + 1) = 11;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v30 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "assistance_used";
  *((void *)v26 + 1) = 15;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v30 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "gnss_content_in_fix";
  *((void *)v28 + 1) = 19;
  v28[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v19;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Velocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Velocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2471085E0;
  uint64_t v4 = v19 + v3;
  unint64_t v5 = v19 + v3 + v1[14];
  *(void *)(v19 + v3) = 1;
  *(void *)unint64_t v5 = "horiz_speed";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "horiz_speed_unc";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "vert_velocity";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "vert_velocity_unc";
  *((void *)v13 + 1) = 17;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "course";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "course_unc";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Time._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Time._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_247108620;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "gps_nano_seconds";
  *(void *)(v5 + 8) = 16;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "gps_time_uncertainty_nano_seconds";
  *(void *)(v9 + 8) = 33;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "leap_seconds_from_gps_start_valid";
  *((void *)v11 + 1) = 33;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "leap_seconds_from_gps_start";
  *((void *)v13 + 1) = 27;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "clock_nano_seconds";
  *((void *)v15 + 1) = 18;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "mach_continuous_seconds";
  *((void *)v17 + 1) = 23;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "mach_continuous_uncertainty_seconds";
  *((void *)v19 + 1) = 35;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "baseband_system_time_ns";
  *((void *)v21 + 1) = 23;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "baseband_system_time_unc_ns";
  *(void *)(v22 + 8) = 27;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Fix._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Fix._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "time";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "position";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "velocity";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "spoofing_flags";
  *((void *)v13 + 1) = 14;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "estimation_technology";
  *(void *)(v14 + 8) = 21;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_TimeTransferData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_TimeTransferData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2471085E0;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "is_gps_week_valid";
  *(void *)(v4 + 8) = 17;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50728];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "time";
  *(void *)(v8 + 8) = 4;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  size_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "quality";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "constellations_used";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "baseband_system_time_ns";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "baseband_system_time_unc_ns";
  *((void *)v16 + 1) = 27;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_TimeTransferDataExtend._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_TimeTransferDataExtend._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "data";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "time_mark_before_mach_abs_tick";
  *(void *)(v10 + 8) = 30;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "time_mark_after_mach_abs_tick";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "current_mach_cont_minus_mach_abs_ns";
  *((void *)v14 + 1) = 35;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "time_mark_center_mach_abs_time_ns";
  *(void *)(v15 + 8) = 33;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_RawPressureSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_RawPressureSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "pressure";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_SensorSample3Axis._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_SensorSample3Axis._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "x";
  *(void *)(v10 + 8) = 1;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "y";
  *((void *)v12 + 1) = 1;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "z";
  *((void *)v14 + 1) = 1;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_SvId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_SvId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "satellite_system";
  *(void *)(v5 + 8) = 16;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "prn";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "glo_slot_number";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "glo_slot_source";
  *((void *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "glo_frequency_number";
  *(void *)(v14 + 8) = 20;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_PwrMeasurement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_PwrMeasurement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "local_time";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "meas_interval_sec";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "active_interval_sec";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "avg_pwr_mw";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "status";
  *(void *)(v15 + 8) = 6;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_PwrMeasurement.PowerLoggingStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_PwrMeasurement.PowerLoggingStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "PowerLoggingStatus_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 35;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PowerLoggingStatus_kPowerNormal";
  *((void *)v10 + 1) = 31;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_DecodedRti._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_DecodedRti._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "m_time_of_file_generation_in_seconds_since_gps_epoch";
  *(void *)(v6 + 8) = 52;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "m_is_data_integrity_valid";
  *((void *)v10 + 1) = 25;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_DecodedExtendedEphemeris._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_DecodedExtendedEphemeris._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "m_time_of_gps_data_start_in_seconds_since_gps_epoch";
  *(void *)(v6 + 8) = 51;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "m_is_data_integrity_valid";
  *(void *)(v10 + 8) = 25;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "m_time_of_gps_data_end_in_seconds_since_gps_epoch";
  *((void *)v12 + 1) = 49;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "assistance_file_type";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v32;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_BtAdvertisement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_BtAdvertisement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_247109520;
  uint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)unint64_t v5 = "mach_cont_time_ns";
  *(void *)(v5 + 8) = 17;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "mac";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "rssi_db";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "channel";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "antenna_index";
  *((void *)v15 + 1) = 13;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "payload";
  *((void *)v17 + 1) = 7;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 8;
  *(void *)uint64_t v19 = "bt_type";
  *((void *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 9;
  *(void *)os_log_type_t v21 = "device_flags";
  *((void *)v21 + 1) = 12;
  v21[16] = 2;
  v8();
  unsigned int v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 10;
  *(void *)unsigned int v22 = "discovery_flags";
  *(void *)(v22 + 8) = 15;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 11;
  *(void *)uint64_t v24 = "product_ID";
  *((void *)v24 + 1) = 10;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 12;
  *(void *)uint64_t v26 = "identifier";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 13;
  *(void *)uint64_t v28 = "ids_device_ID";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v4 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 31;
  *(void *)os_log_type_t v30 = "type7_info";
  *((void *)v30 + 1) = 10;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_BtAdvertisement.BtType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_BtAdvertisement.BtType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "BT_TYPE_UNKNOWN";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 7;
  *(void *)unint64_t v10 = "BT_TYPE_TYPE7";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 18;
  *(void *)uint64_t v11 = "BT_TYPE_TYPE18";
  *(void *)(v11 + 8) = 14;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_BtDeviceInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_BtDeviceInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_24710FE80;
  uint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)uint64_t v4 = "cb_device_bytes";
  *(void *)(v4 + 8) = 15;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x263F50728];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_BtNotification._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_BtNotification._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "advertisements";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "is_simulated";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "is_ap_on";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 6;
  *(void *)uint64_t v15 = "is_screen_on";
  *(void *)(v15 + 8) = 12;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Type7Info._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Type7Info._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "is_same_account";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "is_family";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "is_shared_home";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "is_left_bud";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "is_case";
  *((void *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "placement";
  *((void *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Type7Info.Placement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Type7Info.Placement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109510;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PLACEMENT_UNKNOWN";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "PLACEMENT_IN_EAR";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "PLACEMENT_OUT_OF_EAR";
  *((void *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "PLACEMENT_IN_CASE";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "PLACEMENT_ON_EAR";
  *((void *)v16 + 1) = 16;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "PLACEMENT_OFF_EAR";
  *((void *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)int v20 = "PLACEMENT_ON_NECK";
  *((void *)v20 + 1) = 17;
  unsigned char v20[16] = 2;
  v9();
  os_log_type_t v21 = (void *)(v5 + 7 * v2);
  unsigned int v22 = (char *)v21 + v1[14];
  void *v21 = 7;
  *(void *)unsigned int v22 = "PLACEMENT_DISABLED";
  *((void *)v22 + 1) = 18;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SuplInitDecodeResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SuplInitDecodeResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SuplInit_None";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SuplInit_DecodeSuccess";
  *(void *)(v10 + 8) = 22;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SuplInit_DecodeFailure";
  *((void *)v12 + 1) = 22;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "SuplInit_Timeout";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_CompressionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_CompressionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "CompressionType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 32;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "CompressionType_None";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "CompressionType_LZMA";
  *(void *)(v11 + 8) = 20;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfoType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfoType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2471085F0;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "LtlInfoType_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 28;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "LtlInfoType_kInvalid";
  *(void *)(v9 + 8) = 20;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "LtlInfoType_kInitial";
  *((void *)v11 + 1) = 20;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "LtlInfoType_kLtlRefitted";
  *((void *)v13 + 1) = 24;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "LtlInfoType_kLearntArray";
  *(void *)(v14 + 8) = 24;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_CntinStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_CntinStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "CntinStatus_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "CntinStatus_kDisabled";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "CntinStatus_kEnabled";
  *((void *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "CntinStatus_kEnableFailed";
  *((void *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "CntinStatus_kDisableFailed";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "CntinStatus_kInterfaceOn";
  *((void *)v18 + 1) = 24;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)int v20 = "CntinStatus_kInterfaceOff";
  *((void *)v20 + 1) = 25;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  char *v98;
  uint64_t v100;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Request._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Request._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v100 = swift_allocObject();
  *(_OWORD *)(v100 + 16) = xmmword_24712E9D0;
  uint64_t v4 = v100 + v3;
  unint64_t v5 = v100 + v3 + v1[14];
  *(void *)(v100 + v3) = 1;
  *(void *)unint64_t v5 = "mach_continuous_time_ns";
  *(void *)(v5 + 8) = 23;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v100 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "transaction_id";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v100 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v100 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "inject_assistance_position";
  *((void *)v13 + 1) = 26;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v100 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "inject_assistance_time";
  *((void *)v15 + 1) = 22;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v100 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "set_assistance_pressure";
  *((void *)v17 + 1) = 23;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v100 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "set_assistance_accel";
  *((void *)v19 + 1) = 20;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v100 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "set_assistance_gyro";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  unsigned int v22 = v100 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "set_assistance_dem";
  *(void *)(v22 + 8) = 18;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v100 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "set_assistance_map_vector";
  *((void *)v24 + 1) = 25;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v100 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "set_assistance_motion_activity_context";
  *((void *)v26 + 1) = 38;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v100 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "set_assistance_mount_state";
  *((void *)v28 + 1) = 26;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v100 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "set_assistance_signal_environment";
  *((void *)v30 + 1) = 33;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v100 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 14;
  *(void *)uint64_t v32 = "set_assistance_speed_constraint";
  *((void *)v32 + 1) = 31;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v100 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 15;
  *(void *)int v34 = "set_assistance_along_track_velocity";
  *((void *)v34 + 1) = 35;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v100 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 16;
  *(void *)unint64_t v36 = "inject_assistance_file";
  *((void *)v36 + 1) = 22;
  v36[16] = 2;
  v8();
  unint64_t v37 = v100 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)unint64_t v37 = "inject_rti_file";
  *(void *)(v37 + 8) = 15;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v100 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 18;
  *(void *)uint64_t v39 = "inject_svid_blocklist";
  *((void *)v39 + 1) = 21;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v100 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 19;
  *(void *)uint64_t v41 = "delete_gnss_data";
  *((void *)v41 + 1) = 16;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v100 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 20;
  *(void *)int v43 = "set_pvtm_report";
  *((void *)v43 + 1) = 15;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v100 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 21;
  *(void *)id v45 = "set_nmea_handler";
  *((void *)v45 + 1) = 16;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v100 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 22;
  *(void *)uint64_t v47 = "set_config_simulator_mode";
  *((void *)v47 + 1) = 25;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v100 + v3 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 23;
  *(void *)long long v49 = "set_config_enable_gnss_constellations";
  *((void *)v49 + 1) = 37;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v100 + v3 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 24;
  *(void *)id v51 = "set_config_duty_cycling";
  *((void *)v51 + 1) = 23;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v100 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 25;
  *(void *)uint64_t v53 = "termination_imminent";
  *((void *)v53 + 1) = 20;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v100 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 26;
  *(void *)uint64_t v55 = "exit_message";
  *((void *)v55 + 1) = 12;
  v55[16] = 2;
  v8();
  v56 = (void *)(v100 + v3 + 26 * v2);
  Class v57 = (char *)v56 + v1[14];
  void *v56 = 27;
  *(void *)Class v57 = "inject_ltl_info";
  *((void *)v57 + 1) = 15;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v100 + v3 + 27 * v2);
  v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 28;
  *(void *)v59 = "start_context";
  *((void *)v59 + 1) = 13;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v100 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 29;
  *(void *)uint64_t v61 = "cntin_status_update";
  *((void *)v61 + 1) = 19;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v100 + v3 + 29 * v2);
  v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 30;
  *(void *)v63 = "set_thermal_risk_state";
  *((void *)v63 + 1) = 22;
  v63[16] = 2;
  v8();
  unint64_t v64 = (void *)(v100 + v3 + 30 * v2);
  unint64_t v65 = (char *)v64 + v1[14];
  *unint64_t v64 = 31;
  *(void *)unint64_t v65 = "set_config_rf_band_enable";
  *((void *)v65 + 1) = 25;
  v65[16] = 2;
  v8();
  unint64_t v66 = (void *)(v100 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *unint64_t v66 = 50;
  *(void *)uint64_t v67 = "emerg_config";
  *((void *)v67 + 1) = 12;
  v67[16] = 2;
  v8();
  v68 = v100 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 60;
  *(void *)v68 = "position_request";
  *(void *)(v68 + 8) = 16;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v100 + v3 + 33 * v2);
  Class v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 61;
  *(void *)Class v70 = "session_id";
  *((void *)v70 + 1) = 10;
  v70[16] = 2;
  v8();
  id v71 = (void *)(v100 + v3 + 34 * v2);
  uint64_t v72 = (char *)v71 + v1[14];
  *id v71 = 62;
  *(void *)uint64_t v72 = "gps_reference_time";
  *((void *)v72 + 1) = 18;
  v72[16] = 2;
  v8();
  v73 = (void *)(v100 + v3 + 35 * v2);
  v74 = (char *)v73 + v1[14];
  *v73 = 63;
  *(void *)v74 = "reference_location";
  *((void *)v74 + 1) = 18;
  v74[16] = 2;
  v8();
  v75 = (void *)(v100 + v3 + 36 * v2);
  v76 = (char *)v75 + v1[14];
  *v75 = 64;
  *(void *)v76 = "gps_navigation_model";
  *((void *)v76 + 1) = 20;
  v76[16] = 2;
  v8();
  v77 = (void *)(v100 + v3 + 37 * v2);
  v78 = (char *)v77 + v1[14];
  *v77 = 65;
  *(void *)v78 = "gps_acq_assistance";
  *((void *)v78 + 1) = 18;
  v78[16] = 2;
  v8();
  v79 = (void *)(v100 + v3 + 38 * v2);
  v80 = (char *)v79 + v1[14];
  *v79 = 66;
  *(void *)v80 = "cell_ft_assistance";
  *((void *)v80 + 1) = 18;
  v80[16] = 2;
  v8();
  v81 = (void *)(v100 + v3 + 39 * v2);
  v82 = (char *)v81 + v1[14];
  *v81 = 67;
  *(void *)v82 = "cplane_context";
  *((void *)v82 + 1) = 14;
  v82[16] = 2;
  v8();
  v83 = (void *)(v100 + v3 + 40 * v2);
  v84 = (char *)v83 + v1[14];
  *v83 = 70;
  *(void *)v84 = "supl_init_vec";
  *((void *)v84 + 1) = 13;
  v84[16] = 2;
  v8();
  v85 = (void *)(v100 + v3 + 41 * v2);
  v86 = (char *)v85 + v1[14];
  *v85 = 71;
  *(void *)v86 = "location_id";
  *((void *)v86 + 1) = 11;
  v86[16] = 2;
  v8();
  v87 = (void *)(v100 + v3 + 42 * v2);
  v88 = (char *)v87 + v1[14];
  *v87 = 72;
  *(void *)v88 = "supl_init_index";
  *((void *)v88 + 1) = 15;
  v88[16] = 2;
  v8();
  v89 = (void *)(v100 + v3 + 43 * v2);
  v90 = (char *)v89 + v1[14];
  *v89 = 73;
  *(void *)v90 = "supl_cert";
  *((void *)v90 + 1) = 9;
  v90[16] = 2;
  v8();
  v91 = (void *)(v100 + v3 + 44 * v2);
  v92 = (char *)v91 + v1[14];
  *v91 = 74;
  *(void *)v92 = "serving_cell_lte";
  *((void *)v92 + 1) = 16;
  v92[16] = 2;
  v8();
  v93 = (void *)(v100 + v3 + 45 * v2);
  v94 = (char *)v93 + v1[14];
  *v93 = 75;
  *(void *)v94 = "sim_instance";
  *((void *)v94 + 1) = 12;
  v94[16] = 2;
  v8();
  v95 = (void *)(v100 + v3 + 46 * v2);
  v96 = (char *)v95 + v1[14];
  *v95 = 76;
  *(void *)v96 = "supl_context";
  *((void *)v96 + 1) = 12;
  v96[16] = 2;
  v8();
  v97 = (void *)(v100 + v3 + 47 * v2);
  v98 = (char *)v97 + v1[14];
  *v97 = 77;
  *(void *)v98 = "wlan_measurement_list";
  *((void *)v98 + 1) = 21;
  v98[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  char *v98;
  void *v99;
  char *v100;
  void *v101;
  char *v102;
  void *v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;
  char *v108;
  void *v109;
  char *v110;
  void *v111;
  char *v112;
  void *v113;
  char *v114;
  void *v115;
  char *v116;
  void *v117;
  char *v118;
  void *v119;
  char *v120;
  void *v121;
  char *v122;
  void *v123;
  char *v124;
  uint64_t v126;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Request.TypeEnum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Request.TypeEnum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v126 = swift_allocObject();
  *(_OWORD *)(v126 + 16) = xmmword_24712E9E0;
  uint64_t v4 = v126 + v3;
  unint64_t v5 = v126 + v3 + v1[14];
  *(void *)(v126 + v3) = 0;
  *(void *)unint64_t v5 = "PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 16;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v126 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "START";
  *(void *)(v9 + 8) = 5;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v126 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "STOP";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v126 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "RESET";
  *((void *)v13 + 1) = 5;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v126 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "CLEAR";
  *((void *)v15 + 1) = 5;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v126 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "DELETE_GNSS_DATA";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v126 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "SET_PVTM_REPORT";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v126 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 7;
  *(void *)os_log_type_t v21 = "SET_NMEA_HANDLER";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  unsigned int v22 = v126 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)unsigned int v22 = "INJECT_ASSISTANCE_POSITION";
  *(void *)(v22 + 8) = 26;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v126 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 9;
  *(void *)uint64_t v24 = "INJECT_ASSISTANCE_TIME";
  *((void *)v24 + 1) = 22;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v126 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)uint64_t v26 = "INJECT_ASSISTANCE_FILE";
  *((void *)v26 + 1) = 22;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v126 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "INJECT_RTI_FILE";
  *((void *)v28 + 1) = 15;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v126 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 12;
  *(void *)os_log_type_t v30 = "INJECT_SVID_BLOCKLIST";
  *((void *)v30 + 1) = 21;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v126 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 13;
  *(void *)uint64_t v32 = "SET_ASSISTANCE_PRESSURE";
  *((void *)v32 + 1) = 23;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v126 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 14;
  *(void *)int v34 = "SET_ASSISTANCE_ACCEL";
  *((void *)v34 + 1) = 20;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v126 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 15;
  *(void *)unint64_t v36 = "SET_ASSISTANCE_GYRO";
  *((void *)v36 + 1) = 19;
  v36[16] = 2;
  v8();
  unint64_t v37 = v126 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)unint64_t v37 = "SET_ASSISTANCE_DEM";
  *(void *)(v37 + 8) = 18;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v126 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 17;
  *(void *)uint64_t v39 = "SET_ASSISTANCE_MAP_VECTOR";
  *((void *)v39 + 1) = 25;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v126 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 18;
  *(void *)uint64_t v41 = "SET_ASSISTANCE_MOTION_ACTIVITY_CONTEXT";
  *((void *)v41 + 1) = 38;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v126 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 19;
  *(void *)int v43 = "SET_ASSISTANCE_MOUNT_STATE";
  *((void *)v43 + 1) = 26;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v126 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 20;
  *(void *)id v45 = "SET_ASSISTANCE_SIGNAL_ENVIRONMENT";
  *((void *)v45 + 1) = 33;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v126 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 21;
  *(void *)uint64_t v47 = "SET_ASSISTANCE_SPEED_CONSTRAINT";
  *((void *)v47 + 1) = 31;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v126 + v3 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 22;
  *(void *)long long v49 = "SET_ASSISTANCE_ALONG_TRACK_VELOCITY";
  *((void *)v49 + 1) = 35;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v126 + v3 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 23;
  *(void *)id v51 = "SET_POWER_REPORT";
  *((void *)v51 + 1) = 16;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v126 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 24;
  *(void *)uint64_t v53 = "SET_CONFIG_SIMULATOR_MODE";
  *((void *)v53 + 1) = 25;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v126 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 25;
  *(void *)uint64_t v55 = "SET_CONFIG_ENABLE_GNSS_CONSTELLATIONS";
  *((void *)v55 + 1) = 37;
  v55[16] = 2;
  v8();
  v56 = (void *)(v126 + v3 + 26 * v2);
  Class v57 = (char *)v56 + v1[14];
  void *v56 = 26;
  *(void *)Class v57 = "SET_CONFIG_DUTY_CYCLING";
  *((void *)v57 + 1) = 23;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v126 + v3 + 27 * v2);
  v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 27;
  *(void *)v59 = "SET_TIME_TRANSFER_PULSE";
  *((void *)v59 + 1) = 23;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v126 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 28;
  *(void *)uint64_t v61 = "CLEAN_TIME_TRANSFER_PULSE";
  *((void *)v61 + 1) = 25;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v126 + v3 + 29 * v2);
  v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 29;
  *(void *)v63 = "INJECT_LTL_INFO";
  *((void *)v63 + 1) = 15;
  v63[16] = 2;
  v8();
  unint64_t v64 = (void *)(v126 + v3 + 30 * v2);
  unint64_t v65 = (char *)v64 + v1[14];
  *unint64_t v64 = 30;
  *(void *)unint64_t v65 = "CNTIN_STATUS_UPDATE";
  *((void *)v65 + 1) = 19;
  v65[16] = 2;
  v8();
  unint64_t v66 = (void *)(v126 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *unint64_t v66 = 31;
  *(void *)uint64_t v67 = "SET_THERMAL_RISK_STATE";
  *((void *)v67 + 1) = 22;
  v67[16] = 2;
  v8();
  v68 = v126 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 32;
  *(void *)v68 = "PING";
  *(void *)(v68 + 8) = 4;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v126 + v3 + 33 * v2);
  Class v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 34;
  *(void *)Class v70 = "BUILD_DEVICE";
  *((void *)v70 + 1) = 12;
  v70[16] = 2;
  v8();
  id v71 = (void *)(v126 + v3 + 34 * v2);
  uint64_t v72 = (char *)v71 + v1[14];
  *id v71 = 35;
  *(void *)uint64_t v72 = "TERMINATION_IMMINENT";
  *((void *)v72 + 1) = 20;
  v72[16] = 2;
  v8();
  v73 = (void *)(v126 + v3 + 35 * v2);
  v74 = (char *)v73 + v1[14];
  *v73 = 36;
  *(void *)v74 = "EXIT";
  *((void *)v74 + 1) = 4;
  v74[16] = 2;
  v8();
  v75 = (void *)(v126 + v3 + 36 * v2);
  v76 = (char *)v75 + v1[14];
  *v75 = 37;
  *(void *)v76 = "FORCE_CLEAR_ALL_NV";
  *((void *)v76 + 1) = 18;
  v76[16] = 2;
  v8();
  v77 = (void *)(v126 + v3 + 37 * v2);
  v78 = (char *)v77 + v1[14];
  *v77 = 38;
  *(void *)v78 = "SET_CONFIG_RF_BAND_ENABLE";
  *((void *)v78 + 1) = 25;
  v78[16] = 2;
  v8();
  v79 = (void *)(v126 + v3 + 38 * v2);
  v80 = (char *)v79 + v1[14];
  *v79 = 51;
  *(void *)v80 = "START_EMERGENCY_PREEMPTIVE_SESSION";
  *((void *)v80 + 1) = 34;
  v80[16] = 2;
  v8();
  v81 = (void *)(v126 + v3 + 39 * v2);
  v82 = (char *)v81 + v1[14];
  *v81 = 52;
  *(void *)v82 = "STOP_EMERGENCY_PREEMPTIVE_SESSION";
  *((void *)v82 + 1) = 33;
  v82[16] = 2;
  v8();
  v83 = (void *)(v126 + v3 + 40 * v2);
  v84 = (char *)v83 + v1[14];
  *v83 = 53;
  *(void *)v84 = "SET_EMERGENCY_CONFIG";
  *((void *)v84 + 1) = 20;
  v84[16] = 2;
  v8();
  v85 = (void *)(v126 + v3 + 41 * v2);
  v86 = (char *)v85 + v1[14];
  *v85 = 54;
  *(void *)v86 = "SET_EMERGENCY_SESSION_SUMMARY_REPORT";
  *((void *)v86 + 1) = 36;
  v86[16] = 2;
  v8();
  v87 = (void *)(v126 + v3 + 42 * v2);
  v88 = (char *)v87 + v1[14];
  *v87 = 55;
  *(void *)v88 = "ENTER_EMERGENCY_MODE";
  *((void *)v88 + 1) = 20;
  v88[16] = 2;
  v8();
  v89 = (void *)(v126 + v3 + 43 * v2);
  v90 = (char *)v89 + v1[14];
  *v89 = 56;
  *(void *)v90 = "EXIT_EMERGENCY_MODE";
  *((void *)v90 + 1) = 19;
  v90[16] = 2;
  v8();
  v91 = (void *)(v126 + v3 + 44 * v2);
  v92 = (char *)v91 + v1[14];
  *v91 = 60;
  *(void *)v92 = "START_EMERGENCY_POSITION";
  *((void *)v92 + 1) = 24;
  v92[16] = 2;
  v8();
  v93 = (void *)(v126 + v3 + 45 * v2);
  v94 = (char *)v93 + v1[14];
  *v93 = 61;
  *(void *)v94 = "STOP_EMERGENCY_POSITION";
  *((void *)v94 + 1) = 23;
  v94[16] = 2;
  v8();
  v95 = (void *)(v126 + v3 + 46 * v2);
  v96 = (char *)v95 + v1[14];
  *v95 = 62;
  *(void *)v96 = "SET_EMERGENCY_POSITION_REPORT";
  *((void *)v96 + 1) = 29;
  v96[16] = 2;
  v8();
  v97 = (void *)(v126 + v3 + 47 * v2);
  v98 = (char *)v97 + v1[14];
  *v97 = 63;
  *(void *)v98 = "SET_EMERGENCY_MEASUREMENT_REPORT";
  *((void *)v98 + 1) = 32;
  v98[16] = 2;
  v8();
  v99 = (void *)(v126 + v3 + 48 * v2);
  v100 = (char *)v99 + v1[14];
  *v99 = 64;
  *(void *)v100 = "SET_NW_ASSISTANCE_NEEDED_REPORT";
  *((void *)v100 + 1) = 31;
  v100[16] = 2;
  v8();
  v101 = (void *)(v126 + v3 + 49 * v2);
  v102 = (char *)v101 + v1[14];
  *v101 = 65;
  *(void *)v102 = "SET_NW_ASSISTANCE_GPS_REF_TIME";
  *((void *)v102 + 1) = 30;
  v102[16] = 2;
  v8();
  v103 = (void *)(v126 + v3 + 50 * v2);
  v104 = (char *)v103 + v1[14];
  *v103 = 66;
  *(void *)v104 = "SET_NW_ASSISTANCE_REF_POSITION";
  *((void *)v104 + 1) = 30;
  v104[16] = 2;
  v8();
  v105 = (void *)(v126 + v3 + 51 * v2);
  v106 = (char *)v105 + v1[14];
  *v105 = 67;
  *(void *)v106 = "SET_NW_ASSISTANCE_GPS_EPHEMERIS";
  *((void *)v106 + 1) = 31;
  v106[16] = 2;
  v8();
  v107 = (void *)(v126 + v3 + 52 * v2);
  v108 = (char *)v107 + v1[14];
  *v107 = 68;
  *(void *)v108 = "SET_NW_ASSISTANCE_GPS_ACQUISITION";
  *((void *)v108 + 1) = 33;
  v108[16] = 2;
  v8();
  v109 = (void *)(v126 + v3 + 53 * v2);
  v110 = (char *)v109 + v1[14];
  *v109 = 69;
  *(void *)v110 = "INJECT_FT_ASSISTANCE";
  *((void *)v110 + 1) = 20;
  v110[16] = 2;
  v8();
  v111 = (void *)(v126 + v3 + 54 * v2);
  v112 = (char *)v111 + v1[14];
  *v111 = 70;
  *(void *)v112 = "DECODE_SUPL_INIT";
  *((void *)v112 + 1) = 16;
  v112[16] = 2;
  v8();
  v113 = (void *)(v126 + v3 + 55 * v2);
  v114 = (char *)v113 + v1[14];
  *v113 = 71;
  *(void *)v114 = "SET_SUPL_INIT";
  *((void *)v114 + 1) = 13;
  v114[16] = 2;
  v8();
  v115 = (void *)(v126 + v3 + 56 * v2);
  v116 = (char *)v115 + v1[14];
  *v115 = 72;
  *(void *)v116 = "SET_SUPL_LOCATIONID_NEEDED_REPORT";
  *((void *)v116 + 1) = 33;
  v116[16] = 2;
  v8();
  v117 = (void *)(v126 + v3 + 57 * v2);
  v118 = (char *)v117 + v1[14];
  *v117 = 73;
  *(void *)v118 = "SET_SUPL_LOCATIONID";
  *((void *)v118 + 1) = 19;
  v118[16] = 2;
  v8();
  v119 = (void *)(v126 + v3 + 58 * v2);
  v120 = (char *)v119 + v1[14];
  *v119 = 74;
  *(void *)v120 = "ABORT_SUPL_SESSION";
  *((void *)v120 + 1) = 18;
  v120[16] = 2;
  v8();
  v121 = (void *)(v126 + v3 + 59 * v2);
  v122 = (char *)v121 + v1[14];
  *v121 = 75;
  *(void *)v122 = "SET_SUPL_SESSION_STATUS_REPORT";
  *((void *)v122 + 1) = 30;
  v122[16] = 2;
  v8();
  v123 = (void *)(v126 + v3 + 60 * v2);
  v124 = (char *)v123 + v1[14];
  *v123 = 76;
  *(void *)v124 = "SET_SUPL_WLAN_MEAS";
  *((void *)v124 + 1) = 18;
  v124[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Response._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Response._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "request_type";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "mach_continuous_time_ns";
  *((void *)v10 + 1) = 23;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "result_code";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  uint64_t v63;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Indication._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Indication._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_24712E9F0;
  uint64_t v4 = v63 + v3;
  unint64_t v5 = v63 + v3 + v1[14];
  *(void *)(v63 + v3) = 1;
  *(void *)unint64_t v5 = "type";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v63 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "request_type";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v63 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "mach_continuous_time_ns";
  *((void *)v11 + 1) = 23;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v63 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "fix";
  *((void *)v13 + 1) = 3;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v63 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "meas";
  *((void *)v15 + 1) = 4;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v63 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "power_measurement";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v63 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 9;
  *(void *)uint64_t v19 = "status";
  *((void *)v19 + 1) = 6;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v63 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 10;
  *(void *)os_log_type_t v21 = "time_transfer_data_extend";
  *((void *)v21 + 1) = 25;
  v21[16] = 2;
  v8();
  unsigned int v22 = v63 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 16;
  *(void *)unsigned int v22 = "recovery_statistics";
  *(void *)(v22 + 8) = 19;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v63 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 17;
  *(void *)uint64_t v24 = "ltl_info_request";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v63 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 18;
  *(void *)uint64_t v26 = "decoded_extended_ephemeris";
  *((void *)v26 + 1) = 26;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v63 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 19;
  *(void *)uint64_t v28 = "decoded_rti";
  *((void *)v28 + 1) = 11;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v63 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 22;
  *(void *)os_log_type_t v30 = "start_status";
  *((void *)v30 + 1) = 12;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v63 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 20;
  *(void *)uint64_t v32 = "stop_status";
  *((void *)v32 + 1) = 11;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v63 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 21;
  *(void *)int v34 = "cntin_clock_control";
  *((void *)v34 + 1) = 19;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v63 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 23;
  *(void *)unint64_t v36 = "exception";
  *((void *)v36 + 1) = 9;
  v36[16] = 2;
  v8();
  unint64_t v37 = v63 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 25;
  *(void *)unint64_t v37 = "ask_baseband_reset";
  *(void *)(v37 + 8) = 18;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v63 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 30;
  *(void *)uint64_t v39 = "summary_report";
  *((void *)v39 + 1) = 14;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v63 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 40;
  *(void *)uint64_t v41 = "position_report";
  *((void *)v41 + 1) = 15;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v63 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 41;
  *(void *)int v43 = "cplane_measurement_report";
  *((void *)v43 + 1) = 25;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v63 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 42;
  *(void *)id v45 = "assistance_needed_report";
  *((void *)v45 + 1) = 24;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v63 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 43;
  *(void *)uint64_t v47 = "cell_ft_assistance_request";
  *((void *)v47 + 1) = 26;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v63 + v3 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 44;
  *(void *)long long v49 = "cplane_measurement_report_with_estimate";
  *((void *)v49 + 1) = 39;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v63 + v3 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 50;
  *(void *)id v51 = "supl_session_status";
  *((void *)v51 + 1) = 19;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v63 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 51;
  *(void *)uint64_t v53 = "decoded_supl_init";
  *((void *)v53 + 1) = 17;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v63 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 52;
  *(void *)uint64_t v55 = "supl_init_index";
  *((void *)v55 + 1) = 15;
  v55[16] = 2;
  v8();
  v56 = (void *)(v63 + v3 + 26 * v2);
  Class v57 = (char *)v56 + v1[14];
  void *v56 = 53;
  *(void *)Class v57 = "supl_init_decode_result";
  *((void *)v57 + 1) = 23;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v63 + v3 + 27 * v2);
  v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 54;
  *(void *)v59 = "sim_instance";
  *((void *)v59 + 1) = 12;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v63 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 55;
  *(void *)uint64_t v61 = "wlan_measurement_request";
  *((void *)v61 + 1) = 24;
  v61[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  uint64_t v53;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Indication.TypeEnum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Indication.TypeEnum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_24710FE70;
  uint64_t v4 = v53 + v3;
  unint64_t v5 = v53 + v3 + v1[14];
  *(void *)(v53 + v3) = 0;
  *(void *)unint64_t v5 = "PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 16;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v53 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)size_t v9 = "PVTM";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v53 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "STATUS";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v53 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "POWER_MEASUREMENT";
  *((void *)v13 + 1) = 17;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v53 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 4;
  *(void *)uint64_t v15 = "RECOVERY_STATISTICS";
  *((void *)v15 + 1) = 19;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v53 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "LTL_INFO_REQUEST";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v53 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 9;
  *(void *)uint64_t v19 = "TIME_TRANSFER_DATA";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v53 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 10;
  *(void *)os_log_type_t v21 = "EMERG_SUMMARY_REPORT";
  *((void *)v21 + 1) = 20;
  v21[16] = 2;
  v8();
  unsigned int v22 = v53 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 11;
  *(void *)unsigned int v22 = "EMERG_POSITION_REPORT";
  *(void *)(v22 + 8) = 21;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v53 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 12;
  *(void *)uint64_t v24 = "EMERG_MEASUREMENT_REPORT";
  *((void *)v24 + 1) = 24;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v53 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 13;
  *(void *)uint64_t v26 = "EMERG_ASSISTANCE_NEEDED_REPORT";
  *((void *)v26 + 1) = 30;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v53 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 14;
  *(void *)uint64_t v28 = "EMERG_SUPL_SESSION_STATUS_REPORT";
  *((void *)v28 + 1) = 32;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v53 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 15;
  *(void *)os_log_type_t v30 = "EMERG_SUPL_LOCATION_ID_NEEDED_REPORT";
  *((void *)v30 + 1) = 36;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v53 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  uint8_t *v31 = 16;
  *(void *)uint64_t v32 = "EMERG_DECODED_SUPL_INIT";
  *((void *)v32 + 1) = 23;
  v32[16] = 2;
  v8();
  unint64_t v33 = (void *)(v53 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  NSObject *v33 = 17;
  *(void *)int v34 = "EMERG_FT_ASSISTANCE_NEEDED_REPORT";
  *((void *)v34 + 1) = 33;
  v34[16] = 2;
  v8();
  os_log_type_t v35 = (void *)(v53 + v3 + 15 * v2);
  unint64_t v36 = (char *)v35 + v1[14];
  uint8_t *v35 = 18;
  *(void *)unint64_t v36 = "DECODED_EXTENDED_EPHEMERIS";
  *((void *)v36 + 1) = 26;
  v36[16] = 2;
  v8();
  unint64_t v37 = v53 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 19;
  *(void *)unint64_t v37 = "DECODED_RTI";
  *(void *)(v37 + 8) = 11;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  char v38 = (void *)(v53 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  uint8_t *v38 = 20;
  *(void *)uint64_t v39 = "STOP_COMPLETED";
  *((void *)v39 + 1) = 14;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v53 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 21;
  *(void *)uint64_t v41 = "CNTIN_CLOCK_CONTROL";
  *((void *)v41 + 1) = 19;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v53 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 22;
  *(void *)int v43 = "START_COMPLETED";
  *((void *)v43 + 1) = 15;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v53 + v3 + 20 * v2);
  id v45 = (char *)v44 + v1[14];
  void *v44 = 23;
  *(void *)id v45 = "EXCEPTION";
  *((void *)v45 + 1) = 9;
  v45[16] = 2;
  v8();
  unint64_t v46 = (void *)(v53 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  unsigned char *v46 = 24;
  *(void *)uint64_t v47 = "EMERG_SUPL_WLAN_MEAS_NEEDED_REPORT";
  *((void *)v47 + 1) = 34;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v53 + v3 + 22 * v2);
  long long v49 = (char *)v48 + v1[14];
  uint8_t *v48 = 25;
  *(void *)long long v49 = "ASK_BASEBAND_RESET";
  *((void *)v49 + 1) = 18;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v53 + v3 + 23 * v2);
  id v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 26;
  *(void *)id v51 = "EMERG_MEASUREMENT_REPORT_WITH_ESTIMATE";
  *((void *)v51 + 1) = 38;
  v51[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Status._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Status._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "gpsd_uptime";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "device_uptime";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "is_device_initialized";
  *((void *)v12 + 1) = 21;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "is_device_interface_busy";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "is_device_active";
  *(void *)(v15 + 8) = 16;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetPvtmReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetPvtmReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085E0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "report_pvt";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "report_measurement";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "include_extended_measurement_info";
  *((void *)v12 + 1) = 33;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "report_sv_info";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "report_band_corrections";
  *((void *)v16 + 1) = 23;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "report_time_conversion";
  *((void *)v18 + 1) = 22;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_InjectAssistanceFile._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_InjectAssistanceFile._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "predictions_file";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "compression_type";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_InjectAssistancePosition._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_InjectAssistancePosition._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "position";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "position_assist_type";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "altitude_valid";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 10;
  *(void *)uint64_t v14 = "mach_continuous_time_ns";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_InjectAssistanceTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_InjectAssistanceTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "gps_nanoseconds";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "uncertainty_nanoseconds";
  *((void *)v10 + 1) = 23;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "mach_continuous_time_ns";
  *(void *)(v11 + 8) = 23;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceDem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceDem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "ellipsoidal_altitude_wgs84";
  *((void *)v10 + 1) = 26;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "altitude_uncertainty";
  *(void *)(v11 + 8) = 20;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v32;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceMapVector._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceMapVector._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_247109520;
  uint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)unint64_t v5 = "mach_continuous_time_ns";
  *(void *)(v5 + 8) = 23;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50728];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v32 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "segment_start_latitude";
  *(void *)(v9 + 8) = 22;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v32 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "segment_start_longitude";
  *((void *)v11 + 1) = 23;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v32 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "altitude_valid";
  *((void *)v13 + 1) = 14;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v32 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "segment_start_alt_wgs84";
  *((void *)v15 + 1) = 23;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v32 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "segment_length_m";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v32 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "segment_direction_deg";
  *((void *)v19 + 1) = 21;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v32 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "segment_width_m";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  unsigned int v22 = v32 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "is_freeway";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v32 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "is_railway";
  *((void *)v24 + 1) = 10;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v32 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "is_one_way_road";
  *((void *)v26 + 1) = 15;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v32 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "is_tunnel";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  unsigned int v29 = (void *)(v32 + v3 + 12 * v2);
  os_log_type_t v30 = (char *)v29 + v1[14];
  *unsigned int v29 = 13;
  *(void *)os_log_type_t v30 = "is_bridge";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceMotionActivityContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceMotionActivityContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "context";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "moving_state";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "motion_reliability";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceMountState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceMountState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "mount_state";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceSpeedConstraint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceSpeedConstraint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "duration";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "speed_lower_bound";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "speed_upper_bound";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceAlongTrackVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceAlongTrackVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "vel_along_track";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "vel_along_track_uncertainty";
  *(void *)(v11 + 8) = 27;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetThermalRiskState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetThermalRiskState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "thermal_risk_scale";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetConfigSimulatorMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetConfigSimulatorMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "is_enabled";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "default_gps_week";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetConfigEnableGnssConstellations._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetConfigEnableGnssConstellations._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "enable_flags";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "disable_flags";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetConfigRfBandEnable._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetConfigRfBandEnable._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "enable_l1";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "enable_l5";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_RecoveryStatistics._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_RecoveryStatistics._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "recovery_point_vector";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "recovery_status";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_RecoveryStatistics.RecoveryStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_RecoveryStatistics.RecoveryStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "recovery_attempted";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "num_recovery_attempts";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "recovered";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "in_out_recovery";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_RecoveryStatistics.RecoveryPoint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_RecoveryStatistics.RecoveryPoint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "file";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "line_number";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "function";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108630;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "success";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "error_code";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "info_type";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "initial_params";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "lut_params";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "current_src_calib";
  *((void *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  int v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)int v20 = "rac_pmic_adcr_pre_cal";
  *((void *)v20 + 1) = 21;
  unsigned char v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo.LtlLutParams._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo.LtlLutParams._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247109530;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "ltl_update_count";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ltl_cleanup_count";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "s_curve_val";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "s_curve_history";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "correction_factor";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "prod_version";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "post_cal_version";
  *(void *)(v11 + 8) = 16;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108640;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "adc_gain";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "adc_offset";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v28;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo.LtlInitialParams._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo.LtlInitialParams._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_247109540;
  uint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "c5";
  *(void *)(v5 + 8) = 2;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  size_t v9 = v28 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)size_t v9 = "c4";
  *(void *)(v9 + 8) = 2;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v28 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "c3";
  *((void *)v11 + 1) = 2;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v28 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "c2";
  *((void *)v13 + 1) = 2;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v28 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  char *v14 = 5;
  *(void *)uint64_t v15 = "c1";
  *((void *)v15 + 1) = 2;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v28 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "c0";
  *((void *)v17 + 1) = 2;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v28 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "coeff_calibrated";
  *((void *)v19 + 1) = 16;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v28 + v3 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *int v20 = 8;
  *(void *)os_log_type_t v21 = "ref_temp";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  unsigned int v22 = v28 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)unsigned int v22 = "ltl_cleanup_factor";
  *(void *)(v22 + 8) = 18;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v28 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)uint64_t v24 = "hw_id";
  *((void *)v24 + 1) = 5;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v28 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "clock_id";
  *((void *)v26 + 1) = 8;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Exception._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Exception._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "type_deprecated";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "payload";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "type_integer";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_AskBasebandReset._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_AskBasebandReset._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "mach_continuous_seconds";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "reason_code";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "reason_string";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LogEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LogEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2471085F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "print_time_mach_continuous_ns";
  *(void *)(v6 + 8) = 29;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "comment";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 5;
  *(void *)uint64_t v12 = "request";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 6;
  *(void *)uint64_t v14 = "response";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 7;
  *(void *)uint64_t v15 = "indication";
  *(void *)(v15 + 8) = 10;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_StartContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_StartContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_247108610;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "enable_lte_band13_filter";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "enable_benign_environment_power_saving";
  *((void *)v10 + 1) = 38;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "in_region_where_cold_searches_should_prioritize_beidou";
  *(void *)(v11 + 8) = 54;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_Request.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_6;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_6;
        case 4:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_6;
        case 6:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
          goto LABEL_5;
        case 11:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          type metadata accessor for Proto_Gpsd_Request(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
LABEL_5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  unint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #6 in CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t closure #6 in CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_Request);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for Proto_Gpsd_Request);
}

Swift::Int CLP_LogEntry_AONLoc_Request.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_Request, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_Request@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(unsigned char *)(v8 + 4) = 1;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(a2 + v7) = 5;
  uint64_t v9 = a2 + a1[9];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a2 + a1[10];
  uint64_t v12 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  return v13(v11, 1, 1, v12);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_Request()
{
  return CLP_LogEntry_AONLoc_Request.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance CLP_LogEntry_AONLoc_Request()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance CLP_LogEntry_AONLoc_Request()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_Request(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap, a1);
}

void one-time initialization function for protoMessageName()
{
  v0._uint64_t countAndFlagsBits = 0x4F746C757365522ELL;
  v0._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v0);
  static CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName = 0xD00000000000001BLL;
  *(void *)algn_26923D5A8 = 0x800000024713A470;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x617453656D69542ELL;
  v0._object = (void *)0xEA0000000000706DLL;
  String.append(_:)(v0);
  static CLP_LogEntry_LogEntry.TimeStamp.protoMessageName = 0xD000000000000015;
  *(void *)algn_26923DC48 = 0x800000024713DC10;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x64757469746C412ELL;
  v0._object = (void *)0xED00006F666E4965;
  String.append(_:)(v0);
  static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName = 0xD00000000000002ELL;
  unk_26923E0C0 = 0x800000024713E050;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x616546656572542ELL;
  v0._object = (void *)0xED00007365727574;
  String.append(_:)(v0);
  static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName = 0xD000000000000035;
  unk_26923E8E0 = 0x800000024713ED00;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x7265766F6365522ELL;
  v0._object = (void *)0xEF73757461745379;
  String.append(_:)(v0);
  static Proto_Gpsd_RecoveryStatistics.RecoveryStatus.protoMessageName = 0xD00000000000001DLL;
  unk_26923FD30 = 0x800000024714C6B0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x7265766F6365522ELL;
  v0._object = (void *)0xEE00746E696F5079;
  String.append(_:)(v0);
  static Proto_Gpsd_RecoveryStatistics.RecoveryPoint.protoMessageName = 0xD00000000000001DLL;
  *(void *)algn_26923FD58 = 0x800000024714C6B0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x5074754C6C744C2ELL;
  v0._object = (void *)0xED0000736D617261;
  String.append(_:)(v0);
  static Proto_Gpsd_LtlInfo.LtlLutParams.protoMessageName = 0xD000000000000012;
  unk_26923FDB0 = 0x800000024714C6F0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0xD000000000000017;
  v0._object = (void *)0x800000024714D250;
  String.append(_:)(v0);
  static Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData.protoMessageName = 0xD000000000000012;
  *(void *)algn_26923FDD8 = 0x800000024714C6F0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0xD000000000000018;
  v0._object = (void *)0x800000024714D1F0;
  String.append(_:)(v0);
  static Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData.protoMessageName = 0xD000000000000012;
  unk_26923FE00 = 0x800000024714C6F0;
}

{
  Swift::String v0;

  v0._object = (void *)0x800000024714D1C0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  static Proto_Gpsd_LtlInfo.LtlInitialParams.protoMessageName = 0xD000000000000012;
  *(void *)algn_26923FE28 = 0x800000024714C6F0;
}

uint64_t *CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName;
}

uint64_t static CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName.getter()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v0 = static CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_14;
        case 2:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_14;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_14;
        case 5:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)();
          goto LABEL_14;
        case 6:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType();
          goto LABEL_11;
        case 7:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
LABEL_11:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
          goto LABEL_14;
        case 8:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)();
          goto LABEL_14;
        case 11:
        case 12:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_14:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v3 = (int *)result;
  if (*((unsigned char *)v0 + *(int *)(result + 32)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*((unsigned char *)v0 + v3[9] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if ((*((unsigned char *)v0 + v3[10] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*((unsigned char *)v0 + v3[11] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)((uint64_t)v0);
    if (*(void *)(*v0 + 16))
    {
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)();
    }
    if (*(void *)(v0[1] + 16))
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)();
    }
    if (*(void *)(v0[2] + 16)) {
      dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)();
    }
    closure #6 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)((uint64_t)v0);
    closure #7 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)((uint64_t)v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 48) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 52) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #7 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 56) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_AONLoc_Request.ResultOptions.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_Request.ResultOptions@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = v4;
  a2[2] = v4;
  uint64_t result = UnknownStorage.init()();
  uint64_t v6 = a1[9];
  *((unsigned char *)a2 + a1[8]) = 2;
  uint64_t v7 = (char *)a2 + v6;
  *(_DWORD *)uint64_t v7 = 0;
  v7[4] = 1;
  uint64_t v8 = a1[11];
  uint64_t v9 = (char *)a2 + a1[10];
  *(_DWORD *)uint64_t v9 = 0;
  _DWORD v9[4] = 1;
  uint64_t v10 = (char *)a2 + v8;
  *(_DWORD *)uint64_t v10 = 0;
  v10[4] = 1;
  uint64_t v11 = a1[13];
  uint64_t v12 = (char *)a2 + a1[12];
  *(_DWORD *)uint64_t v12 = 0;
  v12[4] = 1;
  uint64_t v13 = (char *)a2 + v11;
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  uint64_t v14 = (char *)a2 + a1[14];
  *(void *)uint64_t v14 = 0;
  v14[8] = 1;
  return result;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CLP_LogEntry_AONLoc_Request.ResultOptions@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CLP_LogEntry_AONLoc_Request.ResultOptions())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return CLP_LogEntry_AONLoc_Request.ResultOptions.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request.ResultOptions@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_AONLoc_Response.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_Response.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_Response.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t CLP_LogEntry_AONLoc_Response._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Response._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Response._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Response._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_Response.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
    lazy protocol witness table accessor for type Proto_Gnss_Result and conformance Proto_Gnss_Result();
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Response.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 10)
    {
      lazy protocol witness table accessor for type Proto_Gnss_Result and conformance Proto_Gnss_Result();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_AONLoc_Response.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_Response, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_Response@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 5;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(a2 + a1[7]) = 10;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_Response()
{
  return CLP_LogEntry_AONLoc_Response.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_Response()
{
  return CLP_LogEntry_AONLoc_Response.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Response@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Response._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_Response(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_AONLoc_WiFiIndication.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_WiFiIndication.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_WiFiIndication.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap, (uint64_t)"wifi_notifications", 18);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap, (uint64_t)"bt_notifications", 16);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap, (uint64_t)"slot_num", (uint64_t)"slot_source", 11);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap, (uint64_t)"freq_num", (uint64_t)"slot_info", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap, (uint64_t)"allow_streaming", 15, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap, (uint64_t)"workout_update", 14);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap, (uint64_t)"workout_event", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap, (uint64_t)"body_metrics", 12);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap, (uint64_t)"event_receipt_time", 18, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap, (uint64_t)"dot_data", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap, (uint64_t)"tunnel_bridge_data", 18);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap, (uint64_t)"tunnel_end_point_data", 21);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap, (uint64_t)"event_receipt_time", 18, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap, (uint64_t)"step_count_entry", 16);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap, (uint64_t)"bits", 4, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap, (uint64_t)"data", 4, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gnss_Emergency_CplaneConfig._protobuf_nameMap, (uint64_t)"early_return_enabled", 20);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gnss_Emergency_CellFTAssistanceRequest._protobuf_nameMap, (uint64_t)"network_type", 12);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_InjectRtiFile._protobuf_nameMap, (uint64_t)"rti_file", 8, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_InjectSvidBlocklist._protobuf_nameMap, (uint64_t)"blocklist", 9, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_DeleteGnssData._protobuf_nameMap, (uint64_t)"delete_flags", 12, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetNmeaHandler._protobuf_nameMap, (uint64_t)"nmea_mask", 9, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetAssistancePressure._protobuf_nameMap, (uint64_t)"samples", 7, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetAssistanceAccel._protobuf_nameMap, (uint64_t)"samples", 7, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetAssistanceGyro._protobuf_nameMap, (uint64_t)"samples", 7, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetAssistanceSignalEnvironment._protobuf_nameMap, (uint64_t)"signal_environment_type", 23, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetConfigDutyCycling._protobuf_nameMap, (uint64_t)"is_enabled", 10, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_TerminationImminent._protobuf_nameMap, (uint64_t)"reason", 6, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_ExitMessage._protobuf_nameMap, (uint64_t)"reason", 6, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_LtlInfoRequest._protobuf_nameMap, (uint64_t)"info_type", 9, MEMORY[0x263F50728]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_CntinStatusMessage._protobuf_nameMap, (uint64_t)"status", 6, MEMORY[0x263F50718]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_CntinClockControl._protobuf_nameMap, (uint64_t)"enable_cntin_clock", 18, MEMORY[0x263F50728]);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v5, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v6 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v7 = *(void *)(*(void *)v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_247108610;
  uint64_t v10 = (void *)(v9 + v8);
  unint64_t v11 = v9 + v8 + v6[14];
  *uint64_t v10 = 1;
  *(void *)unint64_t v11 = "mach_continuous_time_ns";
  *(void *)(v11 + 8) = 23;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = *MEMORY[0x263F50728];
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v14)(v11, v12, v13);
  uint64_t v15 = (char *)v10 + v7 + v6[14];
  *(void *)((char *)v10 + v7) = 2;
  *(void *)uint64_t v15 = "is_last_batch";
  *((void *)v15 + 1) = 13;
  v15[16] = 2;
  v14();
  uint64_t v16 = (uint64_t)v10 + 2 * v7 + v6[14];
  *(void *)((char *)v10 + 2 * v7) = 11;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + 8) = a4;
  *(unsigned char *)(v16 + 16) = 2;
  v14();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  char *v15;
  uint64_t v16;

  uint64_t v5 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v5, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v6 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v7 = *(void *)(*(void *)v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_247108610;
  uint64_t v10 = (void *)(v9 + v8);
  unint64_t v11 = v9 + v8 + v6[14];
  *uint64_t v10 = 1;
  *(void *)unint64_t v11 = "event_receipt_time";
  *(void *)(v11 + 8) = 18;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = *MEMORY[0x263F50728];
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v14)(v11, v12, v13);
  uint64_t v15 = (char *)v10 + v7 + v6[14];
  *(void *)((char *)v10 + v7) = 2;
  *(void *)uint64_t v15 = "client";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v14();
  uint64_t v16 = (uint64_t)v10 + 2 * v7 + v6[14];
  *(void *)((char *)v10 + 2 * v7) = 3;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + 8) = a4;
  *(unsigned char *)(v16 + 16) = 2;
  v14();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  unint64_t v8 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_24710FE80;
  unint64_t v11 = v10 + v9 + v8[14];
  *(void *)(v10 + v9) = 1;
  *(void *)unint64_t v11 = a3;
  *(void *)(v11 + 8) = a4;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = *MEMORY[0x263F50728];
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 24) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(void *)(*(void *)v0 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(void *a1, char *a2)
{
  return specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, specialized static Array<A>.== infix(_:_:)) & 1;
}

Swift::Int CLP_LogEntry_AONLoc_WiFiIndication.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CLP_LogEntry_AONLoc_WiFiIndication())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_WiFiIndication()
{
  return CLP_LogEntry_AONLoc_WiFiIndication.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_WiFiIndication@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_AONLoc_BtIndication.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_BtIndication.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_BtIndication.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 11) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 24) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(void *)(*(void *)v0 + 16))
    {
      type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_AONLoc_BtIndication.== infix(_:_:)(void *a1, char *a2)
{
  return specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, specialized static Array<A>.== infix(_:_:)) & 1;
}

Swift::Int CLP_LogEntry_AONLoc_BtIndication.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CLP_LogEntry_AONLoc_WiFiIndication@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_BtIndication()
{
  return CLP_LogEntry_AONLoc_BtIndication.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_BtIndication()
{
  return CLP_LogEntry_AONLoc_BtIndication.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_BtIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_BtIndication@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_BtIndication(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_BtIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_AONLoc_Indication.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_Indication.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_Indication.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_AONLoc_Indication._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for defaultInstance()
{
  type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(_DWORD *)(v0 + 28) = 0;
  *(_WORD *)(v0 + 32) = 1793;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  uint64_t v2 = type metadata accessor for Proto_Gpsd_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  uint64_t v4 = type metadata accessor for Proto_Gpsd_Indication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v7(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, 1, 1, v6);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 13;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, 1, 1, v2);
  static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator) = 5;
  v12(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, 1, 1, v11);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable) = 2;
  uint64_t v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  static CLP_LogEntry_PrivateData_Measurement._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = MEMORY[0x263F8EE78];
  static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = MEMORY[0x263F8EE78];
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections) = v4;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  static CLP_LogEntry_PrivateData_SvInfo._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 20) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, 1, 1, v4);
  static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = MEMORY[0x263F8EE78];
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = v5;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset) = v5;
  static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  uint64_t v2 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  static CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 4;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 14;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, 1, 1, v2);
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame) = 3;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType) = 8;
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController) = 2;
  static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;

  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(void *)(v0 + 80) = 0;
  *(unsigned char *)(v0 + 88) = 1;
  *(_DWORD *)(v0 + 92) = 0;
  *(unsigned char *)(v0 + 96) = 1;
  *(_DWORD *)(v0 + 100) = 0;
  *(unsigned char *)(v0 + 104) = 1;
  *(_DWORD *)(v0 + 108) = 0;
  *(_WORD *)(v0 + 113) = 1026;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  *(unsigned char *)(v0 + 112) = 1;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted) = 2;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel) = 4;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, 1, 1, v2);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice) = 3;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates) = 2;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  uint64_t v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed) = 2;
  int v20 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  *(void *)int v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  os_log_type_t v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  *(void *)os_log_type_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused) = 2;
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, 1, 1, v2);
  unsigned int v22 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  *(void *)unsigned int v22 = 0;
  *(unsigned char *)(v22 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame) = 3;
  uint64_t v23 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  *(void *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 8) = 1;
  uint64_t v24 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 8) = 1;
  uint64_t v25 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  *(void *)uint64_t v25 = 0;
  *(unsigned char *)(v25 + 8) = 1;
  uint64_t v26 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  *(void *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 8) = 1;
  uint64_t v27 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  *(void *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl) = 2;
  uint64_t v28 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 8) = 1;
  unsigned int v29 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  *(void *)unsigned int v29 = 0;
  *(unsigned char *)(v29 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport) = MEMORY[0x263F8EE78];
  os_log_type_t v30 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent) = 3;
  unint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState) = 3;
  unint64_t v33 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  *(void *)unint64_t v33 = 0;
  *(unsigned char *)(v33 + 8) = 1;
  int v34 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  *(void *)int v34 = 0;
  *(unsigned char *)(v34 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType) = 4;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy) = 3;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp) = 2;
  static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active) = 2;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality) = 3;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  static CLP_LogEntry_PrivateData_Location._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 67306568;
  *(unsigned char *)(v0 + 20) = 2;
  *(_DWORD *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 28) = 1;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  *(_WORD *)(v0 + 41) = 1026;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(_WORD *)(v0 + 73) = 1096;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, 1, 1, v2);
  static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  static CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  static CLP_LogEntry_PrivateData_MapVector._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved) = 2;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData) = 20;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected) = 2;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode) = 2;
  static CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = (void *)(v0
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  char *v13 = 0;
  v13[1] = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace) = 2;
  uint64_t v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  uint64_t v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4) = 1;
  uint64_t v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 4) = 1;
  int v20 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)int v20 = 0;
  *(unsigned char *)(v20 + 4) = 1;
  os_log_type_t v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)os_log_type_t v21 = 0;
  *(unsigned char *)(v21 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  unsigned int v22 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias) = 2;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)uint64_t v9 = 0;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;

  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, 1, 1, v4);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel) = 8;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p) = 2;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 15;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType) = 15;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power) = 2;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake) = 2;
  static CLP_LogEntry_PrivateData_WifiNotification._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  static CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 18;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(inited - 8) + 56))(v7, 1, 1, inited);
  static Proto_Gnss_Emergency_Init._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 20) = 1;
  *(_WORD *)(v0 + 21) = 8466;
  *(unsigned char *)(v0 + 23) = 24;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 48) = 1;
  *(void *)(v0 + 56) = 0;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  *(unsigned char *)(v0 + 80) = 1;
  *(void *)(v0 + 88) = 0;
  *(unsigned char *)(v0 + 96) = 1;
  *(void *)(v0 + 104) = 0;
  *(unsigned char *)(v0 + 112) = 1;
  *(void *)(v0 + 120) = 0;
  *(unsigned char *)(v0 + 128) = 1;
  *(_WORD *)(v0 + 129) = 514;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  *(unsigned char *)(v0 + 131) = 2;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  static Proto_Gnss_Emergency_SessionStatus._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_WORD *)(result + 20) = 1281;
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = 0;
  *(unsigned char *)(result + 36) = 1;
  *(_DWORD *)(result + 40) = 0;
  *(unsigned char *)(result + 44) = 1;
  *(_DWORD *)(result + 48) = 0;
  *(unsigned char *)(result + 52) = 1;
  *(_DWORD *)(result + 56) = 0;
  *(unsigned char *)(result + 60) = 1;
  *(_DWORD *)(result + 64) = 0;
  *(unsigned char *)(result + 68) = 1;
  *(_DWORD *)(result + 72) = 0;
  *(unsigned char *)(result + 76) = 1;
  *(_DWORD *)(result + 80) = 0;
  *(unsigned char *)(result + 84) = 1;
  *(_DWORD *)(result + 88) = 0;
  *(unsigned char *)(result + 92) = 1;
  *(_DWORD *)(result + 96) = 0;
  *(unsigned char *)(result + 100) = 1;
  *(_DWORD *)(result + 104) = 0;
  *(unsigned char *)(result + 108) = 1;
  *(_DWORD *)(result + 112) = 0;
  *(_WORD *)(result + 116) = 1793;
  *(_DWORD *)(result + 120) = 0;
  *(unsigned char *)(result + 124) = 1;
  *(_DWORD *)(result + 128) = 0;
  *(unsigned char *)(result + 132) = 1;
  static Proto_Gnss_Emergency_PositionRequest._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  static Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  uint64_t v12 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  uint64_t v14 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  static Proto_Gnss_Emergency_ShapeInfo._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 9;
  *(_DWORD *)(v0 + 20) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate;
  uint64_t v8 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate;
  uint64_t v10 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  static Proto_Gnss_Emergency_PositionReport._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 20) = 1;
  *(_DWORD *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 28) = 1;
  *(_DWORD *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 36) = 1;
  *(_DWORD *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 44) = 1;
  *(void *)(v0 + 48) = MEMORY[0x263F8EE78];
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent;
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  static Proto_Gnss_Emergency_GpsMeasurements._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 9;
  *(_DWORD *)(v0 + 20) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssMeasurements;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__moreGanssMeasurements;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime) = 2;
  static Proto_Gnss_Emergency_MeasurementReport._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 7;
  *(_DWORD *)(v0 + 20) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(_DWORD *)(v0 + 28) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  *(void *)(v0 + 40) = MEMORY[0x263F8EE78];
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssDataBitAssist;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssNavModelAddData;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAddAssistDataChoices;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  static Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 9;
  *(_DWORD *)(v0 + 20) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__assistanceRequest;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAssistanceRequest;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  static Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris._StorageClass();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 20) = 1;
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = 0;
  *(unsigned char *)(result + 36) = 1;
  *(_DWORD *)(result + 40) = 0;
  *(unsigned char *)(result + 44) = 1;
  *(_DWORD *)(result + 48) = 0;
  *(unsigned char *)(result + 52) = 1;
  *(_DWORD *)(result + 56) = 0;
  *(unsigned char *)(result + 60) = 1;
  *(_DWORD *)(result + 64) = 0;
  *(unsigned char *)(result + 68) = 1;
  *(_DWORD *)(result + 72) = 0;
  *(unsigned char *)(result + 76) = 1;
  *(_DWORD *)(result + 80) = 0;
  *(unsigned char *)(result + 84) = 1;
  *(_DWORD *)(result + 88) = 0;
  *(unsigned char *)(result + 92) = 1;
  *(_DWORD *)(result + 96) = 0;
  *(unsigned char *)(result + 100) = 1;
  *(_DWORD *)(result + 104) = 0;
  *(unsigned char *)(result + 108) = 1;
  *(_DWORD *)(result + 112) = 0;
  *(unsigned char *)(result + 116) = 1;
  *(_DWORD *)(result + 120) = 0;
  *(unsigned char *)(result + 124) = 1;
  *(_DWORD *)(result + 128) = 0;
  *(unsigned char *)(result + 132) = 1;
  *(_DWORD *)(result + 136) = 0;
  *(unsigned char *)(result + 140) = 1;
  *(_DWORD *)(result + 144) = 0;
  *(unsigned char *)(result + 148) = 1;
  *(_DWORD *)(result + 152) = 0;
  *(unsigned char *)(result + 156) = 1;
  *(_DWORD *)(result + 160) = 0;
  *(unsigned char *)(result + 164) = 1;
  *(_DWORD *)(result + 168) = 0;
  *(unsigned char *)(result + 172) = 1;
  *(_DWORD *)(result + 176) = 0;
  *(unsigned char *)(result + 180) = 1;
  *(_DWORD *)(result + 184) = 0;
  *(unsigned char *)(result + 188) = 1;
  *(_DWORD *)(result + 192) = 0;
  *(unsigned char *)(result + 196) = 1;
  *(_DWORD *)(result + 200) = 0;
  *(unsigned char *)(result + 204) = 1;
  *(_DWORD *)(result + 208) = 0;
  *(unsigned char *)(result + 212) = 1;
  *(_DWORD *)(result + 216) = 0;
  *(unsigned char *)(result + 220) = 1;
  *(_DWORD *)(result + 224) = 0;
  *(unsigned char *)(result + 228) = 1;
  *(_DWORD *)(result + 232) = 0;
  *(unsigned char *)(result + 236) = 1;
  *(_DWORD *)(result + 240) = 0;
  *(unsigned char *)(result + 244) = 1;
  *(_DWORD *)(result + 248) = 0;
  *(unsigned char *)(result + 252) = 1;
  *(_DWORD *)(result + 256) = 0;
  *(unsigned char *)(result + 260) = 1;
  *(_DWORD *)(result + 264) = 0;
  *(unsigned char *)(result + 268) = 1;
  *(_DWORD *)(result + 272) = 0;
  *(unsigned char *)(result + 276) = 1;
  *(_DWORD *)(result + 280) = 0;
  *(unsigned char *)(result + 284) = 1;
  static Proto_Gnss_Emergency_GpsEphemeris._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_MeasurementReportWithEstimate._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 9;
  *(_DWORD *)(v0 + 20) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationIndication;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Emergency_Is801LocationInd(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__afltAction) = 4;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime) = 2;
  static Proto_Gnss_Emergency_MeasurementReportWithEstimate._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  type metadata accessor for Proto_Gnss_Fix._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__time;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Time(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__position;
  uint64_t v4 = type metadata accessor for Proto_Gnss_Position(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__velocity;
  uint64_t v6 = type metadata accessor for Proto_Gnss_Velocity(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__spoofingFlags;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__estimationTechnology) = 5;
  static Proto_Gnss_Fix._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for Proto_Gnss_TimeTransferDataExtend._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__data;
  uint64_t v2 = type metadata accessor for Proto_Gnss_TimeTransferData(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkBeforeMachAbsTick;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkAfterMachAbsTick;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__currentMachContMinusMachAbsNs;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkCenterMachAbsTimeNs;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  static Proto_Gnss_TimeTransferDataExtend._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  *(_DWORD *)(v0 + 44) = 0;
  *(unsigned char *)(v0 + 48) = 1;
  *(_DWORD *)(v0 + 52) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  *(_DWORD *)(v0 + 60) = 0;
  *(unsigned char *)(v0 + 64) = 1;
  *(_OWORD *)(v0 + 72) = xmmword_247109500;
  *(unsigned char *)(v0 + 88) = 3;
  *(void *)(v0 + 96) = 0;
  *(unsigned char *)(v0 + 104) = 1;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_DWORD *)(v0 + 124) = 0;
  *(unsigned char *)(v0 + 128) = 1;
  *(_OWORD *)(v0 + 152) = 0u;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35CLP_LogEntry_AONLoc_BtAdvertisementP33_E9587737FC1639A911680431159314D113_StorageClass__type7Info;
  *(_OWORD *)(v0 + 136) = 0u;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  static CLP_LogEntry_AONLoc_BtAdvertisement._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t started;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t result;

  type metadata accessor for Proto_Gpsd_Request._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(_DWORD *)(v0 + 28) = 0;
  *(_WORD *)(v0 + 32) = 15617;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistancePosition;
  uint64_t v2 = type metadata accessor for Proto_Gpsd_InjectAssistancePosition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistanceTime;
  uint64_t v4 = type metadata accessor for Proto_Gpsd_InjectAssistanceTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistancePressure;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_SetAssistancePressure(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceAccel;
  uint64_t v8 = type metadata accessor for Proto_Gpsd_SetAssistanceAccel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceGyro;
  uint64_t v10 = type metadata accessor for Proto_Gpsd_SetAssistanceGyro(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceDem;
  uint64_t v12 = type metadata accessor for Proto_Gpsd_SetAssistanceDem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMapVector;
  uint64_t v14 = type metadata accessor for Proto_Gpsd_SetAssistanceMapVector(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMotionActivityContext;
  uint64_t v16 = type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMountState;
  uint64_t v18 = type metadata accessor for Proto_Gpsd_SetAssistanceMountState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSignalEnvironment;
  int v20 = type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  os_log_type_t v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSpeedConstraint;
  unsigned int v22 = type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceAlongTrackVelocity;
  uint64_t v24 = type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistanceFile;
  uint64_t v26 = type metadata accessor for Proto_Gpsd_InjectAssistanceFile(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectRtiFile;
  uint64_t v28 = type metadata accessor for Proto_Gpsd_InjectRtiFile(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  unsigned int v29 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectSvidBlocklist;
  os_log_type_t v30 = type metadata accessor for Proto_Gpsd_InjectSvidBlocklist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  unint64_t v31 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__deleteGnssData;
  uint64_t v32 = type metadata accessor for Proto_Gpsd_DeleteGnssData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  unint64_t v33 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setPvtmReport;
  int v34 = type metadata accessor for Proto_Gpsd_SetPvtmReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  os_log_type_t v35 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setNmeaHandler;
  unint64_t v36 = type metadata accessor for Proto_Gpsd_SetNmeaHandler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  unint64_t v37 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigSimulatorMode;
  char v38 = type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  uint64_t v39 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigEnableGnssConstellations;
  unint64_t v40 = type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v41 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigDutyCycling;
  uint64_t v42 = type metadata accessor for Proto_Gpsd_SetConfigDutyCycling(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
  int v43 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__terminationImminent;
  uint64_t v44 = type metadata accessor for Proto_Gpsd_TerminationImminent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
  id v45 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__exitMessage;
  unint64_t v46 = type metadata accessor for Proto_Gpsd_ExitMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 1, 1, v46);
  uint64_t v47 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectLtlInfo;
  long long v48 = type metadata accessor for Proto_Gpsd_LtlInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
  long long v49 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__startContext;
  started = type metadata accessor for Proto_Gpsd_StartContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 56))(v49, 1, 1, started);
  id v51 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cntinStatusUpdate;
  uint64_t v52 = type metadata accessor for Proto_Gpsd_CntinStatusMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 1, 1, v52);
  uint64_t v53 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setThermalRiskState;
  uint64_t v54 = type metadata accessor for Proto_Gpsd_SetThermalRiskState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 1, 1, v54);
  uint64_t v55 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigRfBandEnable;
  v56 = type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 1, 1, v56);
  Class v57 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__emergConfig;
  uint64_t v58 = type metadata accessor for Proto_Gnss_Emergency_EmergConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 1, 1, v58);
  v59 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__positionRequest;
  uint64_t v60 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 1, 1, v60);
  uint64_t v61 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__sessionID;
  *(_DWORD *)uint64_t v61 = 0;
  *(unsigned char *)(v61 + 4) = 1;
  uint64_t v62 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsReferenceTime;
  v63 = type metadata accessor for Proto_Gnss_Emergency_GpsReferenceTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 1, 1, v63);
  unint64_t v64 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__referenceLocation;
  unint64_t v65 = type metadata accessor for Proto_Gnss_Emergency_ReferenceLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v64, 1, 1, v65);
  unint64_t v66 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsNavigationModel;
  uint64_t v67 = type metadata accessor for Proto_Gnss_Emergency_GpsNavigationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v66, 1, 1, v67);
  v68 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsAcqAssistance;
  uint64_t v69 = type metadata accessor for Proto_Gnss_Emergency_GpsAcqAssistance(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 1, 1, v69);
  Class v70 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cellFtAssistance;
  id v71 = type metadata accessor for Proto_Gnss_Emergency_CellFTAssistance(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v70, 1, 1, v71);
  uint64_t v72 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneContext;
  v73 = type metadata accessor for Proto_Gnss_Emergency_CplaneContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v72, 1, 1, v73);
  v74 = MEMORY[0x263F8EE78];
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitVec) = MEMORY[0x263F8EE78];
  v75 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__locationID;
  v76 = type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
  v77 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitIndex;
  *(_DWORD *)v77 = 0;
  *(unsigned char *)(v77 + 4) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplCert) = v74;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__servingCellLte) = 2;
  v78 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__simInstance;
  *(_DWORD *)v78 = 0;
  *(unsigned char *)(v78 + 4) = 1;
  v79 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplContext;
  v80 = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v79, 1, 1, v80);
  v81 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__wlanMeasurementList;
  v82 = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
  static Proto_Gpsd_Request._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;

  type metadata accessor for Proto_Gpsd_Indication._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_WORD *)(v0 + 16) = 15640;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  uint64_t v1 = v0 + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__fix;
  uint64_t v2 = type metadata accessor for Proto_Gnss_Fix(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__meas;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__powerMeasurement;
  uint64_t v6 = type metadata accessor for Proto_Gnss_PwrMeasurement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__status;
  uint64_t v8 = type metadata accessor for Proto_Gpsd_Status(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__timeTransferDataExtend;
  uint64_t v10 = type metadata accessor for Proto_Gnss_TimeTransferDataExtend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__recoveryStatistics;
  uint64_t v12 = type metadata accessor for Proto_Gpsd_RecoveryStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__ltlInfoRequest;
  uint64_t v14 = type metadata accessor for Proto_Gpsd_LtlInfoRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__decodedExtendedEphemeris;
  uint64_t v16 = type metadata accessor for Proto_Gnss_DecodedExtendedEphemeris(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__decodedRti;
  uint64_t v18 = type metadata accessor for Proto_Gnss_DecodedRti(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__startStatus) = 10;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__stopStatus) = 10;
  uint64_t v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cntinClockControl;
  int v20 = type metadata accessor for Proto_Gpsd_CntinClockControl(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  os_log_type_t v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__exception;
  unsigned int v22 = type metadata accessor for Proto_Gpsd_Exception(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__askBasebandReset;
  uint64_t v24 = type metadata accessor for Proto_Gpsd_AskBasebandReset(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__summaryReport;
  uint64_t v26 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__positionReport;
  uint64_t v28 = type metadata accessor for Proto_Gnss_Emergency_PositionReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  unsigned int v29 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneMeasurementReport;
  os_log_type_t v30 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  unint64_t v31 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__assistanceNeededReport;
  uint64_t v32 = type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  unint64_t v33 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cellFtAssistanceRequest;
  int v34 = type metadata accessor for Proto_Gnss_Emergency_CellFTAssistanceRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  os_log_type_t v35 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneMeasurementReportWithEstimate;
  unint64_t v36 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReportWithEstimate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  unint64_t v37 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplSessionStatus;
  char v38 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  uint64_t v39 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__decodedSuplInit;
  unint64_t v40 = type metadata accessor for Proto_Gnss_Emergency_Init(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v41 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitIndex;
  *(_DWORD *)uint64_t v41 = 0;
  *(unsigned char *)(v41 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitDecodeResult) = 4;
  uint64_t v42 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__simInstance;
  *(_DWORD *)uint64_t v42 = 0;
  *(unsigned char *)(v42 + 4) = 1;
  int v43 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__wlanMeasurementRequest;
  uint64_t v44 = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
  static Proto_Gpsd_Indication._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  type metadata accessor for Proto_Gpsd_LtlInfo._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 2;
  *(_DWORD *)(v0 + 20) = 0;
  *(_WORD *)(v0 + 24) = 1281;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams;
  uint64_t v2 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams;
  uint64_t v4 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal;
  uint64_t v8 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  static Proto_Gpsd_LtlInfo._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(unsigned char **)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((v9[24] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  swift_beginAccess();
  if ((v9[32] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[33] != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #4 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #7 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #8 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #9 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Response?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_Response);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Response and conformance Proto_Gpsd_Response, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for Proto_Gpsd_Response);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_Indication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Indication and conformance Proto_Gpsd_Indication, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for Proto_Gpsd_Indication);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t closure #7 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t closure #8 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t closure #9 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

BOOL closure #1 in static CLP_LogEntry_AONLoc_Indication.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v129 = *(void *)(v4 - 8);
  uint64_t v130 = v4;
  MEMORY[0x270FA5388](v4);
  v126 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_BtIndication?, CLP_LogEntry_AONLoc_BtIndication?));
  MEMORY[0x270FA5388](v128);
  uint64_t v131 = (uint64_t)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  v127 = (char **)((char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v134 = (uint64_t)&v126 - v10;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v140 = *(void *)(v11 - 8);
  uint64_t v141 = v11;
  MEMORY[0x270FA5388](v11);
  v133 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_WiFiIndication?, CLP_LogEntry_AONLoc_WiFiIndication?));
  MEMORY[0x270FA5388](v139);
  uint64_t v142 = (uint64_t)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  v136 = (char **)((char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v144 = (uint64_t)&v126 - v17;
  uint64_t v149 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v147 = *(void *)(v149 - 8);
  MEMORY[0x270FA5388](v149);
  uint64_t v138 = (uint64_t)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Response?, CLP_LogEntry_AONLoc_Response?));
  uint64_t v19 = MEMORY[0x270FA5388](v148);
  uint64_t v135 = (uint64_t)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v146 = (uint64_t)&v126 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v132 = (uint64_t)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v137 = (uint64_t)&v126 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v143 = (uint64_t)&v126 - v28;
  MEMORY[0x270FA5388](v27);
  v151 = (char *)&v126 - v29;
  uint64_t v30 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v153 = *(void *)(v30 - 8);
  uint64_t v154 = v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v145 = (uint64_t)&v126 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Proto_Gpsd_Indication?, Proto_Gpsd_Indication?));
  MEMORY[0x270FA5388](v152);
  uint64_t v155 = (uint64_t)&v126 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  uint64_t v34 = MEMORY[0x270FA5388](v33 - 8);
  uint64_t v150 = (uint64_t)&v126 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v156 = (uint64_t)&v126 - v36;
  uint64_t v37 = type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v157 = *(void *)(v37 - 8);
  uint64_t v158 = v37;
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = (char *)&v126 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Proto_Gpsd_Response?, Proto_Gpsd_Response?));
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v126 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Response?);
  uint64_t v44 = MEMORY[0x270FA5388](v43 - 8);
  unint64_t v46 = (char *)&v126 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v44);
  long long v48 = (char *)&v126 - v47;
  swift_beginAccess();
  uint64_t v49 = *(void *)(a1 + 16);
  uint64_t v160 = a1;
  LOBYTE(a1) = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  uint64_t v159 = a2;
  char v50 = *(unsigned char *)(a2 + 24);
  if (a1)
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (v49 != *(void *)(a2 + 16)) {
      char v50 = 1;
    }
    if (v50) {
      return 0;
    }
  }
  uint64_t v51 = v160;
  swift_beginAccess();
  int v52 = *(_DWORD *)(v51 + 28);
  char v53 = *(unsigned char *)(v51 + 32);
  uint64_t v54 = v159;
  swift_beginAccess();
  char v55 = *(unsigned char *)(v54 + 32);
  if (v53)
  {
    if (!*(unsigned char *)(v54 + 32)) {
      return 0;
    }
  }
  else
  {
    if (v52 != *(_DWORD *)(v54 + 28)) {
      char v55 = 1;
    }
    if (v55) {
      return 0;
    }
  }
  uint64_t v56 = v160;
  swift_beginAccess();
  uint64_t v57 = *(char *)(v56 + 33);
  uint64_t v58 = v159;
  swift_beginAccess();
  uint64_t v59 = *(char *)(v58 + 33);
  if (v57 == 7)
  {
    if (v59 != 7) {
      return 0;
    }
  }
  else if (v59 == 7 || qword_247109498[v57] != qword_247109498[v59])
  {
    return 0;
  }
  uint64_t v60 = v56
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, (uint64_t)v48, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  uint64_t v61 = v58
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  uint64_t v62 = (uint64_t)&v42[*(int *)(v40 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v48, (uint64_t)v42, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v62, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48);
  if (v63((uint64_t)v42, 1, v158) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v48, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
    if (v63(v62, 1, v158) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v42, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
      uint64_t v64 = v56;
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v42, (uint64_t)v46, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  if (v63(v62, 1, v158) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v48, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v46, type metadata accessor for Proto_Gpsd_Response);
LABEL_23:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v42, &demangling cache variable for type metadata for (Proto_Gpsd_Response?, Proto_Gpsd_Response?));
LABEL_32:
    swift_release();
    swift_release();
    return 0;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v62, (uint64_t)v39, type metadata accessor for Proto_Gpsd_Response);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Response and conformance Proto_Gpsd_Response, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
  swift_retain();
  swift_retain();
  uint64_t v64 = v56;
  char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v39, type metadata accessor for Proto_Gpsd_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v48, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v46, type metadata accessor for Proto_Gpsd_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v42, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  if ((v65 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_25:
  uint64_t v66 = v64
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  uint64_t v67 = v156;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, v156, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  uint64_t v68 = v58
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  uint64_t v69 = v155;
  uint64_t v70 = v155 + *(int *)(v152 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v155, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, v70, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  uint64_t v71 = v154;
  uint64_t v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v153 + 48);
  if (v72(v69, 1, v154) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
    int v73 = v72(v70, 1, v71);
    uint64_t v74 = (uint64_t)v151;
    if (v73 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
      goto LABEL_35;
    }
LABEL_30:
    v77 = &demangling cache variable for type metadata for (Proto_Gpsd_Indication?, Proto_Gpsd_Indication?);
    uint64_t v78 = v69;
LABEL_31:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, v77);
    goto LABEL_32;
  }
  uint64_t v75 = v150;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, v150, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  int v76 = v72(v70, 1, v71);
  uint64_t v74 = (uint64_t)v151;
  if (v76 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v75, type metadata accessor for Proto_Gpsd_Indication);
    goto LABEL_30;
  }
  uint64_t v80 = v75;
  uint64_t v81 = v145;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v70, v145, type metadata accessor for Proto_Gpsd_Indication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Indication and conformance Proto_Gpsd_Indication, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
  char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v81, type metadata accessor for Proto_Gpsd_Indication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v80, type metadata accessor for Proto_Gpsd_Indication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  if ((v82 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_35:
  uint64_t v83 = v160
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, v74, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v84 = v58
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  uint64_t v85 = v146;
  uint64_t v86 = v146 + *(int *)(v148 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, v146, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84, v86, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
  uint64_t v88 = v149;
  if (v87(v85, 1, v149) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
    if (v87(v86, 1, v88) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
      goto LABEL_42;
    }
LABEL_40:
    v90 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Response?, CLP_LogEntry_AONLoc_Response?);
    uint64_t v91 = v85;
LABEL_48:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, v90);
    goto LABEL_32;
  }
  uint64_t v89 = v143;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85, v143, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if (v87(v86, 1, v88) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v89, type metadata accessor for CLP_LogEntry_AONLoc_Response);
    goto LABEL_40;
  }
  uint64_t v92 = v138;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v86, v138, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  char v93 = specialized static CLP_LogEntry_AONLoc_Response.== infix(_:_:)(v89, v92);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v92, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v89, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((v93 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_42:
  uint64_t v94 = v160
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  uint64_t v95 = v144;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v94, v144, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  uint64_t v96 = v159
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  uint64_t v97 = v142;
  uint64_t v98 = v142 + *(int *)(v139 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, v142, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v96, v98, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  uint64_t v99 = v141;
  v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
  if (v100(v97, 1, v141) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
    if (v100(v98, 1, v99) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  v101 = v87;
  v102 = v136;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, (uint64_t)v136, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  if (v100(v98, 1, v99) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v102, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
LABEL_47:
    v90 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_WiFiIndication?, CLP_LogEntry_AONLoc_WiFiIndication?);
    uint64_t v91 = v97;
    goto LABEL_48;
  }
  v103 = v133;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v98, (uint64_t)v133, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  char v104 = specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(v102, v103, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, specialized static Array<A>.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v103, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v102, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  v87 = v101;
  if ((v104 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_51:
  uint64_t v105 = v160
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  uint64_t v106 = v137;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, v137, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v107 = v159
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  uint64_t v108 = v135;
  uint64_t v109 = v135 + *(int *)(v148 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106, v135, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v107, v109, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v110 = v149;
  if (v87(v108, 1, v149) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
    unsigned int v111 = v87(v109, 1, v110);
    uint64_t v112 = v159;
    if (v111 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v108, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  uint64_t v113 = v132;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v108, v132, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if (v87(v109, 1, v110) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v137, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v113, type metadata accessor for CLP_LogEntry_AONLoc_Response);
LABEL_56:
    v77 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Response?, CLP_LogEntry_AONLoc_Response?);
    uint64_t v78 = v108;
    goto LABEL_31;
  }
  uint64_t v114 = v138;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v109, v138, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  char v115 = specialized static CLP_LogEntry_AONLoc_Response.== infix(_:_:)(v113, v114);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v114, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v137, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v113, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v108, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  uint64_t v112 = v159;
  if ((v115 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_58:
  uint64_t v116 = v160
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  uint64_t v117 = v134;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, v134, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  uint64_t v118 = v112
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  uint64_t v119 = v131;
  uint64_t v120 = v131 + *(int *)(v128 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, v131, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v118, v120, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  uint64_t v121 = v130;
  v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
  if (v122(v119, 1, v130) != 1)
  {
    v123 = v127;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, (uint64_t)v127, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
    if (v122(v120, 1, v121) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v134, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v123, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
      goto LABEL_63;
    }
    v124 = v126;
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v120, (uint64_t)v126, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    char v125 = specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(v123, v124, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, specialized static Array<A>.== infix(_:_:));
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v124, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v134, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v123, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
    return (v125 & 1) != 0;
  }
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v134, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  if (v122(v120, 1, v121) != 1)
  {
LABEL_63:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_BtIndication?, CLP_LogEntry_AONLoc_BtIndication?));
    return 0;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  return 1;
}

Swift::Int CLP_LogEntry_AONLoc_Indication.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_Indication, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Indication@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_Indication(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap, a1);
}

void *CLP_LogEntry_AONLoc_LogEntry.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_LogEntry.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_LogEntry.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap);
}

uint64_t CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap, a1);
}

uint64_t static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
        type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request;
        uint64_t v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request;
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t closure #2 in CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

Swift::Int CLP_LogEntry_AONLoc_LogEntry.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

Swift::Int CLP_LogEntry_AONLoc_Request.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_LogEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 24);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_LogEntry()
{
  return CLP_LogEntry_AONLoc_LogEntry.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_LogEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_LogEntry(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CLP_LogEntry_AONLoc_Request()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CLP_LogEntry_AONLoc_Request()
{
  return Hasher._finalize()();
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        char v15 = specialized static CLP_LogEntry_PrivateData_SignalCorrelationPeak.== infix(_:_:)((uint64_t)v10, (uint64_t)v7);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, int *);
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  double *v35;
  char v36;
  double *v37;
  int v38;
  uint64_t v39;
  double *v40;
  char v41;
  double *v42;
  int v43;
  uint64_t v44;
  double *v45;
  char v46;
  double *v47;
  int v48;
  char v49;
  char v50;
  BOOL v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int *v61;
  unsigned int (**v62)(char *, uint64_t, int *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?));
  MEMORY[0x270FA5388](v63);
  unint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v65 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  uint64_t v13 = MEMORY[0x270FA5388](v65);
  char v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v64 = a1;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19 != *(void *)(a2 + 16)) {
    goto LABEL_47;
  }
  if (!v19 || v64 == a2)
  {
    char v50 = 1;
    return v50 & 1;
  }
  uint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v56 = *(void *)(v16 + 72);
  uint64_t v57 = a2;
  uint64_t v61 = (int *)v4;
  uint64_t v62 = (unsigned int (**)(char *, uint64_t, int *))(v5 + 48);
  uint64_t v21 = v19 - 1;
  uint64_t v58 = v12;
  uint64_t v59 = v15;
  uint64_t v60 = (char *)&v56 - v17;
  while (1)
  {
    outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v64 + v20, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a2 + v20, (uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    uint64_t v22 = *(int *)(v65 + 20);
    uint64_t v23 = (double *)&v18[v22];
    uint64_t v24 = v18[v22 + 8];
    uint64_t v25 = (double *)&v15[v22];
    uint64_t v26 = v15[v22 + 8];
    if (v24)
    {
      if (!v26) {
        goto LABEL_46;
      }
    }
    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if (v26) {
        goto LABEL_46;
      }
    }
    uint64_t v27 = *(int *)(v65 + 24);
    uint64_t v28 = (uint64_t)&v15[v27];
    uint64_t v29 = (uint64_t)&v12[*(int *)(v63 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)&v18[v27], (uint64_t)v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    uint64_t v30 = *v62;
    uint64_t v31 = v12;
    uint64_t v32 = (uint64_t)v12;
    uint64_t v33 = v61;
    if ((*v62)(v31, 1, v61) == 1)
    {
      if (v30((char *)v29, 1, v33) != 1)
      {
        char v53 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?);
        uint64_t v54 = (uint64_t)v58;
        char v15 = v59;
        uint64_t v18 = v60;
        goto LABEL_45;
      }
      unint64_t v12 = v58;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
      char v15 = v59;
      uint64_t v18 = v60;
      goto LABEL_34;
    }
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v32, (uint64_t)v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    if (v30((char *)v29, 1, v33) == 1) {
      break;
    }
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v29, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    uint64_t v34 = v33[5];
    uint64_t v35 = (double *)&v10[v34];
    uint64_t v36 = v10[v34 + 8];
    uint64_t v37 = (double *)&v7[v34];
    uint64_t v38 = v7[v34 + 8];
    if (v36)
    {
      char v15 = v59;
      uint64_t v18 = v60;
      if (!v38) {
        goto LABEL_41;
      }
    }
    else
    {
      if (*v35 != *v37) {
        LOBYTE(v38) = 1;
      }
      char v15 = v59;
      uint64_t v18 = v60;
      if (v38)
      {
LABEL_41:
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
        char v53 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?;
        uint64_t v54 = (uint64_t)v58;
        goto LABEL_44;
      }
    }
    uint64_t v39 = v33[6];
    uint64_t v40 = (double *)&v10[v39];
    uint64_t v41 = v10[v39 + 8];
    uint64_t v42 = (double *)&v7[v39];
    uint64_t v43 = v7[v39 + 8];
    if (v41)
    {
      if (!v43) {
        goto LABEL_41;
      }
    }
    else
    {
      if (*v40 != *v42) {
        LOBYTE(v43) = 1;
      }
      if (v43) {
        goto LABEL_41;
      }
    }
    uint64_t v44 = v33[7];
    uint64_t v45 = (double *)&v10[v44];
    unint64_t v46 = v10[v44 + 8];
    uint64_t v47 = (double *)&v7[v44];
    long long v48 = v7[v44 + 8];
    if (v46)
    {
      if (!v48) {
        goto LABEL_41;
      }
    }
    else
    {
      if (*v45 != *v47) {
        LOBYTE(v48) = 1;
      }
      if (v48) {
        goto LABEL_41;
      }
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v49 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    unint64_t v12 = v58;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    if ((v49 & 1) == 0) {
      goto LABEL_46;
    }
LABEL_34:
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    int v52 = v21-- != 0;
    if (v50)
    {
      a2 = v57;
      v20 += v56;
      if (v52) {
        continue;
      }
    }
    return v50 & 1;
  }
  char v53 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?);
  uint64_t v54 = (uint64_t)v58;
  char v15 = v59;
  uint64_t v18 = v60;
LABEL_44:
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_45:
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v53);
LABEL_46:
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
LABEL_47:
  char v50 = 0;
  return v50 & 1;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  uint64_t v29;
  double *v30;
  char v31;
  double *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  BOOL v39;
  uint64_t v41;

  uint64_t v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        char v15 = v4[5];
        uint64_t v16 = v10[v15];
        BOOL v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13) {
            goto LABEL_43;
          }
        }
        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_43;
        }
        uint64_t v19 = v4[6];
        uint64_t v20 = (double *)&v10[v19];
        uint64_t v21 = v10[v19 + 8];
        uint64_t v22 = (double *)&v7[v19];
        uint64_t v23 = v7[v19 + 8];
        if (v21)
        {
          if (!v23) {
            goto LABEL_43;
          }
        }
        else
        {
          if (*v20 != *v22) {
            LOBYTE(v23) = 1;
          }
          if (v23)
          {
LABEL_43:
            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            goto LABEL_44;
          }
        }
        uint64_t v24 = v4[7];
        uint64_t v25 = (double *)&v10[v24];
        uint64_t v26 = v10[v24 + 8];
        uint64_t v27 = (double *)&v7[v24];
        uint64_t v28 = v7[v24 + 8];
        if (v26)
        {
          if (!v28) {
            goto LABEL_43;
          }
        }
        else
        {
          if (*v25 != *v27) {
            LOBYTE(v28) = 1;
          }
          if (v28) {
            goto LABEL_43;
          }
        }
        uint64_t v29 = v4[8];
        uint64_t v30 = (double *)&v10[v29];
        uint64_t v31 = v10[v29 + 8];
        uint64_t v32 = (double *)&v7[v29];
        uint64_t v33 = v7[v29 + 8];
        if (v31)
        {
          if (!v33) {
            goto LABEL_43;
          }
        }
        else
        {
          if (*v30 != *v32) {
            LOBYTE(v33) = 1;
          }
          if (v33) {
            goto LABEL_43;
          }
        }
        uint64_t v34 = v4[9];
        uint64_t v35 = v10[v34];
        uint64_t v36 = v7[v34];
        if (v35 == 3)
        {
          if (v36 != 3) {
            goto LABEL_43;
          }
        }
        else if (v36 == 3 || v35 != v36)
        {
          goto LABEL_43;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        uint64_t v39 = v14-- != 0;
        if (v37)
        {
          v12 += v13;
          if (v39) {
            continue;
          }
        }
        return v37 & 1;
      }
    }
    uint64_t v37 = 1;
  }
  else
  {
LABEL_44:
    uint64_t v37 = 0;
  }
  return v37 & 1;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  float *v25;
  char v26;
  float *v27;
  int v28;
  uint64_t v29;
  float *v30;
  char v31;
  float *v32;
  int v33;
  char v34;
  BOOL v36;
  uint64_t v38;

  uint64_t v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        char v15 = v4[5];
        uint64_t v16 = v10[v15];
        BOOL v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13) {
            goto LABEL_38;
          }
        }
        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_38;
        }
        uint64_t v19 = v4[6];
        uint64_t v20 = (double *)&v10[v19];
        uint64_t v21 = v10[v19 + 8];
        uint64_t v22 = (double *)&v7[v19];
        uint64_t v23 = v7[v19 + 8];
        if (v21)
        {
          if (!v23) {
            goto LABEL_38;
          }
        }
        else
        {
          if (*v20 != *v22) {
            LOBYTE(v23) = 1;
          }
          if (v23)
          {
LABEL_38:
            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            goto LABEL_39;
          }
        }
        uint64_t v24 = v4[7];
        uint64_t v25 = (float *)&v10[v24];
        uint64_t v26 = v10[v24 + 4];
        uint64_t v27 = (float *)&v7[v24];
        uint64_t v28 = v7[v24 + 4];
        if (v26)
        {
          if (!v28) {
            goto LABEL_38;
          }
        }
        else
        {
          if (*v25 != *v27) {
            LOBYTE(v28) = 1;
          }
          if (v28) {
            goto LABEL_38;
          }
        }
        uint64_t v29 = v4[8];
        uint64_t v30 = (float *)&v10[v29];
        uint64_t v31 = v10[v29 + 4];
        uint64_t v32 = (float *)&v7[v29];
        uint64_t v33 = v7[v29 + 4];
        if (v31)
        {
          if (!v33) {
            goto LABEL_38;
          }
        }
        else
        {
          if (*v30 != *v32) {
            LOBYTE(v33) = 1;
          }
          if (v33) {
            goto LABEL_38;
          }
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v34 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        uint64_t v36 = v14-- != 0;
        if (v34)
        {
          v12 += v13;
          if (v36) {
            continue;
          }
        }
        return v34 & 1;
      }
    }
    uint64_t v34 = 1;
  }
  else
  {
LABEL_39:
    uint64_t v34 = 0;
  }
  return v34 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        char v15 = specialized static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.== infix(_:_:)((uint64_t)v10, (uint64_t)v7);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  char v17;
  double *v18;
  int v19;
  uint64_t v20;
  double *v21;
  char v22;
  double *v23;
  int v24;
  char v25;
  BOOL v27;
  uint64_t v29;

  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        char v15 = *(int *)(v4 + 20);
        uint64_t v16 = (double *)&v10[v15];
        BOOL v17 = v10[v15 + 8];
        uint64_t v18 = (double *)&v7[v15];
        uint64_t v19 = v7[v15 + 8];
        if (v17)
        {
          if (!v19) {
            goto LABEL_24;
          }
        }
        else
        {
          if (*v16 != *v18) {
            LOBYTE(v19) = 1;
          }
          if (v19)
          {
LABEL_24:
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            goto LABEL_25;
          }
        }
        uint64_t v20 = *(int *)(v4 + 24);
        uint64_t v21 = (double *)&v10[v20];
        uint64_t v22 = v10[v20 + 8];
        uint64_t v23 = (double *)&v7[v20];
        uint64_t v24 = v7[v20 + 8];
        if (v22)
        {
          if (!v24) {
            goto LABEL_24;
          }
        }
        else
        {
          if (*v21 != *v23) {
            LOBYTE(v24) = 1;
          }
          if (v24) {
            goto LABEL_24;
          }
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        uint64_t v27 = v14-- != 0;
        if (v25)
        {
          v12 += v13;
          if (v27) {
            continue;
          }
        }
        return v25 & 1;
      }
    }
    uint64_t v25 = 1;
  }
  else
  {
LABEL_25:
    uint64_t v25 = 0;
  }
  return v25 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  char v30;
  double *v31;
  int v32;
  uint64_t v33;
  double *v34;
  char v35;
  double *v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v43;
  char *v44;
  char v45;
  char *v46;
  int v47;
  uint64_t v48;
  char *v49;
  char v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  int v57;
  char v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;

  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v60 - v9;
  uint64_t v69 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  uint64_t v11 = MEMORY[0x270FA5388](v69);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v60 - v15;
  BOOL v17 = *(void *)(a1 + 16);
  if (v17 == *(void *)(a2 + 16))
  {
    if (v17 && a1 != a2)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      uint64_t v22 = *(void *)(v14 + 72);
      uint64_t v68 = v4;
      uint64_t v64 = a1 + v19;
      char v65 = v17;
      v63 = a2 + v19;
      uint64_t v61 = v5;
      uint64_t v62 = v22;
      while (1)
      {
        uint64_t v66 = v18;
        uint64_t v23 = v22 * v18;
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v20 + v22 * v18, (uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v21 + v23, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        uint64_t v24 = *(void *)v16;
        uint64_t v25 = *(void *)v13;
        uint64_t v26 = *(void *)(*(void *)v16 + 16);
        if (v26 != *(void *)(*(void *)v13 + 16)) {
          goto LABEL_54;
        }
        if (v26 && v24 != v25)
        {
          uint64_t v27 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
          uint64_t v67 = *(void *)(v61 + 72);
          do
          {
            outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v24 + v27, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v25 + v27, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            uint64_t v28 = *(int *)(v4 + 20);
            uint64_t v29 = (double *)&v10[v28];
            uint64_t v30 = v10[v28 + 8];
            uint64_t v31 = (double *)&v8[v28];
            uint64_t v32 = v8[v28 + 8];
            if (v30)
            {
              if (!v32) {
                goto LABEL_53;
              }
            }
            else
            {
              if (*v29 != *v31) {
                LOBYTE(v32) = 1;
              }
              if (v32)
              {
LABEL_53:
                outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
                outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
                goto LABEL_54;
              }
            }
            uint64_t v33 = *(int *)(v4 + 24);
            uint64_t v34 = (double *)&v10[v33];
            uint64_t v35 = v10[v33 + 8];
            uint64_t v36 = (double *)&v8[v33];
            uint64_t v37 = v8[v33 + 8];
            if (v35)
            {
              if (!v37) {
                goto LABEL_53;
              }
            }
            else
            {
              if (*v34 != *v36) {
                LOBYTE(v37) = 1;
              }
              if (v37) {
                goto LABEL_53;
              }
            }
            type metadata accessor for UnknownStorage();
            lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
            uint64_t v38 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            uint64_t v4 = v68;
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            if ((v38 & 1) == 0) {
              goto LABEL_54;
            }
            v27 += v67;
            --v26;
          }
          while (v26);
        }
        uint64_t v39 = v69[6];
        uint64_t v40 = v16[v39];
        uint64_t v41 = v13[v39];
        if (v40 == 4)
        {
          if (v41 != 4) {
            goto LABEL_54;
          }
        }
        else if (v41 == 4 || v40 != v41)
        {
          goto LABEL_54;
        }
        uint64_t v43 = v69[7];
        uint64_t v44 = &v16[v43];
        uint64_t v45 = v16[v43 + 4];
        unint64_t v46 = &v13[v43];
        uint64_t v47 = v13[v43 + 4];
        if (v45)
        {
          if (!v47) {
            goto LABEL_54;
          }
        }
        else
        {
          if (*(_DWORD *)v44 != *(_DWORD *)v46) {
            LOBYTE(v47) = 1;
          }
          if (v47)
          {
LABEL_54:
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
            goto LABEL_55;
          }
        }
        long long v48 = v69[8];
        uint64_t v49 = &v16[v48];
        char v50 = v16[v48 + 4];
        uint64_t v51 = &v13[v48];
        int v52 = v13[v48 + 4];
        if (v50)
        {
          if (!v52) {
            goto LABEL_54;
          }
        }
        else
        {
          if (*(_DWORD *)v49 != *(_DWORD *)v51) {
            LOBYTE(v52) = 1;
          }
          if (v52) {
            goto LABEL_54;
          }
        }
        char v53 = v69[9];
        uint64_t v54 = &v16[v53];
        char v55 = v16[v53 + 4];
        uint64_t v56 = &v13[v53];
        uint64_t v57 = v13[v53 + 4];
        if (v55)
        {
          if (!v57) {
            goto LABEL_54;
          }
        }
        else
        {
          if (*(_DWORD *)v54 != *(_DWORD *)v56) {
            LOBYTE(v57) = 1;
          }
          if (v57) {
            goto LABEL_54;
          }
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v58 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        if (v58)
        {
          uint64_t v18 = v66 + 1;
          uint64_t v4 = v68;
          uint64_t v21 = v63;
          uint64_t v20 = v64;
          uint64_t v22 = v62;
          if (v66 + 1 != v65) {
            continue;
          }
        }
        return v58 & 1;
      }
    }
    uint64_t v58 = 1;
  }
  else
  {
LABEL_55:
    uint64_t v58 = 0;
  }
  return v58 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  char v46;
  double *v47;
  int v48;
  uint64_t v49;
  double *v50;
  char v51;
  double *v52;
  int v53;
  char v54;
  uint64_t v55;
  double *v56;
  char v57;
  double *v58;
  int v59;
  uint64_t v60;
  double *v61;
  char v62;
  double *v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  double *v69;
  char v70;
  double *v71;
  int v72;
  uint64_t v73;
  double *v74;
  char v75;
  double *v76;
  int v77;
  uint64_t v78;
  double *v79;
  char v80;
  double *v81;
  int v82;
  uint64_t v83;
  double *v84;
  char v85;
  double *v86;
  int v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char *v91;
  char v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char v97;
  char *v98;
  int v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t *v119;

  uint64_t v117 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v4 = *(void *)(v117 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v117);
  uint64_t v7 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v101 - v8;
  uint64_t v118 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  uint64_t v10 = *((void *)v118 - 1);
  uint64_t v11 = MEMORY[0x270FA5388](v118);
  uint64_t v119 = (uint64_t *)((char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v101 - v13;
  char v15 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v101 - v20;
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16))
  {
LABEL_90:
    v100 = 0;
    return v100 & 1;
  }
  if (!v22 || a1 == a2)
  {
    v100 = 1;
    return v100 & 1;
  }
  v101 = v4;
  uint64_t v23 = 0;
  uint64_t v24 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = *(void *)(v19 + 72);
  uint64_t v114 = v15;
  char v115 = a2 + v24;
  uint64_t v107 = a1 + v24;
  uint64_t v108 = v22;
  uint64_t v106 = v26;
  while (1)
  {
    uint64_t v116 = v23;
    uint64_t v27 = v26 * v23;
    outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v25 + v26 * v23, (uint64_t)v21, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v115 + v27, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    uint64_t v28 = *(void *)v21;
    uint64_t v29 = *(void *)v18;
    uint64_t v30 = *(void *)(*(void *)v21 + 16);
    if (v30 != *(void *)(*(void *)v18 + 16))
    {
LABEL_89:
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v21, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      goto LABEL_90;
    }
    if (v30 && v28 != v29) {
      break;
    }
LABEL_71:
    v90 = *(int *)(v15 + 24);
    uint64_t v91 = &v21[v90];
    uint64_t v92 = v21[v90 + 8];
    char v93 = &v18[v90];
    uint64_t v94 = v18[v90 + 8];
    if (v92)
    {
      if (!v94) {
        goto LABEL_89;
      }
    }
    else
    {
      if (*(void *)v91 != *(void *)v93) {
        LOBYTE(v94) = 1;
      }
      if (v94) {
        goto LABEL_89;
      }
    }
    uint64_t v95 = *(int *)(v15 + 28);
    uint64_t v96 = &v21[v95];
    uint64_t v97 = v21[v95 + 8];
    uint64_t v98 = &v18[v95];
    uint64_t v99 = v18[v95 + 8];
    if (v97)
    {
      if (!v99) {
        goto LABEL_89;
      }
    }
    else
    {
      if (*(void *)v96 != *(void *)v98) {
        LOBYTE(v99) = 1;
      }
      if (v99) {
        goto LABEL_89;
      }
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    v100 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v21, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    if (v100)
    {
      uint64_t v23 = v116 + 1;
      uint64_t v25 = v107;
      char v15 = v114;
      uint64_t v26 = v106;
      if (v116 + 1 != v108) {
        continue;
      }
    }
    return v100 & 1;
  }
  uint64_t v31 = 0;
  uint64_t v32 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v33 = v28 + v32;
  uint64_t v110 = v18;
  unsigned int v111 = v29 + v32;
  uint64_t v34 = *(void *)(v10 + 72);
  char v104 = v30;
  uint64_t v105 = v10;
  uint64_t v109 = v21;
  uint64_t v112 = v29;
  v102 = v34;
  v103 = v33;
  while (1)
  {
    uint64_t v35 = v34 * v31;
    uint64_t result = outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v33 + v34 * v31, (uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    if (v31 >= *(void *)(v112 + 16)) {
      break;
    }
    uint64_t v113 = v31;
    uint64_t v37 = v111 + v35;
    uint64_t v38 = v119;
    outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v37, (uint64_t)v119, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    uint64_t v39 = *(void *)v14;
    uint64_t v40 = *v38;
    uint64_t v41 = *(void *)(*(void *)v14 + 16);
    if (v41 != *(void *)(v40 + 16)) {
      goto LABEL_88;
    }
    if (v41 && v39 != v40)
    {
      uint64_t v42 = (*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
      uint64_t v43 = *(void *)(v101 + 72);
      do
      {
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v39 + v42, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        outlined init with copy of CLP_LogEntry_PrivateData_TimeStamp(v40 + v42, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        uint64_t v44 = *(int *)(v117 + 20);
        uint64_t v45 = (double *)&v9[v44];
        unint64_t v46 = v9[v44 + 8];
        uint64_t v47 = (double *)&v7[v44];
        long long v48 = v7[v44 + 8];
        if (v46)
        {
          if (!v48) {
            goto LABEL_87;
          }
        }
        else
        {
          if (*v45 != *v47) {
            LOBYTE(v48) = 1;
          }
          if (v48)
          {
LABEL_87:
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            goto LABEL_88;
          }
        }
        uint64_t v49 = *(int *)(v117 + 24);
        char v50 = (double *)&v9[v49];
        uint64_t v51 = v9[v49 + 8];
        int v52 = (double *)&v7[v49];
        char v53 = v7[v49 + 8];
        if (v51)
        {
          if (!v53) {
            goto LABEL_87;
          }
        }
        else
        {
          if (*v50 != *v52) {
            LOBYTE(v53) = 1;
          }
          if (v53) {
            goto LABEL_87;
          }
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v54 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        if ((v54 & 1) == 0) {
          goto LABEL_88;
        }
        v42 += v43;
        --v41;
      }
      while (v41);
    }
    char v55 = v118[6];
    uint64_t v56 = (double *)&v14[v55];
    uint64_t v57 = v14[v55 + 8];
    uint64_t v58 = (double *)((char *)v119 + v55);
    uint64_t v59 = *((unsigned __int8 *)v119 + v55 + 8);
    if (v57)
    {
      if (!v59) {
        goto LABEL_88;
      }
    }
    else
    {
      if (*v56 != *v58) {
        LOBYTE(v59) = 1;
      }
      if (v59)
      {
LABEL_88:
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v119, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        uint64_t v21 = v109;
        uint64_t v18 = v110;
        goto LABEL_89;
      }
    }
    uint64_t v60 = v118[7];
    uint64_t v61 = (double *)&v14[v60];
    uint64_t v62 = v14[v60 + 8];
    v63 = (double *)((char *)v119 + v60);
    uint64_t v64 = *((unsigned __int8 *)v119 + v60 + 8);
    if (v62)
    {
      if (!v64) {
        goto LABEL_88;
      }
    }
    else
    {
      if (*v61 != *v63) {
        LOBYTE(v64) = 1;
      }
      if (v64) {
        goto LABEL_88;
      }
    }
    char v65 = v118[8];
    uint64_t v66 = v14[v65];
    uint64_t v67 = *((unsigned __int8 *)v119 + v65);
    if (v66 == 2)
    {
      if (v67 != 2) {
        goto LABEL_88;
      }
    }
    else if (v67 == 2 || ((((v67 & 1) == 0) ^ v66) & 1) == 0)
    {
      goto LABEL_88;
    }
    uint64_t v68 = v118[9];
    uint64_t v69 = (double *)&v14[v68];
    uint64_t v70 = v14[v68 + 8];
    uint64_t v71 = (double *)((char *)v119 + v68);
    uint64_t v72 = *((unsigned __int8 *)v119 + v68 + 8);
    if (v70)
    {
      if (!v72) {
        goto LABEL_88;
      }
    }
    else
    {
      if (*v69 != *v71) {
        LOBYTE(v72) = 1;
      }
      if (v72) {
        goto LABEL_88;
      }
    }
    int v73 = v118[10];
    uint64_t v74 = (double *)&v14[v73];
    uint64_t v75 = v14[v73 + 8];
    int v76 = (double *)((char *)v119 + v73);
    v77 = *((unsigned __int8 *)v119 + v73 + 8);
    if (v75)
    {
      if (!v77) {
        goto LABEL_88;
      }
    }
    else
    {
      if (*v74 != *v76) {
        LOBYTE(v77) = 1;
      }
      if (v77) {
        goto LABEL_88;
      }
    }
    uint64_t v78 = v118[11];
    v79 = (double *)&v14[v78];
    uint64_t v80 = v14[v78 + 8];
    uint64_t v81 = (double *)((char *)v119 + v78);
    char v82 = *((unsigned __int8 *)v119 + v78 + 8);
    if (v80)
    {
      if (!v82) {
        goto LABEL_88;
      }
    }
    else
    {
      if (*v79 != *v81) {
        LOBYTE(v82) = 1;
      }
      if (v82) {
        goto LABEL_88;
      }
    }
    uint64_t v83 = v118[12];
    uint64_t v84 = (double *)&v14[v83];
    uint64_t v85 = v14[v83 + 8];
    uint64_t v86 = (double *)((char *)v119 + v83);
    v87 = *((unsigned __int8 *)v119 + v83 + 8);
    if (v85)
    {
      if (!v87) {
        goto LABEL_88;
      }
    }
    else
    {
      if (*v84 != *v86) {
        LOBYTE(v87) = 1;
      }
      if (v87) {
        goto LABEL_88;
      }
    }
    uint64_t v88 = (uint64_t)v119;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    uint64_t v89 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(v88, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    uint64_t v10 = v105;
    uint64_t v21 = v109;
    uint64_t v18 = v110;
    char v15 = v114;
    if ((v89 & 1) == 0) {
      goto LABEL_89;
    }
    uint64_t v31 = v113 + 1;
    uint64_t v34 = v102;
    uint64_t v33 = v103;
    if (v113 + 1 == v104) {
      goto LABEL_71;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2) {
      return 1;
    }
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v19 = *(void *)(v8 + 72);
    while (1)
    {
      outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
      outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
      uint64_t v13 = *(int *)(v4 + 20);
      uint64_t v14 = *(void *)&v10[v13];
      char v15 = *(void *)&v7[v13];
      if (v14 != v15)
      {
        swift_retain();
        swift_retain();
        uint64_t v16 = closure #1 in static Proto_Gnss_Emergency_GanssAidRequestPerGanss.== infix(_:_:)(v14, v15);
        swift_release();
        swift_release();
        if (!v16) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type Proto_Gnss_Emergency_Configuration and conformance Proto_Gnss_Emergency_Configuration(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
      outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
      v12 += v19;
      if (!--v11) {
        return 1;
      }
    }
    outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
    outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2) {
      return 1;
    }
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = *(void *)(v8 + 72);
    while (1)
    {
      outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
      outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
      uint64_t v14 = *(int *)(v4 + 20);
      char v15 = *(void *)&v10[v14];
      uint64_t v16 = *(void *)&v7[v14];
      if (v15 != v16 && (closure #1 in static Proto_Gnss_Emergency_GpsEphemeris.== infix(_:_:)(v15, v16) & 1) == 0) {
        break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type Proto_Gnss_Emergency_Configuration and conformance Proto_Gnss_Emergency_Configuration(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
      outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
      v12 += v13;
      if (!--v11) {
        return 1;
      }
    }
    outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
    outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        outlined init with copy of Proto_Gnss_Emergency_SLPAddress(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        char v15 = specialized static Proto_Gnss_Emergency_GsmCellInfo.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        outlined destroy of Proto_Gnss_Emergency_SLPAddress((uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16))
  {
LABEL_15:
    uint64_t v18 = 0;
    return v18 & 1;
  }
  if (v11 && a1 != a2)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v23 = *(void *)(v8 + 72);
    uint64_t v13 = v11 - 1;
    while (1)
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Type7Info(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      outlined init with copy of CLP_LogEntry_AONLoc_Type7Info(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      uint64_t v14 = *(int *)(v4 + 20);
      char v15 = *(void *)&v10[v14];
      uint64_t v16 = *(void *)&v7[v14];
      if (v15 != v16)
      {
        swift_retain();
        swift_retain();
        BOOL v17 = closure #1 in static CLP_LogEntry_AONLoc_BtAdvertisement.== infix(_:_:)(v15, v16);
        swift_release();
        swift_release();
        if (!v17) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      uint64_t v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of CLP_LogEntry_AONLoc_Type7Info((uint64_t)v7, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      outlined destroy of CLP_LogEntry_AONLoc_Type7Info((uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      uint64_t v20 = v13-- != 0;
      if (v18)
      {
        v12 += v23;
        if (v20) {
          continue;
        }
      }
      return v18 & 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Type7Info((uint64_t)v7, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
    outlined destroy of CLP_LogEntry_AONLoc_Type7Info((uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
    goto LABEL_15;
  }
  uint64_t v18 = 1;
  return v18 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for Proto_Gnss_RawPressureSample(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        outlined init with copy of Proto_Gpsd_InjectAssistancePosition(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gnss_RawPressureSample);
        outlined init with copy of Proto_Gpsd_InjectAssistancePosition(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gnss_RawPressureSample);
        lazy protocol witness table accessor for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request(&lazy protocol witness table cache variable for type Proto_Gnss_RawPressureSample and conformance Proto_Gnss_RawPressureSample, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_RawPressureSample);
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v7, type metadata accessor for Proto_Gnss_RawPressureSample);
        outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v10, type metadata accessor for Proto_Gnss_RawPressureSample);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for Proto_Gnss_SvId(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        outlined init with copy of Proto_Gpsd_InjectAssistancePosition(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gnss_SvId);
        outlined init with copy of Proto_Gpsd_InjectAssistancePosition(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gnss_SvId);
        lazy protocol witness table accessor for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request(&lazy protocol witness table cache variable for type Proto_Gnss_SvId and conformance Proto_Gnss_SvId, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_SvId);
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v7, type metadata accessor for Proto_Gnss_SvId);
        outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v10, type metadata accessor for Proto_Gnss_SvId);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for Proto_Gnss_SensorSample3Axis(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        outlined init with copy of Proto_Gpsd_InjectAssistancePosition(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gnss_SensorSample3Axis);
        outlined init with copy of Proto_Gpsd_InjectAssistancePosition(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gnss_SensorSample3Axis);
        lazy protocol witness table accessor for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request(&lazy protocol witness table cache variable for type Proto_Gnss_SensorSample3Axis and conformance Proto_Gnss_SensorSample3Axis, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_SensorSample3Axis);
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v7, type metadata accessor for Proto_Gnss_SensorSample3Axis);
        outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v10, type metadata accessor for Proto_Gnss_SensorSample3Axis);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  BOOL v34;
  uint64_t v36;

  uint64_t v4 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of Proto_Gpsd_InjectAssistancePosition(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        outlined init with copy of Proto_Gpsd_InjectAssistancePosition(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        char v15 = v4[5];
        uint64_t v16 = &v10[v15];
        BOOL v17 = *(void *)&v10[v15 + 8];
        uint64_t v18 = &v7[v15];
        uint64_t v19 = *((void *)v18 + 1);
        if (v17)
        {
          if (!v19) {
            goto LABEL_36;
          }
          uint64_t v20 = *(void *)v16 == *(void *)v18 && v17 == v19;
          if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_36;
          }
        }
        else if (v19)
        {
          goto LABEL_36;
        }
        uint64_t v21 = v4[6];
        uint64_t v22 = &v10[v21];
        uint64_t v23 = v10[v21 + 4];
        uint64_t v24 = &v7[v21];
        uint64_t v25 = v7[v21 + 4];
        if (v23)
        {
          if (!v25) {
            goto LABEL_36;
          }
        }
        else
        {
          if (*(_DWORD *)v22 != *(_DWORD *)v24) {
            LOBYTE(v25) = 1;
          }
          if (v25)
          {
LABEL_36:
            outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v7, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
            outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v10, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
            goto LABEL_37;
          }
        }
        uint64_t v26 = v4[7];
        uint64_t v27 = &v10[v26];
        uint64_t v28 = *(void *)&v10[v26 + 8];
        uint64_t v29 = &v7[v26];
        uint64_t v30 = *((void *)v29 + 1);
        if (v28)
        {
          if (!v30) {
            goto LABEL_36;
          }
          uint64_t v31 = *(void *)v27 == *(void *)v29 && v28 == v30;
          if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_36;
          }
        }
        else if (v30)
        {
          goto LABEL_36;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v7, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        outlined destroy of Proto_Gpsd_InjectAssistancePosition((uint64_t)v10, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        uint64_t v34 = v14-- != 0;
        if (v32)
        {
          v12 += v13;
          if (v34) {
            continue;
          }
        }
        return v32 & 1;
      }
    }
    uint64_t v32 = 1;
  }
  else
  {
LABEL_37:
    uint64_t v32 = 0;
  }
  return v32 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a2 + 16))
  {
    if (!v3 || a1 == a2)
    {
      char v7 = 1;
    }
    else
    {
      uint64_t v4 = a1 + 32;
      uint64_t v5 = a2 + 32;
      a3();
      uint64_t v6 = v3 - 1;
      do
      {
        ++v4;
        ++v5;
        char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
        BOOL v9 = v6-- != 0;
      }
      while ((v7 & 1) != 0 && v9);
    }
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (int *)(a1 + 36);
  uint64_t v6 = (int *)(a2 + 36);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

{
  uint64_t v2;
  BOOL result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (double *)(a1 + 40);
  uint64_t v6 = (double *)(a2 + 40);
  do
  {
    int v7 = *v5++;
    int v8 = v7;
    int v9 = *v6++;
    int v10 = v9;
    BOOL v12 = v4-- != 0;
    BOOL result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  BOOL result;
  int v7;
  int v8;
  int v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 33);
  uint64_t v4 = (unsigned __int8 *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  BOOL result;
  int v7;
  int v8;
  int v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (int *)(a1 + 36);
  uint64_t v4 = (int *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized CLP_LogEntry_AONLoc_Request.TypeEnum.init(rawValue:)()
{
  return 0;
}

uint64_t outlined init with take of Proto_Gpsd_Response?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(void *a1, char *a2, uint64_t (*a3)(void), uint64_t (*a4)(void, void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  BOOL v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = a3(0);
  uint64_t v16 = v15;
  uint64_t v17 = *(int *)(v15 + 24);
  uint64_t v18 = (void *)((char *)a1 + v17);
  char v19 = *((unsigned char *)a1 + v17 + 8);
  uint64_t v20 = &a2[v17];
  int v21 = a2[v17 + 8];
  if (v19)
  {
    if (!v21) {
      goto LABEL_14;
    }
  }
  else
  {
    if (*v18 != *(void *)v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_14;
    }
  }
  uint64_t v22 = *(int *)(v15 + 28);
  int v23 = *((unsigned __int8 *)a1 + v22);
  int v24 = a2[v22];
  if (v23 == 2)
  {
    if (v24 != 2)
    {
LABEL_14:
      char v26 = 0;
      return v26 & 1;
    }
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_14;
  }
  if ((a4(*a1, *(void *)a2) & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v25(v14, (char *)a1 + *(int *)(v16 + 20), v8);
  v25(v12, &a2[*(int *)(v16 + 20)], v8);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v27(v12, v8);
  v27(v14, v8);
  return v26 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_Response.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v27[-v9];
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = *(char *)(a1 + v12);
  uint64_t v14 = *(char *)(a2 + v12);
  if (v13 == 5)
  {
    if (v14 != 5) {
      goto LABEL_18;
    }
  }
  else if (v14 == 5 || qword_2471094D0[v13] != qword_2471094D0[v14])
  {
    goto LABEL_18;
  }
  uint64_t v15 = v11[6];
  uint64_t v16 = (void *)(a1 + v15);
  char v17 = *(unsigned char *)(a1 + v15 + 8);
  uint64_t v18 = (void *)(a2 + v15);
  int v19 = *(unsigned __int8 *)(a2 + v15 + 8);
  if (v17)
  {
    if (!v19) {
      goto LABEL_18;
    }
  }
  else
  {
    if (*v16 != *v18) {
      LOBYTE(v19) = 1;
    }
    if (v19) {
      goto LABEL_18;
    }
  }
  uint64_t v20 = v11[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 10)
  {
    if (v22 == 10) {
      goto LABEL_17;
    }
LABEL_18:
    char v24 = 0;
    return v24 & 1;
  }
  v27[15] = v21;
  if (v22 == 10) {
    goto LABEL_18;
  }
  v27[14] = v22;
  lazy protocol witness table accessor for type Proto_Gnss_Result and conformance Proto_Gnss_Result();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    goto LABEL_18;
  }
LABEL_17:
  int v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v23(v10, a1, v4);
  v23(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v25(v8, v4);
  v25(v10, v4);
  return v24 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_Indication.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        BOOL v14 = closure #1 in static CLP_LogEntry_AONLoc_Indication.== infix(_:_:)(v12, v13),
        swift_release(),
        swift_release(),
        v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_LogEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v59 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v58 = (char *)&v57 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v57 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Indication?, CLP_LogEntry_AONLoc_Indication?));
  MEMORY[0x270FA5388](v63);
  uint64_t v67 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v62 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v68 = (uint64_t)&v57 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v64 = (uint64_t)&v57 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Request?, CLP_LogEntry_AONLoc_Request?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  int v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  char v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v57 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v57 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69 + *(int *)(v32 + 20), (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70 + *(int *)(v32 + 20), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v33, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    if (v34(v33, 1, v15) != 1)
    {
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      char v37 = specialized static CLP_LogEntry_AONLoc_Request.== infix(_:_:)((uint64_t)v26, (uint64_t)v18);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v18, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
      if ((v37 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request);
LABEL_6:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Request?, CLP_LogEntry_AONLoc_Request?);
    uint64_t v36 = (uint64_t)v22;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v35);
    goto LABEL_15;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  if (v34(v33, 1, v15) != 1) {
    goto LABEL_6;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
LABEL_8:
  uint64_t v38 = v69;
  uint64_t v39 = v64;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69 + *(int *)(v32 + 24), v64, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  uint64_t v40 = v70;
  uint64_t v41 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70 + *(int *)(v32 + 24), v68, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  uint64_t v42 = v67;
  uint64_t v43 = v67 + *(int *)(v63 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, v67, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v43, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  uint64_t v44 = v66;
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
  if (v45(v42, 1, v66) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    if (v45(v43, 1, v44) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
LABEL_18:
      uint64_t v52 = v60;
      uint64_t v51 = v61;
      char v53 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      uint64_t v54 = v58;
      v53(v58, v38, v61);
      char v55 = v59;
      v53(v59, v40, v51);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v56(v55, v51);
      v56(v54, v51);
      return v47 & 1;
    }
    goto LABEL_13;
  }
  uint64_t v46 = v62;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v62, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  if (v45(v43, 1, v44) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v46, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
LABEL_13:
    uint64_t v35 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Indication?, CLP_LogEntry_AONLoc_Indication?);
    uint64_t v36 = v42;
    goto LABEL_14;
  }
  uint64_t v49 = v57;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v43, v57, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  char v50 = specialized static CLP_LogEntry_AONLoc_Indication.== infix(_:_:)(v46, v49);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v49, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v46, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  if (v50) {
    goto LABEL_18;
  }
LABEL_15:
  char v47 = 0;
  return v47 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_Request.ResultOptions.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v12 = v11;
  uint64_t v13 = v11[8];
  int v14 = *((unsigned __int8 *)a1 + v13);
  int v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2) {
      goto LABEL_41;
    }
  }
  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_41;
  }
  uint64_t v16 = v11[9];
  uint64_t v17 = (_DWORD *)((char *)a1 + v16);
  char v18 = *((unsigned char *)a1 + v16 + 4);
  uint64_t v19 = (_DWORD *)((char *)a2 + v16);
  int v20 = *((unsigned __int8 *)a2 + v16 + 4);
  if (v18)
  {
    if (!v20) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if (v20) {
      goto LABEL_41;
    }
  }
  uint64_t v21 = v11[10];
  int v22 = (float *)((char *)a1 + v21);
  char v23 = *((unsigned char *)a1 + v21 + 4);
  uint64_t v24 = (float *)((char *)a2 + v21);
  int v25 = *((unsigned __int8 *)a2 + v21 + 4);
  if (v23)
  {
    if (!v25) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if (v25) {
      goto LABEL_41;
    }
  }
  uint64_t v26 = v11[11];
  uint64_t v27 = (float *)((char *)a1 + v26);
  char v28 = *((unsigned char *)a1 + v26 + 4);
  uint64_t v29 = (float *)((char *)a2 + v26);
  int v30 = *((unsigned __int8 *)a2 + v26 + 4);
  if (v28)
  {
    if (!v30) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_41;
    }
  }
  uint64_t v31 = v11[12];
  uint64_t v32 = (_DWORD *)((char *)a1 + v31);
  char v33 = *((unsigned char *)a1 + v31 + 4);
  uint64_t v34 = (_DWORD *)((char *)a2 + v31);
  int v35 = *((unsigned __int8 *)a2 + v31 + 4);
  if (v33)
  {
    if (!v35) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if (v35) {
      goto LABEL_41;
    }
  }
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2, (void (*)(void))lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType) & 1) == 0|| (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1], (void (*)(void))lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand) & 1) == 0|| !specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]))
  {
    goto LABEL_41;
  }
  uint64_t v36 = v12[13];
  char v37 = (double *)((char *)a1 + v36);
  char v38 = *((unsigned char *)a1 + v36 + 8);
  uint64_t v39 = (double *)((char *)a2 + v36);
  int v40 = *((unsigned __int8 *)a2 + v36 + 8);
  if (v38)
  {
    if (!v40) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_41;
    }
  }
  uint64_t v41 = v12[14];
  uint64_t v42 = (double *)((char *)a1 + v41);
  char v43 = *((unsigned char *)a1 + v41 + 8);
  uint64_t v44 = (double *)((char *)a2 + v41);
  int v45 = *((unsigned __int8 *)a2 + v41 + 8);
  if ((v43 & 1) == 0)
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_41;
    }
LABEL_46:
    long long v48 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v48(v10, (char *)a1 + v12[7], v4);
    v48(v8, (char *)a2 + v12[7], v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v49 = *(void (**)(char *, uint64_t))(v5 + 8);
    v49(v8, v4);
    v49(v10, v4);
    return v46 & 1;
  }
  if (v45) {
    goto LABEL_46;
  }
LABEL_41:
  char v46 = 0;
  return v46 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_Request.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v85 = *(void *)(v4 - 8);
  uint64_t v86 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v84 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v83 = (char *)&v78 - v7;
  uint64_t v8 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v82 = (uint64_t)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Proto_Gpsd_Request?, Proto_Gpsd_Request?));
  MEMORY[0x270FA5388](v10);
  uint64_t v92 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v87 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v88 = (uint64_t)&v78 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v89 = (uint64_t)&v78 - v17;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v93 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  int v20 = (uint64_t *)((char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Request.ResultOptions?, CLP_LogEntry_AONLoc_Request.ResultOptions?));
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v27 = (uint64_t *)((char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  int v30 = (char *)&v78 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v78 - v31;
  char v33 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v34 = a2;
  int v35 = v33;
  uint64_t v36 = v33[5];
  char v37 = (void *)(a1 + v36);
  char v38 = *(unsigned char *)(a1 + v36 + 8);
  uint64_t v39 = (void *)(v34 + v36);
  int v40 = *(unsigned __int8 *)(v34 + v36 + 8);
  if (v38)
  {
    if (!v40) {
      goto LABEL_38;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_38;
    }
  }
  uint64_t v41 = v33[6];
  uint64_t v42 = (_DWORD *)(a1 + v41);
  char v43 = *(unsigned char *)(a1 + v41 + 4);
  uint64_t v44 = (_DWORD *)(v34 + v41);
  int v45 = *(unsigned __int8 *)(v34 + v41 + 4);
  if (v43)
  {
    if (!v45) {
      goto LABEL_38;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_38;
    }
  }
  uint64_t v46 = v33[7];
  char v47 = (_DWORD *)(a1 + v46);
  char v48 = *(unsigned char *)(a1 + v46 + 4);
  uint64_t v49 = (_DWORD *)(v34 + v46);
  int v50 = *(unsigned __int8 *)(v34 + v46 + 4);
  if (v48)
  {
    if (!v50) {
      goto LABEL_38;
    }
  }
  else
  {
    if (*v47 != *v49) {
      LOBYTE(v50) = 1;
    }
    if (v50) {
      goto LABEL_38;
    }
  }
  uint64_t v51 = v33[8];
  uint64_t v52 = *(char *)(a1 + v51);
  uint64_t v53 = *(char *)(v34 + v51);
  if (v52 == 5)
  {
    if (v53 != 5) {
      goto LABEL_38;
    }
  }
  else if (v53 == 5 || qword_2471094D0[v52] != qword_2471094D0[v53])
  {
    goto LABEL_38;
  }
  uint64_t v54 = v33[9];
  uint64_t v79 = a1;
  uint64_t v55 = a1 + v54;
  uint64_t v56 = v34;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, (uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  uint64_t v57 = v35[9];
  uint64_t v80 = v56;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56 + v57, (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  uint64_t v58 = (uint64_t)&v23[*(int *)(v21 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  uint64_t v81 = v58;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, v58, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  uint64_t v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  if (v59((uint64_t)v23, 1, v18) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    if (v59(v81, 1, v18) != 1)
    {
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v81, (uint64_t)v20, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      char v61 = specialized static CLP_LogEntry_AONLoc_Request.ResultOptions.== infix(_:_:)(v27, v20);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v20, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v27, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      if ((v61 & 1) == 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v27, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_29:
    uint64_t v60 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Request.ResultOptions?, CLP_LogEntry_AONLoc_Request.ResultOptions?);
LABEL_37:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, v60);
    goto LABEL_38;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  if (v59(v81, 1, v18) != 1) {
    goto LABEL_29;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
LABEL_31:
  uint64_t v62 = v89;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79 + v35[10], v89, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  uint64_t v63 = v88;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80 + v35[10], v88, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  char v23 = v92;
  uint64_t v64 = (uint64_t)&v92[*(int *)(v10 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, (uint64_t)v92, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v64, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  uint64_t v65 = v91;
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  if (v66((uint64_t)v23, 1, v91) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
    if (v66(v64, 1, v65) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
LABEL_41:
      uint64_t v73 = v85;
      uint64_t v72 = v86;
      uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
      uint64_t v75 = v83;
      v74(v83, v79, v86);
      int v76 = v84;
      v74(v84, v80, v72);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
      v77 = *(void (**)(char *, uint64_t))(v73 + 8);
      v77(v76, v72);
      v77(v75, v72);
      return v68 & 1;
    }
    goto LABEL_36;
  }
  uint64_t v67 = v87;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, v87, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  if (v66(v64, 1, v65) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v67, type metadata accessor for Proto_Gpsd_Request);
LABEL_36:
    uint64_t v60 = &demangling cache variable for type metadata for (Proto_Gpsd_Request?, Proto_Gpsd_Request?);
    goto LABEL_37;
  }
  uint64_t v70 = v82;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v64, v82, type metadata accessor for Proto_Gpsd_Request);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
  char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v70, type metadata accessor for Proto_Gpsd_Request);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v67, type metadata accessor for Proto_Gpsd_Request);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  if (v71) {
    goto LABEL_41;
  }
LABEL_38:
  char v68 = 0;
  return v68 & 1;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_AONLoc_Request.TypeEnum]);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_AONLoc_Indication.TypeEnum] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_AONLoc_Indication.TypeEnum]);
}

uint64_t lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_Request()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_Request()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_Request()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_Request()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_Response()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_Response()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_Response()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_Response()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_WiFiIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_WiFiIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_WiFiIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_WiFiIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_BtIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_BtIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_BtIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_BtIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_Indication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_Indication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_Indication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_Indication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Request(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = &a1[v10];
    uint64_t v14 = &a2[v10];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = &a1[v15];
    uint64_t v18 = &a2[v15];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    char v19 = a2[v16];
    v17[4] = v18[4];
    a1[v16] = v19;
    uint64_t v20 = a3[9];
    uint64_t v21 = &a1[v20];
    uint64_t v22 = &a2[v20];
    char v23 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    uint64_t v24 = *((void *)v23 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v27 = v7;
      uint64_t v28 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = *(void *)v22;
      *((void *)v21 + 1) = v28;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      uint64_t v29 = v23[7];
      uint64_t v56 = &v22[v29];
      uint64_t v57 = &v21[v29];
      swift_bridgeObjectRetain();
      uint64_t v7 = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v57, v56, v27);
      v21[v23[8]] = v22[v23[8]];
      uint64_t v30 = v23[9];
      uint64_t v31 = &v21[v30];
      uint64_t v32 = &v22[v30];
      unsigned char v31[4] = v32[4];
      *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
      uint64_t v33 = v23[10];
      uint64_t v34 = &v21[v33];
      int v35 = &v22[v33];
      v34[4] = v35[4];
      *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
      uint64_t v36 = v23[11];
      char v37 = &v21[v36];
      char v38 = &v22[v36];
      v37[4] = v38[4];
      *(_DWORD *)char v37 = *(_DWORD *)v38;
      uint64_t v39 = v23[12];
      int v40 = &v21[v39];
      uint64_t v41 = &v22[v39];
      v40[4] = v41[4];
      *(_DWORD *)int v40 = *(_DWORD *)v41;
      uint64_t v42 = v23[13];
      char v43 = &v21[v42];
      uint64_t v44 = &v22[v42];
      v43[8] = v44[8];
      *(void *)char v43 = *(void *)v44;
      uint64_t v45 = v23[14];
      uint64_t v46 = &v21[v45];
      char v47 = &v22[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v48 = a3[10];
    uint64_t v49 = &a1[v48];
    int v50 = &a2[v48];
    uint64_t v51 = type metadata accessor for Proto_Gpsd_Request(0);
    uint64_t v52 = *(void *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
      memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      v8(v49, v50, v7);
      *(void *)&v49[*(int *)(v51 + 20)] = *(void *)&v50[*(int *)(v51 + 20)];
      uint64_t v54 = *(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56);
      swift_retain();
      v54(v49, 0, 1, v51);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 28), v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 40);
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    v5(v8, v4);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  char v18 = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  *(unsigned char *)(a1 + v15) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = v6;
    uint64_t v26 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v26;
    v20[2] = v21[2];
    uint64_t v27 = v22[7];
    uint64_t v54 = (char *)v21 + v27;
    uint64_t v55 = (char *)v20 + v27;
    swift_bridgeObjectRetain();
    uint64_t v6 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7((uint64_t)v55, (uint64_t)v54, v25);
    *((unsigned char *)v20 + v22[8]) = *((unsigned char *)v21 + v22[8]);
    uint64_t v28 = v22[9];
    uint64_t v29 = (char *)v20 + v28;
    uint64_t v30 = (char *)v21 + v28;
    v29[4] = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    uint64_t v31 = v22[10];
    uint64_t v32 = (char *)v20 + v31;
    uint64_t v33 = (char *)v21 + v31;
    v32[4] = v33[4];
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    uint64_t v34 = v22[11];
    int v35 = (char *)v20 + v34;
    uint64_t v36 = (char *)v21 + v34;
    v35[4] = v36[4];
    *(_DWORD *)int v35 = *(_DWORD *)v36;
    uint64_t v37 = v22[12];
    char v38 = (char *)v20 + v37;
    uint64_t v39 = (char *)v21 + v37;
    v38[4] = v39[4];
    *(_DWORD *)char v38 = *(_DWORD *)v39;
    uint64_t v40 = v22[13];
    uint64_t v41 = (char *)v20 + v40;
    uint64_t v42 = (char *)v21 + v40;
    v41[8] = v42[8];
    *(void *)uint64_t v41 = *(void *)v42;
    uint64_t v43 = v22[14];
    uint64_t v44 = (char *)v20 + v43;
    uint64_t v45 = (char *)v21 + v43;
    *(void *)uint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    (*(void (**)(void *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v46 = a3[10];
  char v47 = (char *)(a1 + v46);
  uint64_t v48 = (char *)(a2 + v46);
  uint64_t v49 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v50 = *(void *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v47, (uint64_t)v48, v6);
    *(void *)&v47[*(int *)(v49 + 20)] = *(void *)&v48[*(int *)(v49 + 20)];
    uint64_t v52 = *(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56);
    swift_retain();
    v52(v47, 0, 1, v49);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v90 = *(void *)(v6 - 8);
  uint64_t v91 = v6;
  uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v90 + 24);
  v89(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v10;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v17 = a3[9];
  char v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v21 = *((void *)v20 - 1);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, int *))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      *char v18 = *v19;
      v18[1] = v19[1];
      v18[2] = v19[2];
      uint64_t v25 = v20[7];
      uint64_t v87 = (char *)v19 + v25;
      uint64_t v88 = (char *)v18 + v25;
      uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v86(v88, v87, v91);
      *((unsigned char *)v18 + v20[8]) = *((unsigned char *)v19 + v20[8]);
      uint64_t v26 = v20[9];
      uint64_t v27 = (char *)v18 + v26;
      uint64_t v28 = (char *)v19 + v26;
      char v29 = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v29;
      uint64_t v30 = v20[10];
      uint64_t v31 = (char *)v18 + v30;
      uint64_t v32 = (char *)v19 + v30;
      char v33 = v32[4];
      *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
      unsigned char v31[4] = v33;
      uint64_t v34 = v20[11];
      int v35 = (char *)v18 + v34;
      uint64_t v36 = (char *)v19 + v34;
      char v37 = v36[4];
      *(_DWORD *)int v35 = *(_DWORD *)v36;
      v35[4] = v37;
      uint64_t v38 = v20[12];
      uint64_t v39 = (char *)v18 + v38;
      uint64_t v40 = (char *)v19 + v38;
      char v41 = v40[4];
      *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
      v39[4] = v41;
      uint64_t v42 = v20[13];
      uint64_t v43 = (char *)v18 + v42;
      uint64_t v44 = (char *)v19 + v42;
      char v45 = v44[8];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v45;
      uint64_t v46 = v20[14];
      char v47 = (char *)v18 + v46;
      uint64_t v48 = (char *)v19 + v46;
      uint64_t v49 = *(void *)v48;
      v47[8] = v48[8];
      *(void *)char v47 = v49;
      (*(void (**)(void *, void, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v18, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v18, v19, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_7;
  }
  *char v18 = *v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[2] = v19[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v89)((char *)v18 + v20[7], (char *)v19 + v20[7], v91);
  *((unsigned char *)v18 + v20[8]) = *((unsigned char *)v19 + v20[8]);
  uint64_t v62 = v20[9];
  uint64_t v63 = (char *)v18 + v62;
  uint64_t v64 = (char *)v19 + v62;
  char v65 = v64[4];
  *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
  v63[4] = v65;
  uint64_t v66 = v20[10];
  uint64_t v67 = (char *)v18 + v66;
  char v68 = (char *)v19 + v66;
  char v69 = v68[4];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v69;
  uint64_t v70 = v20[11];
  char v71 = (char *)v18 + v70;
  uint64_t v72 = (char *)v19 + v70;
  char v73 = v72[4];
  *(_DWORD *)char v71 = *(_DWORD *)v72;
  v71[4] = v73;
  uint64_t v74 = v20[12];
  uint64_t v75 = (char *)v18 + v74;
  int v76 = (char *)v19 + v74;
  char v77 = v76[4];
  *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
  v75[4] = v77;
  uint64_t v78 = v20[13];
  uint64_t v79 = (char *)v18 + v78;
  uint64_t v80 = (char *)v19 + v78;
  char v81 = v80[8];
  *(void *)uint64_t v79 = *(void *)v80;
  v79[8] = v81;
  uint64_t v82 = v20[14];
  uint64_t v83 = (char *)v18 + v82;
  uint64_t v84 = (char *)v19 + v82;
  uint64_t v85 = *(void *)v84;
  v83[8] = v84[8];
  *(void *)uint64_t v83 = v85;
LABEL_7:
  uint64_t v51 = a3[10];
  uint64_t v52 = (char *)(a1 + v51);
  uint64_t v53 = (char *)(a2 + v51);
  uint64_t v54 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  int v57 = v56(v52, 1, v54);
  int v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (!v58)
    {
      ((void (*)(char *, char *, uint64_t))v89)(v52, v53, v91);
      *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v52, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }
  if (v58)
  {
LABEL_12:
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v52, v53, *(void *)(*(void *)(v60 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v52, v53, v91);
  *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
  uint64_t v59 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
  swift_retain();
  v59(v52, 0, 1, v54);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  char v18 = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  *(unsigned char *)(a1 + v15) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v7((uint64_t)v20 + v22[7], (uint64_t)v21 + v22[7], v6);
    *((unsigned char *)v20 + v22[8]) = *((unsigned char *)v21 + v22[8]);
    uint64_t v25 = v22[9];
    uint64_t v26 = (char *)v20 + v25;
    uint64_t v27 = (char *)v21 + v25;
    v26[4] = v27[4];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    uint64_t v28 = v22[10];
    char v29 = (char *)v20 + v28;
    uint64_t v30 = (char *)v21 + v28;
    v29[4] = v30[4];
    *(_DWORD *)char v29 = *(_DWORD *)v30;
    uint64_t v31 = v22[11];
    uint64_t v32 = (char *)v20 + v31;
    char v33 = (char *)v21 + v31;
    v32[4] = v33[4];
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    uint64_t v34 = v22[12];
    int v35 = (char *)v20 + v34;
    uint64_t v36 = (char *)v21 + v34;
    v35[4] = v36[4];
    *(_DWORD *)int v35 = *(_DWORD *)v36;
    uint64_t v37 = v22[13];
    uint64_t v38 = (char *)v20 + v37;
    uint64_t v39 = (char *)v21 + v37;
    v38[8] = v39[8];
    *(void *)uint64_t v38 = *(void *)v39;
    uint64_t v40 = v22[14];
    char v41 = (char *)v20 + v40;
    uint64_t v42 = (char *)v21 + v40;
    *(void *)char v41 = *(void *)v42;
    v41[8] = v42[8];
    (*(void (**)(void *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v43 = a3[10];
  uint64_t v44 = (char *)(a1 + v43);
  char v45 = (char *)(a2 + v43);
  uint64_t v46 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v44, (uint64_t)v45, v6);
    *(void *)&v44[*(int *)(v46 + 20)] = *(void *)&v45[*(int *)(v46 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v74 = *(void *)(v6 - 8);
  uint64_t v75 = v6;
  char v73 = *(void (**)(uint64_t, uint64_t))(v74 + 40);
  v73(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  char v17 = *(unsigned char *)(a2 + v14);
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  *(unsigned char *)(a1 + v14) = v17;
  uint64_t v18 = a3[9];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v22 = *((void *)v21 - 1);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, int *))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      *((void *)v19 + 2) = *((void *)v20 + 2);
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(&v19[v21[7]], &v20[v21[7]], v75);
      v19[v21[8]] = v20[v21[8]];
      uint64_t v26 = v21[9];
      uint64_t v27 = &v19[v26];
      uint64_t v28 = &v20[v26];
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      uint64_t v29 = v21[10];
      uint64_t v30 = &v19[v29];
      uint64_t v31 = &v20[v29];
      v30[4] = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      uint64_t v32 = v21[11];
      char v33 = &v19[v32];
      uint64_t v34 = &v20[v32];
      v33[4] = v34[4];
      *(_DWORD *)char v33 = *(_DWORD *)v34;
      uint64_t v35 = v21[12];
      uint64_t v36 = &v19[v35];
      uint64_t v37 = &v20[v35];
      v36[4] = v37[4];
      *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
      uint64_t v38 = v21[13];
      uint64_t v39 = &v19[v38];
      uint64_t v40 = &v20[v38];
      v39[8] = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      uint64_t v41 = v21[14];
      uint64_t v42 = &v19[v41];
      uint64_t v43 = &v20[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      (*(void (**)(char *, void, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v19, v20, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v19 = *(void *)v20;
  swift_bridgeObjectRelease();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRelease();
  *((void *)v19 + 2) = *((void *)v20 + 2);
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v73)(&v19[v21[7]], &v20[v21[7]], v75);
  v19[v21[8]] = v20[v21[8]];
  uint64_t v55 = v21[9];
  uint64_t v56 = &v19[v55];
  int v57 = &v20[v55];
  v56[4] = v57[4];
  *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
  uint64_t v58 = v21[10];
  uint64_t v59 = &v19[v58];
  uint64_t v60 = &v20[v58];
  v59[4] = v60[4];
  *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
  uint64_t v61 = v21[11];
  uint64_t v62 = &v19[v61];
  uint64_t v63 = &v20[v61];
  v62[4] = v63[4];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  uint64_t v64 = v21[12];
  char v65 = &v19[v64];
  uint64_t v66 = &v20[v64];
  v65[4] = v66[4];
  *(_DWORD *)char v65 = *(_DWORD *)v66;
  uint64_t v67 = v21[13];
  char v68 = &v19[v67];
  char v69 = &v20[v67];
  v68[8] = v69[8];
  *(void *)char v68 = *(void *)v69;
  uint64_t v70 = v21[14];
  char v71 = &v19[v70];
  uint64_t v72 = &v20[v70];
  *(void *)char v71 = *(void *)v72;
  v71[8] = v72[8];
LABEL_7:
  uint64_t v45 = a3[10];
  uint64_t v46 = (char *)(a1 + v45);
  uint64_t v47 = (char *)(a2 + v45);
  uint64_t v48 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (!v51)
  {
    if (!v52)
    {
      ((void (*)(char *, char *, uint64_t))v73)(v46, v47, v75);
      *(void *)&v46[*(int *)(v48 + 20)] = *(void *)&v47[*(int *)(v48 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v46, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }
  if (v52)
  {
LABEL_12:
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v46, v47, v75);
  *(void *)&v46[*(int *)(v48 + 20)] = *(void *)&v47[*(int *)(v48 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246DD6C90);
}

uint64_t sub_246DD6C90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + a3[8]) <= 5u) {
      int v11 = 5;
    }
    else {
      int v11 = *(unsigned __int8 *)(a1 + a3[8]);
    }
    unsigned int v12 = v11 - 5;
    if (*(unsigned __int8 *)(a1 + a3[8]) >= 5u) {
      return v12;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    uint64_t v15 = *(void *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a2)
    {
      uint64_t v8 = v14;
      uint64_t v10 = a1 + a3[9];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      goto LABEL_12;
    }
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    char v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[10];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246DD6E30);
}

uint64_t sub_246DD6E30(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 250)
  {
    *(unsigned char *)(a1 + a4[8]) = a2 + 5;
    return result;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[9];
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[10];
  return v16(v18, a2, a2, v17);
}

void type metadata completion function for CLP_LogEntry_AONLoc_Request()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for Proto_Gpsd_Request?, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246DD72C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum;
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Request.ResultOptions(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    BOOL v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    BOOL v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a3[7];
    char v33 = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v33, v10, v11);
    uint64_t v13 = a3[9];
    *((unsigned char *)v7 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    v14[4] = v15[4];
    *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
    uint64_t v16 = a3[10];
    uint64_t v17 = a3[11];
    uint64_t v18 = (char *)v7 + v16;
    uint64_t v19 = (char *)a2 + v16;
    v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    uint64_t v20 = (char *)v7 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
    uint64_t v22 = a3[12];
    uint64_t v23 = a3[13];
    int v24 = (char *)v7 + v22;
    int v25 = (char *)a2 + v22;
    *(_DWORD *)int v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    uint64_t v26 = (char *)v7 + v23;
    uint64_t v27 = (char *)a2 + v23;
    uint64_t v28 = *(void *)v27;
    v26[8] = v27[8];
    *(void *)uint64_t v26 = v28;
    uint64_t v29 = a3[14];
    uint64_t v30 = (char *)v7 + v29;
    uint64_t v31 = (char *)a2 + v29;
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for CLP_LogEntry_AONLoc_Request.ResultOptions(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v31 = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v31, v8, v9);
  uint64_t v11 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  v12[4] = v13[4];
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v18 = (char *)a1 + v15;
  uint64_t v19 = (char *)a2 + v15;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = a3[12];
  uint64_t v21 = a3[13];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  v22[4] = v23[4];
  int v24 = (char *)a1 + v21;
  int v25 = (char *)a2 + v21;
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)int v24 = v26;
  uint64_t v27 = a3[14];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  return a1;
}

void *assignWithCopy for CLP_LogEntry_AONLoc_Request.ResultOptions(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v10 = a3[9];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  v11[4] = v13;
  uint64_t v14 = a3[10];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v17;
  uint64_t v18 = a3[11];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  char v21 = v20[4];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  v19[4] = v21;
  uint64_t v22 = a3[12];
  uint64_t v23 = (char *)a1 + v22;
  int v24 = (char *)a2 + v22;
  char v25 = v24[4];
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  v23[4] = v25;
  uint64_t v26 = a3[13];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  char v29 = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v29;
  uint64_t v30 = a3[14];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)v32;
  v31[8] = v32[8];
  *(void *)uint64_t v31 = v33;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v13 = a3[10];
  uint64_t v14 = a3[11];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  int v24 = (uint64_t *)(a2 + v20);
  uint64_t v25 = *v24;
  *(unsigned char *)(v23 + 8) = *((unsigned char *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[14];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  return a1;
}

void *assignWithTake for CLP_LogEntry_AONLoc_Request.ResultOptions(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v13 = a3[10];
  uint64_t v14 = a3[11];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  v15[4] = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v17 = (char *)a1 + v14;
  uint64_t v18 = (char *)a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  uint64_t v23 = (char *)a1 + v20;
  int v24 = (char *)a2 + v20;
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[14];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246DD7AF4);
}

uint64_t sub_246DD7AF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246DD7BB8);
}

void *sub_246DD7BB8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Response(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_246DD8098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 5u) {
      int v10 = 5;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 5u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_246DD8160(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 5;
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_AONLoc_Response()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_WiFiIndication(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    int v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((unsigned char *)v7 + v14) = *((unsigned char *)a2 + v14);
  }
  return v7;
}

void *assignWithCopy for CLP_LogEntry_AONLoc_WiFiIndication(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void *)v12;
  v11[8] = v12[8];
  *(void *)uint64_t v11 = v13;
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

void *initializeWithTake for CLP_LogEntry_AONLoc_WiFiIndication(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  return a1;
}

void *assignWithTake for CLP_LogEntry_AONLoc_WiFiIndication(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  return a1;
}

uint64_t type metadata completion function for CLP_LogEntry_AONLoc_WiFiIndication()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Indication(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246DD8948);
}

uint64_t sub_246DD8948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246DD8A1C);
}

uint64_t sub_246DD8A1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_AONLoc_Indication()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_LogEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    unint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v70 = v13;
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      int v24 = &v11[v22];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      v10[v12[8]] = v11[v12[8]];
      uint64_t v25 = v12[9];
      char v71 = v8;
      uint64_t v26 = &v10[v25];
      uint64_t v27 = &v11[v25];
      uint64_t v28 = v7;
      char v29 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
      uint64_t v68 = *((void *)v29 - 1);
      uint64_t v69 = v28;
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v68 + 48))(v27, 1, v29))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        uint64_t v31 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v31;
        *((void *)v26 + 2) = *((void *)v27 + 2);
        uint64_t v32 = v29[7];
        uint64_t v66 = &v27[v32];
        uint64_t v67 = &v26[v32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v71(v67, v66, v28);
        v26[v29[8]] = v27[v29[8]];
        uint64_t v33 = v29[9];
        uint64_t v34 = &v26[v33];
        uint64_t v35 = &v27[v33];
        v34[4] = v35[4];
        *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
        uint64_t v36 = v29[10];
        uint64_t v37 = &v26[v36];
        uint64_t v38 = &v27[v36];
        v37[4] = v38[4];
        *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
        uint64_t v39 = v29[11];
        uint64_t v40 = &v26[v39];
        uint64_t v41 = &v27[v39];
        v40[4] = v41[4];
        *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
        uint64_t v42 = v29[12];
        uint64_t v43 = &v26[v42];
        uint64_t v44 = &v27[v42];
        v43[4] = v44[4];
        *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
        uint64_t v45 = v29[13];
        uint64_t v46 = &v26[v45];
        uint64_t v47 = &v27[v45];
        v46[8] = v47[8];
        *(void *)uint64_t v46 = *(void *)v47;
        uint64_t v48 = v29[14];
        uint64_t v49 = &v26[v48];
        uint64_t v50 = &v27[v48];
        *(void *)uint64_t v49 = *(void *)v50;
        v49[8] = v50[8];
        (*(void (**)(char *, void, uint64_t, int *))(v68 + 56))(v26, 0, 1, v29);
      }
      uint64_t v51 = v12[10];
      int v52 = &v10[v51];
      uint64_t v53 = &v11[v51];
      uint64_t v54 = type metadata accessor for Proto_Gpsd_Request(0);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
        uint64_t v7 = v69;
      }
      else
      {
        uint64_t v7 = v69;
        v71(v52, v53, v69);
        *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
        int v57 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
        swift_retain();
        v57(v52, 0, 1, v54);
      }
      (*(void (**)(char *, void, uint64_t, int *))(v70 + 56))(v10, 0, 1, v12);
      uint64_t v8 = v71;
    }
    uint64_t v58 = *(int *)(a3 + 24);
    uint64_t v59 = (char *)a1 + v58;
    uint64_t v60 = (char *)a2 + v58;
    uint64_t v61 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
    uint64_t v62 = *(void *)(v61 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
      memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      v8(v59, v60, v7);
      *(void *)&v59[*(int *)(v61 + 20)] = *(void *)&v60[*(int *)(v61 + 20)];
      uint64_t v64 = *(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56);
      swift_retain();
      v64(v59, 0, 1, v61);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v5(v6, v4);
    uint64_t v8 = v6 + *(int *)(v7 + 36);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5(v8 + *(int *)(v9 + 28), v4);
    }
    uint64_t v10 = v6 + *(int *)(v7 + 40);
    uint64_t v11 = type metadata accessor for Proto_Gpsd_Request(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
    {
      v5(v10, v4);
      swift_release();
    }
  }
  uint64_t v12 = a1 + *(int *)(a2 + 24);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  if (!result)
  {
    v5(v12, v4);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v69 = v12;
    uint64_t v70 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v23 = v11[9];
    char v71 = (void (*)(char *, char *, uint64_t))v7;
    int v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    uint64_t v26 = v6;
    uint64_t v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    uint64_t v28 = *((void *)v27 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v25, 1, v27))
    {
      uint64_t v29 = v26;
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v68 = v28;
      uint64_t v31 = *((void *)v25 + 1);
      *(void *)int v24 = *(void *)v25;
      *((void *)v24 + 1) = v31;
      *((void *)v24 + 2) = *((void *)v25 + 2);
      uint64_t v32 = v27[7];
      uint64_t v66 = &v25[v32];
      uint64_t v67 = &v24[v32];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v29 = v26;
      v71(v67, v66, v26);
      v24[v27[8]] = v25[v27[8]];
      uint64_t v33 = v27[9];
      uint64_t v34 = &v24[v33];
      uint64_t v35 = &v25[v33];
      v34[4] = v35[4];
      *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
      uint64_t v36 = v27[10];
      uint64_t v37 = &v24[v36];
      uint64_t v38 = &v25[v36];
      v37[4] = v38[4];
      *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
      uint64_t v39 = v27[11];
      uint64_t v40 = &v24[v39];
      uint64_t v41 = &v25[v39];
      v40[4] = v41[4];
      *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
      uint64_t v42 = v27[12];
      uint64_t v43 = &v24[v42];
      uint64_t v44 = &v25[v42];
      v43[4] = v44[4];
      *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
      uint64_t v45 = v27[13];
      uint64_t v46 = &v24[v45];
      uint64_t v47 = &v25[v45];
      v46[8] = v47[8];
      *(void *)uint64_t v46 = *(void *)v47;
      uint64_t v48 = v27[14];
      uint64_t v49 = &v24[v48];
      uint64_t v50 = &v25[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = v50[8];
      (*(void (**)(char *, void, uint64_t, int *))(v68 + 56))(v24, 0, 1, v27);
    }
    uint64_t v51 = v11[10];
    int v52 = &v9[v51];
    uint64_t v53 = &v10[v51];
    uint64_t v54 = type metadata accessor for Proto_Gpsd_Request(0);
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
      uint64_t v6 = v29;
    }
    else
    {
      uint64_t v6 = v29;
      v71(v52, v53, v29);
      *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
      int v57 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
      swift_retain();
      v57(v52, 0, 1, v54);
    }
    a3 = v70;
    (*(void (**)(char *, void, uint64_t, int *))(v69 + 56))(v9, 0, 1, v11);
    uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v71;
  }
  uint64_t v58 = *(int *)(a3 + 24);
  uint64_t v59 = (char *)(a1 + v58);
  uint64_t v60 = (char *)(a2 + v58);
  uint64_t v61 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v62 = *(void *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v59, (uint64_t)v60, v6);
    *(void *)&v59[*(int *)(v61 + 20)] = *(void *)&v60[*(int *)(v61 + 20)];
    uint64_t v64 = *(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56);
    swift_retain();
    v64(v59, 0, 1, v61);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v167 = *(void *)(v6 - 8);
  v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 24);
  v166(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v168 = a2;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v160 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
      uint64_t v162 = a1;
      v160(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      uint64_t v18 = *(void *)v17;
      v16[8] = v17[8];
      *(void *)uint64_t v16 = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      LOBYTE(v18) = v21[4];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v18;
      uint64_t v22 = v10[7];
      uint64_t v23 = &v8[v22];
      int v24 = &v9[v22];
      LOBYTE(v18) = v24[4];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v23[4] = v18;
      v8[v10[8]] = v9[v10[8]];
      uint64_t v25 = v10[9];
      uint64_t v26 = &v8[v25];
      uint64_t v27 = &v9[v25];
      uint64_t v28 = v6;
      uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
      uint64_t v156 = *((void *)v29 - 1);
      uint64_t v164 = v28;
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v156 + 48))(v27, 1, v29))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = *((void *)v27 + 1);
        *((void *)v26 + 2) = *((void *)v27 + 2);
        uint64_t v75 = v29[7];
        uint64_t v154 = &v27[v75];
        uint64_t v155 = &v26[v75];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v160(v155, v154, v28);
        v26[v29[8]] = v27[v29[8]];
        uint64_t v76 = v29[9];
        char v77 = &v26[v76];
        uint64_t v78 = &v27[v76];
        char v79 = v78[4];
        *(_DWORD *)char v77 = *(_DWORD *)v78;
        v77[4] = v79;
        uint64_t v80 = v29[10];
        char v81 = &v26[v80];
        uint64_t v82 = &v27[v80];
        char v83 = v82[4];
        *(_DWORD *)char v81 = *(_DWORD *)v82;
        v81[4] = v83;
        uint64_t v84 = v29[11];
        uint64_t v85 = &v26[v84];
        uint64_t v86 = &v27[v84];
        char v87 = v86[4];
        *(_DWORD *)uint64_t v85 = *(_DWORD *)v86;
        v85[4] = v87;
        uint64_t v88 = v29[12];
        uint64_t v89 = &v26[v88];
        uint64_t v90 = &v27[v88];
        char v91 = v90[4];
        *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
        v89[4] = v91;
        uint64_t v92 = v29[13];
        uint64_t v93 = &v26[v92];
        uint64_t v94 = &v27[v92];
        char v95 = v94[8];
        *(void *)uint64_t v93 = *(void *)v94;
        v93[8] = v95;
        uint64_t v96 = v29[14];
        uint64_t v97 = &v26[v96];
        uint64_t v98 = &v27[v96];
        uint64_t v99 = *(void *)v98;
        v97[8] = v98[8];
        *(void *)uint64_t v97 = v99;
        (*(void (**)(char *, void, uint64_t, int *))(v156 + 56))(v26, 0, 1, v29);
      }
      uint64_t v100 = v10[10];
      v101 = &v8[v100];
      v102 = &v9[v100];
      uint64_t v103 = type metadata accessor for Proto_Gpsd_Request(0);
      uint64_t v104 = *(void *)(v103 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
      {
        uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
        memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
        a1 = v162;
        uint64_t v6 = v164;
      }
      else
      {
        uint64_t v6 = v164;
        v160(v101, v102, v164);
        *(void *)&v101[*(int *)(v103 + 20)] = *(void *)&v102[*(int *)(v103 + 20)];
        uint64_t v106 = *(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56);
        swift_retain();
        v106(v101, 0, 1, v103);
        a1 = v162;
      }
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_16;
    }
LABEL_7:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    memcpy(v8, v9, *(void *)(*(void *)(v31 - 8) + 64));
LABEL_16:
    uint64_t v107 = v168;
    goto LABEL_17;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_AONLoc_Request);
    goto LABEL_7;
  }
  uint64_t v159 = a3;
  uint64_t v163 = a1;
  uint64_t v165 = v6;
  v166((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v32 = v10[5];
  uint64_t v33 = &v8[v32];
  uint64_t v34 = &v9[v32];
  uint64_t v35 = *(void *)v34;
  v33[8] = v34[8];
  *(void *)uint64_t v33 = v35;
  uint64_t v36 = v10[6];
  uint64_t v37 = &v8[v36];
  uint64_t v38 = &v9[v36];
  LOBYTE(v35) = v38[4];
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  v37[4] = v35;
  uint64_t v39 = v10[7];
  uint64_t v40 = &v8[v39];
  uint64_t v41 = &v9[v39];
  LOBYTE(v35) = v41[4];
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  v40[4] = v35;
  v8[v10[8]] = v9[v10[8]];
  uint64_t v42 = v10[9];
  uint64_t v43 = &v8[v42];
  uint64_t v44 = &v9[v42];
  uint64_t v45 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v46 = *((void *)v45 - 1);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (!v49)
    {
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      *((void *)v43 + 2) = *((void *)v44 + 2);
      uint64_t v50 = v45[7];
      v161 = &v43[v50];
      uint64_t v158 = &v44[v50];
      uint64_t v157 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v157(v161, v158, v165);
      v43[v45[8]] = v44[v45[8]];
      uint64_t v51 = v45[9];
      int v52 = &v43[v51];
      uint64_t v53 = &v44[v51];
      char v54 = v53[4];
      *(_DWORD *)int v52 = *(_DWORD *)v53;
      v52[4] = v54;
      uint64_t v55 = v45[10];
      uint64_t v56 = &v43[v55];
      int v57 = &v44[v55];
      char v58 = v57[4];
      *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
      v56[4] = v58;
      uint64_t v59 = v45[11];
      uint64_t v60 = &v43[v59];
      uint64_t v61 = &v44[v59];
      char v62 = v61[4];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      v60[4] = v62;
      uint64_t v63 = v45[12];
      uint64_t v64 = &v43[v63];
      char v65 = &v44[v63];
      char v66 = v65[4];
      *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
      v64[4] = v66;
      uint64_t v67 = v45[13];
      uint64_t v68 = &v43[v67];
      uint64_t v69 = &v44[v67];
      char v70 = v69[8];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v70;
      uint64_t v71 = v45[14];
      uint64_t v72 = &v43[v71];
      char v73 = &v44[v71];
      uint64_t v74 = *(void *)v73;
      v72[8] = v73[8];
      *(void *)uint64_t v72 = v74;
      (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v49)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v43, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_27:
    uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v43, v44, *(void *)(*(void *)(v119 - 8) + 64));
    goto LABEL_28;
  }
  *(void *)uint64_t v43 = *(void *)v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v43 + 2) = *((void *)v44 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v166((uint64_t)&v43[v45[7]], (uint64_t)&v44[v45[7]], v165);
  v43[v45[8]] = v44[v45[8]];
  uint64_t v130 = v45[9];
  uint64_t v131 = &v43[v130];
  uint64_t v132 = &v44[v130];
  char v133 = v132[4];
  *(_DWORD *)uint64_t v131 = *(_DWORD *)v132;
  v131[4] = v133;
  uint64_t v134 = v45[10];
  uint64_t v135 = &v43[v134];
  v136 = &v44[v134];
  char v137 = v136[4];
  *(_DWORD *)uint64_t v135 = *(_DWORD *)v136;
  v135[4] = v137;
  uint64_t v138 = v45[11];
  uint64_t v139 = &v43[v138];
  uint64_t v140 = &v44[v138];
  char v141 = v140[4];
  *(_DWORD *)uint64_t v139 = *(_DWORD *)v140;
  v139[4] = v141;
  uint64_t v142 = v45[12];
  uint64_t v143 = &v43[v142];
  uint64_t v144 = &v44[v142];
  char v145 = v144[4];
  *(_DWORD *)uint64_t v143 = *(_DWORD *)v144;
  v143[4] = v145;
  uint64_t v146 = v45[13];
  uint64_t v147 = &v43[v146];
  uint64_t v148 = &v44[v146];
  char v149 = v148[8];
  *(void *)uint64_t v147 = *(void *)v148;
  v147[8] = v149;
  uint64_t v150 = v45[14];
  v151 = &v43[v150];
  uint64_t v152 = &v44[v150];
  uint64_t v153 = *(void *)v152;
  v151[8] = v152[8];
  *(void *)v151 = v153;
LABEL_28:
  uint64_t v120 = v10[10];
  uint64_t v121 = &v8[v120];
  v122 = &v9[v120];
  uint64_t v123 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v124 = *(void *)(v123 - 8);
  char v125 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48);
  int v126 = v125(v121, 1, v123);
  int v127 = v125(v122, 1, v123);
  a1 = v163;
  if (!v126)
  {
    uint64_t v6 = v165;
    if (!v127)
    {
      v166((uint64_t)v121, (uint64_t)v122, v165);
      *(void *)&v121[*(int *)(v123 + 20)] = *(void *)&v122[*(int *)(v123 + 20)];
      swift_retain();
      swift_release();
      goto LABEL_34;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v121, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_33;
  }
  uint64_t v6 = v165;
  if (v127)
  {
LABEL_33:
    uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v121, v122, *(void *)(*(void *)(v129 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v121, v122, v165);
  *(void *)&v121[*(int *)(v123 + 20)] = *(void *)&v122[*(int *)(v123 + 20)];
  uint64_t v128 = *(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56);
  swift_retain();
  v128(v121, 0, 1, v123);
LABEL_34:
  uint64_t v107 = v168;
  a3 = v159;
LABEL_17:
  uint64_t v108 = *(int *)(a3 + 24);
  uint64_t v109 = (char *)(a1 + v108);
  uint64_t v110 = (char *)(v107 + v108);
  uint64_t v111 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v112 = *(void *)(v111 - 8);
  uint64_t v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  int v114 = v113(v109, 1, v111);
  int v115 = v113(v110, 1, v111);
  if (!v114)
  {
    if (!v115)
    {
      v166((uint64_t)v109, (uint64_t)v110, v6);
      *(void *)&v109[*(int *)(v111 + 20)] = *(void *)&v110[*(int *)(v111 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v109, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }
  if (v115)
  {
LABEL_22:
    uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    memcpy(v109, v110, *(void *)(*(void *)(v117 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v109, v110, v6);
  *(void *)&v109[*(int *)(v111 + 20)] = *(void *)&v110[*(int *)(v111 + 20)];
  uint64_t v116 = *(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56);
  swift_retain();
  v116(v109, 0, 1, v111);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v61 = v12;
    uint64_t v62 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v23 = v11[9];
    int v24 = v7;
    uint64_t v25 = &v9[v23];
    uint64_t v26 = &v10[v23];
    uint64_t v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    uint64_t v60 = *((void *)v27 - 1);
    uint64_t v63 = (void (*)(char *, char *, uint64_t))v24;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v60 + 48))(v26, 1, v27))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *((void *)v25 + 2) = *((void *)v26 + 2);
      v24((uint64_t)&v25[v27[7]], (uint64_t)&v26[v27[7]], v6);
      v25[v27[8]] = v26[v27[8]];
      uint64_t v29 = v27[9];
      uint64_t v30 = &v25[v29];
      uint64_t v31 = &v26[v29];
      v30[4] = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      uint64_t v32 = v27[10];
      uint64_t v33 = &v25[v32];
      uint64_t v34 = &v26[v32];
      v33[4] = v34[4];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      uint64_t v35 = v27[11];
      uint64_t v36 = &v25[v35];
      uint64_t v37 = &v26[v35];
      v36[4] = v37[4];
      *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
      uint64_t v38 = v27[12];
      uint64_t v39 = &v25[v38];
      uint64_t v40 = &v26[v38];
      v39[4] = v40[4];
      *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
      uint64_t v41 = v27[13];
      uint64_t v42 = &v25[v41];
      uint64_t v43 = &v26[v41];
      v42[8] = v43[8];
      *(void *)uint64_t v42 = *(void *)v43;
      uint64_t v44 = v27[14];
      uint64_t v45 = &v25[v44];
      uint64_t v46 = &v26[v44];
      *(void *)uint64_t v45 = *(void *)v46;
      v45[8] = v46[8];
      (*(void (**)(char *, void, uint64_t, int *))(v60 + 56))(v25, 0, 1, v27);
    }
    uint64_t v47 = v11[10];
    int v48 = &v9[v47];
    int v49 = &v10[v47];
    uint64_t v50 = type metadata accessor for Proto_Gpsd_Request(0);
    uint64_t v51 = *(void *)(v50 - 8);
    a3 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
      memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      v63(v48, v49, v6);
      *(void *)&v48[*(int *)(v50 + 20)] = *(void *)&v49[*(int *)(v50 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    (*(void (**)(char *, void, uint64_t, int *))(v61 + 56))(v9, 0, 1, v11);
    uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v63;
  }
  uint64_t v53 = *(int *)(a3 + 24);
  char v54 = (char *)(a1 + v53);
  uint64_t v55 = (char *)(a2 + v53);
  uint64_t v56 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v57 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v54, (uint64_t)v55, v6);
    *(void *)&v54[*(int *)(v56 + 20)] = *(void *)&v55[*(int *)(v56 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v138 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v138(a1, a2, v6);
  uint64_t v139 = a3;
  uint64_t v140 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  uint64_t v137 = v7;
  if (!v14)
  {
    if (v15)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v9, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      goto LABEL_7;
    }
    uint64_t v136 = v6;
    v138(v9, (uint64_t)v10, v6);
    uint64_t v36 = v11[5];
    uint64_t v37 = v9 + v36;
    uint64_t v38 = &v10[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    *(unsigned char *)(v37 + 8) = v38[8];
    uint64_t v39 = v11[6];
    uint64_t v40 = v9 + v39;
    uint64_t v41 = &v10[v39];
    *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
    *(unsigned char *)(v40 + 4) = v41[4];
    uint64_t v42 = v11[7];
    uint64_t v43 = v9 + v42;
    uint64_t v44 = &v10[v42];
    *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
    *(unsigned char *)(v43 + 4) = v44[4];
    *(unsigned char *)(v9 + v11[8]) = v10[v11[8]];
    uint64_t v45 = v11[9];
    uint64_t v46 = v9 + v45;
    uint64_t v47 = &v10[v45];
    int v48 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    uint64_t v132 = *((void *)v48 - 1);
    uint64_t v134 = v46;
    int v49 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v132 + 48);
    LODWORD(v46) = v49(v46, 1, v48);
    int v50 = v49((uint64_t)v47, 1, v48);
    if (v46)
    {
      if (!v50)
      {
        *(_OWORD *)uint64_t v134 = *(_OWORD *)v47;
        *(void *)(v134 + 16) = *((void *)v47 + 2);
        (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v134 + v48[7], &v47[v48[7]], v136);
        *(unsigned char *)(v134 + v48[8]) = v47[v48[8]];
        uint64_t v88 = v48[9];
        uint64_t v89 = v134 + v88;
        uint64_t v90 = &v47[v88];
        *(unsigned char *)(v89 + 4) = v90[4];
        *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
        uint64_t v91 = v48[10];
        uint64_t v92 = v134 + v91;
        uint64_t v93 = &v47[v91];
        *(unsigned char *)(v92 + 4) = v93[4];
        *(_DWORD *)uint64_t v92 = *(_DWORD *)v93;
        uint64_t v94 = v48[11];
        uint64_t v95 = v134 + v94;
        uint64_t v96 = &v47[v94];
        *(unsigned char *)(v95 + 4) = v96[4];
        *(_DWORD *)uint64_t v95 = *(_DWORD *)v96;
        uint64_t v97 = v48[12];
        uint64_t v98 = v134 + v97;
        uint64_t v99 = &v47[v97];
        *(unsigned char *)(v98 + 4) = v99[4];
        *(_DWORD *)uint64_t v98 = *(_DWORD *)v99;
        uint64_t v100 = v48[13];
        uint64_t v101 = v134 + v100;
        v102 = &v47[v100];
        *(unsigned char *)(v101 + 8) = v102[8];
        *(void *)uint64_t v101 = *(void *)v102;
        uint64_t v103 = v48[14];
        uint64_t v104 = v134 + v103;
        uint64_t v105 = &v47[v103];
        *(void *)uint64_t v104 = *(void *)v105;
        *(unsigned char *)(v104 + 8) = v105[8];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v132 + 56))(v134, 0, 1, v48);
        goto LABEL_30;
      }
      size_t v51 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?)
                                  - 8)
                      + 64);
      uint64_t v52 = (void *)v134;
    }
    else
    {
      if (!v50)
      {
        *(void *)uint64_t v134 = *(void *)v47;
        swift_bridgeObjectRelease();
        *(void *)(v134 + 8) = *((void *)v47 + 1);
        swift_bridgeObjectRelease();
        *(void *)(v134 + 16) = *((void *)v47 + 2);
        swift_bridgeObjectRelease();
        v138(v134 + v48[7], (uint64_t)&v47[v48[7]], v136);
        *(unsigned char *)(v134 + v48[8]) = v47[v48[8]];
        uint64_t v106 = v48[9];
        uint64_t v107 = v134 + v106;
        uint64_t v108 = &v47[v106];
        *(unsigned char *)(v107 + 4) = v108[4];
        *(_DWORD *)uint64_t v107 = *(_DWORD *)v108;
        uint64_t v109 = v48[10];
        uint64_t v110 = v134 + v109;
        uint64_t v111 = &v47[v109];
        *(unsigned char *)(v110 + 4) = v111[4];
        *(_DWORD *)uint64_t v110 = *(_DWORD *)v111;
        uint64_t v112 = v48[11];
        uint64_t v113 = v134 + v112;
        int v114 = &v47[v112];
        *(unsigned char *)(v113 + 4) = v114[4];
        *(_DWORD *)uint64_t v113 = *(_DWORD *)v114;
        uint64_t v115 = v48[12];
        uint64_t v116 = v134 + v115;
        uint64_t v117 = &v47[v115];
        *(unsigned char *)(v116 + 4) = v117[4];
        *(_DWORD *)uint64_t v116 = *(_DWORD *)v117;
        uint64_t v118 = v48[13];
        uint64_t v119 = v134 + v118;
        uint64_t v120 = &v47[v118];
        *(unsigned char *)(v119 + 8) = v120[8];
        *(void *)uint64_t v119 = *(void *)v120;
        uint64_t v121 = v48[14];
        uint64_t v122 = v134 + v121;
        uint64_t v123 = &v47[v121];
        *(void *)uint64_t v122 = *(void *)v123;
        *(unsigned char *)(v122 + 8) = v123[8];
        goto LABEL_30;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v134, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      size_t v51 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?)
                                  - 8)
                      + 64);
      uint64_t v52 = (void *)v134;
    }
    memcpy(v52, v47, v51);
LABEL_30:
    uint64_t v124 = v11[10];
    uint64_t v125 = v9 + v124;
    int v126 = &v10[v124];
    uint64_t v127 = type metadata accessor for Proto_Gpsd_Request(0);
    uint64_t v128 = *(void *)(v127 - 8);
    uint64_t v129 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
    int v130 = v129(v125, 1, v127);
    int v131 = v129((uint64_t)v126, 1, v127);
    if (v130)
    {
      uint64_t v6 = v136;
      if (!v131)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v125, v126, v136);
        *(void *)(v125 + *(int *)(v127 + 20)) = *(void *)&v126[*(int *)(v127 + 20)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v6 = v136;
      if (!v131)
      {
        v138(v125, (uint64_t)v126, v136);
        *(void *)(v125 + *(int *)(v127 + 20)) = *(void *)&v126[*(int *)(v127 + 20)];
        swift_release();
        goto LABEL_17;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v125, type metadata accessor for Proto_Gpsd_Request);
    }
    size_t v33 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?)
                                - 8)
                    + 64);
    uint64_t v34 = (void *)v125;
    uint64_t v35 = v126;
LABEL_8:
    memcpy(v34, v35, v33);
    goto LABEL_17;
  }
  if (v15)
  {
LABEL_7:
    size_t v33 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?)
                                - 8)
                    + 64);
    uint64_t v34 = (void *)v9;
    uint64_t v35 = v10;
    goto LABEL_8;
  }
  char v133 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v133(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = v9 + v16;
  uint64_t v18 = &v10[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v18[8];
  uint64_t v19 = v11[6];
  uint64_t v20 = v9 + v19;
  uint64_t v21 = &v10[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v21[4];
  uint64_t v22 = v11[7];
  uint64_t v23 = v9 + v22;
  int v24 = &v10[v22];
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = v24[4];
  *(unsigned char *)(v9 + v11[8]) = v10[v11[8]];
  uint64_t v25 = v11[9];
  uint64_t v26 = (void *)(v9 + v25);
  uint64_t v27 = &v10[v25];
  uint64_t v28 = v6;
  uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v30 = *((void *)v29 - 1);
  uint64_t v135 = v28;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v27, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v133;
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    v26[2] = *((void *)v27 + 2);
    uint64_t v53 = v28;
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v133;
    v133((uint64_t)v26 + v29[7], &v27[v29[7]], v53);
    *((unsigned char *)v26 + v29[8]) = v27[v29[8]];
    uint64_t v54 = v29[9];
    uint64_t v55 = (char *)v26 + v54;
    uint64_t v56 = &v27[v54];
    v55[4] = v56[4];
    *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
    uint64_t v57 = v29[10];
    uint64_t v58 = (char *)v26 + v57;
    uint64_t v59 = &v27[v57];
    v58[4] = v59[4];
    *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
    uint64_t v60 = v29[11];
    uint64_t v61 = (char *)v26 + v60;
    uint64_t v62 = &v27[v60];
    v61[4] = v62[4];
    *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
    uint64_t v63 = v29[12];
    uint64_t v64 = (char *)v26 + v63;
    char v65 = &v27[v63];
    v64[4] = v65[4];
    *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
    uint64_t v66 = v29[13];
    uint64_t v67 = (char *)v26 + v66;
    uint64_t v68 = &v27[v66];
    v67[8] = v68[8];
    *(void *)uint64_t v67 = *(void *)v68;
    uint64_t v69 = v29[14];
    char v70 = (char *)v26 + v69;
    uint64_t v71 = &v27[v69];
    *(void *)char v70 = *(void *)v71;
    v70[8] = v71[8];
    (*(void (**)(void *, void, uint64_t, int *))(v30 + 56))(v26, 0, 1, v29);
  }
  uint64_t v72 = v11[10];
  char v73 = (char *)(v9 + v72);
  uint64_t v74 = &v10[v72];
  uint64_t v75 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v76 = *(void *)(v75 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
  {
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
    uint64_t v6 = v135;
  }
  else
  {
    uint64_t v6 = v135;
    v32(v73, v74, v135);
    *(void *)&v73[*(int *)(v75 + 20)] = *(void *)&v74[*(int *)(v75 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_17:
  uint64_t v78 = *(int *)(v139 + 24);
  char v79 = (char *)(a1 + v78);
  uint64_t v80 = (char *)(v140 + v78);
  uint64_t v81 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v82 = *(void *)(v81 - 8);
  char v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
  int v84 = v83(v79, 1, v81);
  int v85 = v83(v80, 1, v81);
  if (!v84)
  {
    if (!v85)
    {
      v138((uint64_t)v79, (uint64_t)v80, v6);
      *(void *)&v79[*(int *)(v81 + 20)] = *(void *)&v80[*(int *)(v81 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v79, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }
  if (v85)
  {
LABEL_22:
    uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    memcpy(v79, v80, *(void *)(*(void *)(v86 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v79, v80, v6);
  *(void *)&v79[*(int *)(v81 + 20)] = *(void *)&v80[*(int *)(v81 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246DDB668);
}

uint64_t sub_246DDB668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246DDB7D0);
}

uint64_t sub_246DDB7D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

void type metadata completion function for CLP_LogEntry_AONLoc_LogEntry()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_Request?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_AONLoc_Indication._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_AONLoc_Indication._StorageClass()
{
  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for Proto_Gpsd_Response?, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for Proto_Gpsd_Indication?, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

unint64_t lazy protocol witness table accessor for type Proto_Gnss_Result and conformance Proto_Gnss_Result()
{
  unint64_t result = lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result;
  if (!lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result;
  if (!lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result;
  if (!lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result;
  if (!lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result);
  }
  return result;
}

uint64_t ALBtAdvertisement.BtType.init(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = (unsigned int *)MEMORY[0x263F208F8];
    }
    else {
      unint64_t v3 = (unsigned int *)MEMORY[0x263F20900];
    }
  }
  else
  {
    unint64_t v3 = (unsigned int *)MEMORY[0x263F20908];
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t CLP_LogEntry_AONLoc_BtAdvertisement.BtType.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 != *MEMORY[0x263F20908])
  {
    if (v4 == *MEMORY[0x263F208F8]) {
      return 1;
    }
    if (v4 == *MEMORY[0x263F20900]) {
      return 2;
    }
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return 0;
}

uint64_t ALBtAdvertisement.toPb(pb:)()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v44 = (uint64_t)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvInfoType7?);
  MEMORY[0x270FA5388](v2 - 8);
  int v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for ALBtAdvInfoType7();
  uint64_t v5 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v43 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvertisement.BtType?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v18 = MEMORY[0x24C549850](v15);
  if ((v19 & 1) == 0) {
    uint64_t v18 = CLP_LogEntry_AONLoc_BtAdvertisement.machContTimeNs.setter(v18);
  }
  uint64_t v20 = MEMORY[0x24C549870](v18);
  if ((v21 & 1) == 0) {
    uint64_t v20 = CLP_LogEntry_AONLoc_BtAdvertisement.mac.setter(v20);
  }
  uint64_t v22 = MEMORY[0x24C5498C0](v20);
  if ((v22 & 0x100000000) == 0) {
    CLP_LogEntry_AONLoc_BtAdvertisement.rssiDb.setter(v22);
  }
  uint64_t v23 = ALBtAdvertisement._antennaIndex.getter();
  if ((v23 & 0x100000000) == 0) {
    uint64_t v23 = CLP_LogEntry_AONLoc_BtAdvertisement.antennaIndex.setter(v23);
  }
  uint64_t v24 = MEMORY[0x24C549900](v23);
  if (v25 >> 60 != 15) {
    uint64_t v24 = CLP_LogEntry_AONLoc_BtAdvertisement.payload.setter(v24, v25);
  }
  uint64_t v26 = MEMORY[0x24C5498E0](v24);
  if ((v26 & 0x100000000) == 0) {
    CLP_LogEntry_AONLoc_BtAdvertisement.channel.setter(v26);
  }
  uint64_t v27 = ALBtAdvertisement._productID.getter();
  if ((v27 & 0x100000000) == 0) {
    uint64_t v27 = CLP_LogEntry_AONLoc_BtAdvertisement.productID.setter(v27);
  }
  uint64_t v28 = MEMORY[0x24C5497B0](v27);
  if (v29) {
    uint64_t v28 = CLP_LogEntry_AONLoc_BtAdvertisement.identifier.setter(v28, v29);
  }
  uint64_t v30 = MEMORY[0x24C5497F0](v28);
  if (v31) {
    uint64_t v30 = CLP_LogEntry_AONLoc_BtAdvertisement.idsDeviceID.setter(v30, v31);
  }
  uint64_t v32 = MEMORY[0x24C5497D0](v30);
  if ((v33 & 1) == 0) {
    uint64_t v32 = CLP_LogEntry_AONLoc_BtAdvertisement.deviceFlags.setter(v32);
  }
  uint64_t v34 = MEMORY[0x24C549830](v32);
  if ((v35 & 1) == 0) {
    uint64_t v34 = CLP_LogEntry_AONLoc_BtAdvertisement.discoveryFlags.setter(v34);
  }
  MEMORY[0x24C549890](v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for ALBtAdvertisement.BtType?);
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  int v36 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v36 == *MEMORY[0x263F20908]) {
    goto LABEL_31;
  }
  if (v36 != *MEMORY[0x263F208F8])
  {
    if (v36 == *MEMORY[0x263F20900])
    {
      char v37 = 2;
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_31:
    char v37 = 0;
    goto LABEL_32;
  }
  char v37 = 1;
LABEL_32:
  CLP_LogEntry_AONLoc_BtAdvertisement.btType.setter(v37);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
LABEL_33:
  ALBtAdvertisement._type7Info.getter();
  uint64_t v38 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v45) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v4, &demangling cache variable for type metadata for ALBtAdvInfoType7?);
  }
  uint64_t v40 = v43;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v43, v4, v38);
  uint64_t v41 = v44;
  ALBtAdvInfoType7.toPb()(v44);
  CLP_LogEntry_AONLoc_BtAdvertisement.type7Info.setter(v41);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v40, v38);
}

uint64_t ALBtAdvInfoType7.toPb()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvInfoType7.Placement?);
  MEMORY[0x270FA5388](v2 - 8);
  int v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v20 - v10;
  CLP_LogEntry_AONLoc_Type7Info.init()(a1);
  uint64_t isSame = ALBtAdvInfoType7._isSameAccount.getter();
  if (isSame != 2) {
    uint64_t isSame = CLP_LogEntry_AONLoc_Type7Info.isSameAccount.setter(isSame & 1);
  }
  uint64_t v13 = MEMORY[0x24C549600](isSame);
  if (v13 != 2) {
    uint64_t v13 = CLP_LogEntry_AONLoc_Type7Info.isFamily.setter(v13 & 1);
  }
  char v14 = MEMORY[0x24C549590](v13);
  if (v14 != 2) {
    CLP_LogEntry_AONLoc_Type7Info.isSharedHome.setter(v14 & 1);
  }
  uint64_t isLeft = ALBtAdvInfoType7._isLeftBud.getter();
  if (isLeft != 2) {
    uint64_t isLeft = CLP_LogEntry_AONLoc_Type7Info.isLeftBud.setter(isLeft & 1);
  }
  char v16 = MEMORY[0x24C5495D0](isLeft);
  if (v16 != 2) {
    CLP_LogEntry_AONLoc_Type7Info.isCase.setter(v16 & 1);
  }
  ALBtAdvInfoType7._placement.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v4, &demangling cache variable for type metadata for ALBtAdvInfoType7.Placement?);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  int v18 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if (v18 != *MEMORY[0x263F208D8])
  {
    if (v18 == *MEMORY[0x263F208B0])
    {
      char v19 = 1;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x263F208E8])
    {
      char v19 = 2;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x263F208C0])
    {
      char v19 = 3;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x263F208B8])
    {
      char v19 = 4;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x263F208C8])
    {
      char v19 = 5;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x263F208D0])
    {
      char v19 = 6;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x263F208E0])
    {
      char v19 = 7;
      goto LABEL_29;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  char v19 = 0;
LABEL_29:
  CLP_LogEntry_AONLoc_Type7Info.placement.setter(v19);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t ALBtAdvertisement.toPb()@<X0>(uint64_t a1@<X8>)
{
  CLP_LogEntry_AONLoc_BtAdvertisement.init()(a1);
  return ALBtAdvertisement.toPb(pb:)();
}

uint64_t ALBtAdvertisement.init(pb:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  MEMORY[0x270FA5388](v2 - 8);
  int v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvInfoType7?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvertisement.BtType?);
  MEMORY[0x270FA5388](v12 - 8);
  char v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ALBtAdvertisement.init()();
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasMachContTimeNs.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.machContTimeNs.getter();
    ALBtAdvertisement._machContTimeNs.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasMac.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.mac.getter();
    ALBtAdvertisement._mac.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasRssiDb.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.rssiDb.getter();
    v18[0] = 0;
    ALBtAdvertisement._rssidB.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasAntennaIndex.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.antennaIndex.getter();
    v18[4] = 0;
    ALBtAdvertisement._antennaIndex.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasPayload.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.payload.getter();
    ALBtAdvertisement._payload.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasChannel.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.channel.getter();
    v18[8] = 0;
    ALBtAdvertisement._channel.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasProductID.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.productID.getter();
    v18[12] = 0;
    ALBtAdvertisement._productID.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasIdentifier.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.identifier.getter();
    ALBtAdvertisement._identifier.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasIdsDeviceID.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.idsDeviceID.getter();
    ALBtAdvertisement._idsDeviceID.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasDeviceFlags.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.deviceFlags.getter();
    ALBtAdvertisement._deviceFlags.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasDiscoveryFlags.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.discoveryFlags.getter();
    ALBtAdvertisement._discoveryFlags.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasBtType.getter())
  {
    char v15 = CLP_LogEntry_AONLoc_BtAdvertisement.btType.getter();
    (*(void (**)(unsigned char *, void, uint64_t))(v9 + 104))(v11, **((unsigned int **)&unk_265204AA8 + v15), v8);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v14, v11, v8);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    ALBtAdvertisement._type.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasType7Info.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.type7Info.getter((uint64_t)v4);
    ALBtAdvInfoType7.init(pb:)((uint64_t)v4);
    uint64_t v16 = type metadata accessor for ALBtAdvInfoType7();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 0, 1, v16);
    ALBtAdvertisement._type7Info.setter();
  }
  return outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
}

uint64_t ALBtAdvInfoType7.init(pb:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvInfoType7.Placement?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtAdvInfoType7.init()();
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsSameAccount.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isSameAccount.getter();
    ALBtAdvInfoType7._isSameAccount.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsFamily.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isFamily.getter();
    ALBtAdvInfoType7._isFamily.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsSharedHome.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isSharedHome.getter();
    ALBtAdvInfoType7._isSharedHome.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsLeftBud.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isLeftBud.getter();
    ALBtAdvInfoType7._isLeftBud.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsCase.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isCase.getter();
    ALBtAdvInfoType7._isCase.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasPlacement.getter())
  {
    char v9 = CLP_LogEntry_AONLoc_Type7Info.placement.getter();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, **((unsigned int **)&unk_265204AC0 + v9), v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    ALBtAdvInfoType7._placement.setter();
  }
  return outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement(a1, type metadata accessor for CLP_LogEntry_AONLoc_Type7Info);
}

uint64_t ALBtAdvertisement.init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  char v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v13 - v10;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
  Message.init(serializedData:extensions:partial:options:)();
  if (v2) {
    return outlined consume of Data._Representation(a1, a2);
  }
  outlined init with copy of CLP_LogEntry_AONLoc_BtAdvertisement((uint64_t)v11, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
  ALBtAdvertisement.init(pb:)((uint64_t)v9);
  outlined consume of Data._Representation(a1, a2);
  return outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
}

uint64_t ALBtNotification.init(pb:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v45 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for ALBtAdvertisement();
  uint64_t v7 = *(void *)(v47 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v47);
  uint64_t v46 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v40 - v10;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ALBtNotification();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  char v21 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotification.init()();
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  uint64_t v48 = a2;
  v22(a2, v21, v18);
  if (CLP_LogEntry_AONLoc_BtNotification.hasEventReceiptTime.getter())
  {
    CLP_LogEntry_AONLoc_BtNotification.eventReceiptTime.getter((uint64_t)v14);
    ALTimeStamp.init(pb:)((uint64_t)v14);
    uint64_t v23 = type metadata accessor for ALTimeStamp();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v17, 0, 1, v23);
    ALBtNotification._timestamp.setter();
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void *)(*(void *)a1 + 16);
  if (v25)
  {
    uint64_t v26 = v24 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v27 = *(void *)(v5 + 72);
    uint64_t v43 = v7 + 32;
    uint64_t v44 = v27;
    uint64_t v41 = a1;
    uint64_t v42 = v7 + 8;
    v40[1] = v24;
    swift_bridgeObjectRetain();
    uint64_t v29 = v46;
    uint64_t v28 = v47;
    do
    {
      uint64_t v30 = v45;
      outlined init with copy of CLP_LogEntry_AONLoc_BtAdvertisement(v26, v45, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      ALBtAdvertisement.init(pb:)(v30);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v29, v11, v28);
      uint64_t v31 = (void (*)(char *, void))ALBtNotification._advertisements.modify();
      char v33 = v32;
      unint64_t v34 = *v32;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v33 = v34;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1, v34, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALBtAdvertisement>, MEMORY[0x263F20910], MEMORY[0x263F20910]);
        unint64_t *v33 = v34;
      }
      unint64_t v37 = *(void *)(v34 + 16);
      unint64_t v36 = *(void *)(v34 + 24);
      if (v37 >= v36 >> 1)
      {
        unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v34, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALBtAdvertisement>, MEMORY[0x263F20910], MEMORY[0x263F20910]);
        unint64_t *v33 = v34;
      }
      *(void *)(v34 + 16) = v37 + 1;
      unint64_t v38 = v34
          + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + *(void *)(v7 + 72) * v37;
      uint64_t v29 = v46;
      uint64_t v28 = v47;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v38, v46, v47);
      v31(v49, 0);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v28);
      v26 += v44;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    a1 = v41;
  }
  if (CLP_LogEntry_AONLoc_BtNotification.hasIsSimulated.getter())
  {
    CLP_LogEntry_AONLoc_BtNotification.isSimulated.getter();
    ALBtNotification._simulated.setter();
  }
  if (CLP_LogEntry_AONLoc_BtNotification.hasIsApOn.getter())
  {
    CLP_LogEntry_AONLoc_BtNotification.isApOn.getter();
    ALBtNotification._isApOn.setter();
  }
  if (CLP_LogEntry_AONLoc_BtNotification.hasIsScreenOn.getter())
  {
    CLP_LogEntry_AONLoc_BtNotification.isScreenOn.getter();
    ALBtNotification._isScreenOn.setter();
  }
  return outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
}

uint64_t ALBtNotification.toPb()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  uint64_t v40 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for ALBtAdvertisement();
  uint64_t v39 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ALTimeStamp();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = CLP_LogEntry_AONLoc_BtNotification.init()(a1);
  MEMORY[0x24C549660](v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    uint64_t v19 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for ALTimeStamp?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    ALTimeStamp.toPb()((uint64_t)v10);
    CLP_LogEntry_AONLoc_BtNotification.eventReceiptTime.setter((uint64_t)v10);
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  uint64_t v20 = MEMORY[0x24C5496B0](v19);
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    v37[0] = v20;
    v37[1] = v1;
    uint64_t v23 = v39 + 16;
    uint64_t v22 = *(void *)(v39 + 16);
    unint64_t v24 = v20 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    uint64_t v38 = *(void *)(v39 + 72);
    uint64_t v39 = v22;
    uint64_t v25 = (void (**)(char *, uint64_t))(v23 - 8);
    uint64_t v26 = a1;
    uint64_t v27 = v41;
    do
    {
      ((void (*)(char *, unint64_t, uint64_t))v39)(v7, v24, v27);
      CLP_LogEntry_AONLoc_BtAdvertisement.init()((uint64_t)v5);
      ALBtAdvertisement.toPb(pb:)();
      unint64_t v28 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtAdvertisement>, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      }
      unint64_t v30 = *(void *)(v28 + 16);
      unint64_t v29 = *(void *)(v28 + 24);
      if (v30 >= v29 >> 1) {
        unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtAdvertisement>, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      }
      *(void *)(v28 + 16) = v30 + 1;
      outlined init with take of CLP_LogEntry_AONLoc_BtAdvertisement((uint64_t)v5, v28+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v30, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      a1 = v26;
      *uint64_t v26 = v28;
      uint64_t v27 = v41;
      (*v25)(v7, v41);
      v24 += v38;
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = ALBtNotification._simulated.getter();
  if (v31 != 2) {
    uint64_t v31 = CLP_LogEntry_AONLoc_BtNotification.isSimulated.setter(v31 & 1);
  }
  uint64_t v32 = MEMORY[0x24C5496C0](v31);
  if (v32 != 2) {
    uint64_t v32 = CLP_LogEntry_AONLoc_BtNotification.isApOn.setter(v32 & 1);
  }
  char v33 = MEMORY[0x24C549680](v32);
  if (v33 != 2) {
    CLP_LogEntry_AONLoc_BtNotification.isScreenOn.setter(v33 & 1);
  }
  type metadata accessor for ALProtobufUtil();
  uint64_t v34 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  uint64_t v35 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:)(a1, v34, v35);
}

uint64_t ALBtNotifications.init(pb:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  uint64_t v39 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ALBtNotification();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for ALBtNotifications();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotifications.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v17, v14);
  if (CLP_LogEntry_AONLoc_Indication.hasType.getter()
    && (uint64_t v18 = v39,
        uint64_t v41 = v10,
        v42[0] = CLP_LogEntry_AONLoc_Indication.type.getter(),
        v42[39] = 6,
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0))
  {
    CLP_LogEntry_AONLoc_Indication.btIndication.getter(v13);
    uint64_t v19 = *v13;
    uint64_t v20 = *(void *)(*v13 + 16);
    if (v20)
    {
      unint64_t v36 = v13;
      uint64_t v37 = a1;
      uint64_t v21 = v19 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v39 = *(void *)(v18 + 72);
      uint64_t v40 = v7;
      uint64_t v38 = v8 + 32;
      uint64_t v35 = v19;
      swift_bridgeObjectRetain();
      uint64_t v22 = (uint64_t)v41;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_BtAdvertisement(v21, (uint64_t)v6, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        uint64_t v23 = v6;
        ALBtNotification.init(pb:)((uint64_t)v6, v22);
        uint64_t v24 = a2;
        uint64_t v25 = (void (*)(unsigned char *, void))ALBtNotifications._results.modify();
        uint64_t v27 = v26;
        unint64_t v28 = *v26;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v27 = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALBtNotification>, MEMORY[0x263F208F0], MEMORY[0x263F208F0]);
          *uint64_t v27 = v28;
        }
        unint64_t v31 = *(void *)(v28 + 16);
        unint64_t v30 = *(void *)(v28 + 24);
        if (v31 >= v30 >> 1)
        {
          unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALBtNotification>, MEMORY[0x263F208F0], MEMORY[0x263F208F0]);
          *uint64_t v27 = v28;
        }
        *(void *)(v28 + 16) = v31 + 1;
        uint64_t v22 = (uint64_t)v41;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v28+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v31, v41, v40);
        v25(v42, 0);
        v21 += v39;
        --v20;
        a2 = v24;
        uint64_t v6 = v23;
      }
      while (v20);
      swift_bridgeObjectRelease();
      uint64_t v13 = v36;
      a1 = v37;
    }
    CLP_LogEntry_AONLoc_BtIndication.isLastBatch.getter();
    ALBtNotifications._isLastBatch.setter();
    outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement(a1, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v32 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
    uint64_t v33 = (uint64_t)v13;
  }
  else
  {
    uint64_t v32 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    uint64_t v33 = a1;
  }
  return outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement(v33, v32);
}

uint64_t ALBtNotifications.toPb()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  uint64_t v96 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ALBtAdvertisement();
  uint64_t v76 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v73 = (uint64_t)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for ALTimeStamp();
  uint64_t v95 = *(char **)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v72 = (char *)v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  uint64_t v86 = *(void *)(v15 - 8);
  uint64_t v87 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v97 = (void *)((char *)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v74 = type metadata accessor for ALBtNotification();
  uint64_t v17 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v91 = (char *)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v69 = (uint64_t)v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (void *)((char *)v67 - v22);
  CLP_LogEntry_AONLoc_Indication.init()(a1);
  CLP_LogEntry_AONLoc_Indication.type.setter(6);
  uint64_t v90 = v23;
  CLP_LogEntry_AONLoc_BtIndication.init()(v23);
  uint64_t v24 = ALBtNotifications.results.getter();
  uint64_t v85 = *(void *)(v24 + 16);
  if (v85)
  {
    v67[2] = v1;
    uint64_t v68 = a1;
    unint64_t v25 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v67[1] = v24;
    unint64_t v82 = v24 + v25;
    uint64_t v26 = type metadata accessor for ALProtobufUtil();
    uint64_t v27 = 0;
    unint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
    uint64_t v28 = v17 + 16;
    uint64_t v80 = v29;
    uint64_t v81 = v26;
    uint64_t v78 = *(void *)(v28 + 56);
    char v79 = (unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
    uint64_t v71 = (void (**)(char *, char *, uint64_t))(v95 + 32);
    char v70 = (uint64_t (**)(char *, uint64_t))(v95 + 8);
    uint64_t v92 = (void (**)(char *, uint64_t))(v76 + 8);
    uint64_t v93 = v76 + 16;
    uint64_t v77 = (void (**)(char *, uint64_t))(v28 - 8);
    uint64_t v94 = v6;
    uint64_t v95 = v5;
    uint64_t v30 = v75;
    unint64_t v31 = v97;
    uint64_t v32 = v74;
    uint64_t v83 = v28;
    int v84 = v13;
    uint64_t v33 = v91;
    do
    {
      uint64_t v89 = v27;
      v80(v33, v82 + v78 * v27, v32);
      uint64_t v34 = CLP_LogEntry_AONLoc_BtNotification.init()(v31);
      MEMORY[0x24C549660](v34);
      if ((*v79)(v13, 1, v30) == 1)
      {
        uint64_t v35 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for ALTimeStamp?);
      }
      else
      {
        unint64_t v36 = v72;
        (*v71)(v72, v13, v30);
        uint64_t v37 = v73;
        ALTimeStamp.toPb()(v73);
        CLP_LogEntry_AONLoc_BtNotification.eventReceiptTime.setter(v37);
        uint64_t v38 = v36;
        unint64_t v31 = v97;
        uint64_t v35 = (*v70)(v38, v30);
      }
      uint64_t v39 = MEMORY[0x24C5496B0](v35);
      uint64_t v40 = *(void *)(v39 + 16);
      if (v40)
      {
        uint64_t v41 = *(unsigned __int8 *)(v76 + 80);
        uint64_t v88 = v39;
        uint64_t v42 = v39 + ((v41 + 32) & ~v41);
        uint64_t v43 = *(void *)(v76 + 72);
        uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
        do
        {
          v44(v8, v42, v6);
          CLP_LogEntry_AONLoc_BtAdvertisement.init()((uint64_t)v5);
          ALBtAdvertisement.toPb(pb:)();
          unint64_t v45 = *v31;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v45 + 16) + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtAdvertisement>, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          }
          unint64_t v47 = *(void *)(v45 + 16);
          unint64_t v46 = *(void *)(v45 + 24);
          if (v47 >= v46 >> 1) {
            unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtAdvertisement>, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          }
          *(void *)(v45 + 16) = v47 + 1;
          uint64_t v48 = v45
              + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))
              + *(void *)(v96 + 72) * v47;
          uint64_t v5 = v95;
          outlined init with take of CLP_LogEntry_AONLoc_BtAdvertisement((uint64_t)v95, v48, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          unint64_t v31 = v97;
          *uint64_t v97 = v45;
          uint64_t v6 = v94;
          (*v92)(v8, v94);
          v42 += v43;
          --v40;
        }
        while (v40);
        swift_bridgeObjectRelease();
        uint64_t v30 = v75;
        uint64_t v32 = v74;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v49 = ALBtNotification._simulated.getter();
      if (v49 != 2) {
        uint64_t v49 = CLP_LogEntry_AONLoc_BtNotification.isSimulated.setter(v49 & 1);
      }
      uint64_t v50 = MEMORY[0x24C5496C0](v49);
      if (v50 != 2) {
        uint64_t v50 = CLP_LogEntry_AONLoc_BtNotification.isApOn.setter(v50 & 1);
      }
      char v51 = MEMORY[0x24C549680](v50);
      if (v51 != 2) {
        CLP_LogEntry_AONLoc_BtNotification.isScreenOn.setter(v51 & 1);
      }
      uint64_t v52 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      ALFWiFiScanResultsRequester.query(options:callback:start:end:)(v31, v87, v52);
      unint64_t v53 = *v90;
      uint64_t v54 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v53 + 16) + 1, 1, v53, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtNotification>, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      }
      unint64_t v56 = *(void *)(v53 + 16);
      unint64_t v55 = *(void *)(v53 + 24);
      uint64_t v57 = v89;
      if (v56 >= v55 >> 1)
      {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1, v53, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtNotification>, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        uint64_t v57 = v89;
        unint64_t v53 = v60;
      }
      *(void *)(v53 + 16) = v56 + 1;
      uint64_t v58 = v53
          + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))
          + *(void *)(v86 + 72) * v56;
      unint64_t v31 = v97;
      outlined init with take of CLP_LogEntry_AONLoc_BtAdvertisement((uint64_t)v97, v58, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      uint64_t v33 = v91;
      unint64_t *v90 = v53;
      (*v77)(v33, v32);
      uint64_t v27 = v57 + 1;
      BOOL v59 = v57 + 1 == v85;
      uint64_t v30 = v54;
      uint64_t v13 = v84;
    }
    while (!v59);
    swift_bridgeObjectRelease();
    a1 = v68;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char v61 = ALBtNotifications.isLastBatch.getter();
  uint64_t v62 = (uint64_t)v90;
  CLP_LogEntry_AONLoc_BtIndication.isLastBatch.setter(v61 & 1);
  uint64_t v63 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_BtAdvertisement(v62, v69, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  CLP_LogEntry_AONLoc_Indication.btIndication.setter(v63);
  type metadata accessor for ALProtobufUtil();
  uint64_t v64 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v65 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  ALFWiFiScanResultsRequester.query(options:callback:start:end:)(a1, v64, v65);
  return outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement(v62, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t ALBtNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v15 - v12;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3) {
    return outlined consume of Data._Representation(a1, a2);
  }
  outlined init with copy of CLP_LogEntry_AONLoc_BtAdvertisement((uint64_t)v13, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  ALBtNotifications.init(pb:)((uint64_t)v11, a3);
  outlined consume of Data._Representation(a1, a2);
  return outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement((uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t ALBtNotifications.serializedData()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ALBtNotifications();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotifications.toPb()((uint64_t)v12);
  if (!v1)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v13 = Message.serializedData(partial:)();
    unint64_t v15 = v14;
    outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    corelog.getter((uint64_t)v9);
    uint64_t v17 = v4;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, v3);
    outlined copy of Data._Representation(v13, v15);
    uint64_t v34 = v13;
    outlined copy of Data._Representation(v13, v15);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v39 = v33;
      *(_DWORD *)uint64_t v21 = 136446466;
      os_log_t v32 = v18;
      int v31 = v20;
      Swift::String v22 = ALBtNotifications.description()();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22._countAndFlagsBits, (unint64_t)v22._object, &v39);
      uint64_t v30 = &v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v3);
      *(_WORD *)(v21 + 12) = 2082;
      uint64_t v23 = v34;
      outlined copy of Data._Representation(v34, v15);
      uint64_t v24 = Data.description.getter();
      unint64_t v26 = v25;
      outlined consume of Data._Representation(v23, v15);
      uint64_t v27 = v24;
      uint64_t v0 = v23;
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v23, v15);
      outlined consume of Data._Representation(v23, v15);
      os_log_t v28 = v32;
      _os_log_impl(&dword_246DB2000, v32, (os_log_type_t)v31, "#BT,serializedData,notif,%{public}s,data,%{public}s", (uint8_t *)v21, 0x16u);
      uint64_t v29 = v33;
      swift_arrayDestroy();
      MEMORY[0x24C54A990](v29, -1, -1);
      MEMORY[0x24C54A990](v21, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v3);
      uint64_t v0 = v34;
      outlined consume of Data._Representation(v34, v15);
      outlined consume of Data._Representation(v0, v15);
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
  }
  return v0;
}

uint64_t static ALBtNotifications.serializedIndications(results:isLastBatch:)()
{
  uint64_t v0 = type metadata accessor for ALBtNotifications();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  ALBtNotifications.init(results:isLastBatch:)();
  uint64_t v4 = ALBtNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t ALBtAdvInfoType7.Placement.init(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F208B0];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F208E8];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F208C0];
      break;
    case 4:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F208B8];
      break;
    case 5:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F208C8];
      break;
    case 6:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F208D0];
      break;
    case 7:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F208E0];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x263F208D8];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  return v6(a2, v4, v5);
}

uint64_t CLP_LogEntry_AONLoc_Type7Info.Placement.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == *MEMORY[0x263F208D8]) {
    return 0;
  }
  if (v4 == *MEMORY[0x263F208B0]) {
    return 1;
  }
  if (v4 == *MEMORY[0x263F208E8]) {
    return 2;
  }
  if (v4 == *MEMORY[0x263F208C0]) {
    return 3;
  }
  if (v4 == *MEMORY[0x263F208B8]) {
    return 4;
  }
  if (v4 == *MEMORY[0x263F208C8]) {
    return 5;
  }
  if (v4 == *MEMORY[0x263F208D0]) {
    return 6;
  }
  if (v4 != *MEMORY[0x263F208E0])
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 7;
}

uint64_t outlined destroy of CLP_LogEntry_AONLoc_BtAdvertisement(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of CLP_LogEntry_AONLoc_BtAdvertisement(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of CLP_LogEntry_AONLoc_BtAdvertisement(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassSlotSource(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_GlonassSlotSource@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_GlonassSlotSource.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_GlonassSlotSource@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_GlonassSlotSource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_GlonassSlotSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GlonassSlotSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotSource(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
}

uint64_t CLP_LogEntry_PrivateData_SatelliteSystem.rawValue.getter(char a1)
{
  return qword_24710F868[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_SatelliteSystem(char *a1, char *a2)
{
  return qword_24710F868[*a1] == qword_24710F868[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SatelliteSystem(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SatelliteSystem@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_SatelliteSystem.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_SatelliteSystem()
{
  return qword_24710F868[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SatelliteSystem@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized CLP_LogEntry_PrivateData_SatelliteSystem.init(rawValue:)();
  *a1 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_SatelliteSystem(void *a1@<X8>)
{
  *a1 = qword_24710F868[*v1];
}

void *static CLP_LogEntry_PrivateData_SatelliteSystem.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SatelliteSystem.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SatelliteSystem(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SatelliteSystem.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_Band.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_Band(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Band(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_Band@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_Band.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_Band()
{
  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_Band@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_Band.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_Band(void *a1@<X8>)
{
  *a1 = *v1;
}

void *static CLP_LogEntry_PrivateData_Band.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_Band.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Band(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_Band.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FullSvTimeSource(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_FullSvTimeSource@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_FullSvTimeSource.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_FullSvTimeSource@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_FullSvTimeSource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_FullSvTimeSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_FullSvTimeSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_FullSvTimeSource(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_FullSvTimeSource.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_MeasurementDetectionMethod.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MeasurementDetectionMethod.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MeasurementDetectionMethod.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MultipathIndicator(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_MultipathIndicator.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MultipathIndicator.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MultipathIndicator(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MultipathIndicator;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvPositionSource(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SvPositionSource@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_SvPositionSource.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SvPositionSource@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_SvPositionSource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_SvPositionSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SvPositionSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvPositionSource(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SvPositionSource.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvHealthIndication(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_SvHealthIndication.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SvHealthIndication.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvHealthIndication(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvHealthIndication;
}

ALProtobuf::CLP_LogEntry_PrivateData_IonosphericCorrectionSource_optional __swiftcall CLP_LogEntry_PrivateData_IonosphericCorrectionSource.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (ALProtobuf::CLP_LogEntry_PrivateData_IonosphericCorrectionSource_optional)rawValue;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void *static CLP_LogEntry_PrivateData_IonosphericCorrectionSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_IonosphericCorrectionSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void *static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvReferencePoint(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SvReferencePoint@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CLP_LogEntry_PrivateData_SvReferencePoint.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_SvReferencePoint.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SvReferencePoint.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvReferencePoint(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvReferencePoint;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  unint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()()
{
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotSource.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotSource()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(a1 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.freqNum.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 20));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.freqNum.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassId.freqNum.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassId.hasFreqNum.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 20) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassId.clearFreqNum()()
{
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.slotInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = 5;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

void (*CLP_LogEntry_PrivateData_GlonassId.slotInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    v10[*(int *)(v6 + 24)] = 5;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  }
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.modify;
}

void CLP_LogEntry_PrivateData_GlonassId.slotInfo.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()()
{
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GlonassId.init()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a1);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.gpsPrn.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.gpsPrn.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.gpsPrn.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasGpsPrn.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearGpsPrn()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.glonassID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.glonassID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

void (*CLP_LogEntry_PrivateData_ConstellationId.glonassID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  }
  return CLP_LogEntry_PrivateData_ConstellationId.glonassID.modify;
}

void CLP_LogEntry_PrivateData_ConstellationId.glonassID.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasGlonassID.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearGlonassID()()
{
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.beidouRangingCode.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 28));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.beidouRangingCode.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.beidouRangingCode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.galileoSpreadingCode.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 32));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.galileoSpreadingCode.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.galileoSpreadingCode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.qzssPrn.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 36));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.qzssPrn.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.qzssPrn.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.sbasPrn.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 40));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.sbasPrn.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.sbasPrn.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.navicPrn.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 44));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.navicPrn.setter(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.navicPrn.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[9];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v2[10];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_ConstellationId._glonassID@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

uint64_t CLP_LogEntry_PrivateData_SvId.system.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t CLP_LogEntry_PrivateData_SvId.system.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t (*CLP_LogEntry_PrivateData_SvId.system.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SvId.hasSystem.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvId.clearSystem()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvId.constelID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a1 + v7[7];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[8];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[9];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[10];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
}

uint64_t CLP_LogEntry_PrivateData_SvId.constelID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

void (*CLP_LogEntry_PrivateData_SvId.constelID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[v6[6]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    uint64_t v15 = &v10[v6[7]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v10[v6[8]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v10[v6[9]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v10[v6[10]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    os_log_type_t v19 = &v10[v6[11]];
    *(_DWORD *)os_log_type_t v19 = 0;
    v19[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  }
  return CLP_LogEntry_PrivateData_SvId.constelID.modify;
}

void CLP_LogEntry_PrivateData_SvId.constelID.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvId.hasConstelID.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvId.clearConstelID()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvId.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GlonassId.init()(type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a1(0);
  uint64_t v7 = a3 + *(int *)(v6 + 20);
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a3 + *(int *)(v6 + 24);
  uint64_t v9 = a2(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvId._constelID@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL1SyncState.hasCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL1SyncState.clearCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL1SyncState.hasNavBit.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL1SyncState.clearNavBit()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL1SyncState.hasSubframe.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL1SyncState.clearSubframe()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL1SyncState.hasTowDecoded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL1SyncState.clearTowDecoded()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_GpsL1SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cmCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 20)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cmCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.cmCodeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasCmCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearCmCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.clCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 24)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.clCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.clCodeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasClCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearClCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 28)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavBit.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasCNavBit.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearCNavBit()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavFrame.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 32)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavFrame.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasCNavFrame.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearCNavFrame()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasTowDecoded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearTowDecoded()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_GpsL2CSyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL5SyncState.codeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL5SyncState.hasCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL5SyncState.clearCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.cNavBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.cNavBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL5SyncState.cNavBit.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL5SyncState.hasCNavBit.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL5SyncState.clearCNavBit()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.cNavFrame.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.cNavFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL5SyncState.cNavFrame.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL5SyncState.hasCNavFrame.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL5SyncState.clearCNavFrame()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL5SyncState.towDecoded.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL5SyncState.hasTowDecoded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL5SyncState.clearTowDecoded()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_GpsL5SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, a1);
}

int *CLP_LogEntry_PrivateData_GpsL1SyncState.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  *(unsigned char *)(a2 + result[5]) = 2;
  *(unsigned char *)(a2 + result[6]) = 2;
  *(unsigned char *)(a2 + result[7]) = 2;
  *(unsigned char *)(a2 + result[8]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.codeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.symbol.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.symbol.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.symbol.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasSymbol.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearSymbol()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.navBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.navBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.navBit.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasNavBit.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearNavBit()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.string.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.string.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.string.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasString.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearString()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.todDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 36)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.todDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.todDecoded.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasTodDecoded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearTodDecoded()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_GlonassL1fSyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, a1);
}

int *CLP_LogEntry_PrivateData_GpsL2CSyncState.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  *(unsigned char *)(a2 + result[5]) = 2;
  *(unsigned char *)(a2 + result[6]) = 2;
  *(unsigned char *)(a2 + result[7]) = 2;
  *(unsigned char *)(a2 + result[8]) = 2;
  *(unsigned char *)(a2 + result[9]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB1SyncState.codeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB1SyncState.hasCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB1SyncState.clearCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.navBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.navBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB1SyncState.navBit.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB1SyncState.hasNavBit.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB1SyncState.clearNavBit()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.subframe.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.subframe.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB1SyncState.subframe.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB1SyncState.hasSubframe.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB1SyncState.clearSubframe()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB1SyncState.towDecoded.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB1SyncState.hasTowDecoded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB1SyncState.clearTowDecoded()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_BeidouB1SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB2SyncState.codeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB2SyncState.hasCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB2SyncState.clearCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.navBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.navBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB2SyncState.navBit.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB2SyncState.hasNavBit.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB2SyncState.clearNavBit()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.subframe.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.subframe.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB2SyncState.subframe.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB2SyncState.hasSubframe.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB2SyncState.clearSubframe()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB2SyncState.towDecoded.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB2SyncState.hasTowDecoded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB2SyncState.clearTowDecoded()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_BeidouB2SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BcCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BcCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BcCodeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE1SyncState.hasE1BcCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE1SyncState.clearE1BcCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1CCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1CCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE1SyncState.e1CCodeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE1SyncState.hasE1CCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE1SyncState.clearE1CCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BPage.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BPage.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BPage.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE1SyncState.hasE1BPage.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE1SyncState.clearE1BPage()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE1SyncState.towDecoded.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE1SyncState.hasTowDecoded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE1SyncState.clearTowDecoded()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_GalileoE1SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPrimCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPrimCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPrimCodeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5BPrimCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5BPrimCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APrimCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APrimCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APrimCodeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5APrimCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5APrimCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5AltBocPrimCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5AltBocPrimCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5AltBocPrimCodeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5AltBocPrimCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5AltBocPrimCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BDataBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BDataBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BDataBit.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5BDataBit.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5BDataBit()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ADataBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ADataBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ADataBit.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5ADataBit.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5ADataBit()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BSecCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BSecCodeLock.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BSecCodeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5BSecCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5BSecCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ASecCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ASecCodeLock.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ASecCodeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5ASecCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5ASecCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPageSync.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPageSync.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPageSync.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5BPageSync.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5BPageSync()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APageSync.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APageSync.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APageSync.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5APageSync.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5APageSync()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.towDecoded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.towDecoded.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.towDecoded.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasTowDecoded.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearTowDecoded()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) = 2;
}

int *CLP_LogEntry_PrivateData_GalileoE5SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  *(unsigned char *)(a1 + result[9]) = 2;
  *(unsigned char *)(a1 + result[10]) = 2;
  *(unsigned char *)(a1 + result[11]) = 2;
  *(unsigned char *)(a1 + result[12]) = 2;
  *(unsigned char *)(a1 + result[13]) = 2;
  *(unsigned char *)(a1 + result[14]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_SbasL1SyncState.codeLock.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SbasL1SyncState.hasCodeLock.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SbasL1SyncState.clearCodeLock()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.symbol.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.symbol.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_SbasL1SyncState.symbol.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SbasL1SyncState.hasSymbol.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SbasL1SyncState.clearSymbol()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.message.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.message.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_SbasL1SyncState.message.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SbasL1SyncState.hasMessage.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SbasL1SyncState.clearMessage()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28)) = 2;
}

int *CLP_LogEntry_PrivateData_SbasL1SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SyncState.band.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 16) == 13) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t CLP_LogEntry_PrivateData_SyncState.band.setter(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 16) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_SyncState.band.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 13) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SyncState.band.modify;
}

void CLP_LogEntry_PrivateData_SyncState.band.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasBand.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 16) != 13;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearBand()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(unsigned char *)(v4 + 16) = 13;
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL1.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL1.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.modify;
}

void CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGpsL1()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL2C.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL2C.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL2C.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.gpsL2C.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.gpsL2C.modify;
}

void CLP_LogEntry_PrivateData_SyncState.gpsL2C.modify(uint64_t a1, char a2)
{
}

void CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 40);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  size_t v8 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(*(void *)(*(void *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGpsL2C.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(uint64_t *a1, uint64_t (*a2)(void), void *a3, uint64_t (*a4)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v11, a1);
  uint64_t v13 = a4(0);
  BOOL v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
  return v14;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGpsL2C()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL5.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL5.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.gpsL5.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.gpsL5.modify;
}

void CLP_LogEntry_PrivateData_SyncState.gpsL5.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGpsL5.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGpsL5()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.glonassL1F.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL2C.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL2C.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, a1);
  uint64_t v15 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v13, 1, v15) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, a5, a4);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a5 + v15[5]) = 2;
  *(unsigned char *)(a5 + v15[6]) = 2;
  *(unsigned char *)(a5 + v15[7]) = 2;
  *(unsigned char *)(a5 + v15[8]) = 2;
  *(unsigned char *)(a5 + v15[9]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.glonassL1F.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.glonassL1F.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.glonassL1F.modify;
}

void CLP_LogEntry_PrivateData_SyncState.glonassL1F.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGlonassL1F.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGlonassL1F()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.beidouB1.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.beidouB1.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.beidouB1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.beidouB1.modify;
}

void CLP_LogEntry_PrivateData_SyncState.beidouB1.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasBeidouB1.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearBeidouB1()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.beidouB2.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.beidouB2.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.beidouB2.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.beidouB2.modify;
}

void CLP_LogEntry_PrivateData_SyncState.beidouB2.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasBeidouB2.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearBeidouB2()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.galileoE1.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.galileoE1.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.galileoE1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.galileoE1.modify;
}

void CLP_LogEntry_PrivateData_SyncState.galileoE1.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGalileoE1.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGalileoE1()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.galileoE5.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 2;
  *(unsigned char *)(a1 + v7[6]) = 2;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  *(unsigned char *)(a1 + v7[9]) = 2;
  *(unsigned char *)(a1 + v7[10]) = 2;
  *(unsigned char *)(a1 + v7[11]) = 2;
  *(unsigned char *)(a1 + v7[12]) = 2;
  *(unsigned char *)(a1 + v7[13]) = 2;
  *(unsigned char *)(a1 + v7[14]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.galileoE5.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.galileoE5.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    v9[v6[13]] = 2;
    v9[v6[14]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.galileoE5.modify;
}

void CLP_LogEntry_PrivateData_SyncState.galileoE5.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGalileoE5.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGalileoE5()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.sbasL1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 2;
  *(unsigned char *)(a1 + v7[6]) = 2;
  *(unsigned char *)(a1 + v7[7]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.sbasL1.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.sbasL1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.sbasL1.modify;
}

void CLP_LogEntry_PrivateData_SyncState.sbasL1.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasSbasL1.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearSbasL1()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.navicL5.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL1.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, a1);
  uint64_t v15 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v13, 1, v15) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, a5, a4);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a5 + v15[5]) = 2;
  *(unsigned char *)(a5 + v15[6]) = 2;
  *(unsigned char *)(a5 + v15[7]) = 2;
  *(unsigned char *)(a5 + v15[8]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.navicL5.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.navicL5.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.navicL5.modify;
}

void CLP_LogEntry_PrivateData_SyncState.navicL5.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasNavicL5.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearNavicL5()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

double CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvTime.clearTimeUncNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvTime.uncertaintyAdjustedByExternalTool.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.uncertaintyAdjustedByExternalTool.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t (*CLP_LogEntry_PrivateData_SvTime.uncertaintyAdjustedByExternalTool.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SvTime.hasUncertaintyAdjustedByExternalTool.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvTime.clearUncertaintyAdjustedByExternalTool()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28)) = 2;
}

int *CLP_LogEntry_PrivateData_SvTime.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SvTime.init()(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, 2, a1);
}

double CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 20);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetPpb.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffset.hasFrequencyOffsetPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 20) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffset.clearFrequencyOffsetPpb()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetUncPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetUncPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetUncPpb.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffset.hasFrequencyOffsetUncPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffset.clearFrequencyOffsetUncPpb()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvTime.clearTimeUncNanoseconds()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.uncertaintyAdjustedByExternalTool.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.uncertaintyAdjustedByExternalTool.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffset.uncertaintyAdjustedByExternalTool.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffset.hasUncertaintyAdjustedByExternalTool.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffset.clearUncertaintyAdjustedByExternalTool()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28)) = 2;
}

int *CLP_LogEntry_PrivateData_FrequencyOffset.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SvTime.init()(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, 2, a1);
}

int *CLP_LogEntry_PrivateData_SvTime.init()@<X0>(uint64_t (*a1)(void)@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  uint64_t v7 = a3 + result[5];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a3 + result[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(a3 + result[7]) = a2;
  return result;
}

double CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetPpb.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hasFrequencyOffsetPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.clearFrequencyOffsetPpb()()
{
}

double CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetUncPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetUncPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetUncPpb.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hasFrequencyOffsetUncPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.clearFrequencyOffsetUncPpb()()
{
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.cycleSlipDetected.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.cycleSlipDetected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.cycleSlipDetected.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hasCycleSlipDetected.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0)
                           + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.clearCycleSlipDetected()()
{
  *(unsigned char *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.uncertaintyAdjustedByExternalTool.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.uncertaintyAdjustedByExternalTool.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.uncertaintyAdjustedByExternalTool.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hasUncertaintyAdjustedByExternalTool.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0)
                           + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.clearUncertaintyAdjustedByExternalTool()()
{
  *(unsigned char *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasPhaseStartTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearPhaseStartTimeNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseEndTimeNanoseconds.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 24));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseEndTimeNanoseconds.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.phaseEndTimeNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasPhaseEndTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearPhaseEndTimeNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.cycleSlipsDetected.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.cycleSlipsDetected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.cycleSlipsDetected.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasCycleSlipsDetected.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearCycleSlipsDetected()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_PhaseTracking.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(a1 + result[9]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

void (*CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    v10[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.modify;
}

void CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

void (*CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    v10[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.modify;
}

void CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasFrequencyOffset.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearFrequencyOffset()()
{
}

float CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasCn0Dbhz.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearCn0Dbhz()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v8 = a1 + v2[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SignalCorrelationPeak._svTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SignalCorrelationPeak._frequencyOffset@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

double CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FullSvTime.hasDerivedFullSvTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FullSvTime.clearDerivedFullSvTimeNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeUncNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeUncNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FullSvTime.hasDerivedFullSvTimeUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FullSvTime.clearDerivedFullSvTimeUncNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.getter()
{
  return CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return CLP_LogEntry_AONLoc_Request.type.modify;
}

BOOL CLP_LogEntry_PrivateData_FullSvTime.hasFullSvTimeSource.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28)) != 6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FullSvTime.clearFullSvTimeSource()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28)) = 6;
}

int *CLP_LogEntry_PrivateData_FullSvTime.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SvTime.init()(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, 6, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_FullSvTime._fullSvTimeSource()
{
  return 6;
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SvMeasurementUsage.hasInnovation.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvMeasurementUsage.clearInnovation()()
{
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()()
{
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.finalUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 28);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.finalUncertainty.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SvMeasurementUsage.finalUncertainty.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SvMeasurementUsage.hasFinalUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvMeasurementUsage.clearFinalUncertainty()()
{
}

int *CLP_LogEntry_PrivateData_SvMeasurementUsage.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 16);
  if (*(unsigned char *)(v1 + 20)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.setter(float a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(float *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + 20) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 16);
  if (*(unsigned char *)(v5 + 20)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 20) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearJammerCn0DbHz()()
{
}

float CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 24);
  if (*(unsigned char *)(v1 + 28)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.setter(float a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(float *)(v6 + 24) = a1;
  *(unsigned char *)(v6 + 28) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 24);
  if (*(unsigned char *)(v5 + 28)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 24) = v4;
  *(unsigned char *)(v10 + 28) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasSnrAtCorrelatorOutput.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 28) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearSnrAtCorrelatorOutput()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  swift_beginAccess();
  *(_DWORD *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 28) = 1;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 6;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 6;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  }
  return CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasFullSvTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearFullSvTime()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeUsageNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearSvTimeUsageNanoseconds()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasFrequencyOffsetUsagePpb.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearFrequencyOffsetUsagePpb()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + *a1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a2 + v9[6];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v9[7];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasCarrierPhaseUsageNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearCarrierPhaseUsageNanoseconds()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(int a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()()
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(void *a1)
{
  uint64_t v2 = (unsigned char *)(*(void *)(v1
                           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
               + *a1);
  swift_beginAccess();
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.setter(int a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(int a1, void *a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v5) + *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v8 = a1;
  *(unsigned char *)(v8 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 84);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 4) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasCoherentIntegrationMs.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(unsigned char *)(v3 + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearCoherentIntegrationMs()()
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = swift_retain();
    a3(v10);
    *(void *)(v4 + v8) = v9;
    swift_release();
  }
  uint64_t v11 = *(void *)(v4 + v8) + *a4;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearSvTimeDetectionMethod()()
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 7) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = (unsigned char *)(*(void *)(v5 + v10) + *a5);
  uint64_t result = swift_beginAccess();
  unsigned char *v13 = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  *uint64_t v16 = v10;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasFrequencyDetectionMethod.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 7;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearFrequencyDetectionMethod()()
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.clearSvTimeDetectionMethod()(void *a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  int v6 = (unsigned char *)(*(void *)(v1 + v3) + *a1);
  uint64_t result = swift_beginAccess();
  *int v6 = 7;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.channelID.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.channelID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.channelID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.channelID.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.channelID.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasChannelID.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearChannelID()()
{
}

float CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds, a1);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasCodeLockDurationSeconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearCodeLockDurationSeconds()()
{
}

float CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

float CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  float result = *(float *)v3;
  if (*(unsigned char *)(v3 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4, float a5)
{
  uint64_t v10 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a3(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v5 + v10) + *a4;
  uint64_t result = swift_beginAccess();
  *(float *)uint64_t v13 = a5;
  *(unsigned char *)(v13 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 84);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 4) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasFrequencyLockDurationSeconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearFrequencyLockDurationSeconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.metadata.getter()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0)
                                      + 20))
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  if (v3 >> 60 == 15) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *v1;
  }
  outlined copy of Data?(v2, v3);
  return v4;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.metadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = (uint64_t *)(*(void *)(v2 + v5)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  *uint64_t v8 = a1;
  v8[1] = a2;
  return outlined consume of Data?(v9, v10);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.metadata.modify(void *a1))(uint64_t *a1, char a2)
{
  unint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (uint64_t *)(*(void *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  if (v7 >> 60 == 15) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *v5;
  }
  unint64_t v9 = 0xC000000000000000;
  if (v7 >> 60 != 15) {
    unint64_t v9 = v5[1];
  }
  v3[9] = v8;
  v3[10] = v9;
  outlined copy of Data?(v6, v7);
  return CLP_LogEntry_PrivateData_MeasurementExtension.metadata.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.metadata.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  unint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    outlined copy of Data._Representation(*(void *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
      uint64_t v7 = swift_allocObject();
      uint64_t v8 = swift_retain();
      CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v8);
      *(void *)(v6 + v5) = v7;
      swift_release();
    }
    unint64_t v9 = (uint64_t *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
    swift_beginAccess();
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    uint64_t *v9 = v3;
    v9[1] = v4;
    outlined consume of Data?(v10, v11);
    outlined consume of Data._Representation(*(void *)(v2 + 72), *(void *)(v2 + 80));
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v12 = *(int *)(v2 + 96);
      uint64_t v13 = *(void *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
      uint64_t v14 = swift_allocObject();
      uint64_t v15 = swift_retain();
      CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v15);
      *(void *)(v13 + v12) = v14;
      swift_release();
    }
    uint64_t v16 = (uint64_t *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
    swift_beginAccess();
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    *uint64_t v16 = v3;
    v16[1] = v4;
    outlined consume of Data?(v17, v18);
  }
  free((void *)v2);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasMetadata.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata;
  swift_beginAccess();
  return *(void *)(v1 + 8) >> 60 != 15;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearMetadata()()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  unint64_t v4 = (uint64_t *)(*(void *)(v0 + v1)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  *(_OWORD *)unint64_t v4 = xmmword_247109500;
  outlined consume of Data?(v5, v6);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.setter(int a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasMetadataFormat.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearMetadataFormat()()
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(uint64_t *a1, char a2)
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.init()@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MeasurementExtension._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.id.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.id.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.id.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.id.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return CLP_LogEntry_PrivateData_Measurement.id.modify;
}

void CLP_LogEntry_PrivateData_Measurement.id.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasID.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearID()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.syncState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.syncState.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.syncState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  }
  return CLP_LogEntry_PrivateData_Measurement.syncState.modify;
}

void CLP_LogEntry_PrivateData_Measurement.syncState.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasSyncState.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearSyncState()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

void (*CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter(void *a1)
{
  uint64_t v2 = (unsigned char *)(*(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
               + *a1);
  swift_beginAccess();
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(uint64_t a1, void *a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v5) + *a2;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v8 = a1;
  *(unsigned char *)(v8 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 88);
    uint64_t v9 = *(void *)(v5 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(void *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 8) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasEndTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(unsigned char *)(v3 + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearEndTimeNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = swift_retain();
    a3(v10);
    *(void *)(v4 + v8) = v9;
    swift_release();
  }
  uint64_t v11 = *(void *)(v4 + v8) + *a4;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

void (*CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasApplicabilityTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearApplicabilityTimeNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_Measurement.svTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.svTime.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.svTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  return CLP_LogEntry_PrivateData_Measurement.svTime.modify;
}

void CLP_LogEntry_PrivateData_Measurement.svTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasSvTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearSvTime()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.frequencyOffset.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, a1);
  uint64_t v15 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v13, 1, v15) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, a5, a4);
  }
  UnknownStorage.init()();
  uint64_t v16 = a5 + v15[5];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = a5 + v15[6];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  *(unsigned char *)(a5 + v15[7]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.frequencyOffset.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.frequencyOffset.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return CLP_LogEntry_PrivateData_Measurement.frequencyOffset.modify;
}

void CLP_LogEntry_PrivateData_Measurement.frequencyOffset.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasFrequencyOffset.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearFrequencyOffset()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.phaseTracking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(unsigned char *)(a1 + v7[9]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.phaseTracking.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.phaseTracking.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    v9[v6[9]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  }
  return CLP_LogEntry_PrivateData_Measurement.phaseTracking.modify;
}

void CLP_LogEntry_PrivateData_Measurement.phaseTracking.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasPhaseTracking.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearPhaseTracking()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.extension.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.extension.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.extension.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  }
  return CLP_LogEntry_PrivateData_Measurement.extension.modify;
}

void CLP_LogEntry_PrivateData_Measurement.extension.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasExtension.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearExtension()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  swift_endAccess();
  swift_release();
}

float CLP_LogEntry_PrivateData_Measurement.cn0DbHz.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.cn0DbHz.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz, a1);
}

void (*CLP_LogEntry_PrivateData_Measurement.cn0DbHz.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_Measurement.cn0DbHz.modify;
}

void CLP_LogEntry_PrivateData_Measurement.cn0DbHz.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasCn0DbHz.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearCn0DbHz()()
{
}

uint64_t CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.multipathIndicator.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

void (*CLP_LogEntry_PrivateData_Measurement.multipathIndicator.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.modify;
}

void CLP_LogEntry_PrivateData_Measurement.multipathIndicator.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()()
{
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  int v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.modify;
}

void CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasAveragedFrequencyOffset.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearAveragedFrequencyOffset()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.isUsable.getter()
{
  uint64_t v1 = (unsigned char *)(*(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  return *v1 & 1;
}

uint64_t CLP_LogEntry_PrivateData_Measurement.isUsable.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(void *)(v1 + v4) = v5;
    swift_release();
  }
  char v7 = a1 & 1;
  uint64_t v8 = (unsigned char *)(*(void *)(v2 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  uint64_t result = swift_beginAccess();
  *uint64_t v8 = v7;
  return result;
}

void (*CLP_LogEntry_PrivateData_Measurement.isUsable.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_Measurement.isUsable.modify;
}

void CLP_LogEntry_PrivateData_Measurement.isUsable.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80))
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  *uint64_t v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasIsUsable.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  return *v1 != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearIsUsable()()
{
}

uint64_t CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(void *a1, char a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v7);
    *(void *)(v2 + vCLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator, 5) = v6;
    swift_release();
  }
  uint64_t v8 = (unsigned char *)(*(void *)(v2 + v5) + *a1);
  uint64_t result = swift_beginAccess();
  *uint64_t v8 = a2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  }
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.modify;
}

void CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasAveragedFrequencyOffsetFromPhaseTracking.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearAveragedFrequencyOffsetFromPhaseTracking()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_Measurement._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Measurement._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyNoisePpbPerSecondPerRtHz.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 20);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyNoisePpbPerSecondPerRtHz.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyNoisePpbPerSecondPerRtHz.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 20);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasFrequencyNoisePpbPerSecondPerRtHz.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearFrequencyNoisePpbPerSecondPerRtHz()()
{
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.phaseNoisePpbPerRtHz.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.phaseNoisePpbPerRtHz.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.phaseNoisePpbPerRtHz.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 24);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasPhaseNoisePpbPerRtHz.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearPhaseNoisePpbPerRtHz()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyVariancePpb2.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyVariancePpb2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyVariancePpb2.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 28);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasFrequencyVariancePpb2.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearFrequencyVariancePpb2()()
{
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 32);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasPhaseVarianceNanoseconds2.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearPhaseVarianceNanoseconds2()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.clockJumpDetected.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.clockJumpDetected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.clockJumpDetected.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = *(unsigned char *)(v1 + v3) & 1;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasClockJumpDetected.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearClockJumpDetected()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_ReceiverClockModel.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  *(unsigned char *)(a1 + result[9]) = 2;
  return result;
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.frequencyCorrectionPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.frequencyCorrectionPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.frequencyCorrectionPpb.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasFrequencyCorrectionPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearFrequencyCorrectionPpb()()
{
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.cummulativePhaseCorrectionNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.cummulativePhaseCorrectionNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.cummulativePhaseCorrectionNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasCummulativePhaseCorrectionNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearCummulativePhaseCorrectionNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureDegreesCelsius.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 28);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureDegreesCelsius.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureDegreesCelsius.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasCurrentTemperatureDegreesCelsius.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearCurrentTemperatureDegreesCelsius()()
{
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureRateDegreesPerSecond.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureRateDegreesPerSecond.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureRateDegreesPerSecond.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasCurrentTemperatureRateDegreesPerSecond.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearCurrentTemperatureRateDegreesPerSecond()()
{
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()()
{
}

int *CLP_LogEntry_PrivateData_ReceiverClockCorrections.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 20));
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasOffsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearOffsetNanoseconds()()
{
}

float CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.subNanosecondOffsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.subNanosecondOffsetNanoseconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.subNanosecondOffsetNanoseconds.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 24);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasSubNanosecondOffsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearSubNanosecondOffsetNanoseconds()()
{
}

float CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetUncertaintyNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetUncertaintyNanoseconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetUncertaintyNanoseconds.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 28);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasOffsetUncertaintyNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearOffsetUncertaintyNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftPpb.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasDriftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearDriftPpb()()
{
}

float CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 36);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasDriftUncertaintyPpb.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 36) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearDriftUncertaintyPpb()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

int *CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Clock.clockNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t CLP_LogEntry_PrivateData_Clock.clockNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t (*CLP_LogEntry_PrivateData_Clock.clockNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Clock.hasClockNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Clock.clearClockNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_Clock.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  *(unsigned char *)(a1 + v7[9]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
}

uint64_t CLP_LogEntry_PrivateData_Clock.model.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

void (*CLP_LogEntry_PrivateData_Clock.model.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 24);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    v10[v6[9]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  }
  return CLP_LogEntry_PrivateData_Clock.model.modify;
}

void CLP_LogEntry_PrivateData_Clock.model.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Clock.hasModel.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Clock.clearModel()()
{
}

uint64_t CLP_LogEntry_PrivateData_Clock.corrections.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
}

uint64_t CLP_LogEntry_PrivateData_Clock.corrections.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

void (*CLP_LogEntry_PrivateData_Clock.corrections.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 28);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v10[v6[9]];
    *(void *)uint64_t v16 = 0;
    v16[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  }
  return CLP_LogEntry_PrivateData_Clock.corrections.modify;
}

void CLP_LogEntry_PrivateData_Clock.corrections.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Clock.hasCorrections.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Clock.clearCorrections()()
{
}

uint64_t CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
}

uint64_t CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

void (*CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 32);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v10[v6[9]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  }
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.modify;
}

void CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()()
{
}

uint64_t CLP_LogEntry_PrivateData_Clock.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1 + v2[8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Clock._model@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Clock._corrections@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Clock._receiverToGpsTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.clock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a1 + v7[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a1 + v7[8];
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.clock.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReport.clock.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v9[v6[7]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    uint64_t v16 = &v9[v6[8]];
    uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  }
  return CLP_LogEntry_PrivateData_MeasurementReport.clock.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReport.clock.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementReport.hasClock.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReport.clearClock()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:)(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.measurements.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter(void (*a1)(void))
{
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.measurements.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(uint64_t a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = (void *)(*(void *)(v5 + v10) + *a5);
  swift_beginAccess();
  void *v13 = a1;
  return swift_bridgeObjectRelease();
}

void (*CLP_LogEntry_PrivateData_MeasurementReport.measurements.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementReport.measurements.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReport.measurements.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v8 + 88);
      uint64_t v11 = *(void *)(v8 + 80);
      a3(0);
      uint64_t v12 = swift_allocObject();
      uint64_t v13 = swift_retain();
      a4(v13);
      *(void *)(v11 + v10) = v12;
      swift_release();
    }
    uint64_t v14 = (void *)(*(void *)(*(void *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess();
    void *v14 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v15 = *(int *)(v8 + 88);
      uint64_t v16 = *(void *)(v8 + 80);
      a3(0);
      uint64_t v17 = swift_allocObject();
      uint64_t v18 = swift_retain();
      a4(v18);
      *(void *)(v16 + v1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator, 5) = v17;
      swift_release();
    }
    uint64_t v19 = (void *)(*(void *)(*(void *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess();
    *uint64_t v19 = v9;
  }
  swift_bridgeObjectRelease();
  free((void *)v8);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MeasurementReport._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

double CLP_LogEntry_PrivateData_Wgs84Ecef.x.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.x.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_Wgs84Ecef.x.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Wgs84Ecef.hasX.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Wgs84Ecef.clearX()()
{
}

double CLP_LogEntry_PrivateData_Wgs84Ecef.y.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.y.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_Wgs84Ecef.y.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Wgs84Ecef.hasY.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Wgs84Ecef.clearY()()
{
}

double CLP_LogEntry_PrivateData_Wgs84Ecef.z.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.z.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_Wgs84Ecef.z.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Wgs84Ecef.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Wgs84Ecef.clearZ()()
{
}

int *CLP_LogEntry_PrivateData_Wgs84Ecef.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.band.getter()
{
  return CLP_LogEntry_PrivateData_SvBandCorrections.band.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.band.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.band.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasBand.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20)) != 13;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearBand()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20)) = 13;
}

double CLP_LogEntry_PrivateData_SvBandCorrections.troposphericNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.troposphericNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.troposphericNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasTroposphericNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearTroposphericNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasIonosphericNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearIonosphericNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_SvBandCorrections.txGroupDelayNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.txGroupDelayNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.txGroupDelayNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasTxGroupDelayNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearTxGroupDelayNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericModel.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36));
  if (v1 == 3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericModel.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericModel.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasIonosphericModel.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearIonosphericModel()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36)) = 3;
}

int *CLP_LogEntry_PrivateData_SvBandCorrections.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(unsigned char *)(a1 + result[5]) = 13;
  uint64_t v3 = a1 + result[6];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[7];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[8];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(unsigned char *)(a1 + result[9]) = 3;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvBandCorrections._band()
{
  return 13;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvBandCorrections._ionosphericModel()
{
  return 3;
}

double CLP_LogEntry_PrivateData_SvPositionAtTime.applicableTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.applicableTimeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvPositionAtTime.applicableTimeNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvPositionAtTime.hasApplicableTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvPositionAtTime.clearApplicableTimeNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.position.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  MEMORY[0x270FA5388](v3 - 8);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.position.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

void (*CLP_LogEntry_PrivateData_SvPositionAtTime.position.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0) + 24);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  }
  return CLP_LogEntry_PrivateData_SvPositionAtTime.position.modify;
}

void CLP_LogEntry_PrivateData_SvPositionAtTime.position.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvPositionAtTime.hasPosition.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvPositionAtTime.clearPosition()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + *(int *)(v2 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvPositionAtTime._position@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

double CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityStartTimeNs.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityStartTimeNs.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityStartTimeNs.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PolynomialOrbit.hasFitValidityStartTimeNs.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PolynomialOrbit.clearFitValidityStartTimeNs()()
{
}

double CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityEndTimeNs.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityEndTimeNs.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityEndTimeNs.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PolynomialOrbit.hasFitValidityEndTimeNs.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 36) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PolynomialOrbit.clearFitValidityEndTimeNs()()
{
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*CLP_LogEntry_PrivateData_PolynomialOrbit.unknownFields.modify())(void, void, void)
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v2;
  a1[2] = v2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t result = UnknownStorage.init()();
  double v5 = (char *)a1 + *(int *)(v3 + 32);
  *(void *)double v5 = 0;
  v5[8] = 1;
  uint64_t v6 = (char *)a1 + *(int *)(v3 + 36);
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.id.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.id.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.id.getter@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + *(int *)(v11 + 20);
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a3 + *(int *)(v11 + 24);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.id.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.id.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

void (*CLP_LogEntry_PrivateData_SvInfo.id.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return CLP_LogEntry_PrivateData_SvInfo.id.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.id.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  double v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    CLP_LogEntry_PrivateData_SvInfo.id.setter((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v4, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  else
  {
    CLP_LogEntry_PrivateData_SvInfo.id.setter(*(void *)(*(void *)a1 + 48), &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasID.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearID()()
{
}

double CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasReferenceTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearReferenceTimeNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.positionSource.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

void (*CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasPositionSource.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.anchorPositions.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.anchorPositions.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.anchorPositions.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
}

void (*CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify(uint64_t *a1, char a2)
{
}

double CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

double CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  double result = *(double *)v3;
  if (*(unsigned char *)(v3 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(void *a1, double a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(void *)(v4 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = *(void *)(v4 + v6) + *a1;
  uint64_t result = swift_beginAccess();
  *(double *)uint64_t v9 = a2;
  *(unsigned char *)(v9 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 88);
    uint64_t v9 = *(void *)(v5 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v11);
    swift_release();
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(void *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 8) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasClockBiasCorrectionNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearClockBiasCorrectionNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clearReferenceTimeNanoseconds()(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v3 + v4) + *a1;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasClockFrequencyCorrectionPpb.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearClockFrequencyCorrectionPpb()()
{
}

double CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasClockFrequencyChangeCorrectionPpbPerSec.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearClockFrequencyChangeCorrectionPpbPerSec()()
{
}

float CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasRangeAccuracyPositionM.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearRangeAccuracyPositionM()()
{
}

float CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.setter(void *a1, float a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(void *)(v4 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = *(void *)(v4 + v6) + *a1;
  uint64_t result = swift_beginAccess();
  *(float *)uint64_t v9 = a2;
  *(unsigned char *)(v9 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 84);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v11);
    swift_release();
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 4) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasRangeAccuracyClockNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearRangeAccuracyClockNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clearRangeAccuracyPositionM()(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v3 + v4) + *a1;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 5) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(char a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(void *)(v4 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = (unsigned char *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess();
  unsigned char *v9 = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  char v6 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 80);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v11);
    swift_release();
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = (unsigned char *)(*(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 80)) + *a3);
  swift_beginAccess();
  *uint64_t v12 = v6;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasOverTheAirFromSvHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearOverTheAirFromSvHealthL1()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(void *a1, char a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(void *)(v5 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = (unsigned char *)(*(void *)(v5 + v6) + *a1);
  uint64_t result = swift_beginAccess();
  unsigned char *v9 = a2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasOverTheAirFromOtherSvHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearOverTheAirFromOtherSvHealthL1()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasAssistanceFileHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearAssistanceFileHealthL1()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasMsBasedHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearMsBasedHealthL1()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasIntegrityHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearIntegrityHealthL1()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.anchorPositions.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.anchorPositions.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(void *)(v4 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = (void *)(*(void *)(v4 + v6) + *a2);
  swift_beginAccess();
  void *v9 = a1;
  return swift_bridgeObjectRelease();
}

void (*CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v6 = *(int *)(v4 + 88);
      uint64_t v7 = *(void *)(v4 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
      uint64_t v8 = swift_allocObject();
      uint64_t v9 = swift_retain();
      specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v9);
      swift_release();
      *(void *)(v7 + v6) = v8;
      swift_release();
    }
    uint64_t v10 = (void *)(*(void *)(*(void *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    *uint64_t v10 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v11 = *(int *)(v4 + 88);
      uint64_t v12 = *(void *)(v4 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
      uint64_t v13 = swift_allocObject();
      uint64_t v14 = swift_retain();
      specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v14);
      swift_release();
      *(void *)(v12 + v11) = v13;
      swift_release();
    }
    uint64_t v15 = (void *)(*(void *)(*(void *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    *uint64_t v15 = v5;
  }
  swift_bridgeObjectRelease();
  free((void *)v4);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  }
  uint64_t v8 = MEMORY[0x263F8EE78];
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = v8;
  a1[2] = v8;
  UnknownStorage.init()();
  uint64_t v9 = (char *)a1 + *(int *)(v7 + 32);
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = (char *)a1 + *(int *)(v7 + 36);
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.id.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.id.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v10 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v25 = a1;
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v20);
    a1 = v25;
    swift_release();
    *(void *)(v10 + v18) = v19;
    swift_release();
  }
  uint64_t v21 = *(void *)(v10 + v18);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v17, a3);
  uint64_t v22 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v17, 0, 1, v22);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v17, (uint64_t)v15, a2);
  uint64_t v23 = v21 + *a5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v15, v23, a2);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    void *v9 = MEMORY[0x263F8EE78];
    v9[1] = v11;
    v9[2] = v11;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 32);
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = (char *)v9 + *(int *)(v6 + 36);
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  }
  return CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    CLP_LogEntry_PrivateData_SvInfo.id.setter((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v4, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  }
  else
  {
    CLP_LogEntry_PrivateData_SvInfo.id.setter(*(void *)(*(void *)a1 + 48), &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasPolynomialOrbit.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearPolynomialOrbit()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clearID()(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v13);
    swift_release();
    *(void *)(v7 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = *(void *)(v7 + v11);
  uint64_t v15 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
  uint64_t v16 = v14 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v10, v16, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasOverTheAirFromSvHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearOverTheAirFromSvHealthL5()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasOverTheAirFromOtherSvHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearOverTheAirFromOtherSvHealthL5()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasAssistanceFileHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearAssistanceFileHealthL5()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasMsBasedHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearMsBasedHealthL5()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasIntegrityHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearIntegrityHealthL5()()
{
}

double CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasClockFrequencyAccelCorrectionPpbPerSecPerSec.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearClockFrequencyAccelCorrectionPpbPerSecPerSec()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  if (*v1 == 4) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
}

void (*CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasSvReferencePoint.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  return *v1 != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearSvReferencePoint()()
{
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_SvInfo._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvInfo._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.band.getter()
{
  return CLP_LogEntry_PrivateData_SvBandCorrections.band.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.band.getter(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 13) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.band.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverBandCorrections.band.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13) {
    LOBYTE(vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  }
  *(unsigned char *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverBandCorrections.hasBand.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20)) != 13;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverBandCorrections.clearBand()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20)) = 13;
}

double CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverBandCorrections.hasRfTimeBiasNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverBandCorrections.clearRfTimeBiasNanoseconds()()
{
}

float CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasUncertaintyNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasUncertaintyNanoseconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasUncertaintyNanoseconds.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 28);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverBandCorrections.hasRfTimeBiasUncertaintyNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverBandCorrections.clearRfTimeBiasUncertaintyNanoseconds()()
{
}

float CLP_LogEntry_PrivateData_ReceiverBandCorrections.automaticGainControlDb.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.automaticGainControlDb.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverBandCorrections.automaticGainControlDb.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 32);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverBandCorrections.hasAutomaticGainControlDb.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverBandCorrections.clearAutomaticGainControlDb()()
{
}

int *CLP_LogEntry_PrivateData_ReceiverBandCorrections.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(unsigned char *)(a1 + result[5]) = 13;
  uint64_t v3 = a1 + result[6];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.timeOfChange.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.timeOfChange.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*CLP_LogEntry_PrivateData_LeapSecondChange.timeOfChange.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_LeapSecondChange.hasTimeOfChange.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondChange.clearTimeOfChange()()
{
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0) + 24);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_LeapSecondChange.hasNewLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondChange.clearNewLeapSecond()()
{
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.currentLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.currentLeapSecond.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_LeapSecondInfo.currentLeapSecond.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 20);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_LeapSecondInfo.hasCurrentLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondInfo.clearCurrentLeapSecond()()
{
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.changeKnowledge.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.getter(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 24));
  if (v2 == 5) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.changeKnowledge.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_LeapSecondInfo.changeKnowledge.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  }
  *(unsigned char *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_LeapSecondInfo.hasChangeKnowledge.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondInfo.clearChangeKnowledge()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

void (*CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 28);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  }
  return CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.modify;
}

void CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_LeapSecondInfo.hasNewLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

BOOL CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondInfo.clearNewLeapSecond()()
{
}

uint64_t CLP_LogEntry_PrivateData_Clock.clearCorrections()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unsigned int v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(unsigned char *)(a1 + v2[6]) = 5;
  uint64_t v4 = a1 + v2[7];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_LeapSecondInfo._newLeapSecond@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.applicableTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.applicableTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsToUtcConversion.applicableTimeNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsToUtcConversion.hasApplicableTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsToUtcConversion.clearApplicableTimeNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_GpsToUtcConversion.offsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.offsetNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsToUtcConversion.offsetNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsToUtcConversion.hasOffsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsToUtcConversion.clearOffsetNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_GpsToUtcConversion.driftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.driftPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsToUtcConversion.driftPpb.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsToUtcConversion.hasDriftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsToUtcConversion.clearDriftPpb()()
{
}

double CLP_LogEntry_PrivateData_GpsToUtcConversion.accelPpbPerSecond.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.accelPpbPerSecond.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsToUtcConversion.accelPpbPerSecond.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsToUtcConversion.hasAccelPpbPerSecond.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsToUtcConversion.clearAccelPpbPerSecond()()
{
}

int *CLP_LogEntry_PrivateData_GpsToUtcConversion.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.week.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.week.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsTimeInfo.week.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 20);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsTimeInfo.hasWeek.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsTimeInfo.clearWeek()()
{
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

void (*CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 24);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(_DWORD *)BOOL v12 = 0;
    v12[4] = 1;
    v10[v6[6]] = 5;
    uint64_t v13 = &v10[v6[7]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.modify;
}

void CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_GpsTimeInfo.hasLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsTimeInfo.clearLeapSecond()()
{
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

void (*CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 28);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  }
  return CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.modify;
}

void CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_GpsTimeInfo.hasConversion.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsTimeInfo.clearConversion()()
{
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unsigned int v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GpsTimeInfo._leapSecond@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GpsTimeInfo._conversion@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.collectionTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.collectionTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassSubsecondConversion.collectionTimeNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassSubsecondConversion.hasCollectionTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassSubsecondConversion.clearCollectionTimeNanoseconds()()
{
}

double CLP_LogEntry_PrivateData_GlonassSubsecondConversion.offsetTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.offsetTimeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassSubsecondConversion.offsetTimeNanoseconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassSubsecondConversion.hasOffsetTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassSubsecondConversion.clearOffsetTimeNanoseconds()()
{
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.fourWeekPeriod.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.fourWeekPeriod.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassTimeInfo.fourWeekPeriod.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 20);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasFourWeekPeriod.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearFourWeekPeriod()()
{
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.day.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(uint64_t (*a1)(void))
{
  unsigned int v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 24));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.day.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassTimeInfo.day.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 24);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasDay.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearDay()()
{
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.leapSecondDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.getter(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 28));
  if (v2 == 6) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.leapSecondDeprecated.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassTimeInfo.leapSecondDeprecated.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  }
  *(unsigned char *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasLeapSecondDeprecated.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28)) != 6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearLeapSecondDeprecated()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28)) = 6;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

void (*CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 32);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[*(int *)(v6 + 20)];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  return CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasGpsTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

BOOL CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearGpsTimeConversion()()
{
}

uint64_t CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 32);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.utcConversionDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.utcConversionDeprecated.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  int v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*CLP_LogEntry_PrivateData_GlonassTimeInfo.utcConversionDeprecated.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[*(int *)(v6 + 20)];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  return CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasUtcConversionDeprecated.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearUtcConversionDeprecated()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(unsigned char *)(a1 + v2[7]) = 6;
  uint64_t v5 = a1 + v2[8];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  size_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v9)((void *)(v6 - 8), v5, 1, 1, v6);
  uint64_t v7 = a1 + v2[9];
  return v9(v7, 1, 1, v6);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GlonassTimeInfo._gpsTimeConversion@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.applicableTimeNanoSeconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.applicableTimeNanoSeconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t (*CLP_LogEntry_PrivateData_SubSecondConversion.applicableTimeNanoSeconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SubSecondConversion.hasApplicableTimeNanoSeconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SubSecondConversion.clearApplicableTimeNanoSeconds()()
{
}

double CLP_LogEntry_PrivateData_SubSecondConversion.offsetNanoSeconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.offsetNanoSeconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SubSecondConversion.offsetNanoSeconds.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SubSecondConversion.hasOffsetNanoSeconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SubSecondConversion.clearOffsetNanoSeconds()()
{
}

double CLP_LogEntry_PrivateData_SubSecondConversion.driftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.driftPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SubSecondConversion.driftPpb.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SubSecondConversion.hasDriftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SubSecondConversion.clearDriftPpb()()
{
}

int *CLP_LogEntry_PrivateData_SubSecondConversion.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

int *CLP_LogEntry_PrivateData_Wgs84Ecef.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  uint64_t v5 = a2 + result[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + result[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + result[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.week.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 20)) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 + 16);
  }
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.week.setter(int a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + 20) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.week.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v5 + 16);
  if (*(unsigned char *)(v5 + 20)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.week.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.week.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 20) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasWeek.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 20) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearWeek()()
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.clearJammerCn0DbHz()(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t))
{
  uint64_t v6 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    a3(v8);
    *(void *)(v3 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v9 + 16) = 0;
  *(unsigned char *)(v9 + 20) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(unsigned char *)(a1 + v7[6]) = 5;
  uint64_t v9 = a1 + v7[7];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    uint64_t v12 = &v9[v6[7]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasLeapSecondDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearLeapSecondDeprecated()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasGpsTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearGpsTimeConversion()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasGlonassTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearGlonassTimeConversion()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasGalileoTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearGalileoTimeConversion()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20)) + *a1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasUtcTimeConversionDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearUtcTimeConversionDeprecated()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_BeidouTimeInfo._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.week.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.week.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoTimeInfo.week.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 20);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoTimeInfo.hasWeek.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoTimeInfo.clearWeek()()
{
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.leapSecondDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(unsigned char *)(a2 + v9[6]) = 5;
  uint64_t v11 = a2 + v9[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.leapSecondDeprecated.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, a3);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*CLP_LogEntry_PrivateData_GalileoTimeInfo.leapSecondDeprecated.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 24);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    v10[v6[6]] = 5;
    uint64_t v13 = &v10[v6[7]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoTimeInfo.hasLeapSecondDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoTimeInfo.clearLeapSecondDeprecated()()
{
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_Clock.corrections.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, a3);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 28);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_GalileoTimeInfo.hasGpsTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoTimeInfo.clearGpsTimeConversion()()
{
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 32);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoTimeInfo.hasUtcTimeConversionDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoTimeInfo.clearUtcTimeConversionDeprecated()()
{
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v10)((void *)(v7 - 8), v6, 1, 1, v7);
  uint64_t v8 = a1 + v2[8];
  return v10(v8, 1, 1, v7);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GalileoTimeInfo._gpsTimeConversion@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.gpsTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.gpsTimeConversion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*CLP_LogEntry_PrivateData_NavicTimeInfo.gpsTimeConversion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 20);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify;
}

BOOL CLP_LogEntry_PrivateData_NavicTimeInfo.hasGpsTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 20), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_NavicTimeInfo.clearGpsTimeConversion()()
{
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.week.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.week.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_NavicTimeInfo.week.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 24);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_NavicTimeInfo.hasWeek.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_NavicTimeInfo.clearWeek()()
{
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + *(int *)(v2 + 24);
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.gps.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a1 + v7[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.gps.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.gps.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v9[v6[7]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.gps.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.gps.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasGps.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearGps()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(unsigned char *)(a1 + v7[7]) = 6;
  uint64_t v10 = a1 + v7[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(a1 + v7[9], 1, 1, v11);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    v9[v6[7]] = 6;
    uint64_t v13 = &v9[v6[8]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    v15(v13, 1, 1, v14);
    v15(&v9[v6[9]], 1, 1, v14);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasGlonass.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearGlonass()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasBeidou.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearBeidou()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a1 + v7[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(a1 + v7[8], 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v9[v6[7]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    v16(v14, 1, 1, v15);
    v16(&v9[v6[8]], 1, 1, v15);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasGalileo.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearGalileo()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.navic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.navic.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.navic.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.navic.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.navic.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasNavic.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearNavic()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TimeConversionInfo._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeTimeFullGpsNs.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeTimeFullGpsNs.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeTimeFullGpsNs.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasDecodeTimeFullGpsNs.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearDecodeTimeFullGpsNs()()
{
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha0.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha0.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha0.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 24);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasAlpha0.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearAlpha0()()
{
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha1.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha1.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha1.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 28);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasAlpha1.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearAlpha1()()
{
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha2.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha2.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 32);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasAlpha2.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearAlpha2()()
{
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha3.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha3.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha3.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 36);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasAlpha3.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearAlpha3()()
{
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.beta0.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 40);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.beta0.setter(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.beta0.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 40);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasBeta0.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 40) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearBeta0()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.beta1.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 44);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.beta1.setter(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.beta1.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 44);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasBeta1.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 44) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearBeta1()()
{
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.beta2.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.beta2.setter(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v4 = v1 + *(int *)(result + 48);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.beta2.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasBeta2.getter()
{
  return (*(unsigned char *)(v0
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48)
                   + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearBeta2()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.beta3.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.beta3.setter(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.beta3.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  *(_DWORD *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasBeta3.getter()
{
  return (*(unsigned char *)(v0
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52)
                   + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearBeta3()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
}

int *CLP_LogEntry_PrivateData_KlobucharModelParameters.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v7 = a1 + result[9];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v8 = a1 + result[10];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v9 = a1 + result[11];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v10 = a1 + result[12];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v11 = a1 + result[13];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_SfcfXyz.x.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.x.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SfcfXyz.x.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SfcfXyz.hasX.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SfcfXyz.clearX()()
{
}

double CLP_LogEntry_PrivateData_SfcfXyz.y.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.y.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SfcfXyz.y.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SfcfXyz.hasY.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SfcfXyz.clearY()()
{
}

double CLP_LogEntry_PrivateData_SfcfXyz.z.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.z.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SfcfXyz.z.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SfcfXyz.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SfcfXyz.clearZ()()
{
}

int *CLP_LogEntry_PrivateData_SfcfXyz.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x270FA5388](v3 - 8);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, a3);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 20);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.modify;
}

void CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hasID.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.clearID()()
{
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.band.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0)
                                   + 24));
  if (v1 == 13) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.band.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.band.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13) {
    LOBYTE(vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  }
  *(unsigned char *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hasBand.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24)) != 13;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.clearBand()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24)) = 13;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.svReferencePoint.getter()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0)
                                   + 28));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.svReferencePoint.setter(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.svReferencePoint.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  }
  *(unsigned char *)(a1 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hasSvReferencePoint.getter()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.clearSvReferencePoint()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v5 + *(int *)(v14 + 32), (uint64_t)v13, a1);
  uint64_t v15 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v13, 1, v15) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v13, a5, a4);
  }
  UnknownStorage.init()();
  uint64_t v16 = a5 + v15[5];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = a5 + v15[6];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = a5 + v15[7];
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 32);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, a3);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 32);
  *((_DWORD *)v3 + 1CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  }
  return CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.modify;
}

void CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.modify(uint64_t a1, char a2)
{
}

void CLP_LogEntry_PrivateData_GlonassId.slotInfo.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(int *)(*(void *)a1 + 48);
  size_t v9 = *(void **)(*(void *)a1 + 32);
  uint64_t v10 = *(void **)(*(void *)a1 + 40);
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v8;
  if (a2)
  {
    outlined init with copy of CLP_LogEntry_PrivateData_GlonassSlotInfo(*(void *)(*(void *)a1 + 40), (uint64_t)v9, a5);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, a3);
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v9, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, a5);
  }
  else
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(**(void **)a1 + v8, a3);
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v10, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  free(v10);
  free(v9);
  free(v13);
  free(v7);
}

BOOL CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hasOffsetXyzM.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.clearOffsetXyzM()()
{
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + v2[6]) = 13;
  *(unsigned char *)(a1 + v2[7]) = 4;
  uint64_t v5 = a1 + v2[8];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._id@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_SvId, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._svReferencePoint()
{
  return 4;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._offsetXyzM@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

double CLP_LogEntry_PrivateData_ReceivedTimeStamp.iosAbsoluteSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.iosAbsoluteSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceivedTimeStamp.iosAbsoluteSec.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceivedTimeStamp.hasIosAbsoluteSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceivedTimeStamp.clearIosAbsoluteSec()()
{
}

double CLP_LogEntry_PrivateData_ReceivedTimeStamp.machAbsoluteSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.machAbsoluteSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceivedTimeStamp.machAbsoluteSec.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceivedTimeStamp.hasMachAbsoluteSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceivedTimeStamp.clearMachAbsoluteSec()()
{
}

double CLP_LogEntry_PrivateData_ReceivedTimeStamp.machContinuousSec.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.machContinuousSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceivedTimeStamp.machContinuousSec.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceivedTimeStamp.hasMachContinuousSec.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceivedTimeStamp.clearMachContinuousSec()()
{
}

int *CLP_LogEntry_PrivateData_ReceivedTimeStamp.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  MEMORY[0x270FA5388](v3 - 8);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  }
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasReceivedTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearReceivedTimestamp()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  }
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasMeasReport.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearMeasReport()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.modify(uint64_t *a1, char a2)
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.modify(uint64_t *a1, char a2)
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  }
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearTimeConversion()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.setter(&OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec, a1);
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify(uint64_t *a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasMeasApplicabilityTimeMachContinuousSec.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearMeasApplicabilityTimeMachContinuousSec()()
{
}

double CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.setter(&OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.setter(void *a1, double a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v7);
    *(void *)(v2 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v5) + *a1;
  uint64_t result = swift_beginAccess();
  *(double *)uint64_t v8 = a2;
  *(unsigned char *)(v8 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.modify(uint64_t *a1, char a2)
{
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 88);
    uint64_t v9 = *(void *)(v5 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(void *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 8) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasMeasApplicabilityTimeUncertaintySec.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearMeasApplicabilityTimeUncertaintySec()()
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v12 = a1 + v7[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v13 = a1 + v7[10];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v14 = a1 + v7[11];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v15 = a1 + v7[12];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v16 = a1 + v7[13];
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v9[v6[9]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v9[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v9[v6[11]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v9[v6[12]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    uint64_t v19 = &v9[v6[13]];
    *(_DWORD *)uint64_t v19 = 0;
    v19[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  }
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.modify(uint64_t a1, char a2)
{
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasKlobucharModel.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearKlobucharModel()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v6);
    *(void *)(v0 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 2CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.modify(uint64_t *a1, char a2)
{
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SatelliteSystem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Band._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Band._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Band._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Band._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Band@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Band._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FullSvTimeSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MultipathIndicator@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvPositionSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvHealthIndication@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvReferencePoint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_GlonassSlotInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassSlotInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassSlotInfo.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(unsigned char *)(a2 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5) = 5;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GlonassId.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassId.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassId.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v8 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v9 = *(void *)(*(void *)v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_247108640;
  uint64_t v12 = (void *)(v11 + v10);
  unint64_t v13 = v11 + v10 + v8[14];
  *uint64_t v12 = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = 8;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = *MEMORY[0x263F50728];
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v16 = *(void (**)(void))(*(void *)(v15 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v16)(v13, v14, v15);
  uint64_t v17 = (char *)v12 + v9 + v8[14];
  *(void *)((char *)v12 + v9) = 2;
  *(void *)uint64_t v17 = a4;
  *((void *)v17 + 1) = a5;
  v17[16] = 2;
  v16();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, MEMORY[0x263F506E0], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:));
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

Swift::Int CLP_LogEntry_PrivateData_GlonassId.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassId@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassId(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GlonassId()
{
  return CLP_LogEntry_PrivateData_GlonassId.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassId@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassId(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_ConstellationId.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ConstellationId.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ConstellationId.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v10 = result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(v5, a1, a2, a3);
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 32) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(v5);
    closure #6 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(v5);
    closure #7 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ConstellationId.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ConstellationId@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = a1[8];
  uint64_t v10 = a2 + a1[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v11 = a2 + v9;
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v12 = a1[10];
  uint64_t v13 = a2 + a1[9];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v14 = a2 + v12;
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v15 = a2 + a1[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ConstellationId()
{
  return CLP_LogEntry_PrivateData_ConstellationId.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ConstellationId@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SvId.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvId.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvId.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t CLP_LogEntry_PrivateData_SvId._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvId.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
        type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvId, MEMORY[0x263F50700], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CLP_LogEntry_PrivateData_SvId.traverse<A>(visitor:));
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v6;
  uint64_t result = a4(0);
  uint64_t v15 = (unsigned int *)(v10 + *(int *)(result + 20));
  if ((v15[1] & 1) == 0) {
    uint64_t result = a5(*v15, 1, a2, a3);
  }
  if (!v7)
  {
    a6(v10, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_SvId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Int CLP_LogEntry_PrivateData_SvId.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvId, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvId@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassId(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a2);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassId@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = *(int *)(a1 + 24);
  uint64_t v7 = a3 + *(int *)(a1 + 20);
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v8 = a3 + v6;
  uint64_t v9 = a2(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvId()
{
  return CLP_LogEntry_PrivateData_SvId.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvId@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvId(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GpsL1SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsL1SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsL1SyncState.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GpsL1SyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsL1SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GpsL2CSyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsL2CSyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsL2CSyncState.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL2CSyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GpsL2CSyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GpsL5SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsL5SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsL5SyncState.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        a4(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  char v7 = (int *)result;
  if (*(unsigned char *)(v4 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if (*(unsigned char *)(v4 + v7[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_GpsL5SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GpsL5SyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsL5SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GlonassL1fSyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassL1fSyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassL1fSyncState.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        a4(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  char v7 = (int *)result;
  if (*(unsigned char *)(v4 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if (*(unsigned char *)(v4 + v7[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[9]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GlonassL1fSyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_BeidouB1SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BeidouB1SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BeidouB1SyncState.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouB1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_BeidouB1SyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BeidouB1SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_BeidouB2SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BeidouB2SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BeidouB2SyncState.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v4 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v5 = *(void *)(*(void *)v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_247109530;
  unint64_t v8 = v7 + v6;
  unint64_t v9 = v7 + v6 + v4[14];
  *(void *)(v7 + v6) = 1;
  *(void *)unint64_t v9 = "code_lock";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  uint64_t v10 = *MEMORY[0x263F50728];
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  unint64_t v13 = v8 + v5 + v4[14];
  *(void *)(v8 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5) = 2;
  *(void *)unint64_t v13 = "nav_bit";
  *(void *)(v13 + 8) = 7;
  *(unsigned char *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v5);
  uint64_t v15 = (char *)v14 + v4[14];
  void *v14 = 3;
  *(void *)uint64_t v15 = "subframe";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v5);
  uint64_t v17 = (char *)v16 + v4[14];
  *uint64_t v16 = 4;
  *(void *)uint64_t v17 = "tow_decoded";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouB2SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_BeidouB2SyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BeidouB2SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GalileoE1SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GalileoE1SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GalileoE1SyncState.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GalileoE1SyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GpsL1SyncState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  return result;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GalileoE1SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_GalileoE5SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GalileoE5SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GalileoE5SyncState.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  uint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + v3[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #6 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #7 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #8 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #9 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #10 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 36)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 40)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 44)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 48)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 52)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #10 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 56)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GalileoE5SyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  uint64_t v7 = a1[10];
  *(unsigned char *)(a2 + a1[9]) = 2;
  *(unsigned char *)(a2 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, 7) = 2;
  uint64_t v8 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  *(unsigned char *)(a2 + v8) = 2;
  uint64_t v9 = a1[14];
  *(unsigned char *)(a2 + a1[13]) = 2;
  *(unsigned char *)(a2 + v9) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return CLP_LogEntry_PrivateData_GalileoE5SyncState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SbasL1SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SbasL1SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SbasL1SyncState.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SbasL1SyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SbasL1SyncState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + vCLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5) = 2;
  *(unsigned char *)(a2 + a1[7]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return CLP_LogEntry_PrivateData_SbasL1SyncState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return CLP_LogEntry_PrivateData_SbasL1SyncState.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SbasL1SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SyncState.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v86 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v85 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v84 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v83 = (uint64_t)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v82 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v81 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v79 = (uint64_t)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v74 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v70 = (uint64_t)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v1 + 16) = 13;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v24 = *(void (**)(void))(*(void *)(v23 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v22, 1, 1, v23);
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  uint64_t v71 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  uint64_t v72 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  uint64_t v73 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  uint64_t v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  uint64_t v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  uint64_t v76 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  uint64_t v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  uint64_t v39 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  uint64_t v40 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v80 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  v24();
  swift_beginAccess();
  LOBYTE(v2CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = *(unsigned char *)(a1 + 16);
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = (_BYTE)v24;
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  uint64_t v42 = v70;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v70, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v42, v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  uint64_t v43 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  uint64_t v44 = v74;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v44, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  swift_endAccess();
  uint64_t v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  uint64_t v46 = v79;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  uint64_t v47 = v71;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v46, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  swift_endAccess();
  uint64_t v48 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  uint64_t v49 = v81;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  uint64_t v50 = v72;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v49, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  swift_endAccess();
  uint64_t v51 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  uint64_t v52 = v82;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  uint64_t v53 = v73;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v52, v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  swift_endAccess();
  uint64_t v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  uint64_t v55 = v83;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  uint64_t v56 = v75;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v55, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  swift_endAccess();
  uint64_t v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  uint64_t v58 = v84;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  uint64_t v59 = v76;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v58, v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  swift_endAccess();
  uint64_t v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  uint64_t v61 = v85;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  uint64_t v62 = v77;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v61, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  swift_endAccess();
  uint64_t v63 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  uint64_t v64 = v86;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  uint64_t v65 = v78;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v64, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  swift_endAccess();
  uint64_t v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_release();
  uint64_t v67 = v80;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v42, v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_SyncState._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_18;
        case 2:
        case 11:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState;
          goto LABEL_17;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState;
          goto LABEL_17;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState;
          goto LABEL_17;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState;
          goto LABEL_17;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState;
          goto LABEL_17;
        case 7:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState;
          goto LABEL_17;
        case 8:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState;
          goto LABEL_17;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState;
          goto LABEL_17;
        case 10:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState;
          uint64_t v11 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState;
LABEL_17:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v11, v10);
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_18:
          uint64_t v2 = v9;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_retain();
  swift_beginAccess();
  if (*(unsigned char *)(v9 + 16) != 13)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #7 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #8 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #9 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #10 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #11 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t closure #7 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t closure #8 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t closure #9 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t closure #10 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t closure #11 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_SyncState.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v207 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v196 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SbasL1SyncState?, CLP_LogEntry_PrivateData_SbasL1SyncState?));
  MEMORY[0x270FA5388](v206);
  uint64_t v8 = (char *)&v196 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v202 = (uint64_t)&v196 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v210 = (uint64_t)&v196 - v12;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  uint64_t v212 = *(void *)(v13 - 8);
  uint64_t v213 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v203 = (uint64_t)&v196 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoE5SyncState?, CLP_LogEntry_PrivateData_GalileoE5SyncState?));
  MEMORY[0x270FA5388](v211);
  uint64_t v214 = (uint64_t)&v196 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v208 = (uint64_t)&v196 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v216 = (uint64_t)&v196 - v19;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  uint64_t v219 = *(void *)(v20 - 8);
  uint64_t v220 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v209 = (uint64_t)&v196 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoE1SyncState?, CLP_LogEntry_PrivateData_GalileoE1SyncState?));
  MEMORY[0x270FA5388](v218);
  uint64_t v221 = (uint64_t)&v196 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v215 = (uint64_t)&v196 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v235 = (uint64_t)&v196 - v26;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  uint64_t v225 = *(void *)(v27 - 8);
  uint64_t v226 = v27;
  MEMORY[0x270FA5388](v27);
  uint64_t v217 = (uint64_t)&v196 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouB2SyncState?, CLP_LogEntry_PrivateData_BeidouB2SyncState?));
  MEMORY[0x270FA5388](v224);
  uint64_t v227 = (uint64_t)&v196 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  uint64_t v222 = (uint64_t)&v196 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v229 = (uint64_t)&v196 - v33;
  uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  uint64_t v232 = *(void *)(v34 - 8);
  uint64_t v233 = v34;
  MEMORY[0x270FA5388](v34);
  uint64_t v223 = (uint64_t)&v196 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouB1SyncState?, CLP_LogEntry_PrivateData_BeidouB1SyncState?));
  MEMORY[0x270FA5388](v231);
  uint64_t v234 = (uint64_t)&v196 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  uint64_t v38 = MEMORY[0x270FA5388](v37 - 8);
  uint64_t v228 = (uint64_t)&v196 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  uint64_t v237 = (uint64_t)&v196 - v40;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  uint64_t v240 = *(void *)(v41 - 8);
  uint64_t v241 = v41;
  MEMORY[0x270FA5388](v41);
  uint64_t v230 = (uint64_t)&v196 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassL1fSyncState?, CLP_LogEntry_PrivateData_GlonassL1fSyncState?));
  MEMORY[0x270FA5388](v239);
  uint64_t v242 = (uint64_t)&v196 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  uint64_t v45 = MEMORY[0x270FA5388](v44 - 8);
  uint64_t v236 = (uint64_t)&v196 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  uint64_t v255 = (uint64_t)&v196 - v47;
  uint64_t v48 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  uint64_t v246 = *(void *)(v48 - 8);
  uint64_t v247 = v48;
  MEMORY[0x270FA5388](v48);
  uint64_t v238 = (uint64_t)&v196 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL5SyncState?, CLP_LogEntry_PrivateData_GpsL5SyncState?));
  MEMORY[0x270FA5388](v245);
  uint64_t v248 = (uint64_t)&v196 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  uint64_t v52 = MEMORY[0x270FA5388](v51 - 8);
  uint64_t v243 = (uint64_t)&v196 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v52);
  uint64_t v256 = (uint64_t)&v196 - v54;
  uint64_t v55 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  uint64_t v252 = *(void *)(v55 - 8);
  uint64_t v253 = v55;
  MEMORY[0x270FA5388](v55);
  uint64_t v244 = (uint64_t)&v196 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL2CSyncState?, CLP_LogEntry_PrivateData_GpsL2CSyncState?));
  MEMORY[0x270FA5388](v251);
  uint64_t v254 = (uint64_t)&v196 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  uint64_t v59 = MEMORY[0x270FA5388](v58 - 8);
  uint64_t v249 = (uint64_t)&v196 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v59);
  uint64_t v257 = (uint64_t)&v196 - v61;
  uint64_t v259 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v62 = *(void *)(v259 - 8);
  MEMORY[0x270FA5388](v259);
  uint64_t v250 = (uint64_t)&v196 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v258 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL1SyncState?, CLP_LogEntry_PrivateData_GpsL1SyncState?));
  uint64_t v64 = MEMORY[0x270FA5388](v258);
  uint64_t v205 = (uint64_t)&v196 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v64);
  uint64_t v67 = (char *)&v196 - v66;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  uint64_t v69 = MEMORY[0x270FA5388](v68 - 8);
  uint64_t v201 = (uint64_t)&v196 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = MEMORY[0x270FA5388](v69);
  uint64_t v204 = (uint64_t)&v196 - v72;
  uint64_t v73 = MEMORY[0x270FA5388](v71);
  uint64_t v75 = (char *)&v196 - v74;
  MEMORY[0x270FA5388](v73);
  uint64_t v77 = (char *)&v196 - v76;
  swift_beginAccess();
  uint64_t v260 = a1;
  int v78 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess();
  int v79 = *(unsigned __int8 *)(a2 + 16);
  if (v78 == 13)
  {
    if (v79 != 13) {
      return 0;
    }
LABEL_6:
    v198 = v6;
    uint64_t v199 = v4;
    v200 = v8;
    uint64_t v81 = a2;
    uint64_t v82 = v260;
    uint64_t v83 = v260
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess();
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, (uint64_t)v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
    uint64_t v84 = v81
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess();
    uint64_t v85 = (uint64_t)&v67[*(int *)(v258 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v77, (uint64_t)v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84, v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
    uint64_t v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
    uint64_t v86 = v62 + 48;
    uint64_t v87 = v88;
    uint64_t v89 = v259;
    if (v88((uint64_t)v67, 1, v259) == 1)
    {
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
      v196 = v87;
      uint64_t v197 = v86;
      unsigned int v90 = v87(v85, 1, v89);
      uint64_t v91 = v81;
      if (v90 == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
        goto LABEL_14;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v67, (uint64_t)v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
      if (v87(v85, 1, v89) != 1)
      {
        v196 = v87;
        uint64_t v197 = v86;
        uint64_t v92 = v250;
        outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v85, v250, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        uint64_t v82 = v260;
        swift_retain();
        swift_retain();
        char v93 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)((uint64_t)v75, v92, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v92, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v75, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        uint64_t v91 = v81;
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
        if ((v93 & 1) == 0) {
          goto LABEL_43;
        }
LABEL_14:
        uint64_t v94 = v82
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
        swift_beginAccess();
        uint64_t v95 = v257;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v94, v257, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
        uint64_t v96 = v91
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
        swift_beginAccess();
        uint64_t v97 = v254;
        uint64_t v98 = v254 + *(int *)(v251 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, v254, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v96, v98, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
        uint64_t v99 = v253;
        uint64_t v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v252 + 48);
        if (v100(v97, 1, v253) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
          int v101 = v100(v98, 1, v99);
          uint64_t v102 = v255;
          uint64_t v103 = v256;
          if (v101 == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v104 = v249;
          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, v249, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
          int v105 = v100(v98, 1, v99);
          uint64_t v102 = v255;
          uint64_t v103 = v256;
          if (v105 != 1)
          {
            uint64_t v108 = v244;
            outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v98, v244, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            char v109 = specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(v104, v108, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v108, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v257, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v104, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
            if ((v109 & 1) == 0) {
              goto LABEL_43;
            }
LABEL_21:
            uint64_t v110 = v260
                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
            swift_beginAccess();
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v110, v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
            uint64_t v111 = v91
                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
            swift_beginAccess();
            uint64_t v112 = v248;
            uint64_t v113 = v248 + *(int *)(v245 + 48);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, v248, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
            uint64_t v114 = v247;
            uint64_t v115 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v246 + 48);
            if (v115(v112, 1, v247) == 1)
            {
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
              if (v115(v113, 1, v114) == 1)
              {
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
                goto LABEL_28;
              }
            }
            else
            {
              uint64_t v257 = v91;
              uint64_t v116 = v243;
              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, v243, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
              if (v115(v113, 1, v114) != 1)
              {
                uint64_t v117 = v238;
                outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v113, v238, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                char v118 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v116, v117, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v117, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v256, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
                outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v116, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
                uint64_t v91 = v257;
                if ((v118 & 1) == 0) {
                  goto LABEL_43;
                }
LABEL_28:
                uint64_t v119 = v260
                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                swift_beginAccess();
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                uint64_t v120 = v91
                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                swift_beginAccess();
                uint64_t v121 = v242;
                uint64_t v122 = v242 + *(int *)(v239 + 48);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, v242, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                uint64_t v123 = v120;
                uint64_t v112 = v121;
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v123, v122, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                uint64_t v124 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48);
                uint64_t v125 = v121;
                uint64_t v126 = v241;
                if (v124(v125, 1, v241) == 1)
                {
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                  if (v124(v122, 1, v126) == 1)
                  {
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
LABEL_35:
                    uint64_t v130 = v260
                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                    swift_beginAccess();
                    uint64_t v131 = v237;
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v130, v237, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                    uint64_t v132 = v91
                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                    swift_beginAccess();
                    uint64_t v112 = v234;
                    uint64_t v133 = v234 + *(int *)(v231 + 48);
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v131, v234, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v132, v133, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                    uint64_t v134 = v233;
                    uint64_t v135 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v232 + 48);
                    if (v135(v112, 1, v233) == 1)
                    {
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v131, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                      int v136 = v135(v133, 1, v134);
                      uint64_t v137 = v235;
                      if (v136 == 1)
                      {
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                        goto LABEL_47;
                      }
                    }
                    else
                    {
                      uint64_t v138 = v228;
                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, v228, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                      int v139 = v135(v133, 1, v134);
                      uint64_t v137 = v235;
                      if (v139 != 1)
                      {
                        uint64_t v140 = v223;
                        outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v133, v223, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        char v141 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v138, v140, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v140, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v237, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v138, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                        if ((v141 & 1) == 0) {
                          goto LABEL_43;
                        }
LABEL_47:
                        uint64_t v142 = v260
                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                        swift_beginAccess();
                        uint64_t v143 = v142;
                        uint64_t v144 = v229;
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, v229, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                        uint64_t v145 = v91
                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                        swift_beginAccess();
                        uint64_t v146 = v227;
                        uint64_t v147 = v227 + *(int *)(v224 + 48);
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, v227, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v145, v147, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                        uint64_t v148 = v226;
                        char v149 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v225 + 48);
                        if (v149(v146, 1, v226) == 1)
                        {
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                          if (v149(v147, 1, v148) == 1)
                          {
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v146, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                            goto LABEL_54;
                          }
                        }
                        else
                        {
                          uint64_t v150 = v222;
                          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v146, v222, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                          if (v149(v147, 1, v148) != 1)
                          {
                            uint64_t v151 = v217;
                            outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v147, v217, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            char v152 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v150, v151, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v151, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v229, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                            outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v150, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v146, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                            if ((v152 & 1) == 0) {
                              goto LABEL_43;
                            }
LABEL_54:
                            uint64_t v153 = v260
                                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                            swift_beginAccess();
                            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v153, v137, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                            uint64_t v154 = v91
                                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                            swift_beginAccess();
                            uint64_t v155 = v137;
                            uint64_t v156 = v221;
                            uint64_t v157 = v221 + *(int *)(v218 + 48);
                            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v155, v221, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v154, v157, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                            uint64_t v158 = v220;
                            uint64_t v159 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v219 + 48);
                            if (v159(v156, 1, v220) == 1)
                            {
                              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v155, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                              if (v159(v157, 1, v158) == 1)
                              {
                                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
LABEL_61:
                                uint64_t v163 = v260
                                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                                swift_beginAccess();
                                uint64_t v164 = v216;
                                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v163, v216, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                uint64_t v165 = v91
                                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                                swift_beginAccess();
                                uint64_t v166 = v214;
                                uint64_t v167 = v214 + *(int *)(v211 + 48);
                                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v164, v214, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                uint64_t v168 = v165;
                                uint64_t v112 = v166;
                                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v168, v167, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                v169 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48);
                                uint64_t v170 = v166;
                                uint64_t v171 = v213;
                                if (v169(v170, 1, v213) == 1)
                                {
                                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v164, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                  if (v169(v167, 1, v171) == 1)
                                  {
                                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
LABEL_68:
                                    uint64_t v175 = v260
                                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                    swift_beginAccess();
                                    uint64_t v176 = v210;
                                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v175, v210, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                    uint64_t v177 = v91
                                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                    swift_beginAccess();
                                    uint64_t v178 = (uint64_t)v200;
                                    uint64_t v179 = (uint64_t)&v200[*(int *)(v206 + 48)];
                                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v176, (uint64_t)v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v177, v179, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                    v180 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v207 + 48);
                                    uint64_t v181 = v199;
                                    if (v180(v178, 1, v199) == 1)
                                    {
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v210, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                      if (v180(v179, 1, v181) == 1)
                                      {
                                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
LABEL_75:
                                        uint64_t v185 = v260
                                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                        swift_beginAccess();
                                        uint64_t v186 = v204;
                                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v185, v204, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                        uint64_t v187 = v91
                                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                        swift_beginAccess();
                                        uint64_t v188 = v205;
                                        uint64_t v189 = v205 + *(int *)(v258 + 48);
                                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v186, v205, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v187, v189, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                        uint64_t v190 = v188;
                                        uint64_t v191 = v259;
                                        v192 = v196;
                                        if (v196(v190, 1, v259) == 1)
                                        {
                                          swift_release();
                                          swift_release();
                                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v204, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                          if (v192(v189, 1, v191) == 1)
                                          {
                                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v205, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                            return 1;
                                          }
                                          goto LABEL_80;
                                        }
                                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v205, v201, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                        if (v192(v189, 1, v191) == 1)
                                        {
                                          swift_release();
                                          swift_release();
                                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v204, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                          outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v201, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
LABEL_80:
                                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v205, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL1SyncState?, CLP_LogEntry_PrivateData_GpsL1SyncState?));
                                          return 0;
                                        }
                                        uint64_t v193 = v250;
                                        outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v189, v250, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        uint64_t v194 = v201;
                                        char v195 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v201, v193, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        swift_release();
                                        swift_release();
                                        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v193, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v204, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                        outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v194, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v205, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                        return (v195 & 1) != 0;
                                      }
                                      goto LABEL_73;
                                    }
                                    uint64_t v182 = v202;
                                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v200, v202, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                    if (v180(v179, 1, v181) == 1)
                                    {
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v210, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v182, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
LABEL_73:
                                      uint64_t v106 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SbasL1SyncState?, CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                      uint64_t v107 = (uint64_t)v200;
                                      goto LABEL_42;
                                    }
                                    uint64_t v183 = (uint64_t)v198;
                                    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v179, (uint64_t)v198, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                    char v184 = specialized static CLP_LogEntry_PrivateData_SbasL1SyncState.== infix(_:_:)(v182, v183);
                                    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v183, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v210, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v182, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                    if (v184) {
                                      goto LABEL_75;
                                    }
LABEL_43:
                                    swift_release();
                                    swift_release();
                                    return 0;
                                  }
                                }
                                else
                                {
                                  uint64_t v172 = v208;
                                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, v208, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                  if (v169(v167, 1, v171) != 1)
                                  {
                                    uint64_t v173 = v203;
                                    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v167, v203, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    char v174 = specialized static CLP_LogEntry_PrivateData_GalileoE5SyncState.== infix(_:_:)(v172, v173);
                                    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v173, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v216, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v172, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                    if ((v174 & 1) == 0) {
                                      goto LABEL_43;
                                    }
                                    goto LABEL_68;
                                  }
                                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v216, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v172, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                }
                                uint64_t v106 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoE5SyncState?, CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                goto LABEL_41;
                              }
                            }
                            else
                            {
                              uint64_t v160 = v215;
                              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, v215, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                              if (v159(v157, 1, v158) != 1)
                              {
                                uint64_t v161 = v209;
                                outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v157, v209, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                char v162 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v160, v161, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v161, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v235, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                                outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v160, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                                if ((v162 & 1) == 0) {
                                  goto LABEL_43;
                                }
                                goto LABEL_61;
                              }
                              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v235, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                              outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v160, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                            }
                            uint64_t v106 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoE1SyncState?, CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                            uint64_t v107 = v156;
                            goto LABEL_42;
                          }
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v229, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                          outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v150, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                        }
                        uint64_t v106 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouB2SyncState?, CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                        uint64_t v107 = v146;
                        goto LABEL_42;
                      }
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v237, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v138, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                    }
                    uint64_t v106 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouB1SyncState?, CLP_LogEntry_PrivateData_BeidouB1SyncState?);
LABEL_41:
                    uint64_t v107 = v112;
                    goto LABEL_42;
                  }
                }
                else
                {
                  uint64_t v127 = v236;
                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, v236, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                  if (v124(v122, 1, v126) != 1)
                  {
                    uint64_t v128 = v230;
                    outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo(v122, v230, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    char v129 = specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(v127, v128, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v128, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v255, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                    outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v127, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                    if ((v129 & 1) == 0) {
                      goto LABEL_43;
                    }
                    goto LABEL_35;
                  }
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v255, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                  outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v127, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                }
                uint64_t v106 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassL1fSyncState?, CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                goto LABEL_41;
              }
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v256, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
              outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v116, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
            }
            uint64_t v106 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL5SyncState?, CLP_LogEntry_PrivateData_GpsL5SyncState?);
            goto LABEL_41;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v257, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
          outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo(v104, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
        }
        uint64_t v106 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL2CSyncState?, CLP_LogEntry_PrivateData_GpsL2CSyncState?);
        uint64_t v107 = v97;
LABEL_42:
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v107, v106);
        goto LABEL_43;
      }
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
      outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v75, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v67, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL1SyncState?, CLP_LogEntry_PrivateData_GpsL1SyncState?));
    goto LABEL_43;
  }
  BOOL result = 0;
  if (v79 != 13 && v78 == v79) {
    goto LABEL_6;
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SyncState.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SyncState()
{
  return CLP_LogEntry_PrivateData_SyncState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SyncState(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SyncState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SvTime.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvTime.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvTime.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvTime.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvTime.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t static CLP_LogEntry_PrivateData_SvTime.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvTime) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_SvTime.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvTime, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvTime@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvTime(a1, 2, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvTime@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvTime(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_FrequencyOffset.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_FrequencyOffset.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_FrequencyOffset.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvTime.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      break;
    }
    if (result == 3)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    else if (result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    uint64_t v4 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvTime.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v7 = result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + *(int *)(v7 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_FrequencyOffset.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FrequencyOffset@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.protoMessageName.getter()
{
  return 0xD000000000000039;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v3 = v0;
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        goto LABEL_6;
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_6:
        uint64_t v3 = 0;
        break;
      default:
        break;
    }
    uint64_t v0 = v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v8) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_PhaseTracking.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PhaseTracking.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PhaseTracking.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v3 = v0;
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        goto LABEL_7;
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        goto LABEL_7;
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_7:
        uint64_t v3 = 0;
        break;
      default:
        break;
    }
    uint64_t v0 = v3;
  }
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_PhaseTracking.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_PhaseTracking@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_PhaseTracking()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_PhaseTracking()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PhaseTracking@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SignalCorrelationPeak.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SignalCorrelationPeak.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SignalCorrelationPeak.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      switch(result)
      {
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_12;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset;
          break;
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
          uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          uint64_t v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime;
          break;
        default:
          goto LABEL_12;
      }
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v4, v3);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = closure #1 in CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(v5, a1, a2, a3);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(v5, a1, a2, a3);
    if ((*(unsigned char *)(v5
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 28)
                   + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Int CLP_LogEntry_PrivateData_SignalCorrelationPeak.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_FullSvTime.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_FullSvTime.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_FullSvTime.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 6)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_FullSvTime.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_FullSvTime@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvTime(a1, 6, a2);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvTime@<X0>(int *a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v7 = a1[6];
  uint64_t v8 = a3 + a1[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a3 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a3 + a1[7]) = a2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_FullSvTime()
{
  return CLP_LogEntry_PrivateData_FullSvTime.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_FullSvTime()
{
  return CLP_LogEntry_PrivateData_FullSvTime.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FullSvTime@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_SvMeasurementUsage.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvMeasurementUsage.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvMeasurementUsage.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.traverse<A>(visitor:)()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SvMeasurementUsage.hashValue.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

void *CLP_LogEntry_PrivateData_MeasurementExtension.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MeasurementExtension.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MeasurementExtension.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap, a1);
}

double one-time initialization function for defaultInstance()
{
  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 20) = 1;
  *(_DWORD *)(v0 + 2CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  *(unsigned char *)(v0 + 28) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, 1, 1, v4);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod) = 7;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  double result = 0.0;
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_247109500;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = MEMORY[0x263F8EE78];
  static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 2CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(void *)(v0 + 3CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  *(_DWORD *)(v0 + 4CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  *(unsigned char *)(v0 + 48) = 1;
  *(_DWORD *)(v0 + 5CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  *(_DWORD *)(v0 + 60) = 0;
  *(unsigned char *)(v0 + 6CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(_DWORD *)(v0 + 68) = 0;
  *(unsigned char *)(v0 + 7CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = 1;
  *(_DWORD *)(v0 + 76) = 0;
  *(unsigned char *)(v0 + 80) = 1;
  *(_DWORD *)(v0 + 8CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  *(unsigned char *)(v0 + 88) = 1;
  *(_DWORD *)(v0 + 9CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = 0;
  *(unsigned char *)(v0 + 96) = 1;
  *(_DWORD *)(v0 + 100) = 0;
  *(unsigned char *)(v0 + 10CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(_DWORD *)(v0 + 108) = 0;
  *(unsigned char *)(v0 + 11CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = 1;
  *(_DWORD *)(v0 + 116) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_DWORD *)(v0 + 12CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  *(unsigned char *)(v0 + 128) = 1;
  *(void *)&double result = 33686019;
  *(_DWORD *)(v0 + 129) = 33686019;
  static CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 2CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(void *)(v0 + 3CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  *(void *)(v0 + 6CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  *(unsigned char *)(v0 + 7CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = 1;
  *(void *)(v0 + 80) = 0;
  *(unsigned char *)(v0 + 88) = 1;
  *(void *)(v0 + 96) = 0;
  *(unsigned char *)(v0 + 10CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(_DWORD *)(v0 + 108) = 0;
  *(unsigned char *)(v0 + 11CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = 1;
  *(_WORD *)(v0 + 113) = 1042;
  *(unsigned char *)(v0 + 11CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5) = 7;
  *(void *)(v0 + 120) = 0;
  *(unsigned char *)(v0 + 128) = 1;
  *(void *)(v0 + 136) = 0;
  *(unsigned char *)(v0 + 14CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  *(void *)(v0 + 15CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2) = 0;
  *(unsigned char *)(v0 + 160) = 1;
  *(void *)&double result = 33689864;
  *(_DWORD *)(v0 + 161) = 33689864;
  *(void *)(v0 + 168) = 0;
  *(unsigned char *)(v0 + 176) = 1;
  *(_DWORD *)(v0 + 180) = 0;
  *(unsigned char *)(v0 + 18CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  static Proto_Gnss_Emergency_SummaryReport._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v61 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v60 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 20) = 1;
  *(_DWORD *)(v1 + 2CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 0;
  *(unsigned char *)(v1 + 28) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  uint64_t v58 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  uint64_t v59 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(v9, 1, 1, v10);
  uint64_t v62 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  v11();
  uint64_t v63 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  v11();
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v64 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  uint64_t v14 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  unsigned char *v14 = 7;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  uint64_t v65 = v14;
  uint64_t v66 = v15;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  uint64_t v67 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  uint64_t v68 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v69 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_247109500;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  uint64_t v70 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = 1;
  uint64_t v71 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = MEMORY[0x263F8EE78];
  swift_beginAccess();
  int v19 = *(_DWORD *)(a1 + 16);
  char v20 = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  *(_DWORD *)(v1 + 16) = v19;
  *(unsigned char *)(v1 + 20) = v20;
  swift_beginAccess();
  int v21 = *(_DWORD *)(a1 + 24);
  char v22 = *(unsigned char *)(a1 + 28);
  swift_beginAccess();
  *(_DWORD *)(v1 + 2CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v21;
  *(unsigned char *)(v1 + 28) = v22;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  uint64_t v24 = v60;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  uint64_t v25 = v58;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v24, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  swift_endAccess();
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  uint64_t v27 = v61;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v28 = v59;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v27, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v29, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v30 = v62;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v27, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  uint64_t v31 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  uint64_t v32 = v63;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v27, v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  uint64_t v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess();
  LODWORD(v2CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = *(_DWORD *)v33;
  LOBYTE(v33) = *(unsigned char *)(v33 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v24;
  *(unsigned char *)(v12 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v33;
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess();
  LODWORD(v33) = *(_DWORD *)v34;
  LOBYTE(v3CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = *(unsigned char *)(v34 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v13 = v33;
  *(unsigned char *)(v13 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v34;
  uint64_t v35 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess();
  LOBYTE(v3CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5) = *v35;
  uint64_t v36 = v64;
  swift_beginAccess();
  unsigned char *v36 = (_BYTE)v35;
  uint64_t v37 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess();
  LOBYTE(v3CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, 7) = *v37;
  uint64_t v38 = v65;
  swift_beginAccess();
  unsigned char *v38 = (_BYTE)v37;
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess();
  LODWORD(v38) = *(_DWORD *)v39;
  LOBYTE(v39) = *(unsigned char *)(v39 + 4);
  uint64_t v40 = v66;
  swift_beginAccess();
  *(_DWORD *)uint64_t v40 = v38;
  *(unsigned char *)(v40 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v39;
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess();
  LODWORD(v38) = *(_DWORD *)v41;
  LOBYTE(v41) = *(unsigned char *)(v41 + 4);
  uint64_t v42 = v67;
  swift_beginAccess();
  *(_DWORD *)uint64_t v42 = v38;
  *(unsigned char *)(v42 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v41;
  uint64_t v43 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess();
  LODWORD(v38) = *(_DWORD *)v43;
  LOBYTE(v43) = *(unsigned char *)(v43 + 4);
  uint64_t v44 = v68;
  swift_beginAccess();
  *(_DWORD *)uint64_t v44 = v38;
  *(unsigned char *)(v44 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v43;
  uint64_t v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v47 = *v45;
  unint64_t v46 = v45[1];
  uint64_t v48 = v69;
  swift_beginAccess();
  uint64_t v49 = *v48;
  unint64_t v50 = v48[1];
  uint64_t *v48 = v47;
  v48[1] = v46;
  outlined copy of Data?(v47, v46);
  outlined consume of Data?(v49, v50);
  uint64_t v51 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess();
  LODWORD(v4CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, 7) = *(_DWORD *)v51;
  LOBYTE(v51) = *(unsigned char *)(v51 + 4);
  uint64_t v52 = v70;
  swift_beginAccess();
  *(_DWORD *)uint64_t v52 = v47;
  *(unsigned char *)(v52 + CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4) = v51;
  uint64_t v53 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess();
  uint64_t v54 = *v53;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v55 = v71;
  swift_beginAccess();
  *uint64_t v55 = v54;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.__deallocating_deinit()
{
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  outlined consume of Data?(*(void *)(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata), *(void *)(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata+ 8));
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 12:
        case 13:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_16;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime;
          goto LABEL_9;
        case 4:
        case 5:
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage;
          uint64_t v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage;
LABEL_9:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_16;
        case 7:
        case 8:
        case 15:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_16;
        case 9:
        case 10:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 11:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_16;
        case 14:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_16;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_16:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((*(unsigned char *)(v9 + 20) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  swift_beginAccess();
  if ((*(unsigned char *)(v9 + 28) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(v9, a1, a2, a3);
  uint64_t v11 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess();
  if ((*(unsigned char *)(v11 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess();
  if (*v13 != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v14 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess();
  if (*v14 != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v18 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15)
  {
    uint64_t v20 = *v18;
    outlined copy of Data._Representation(v20, v19);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    outlined consume of Data?(v20, v19);
  }
  uint64_t v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess();
  if ((*(unsigned char *)(v21 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks;
  swift_beginAccess();
  if (*(void *)(*(void *)v22 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  }
  outlined init with take of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_PrivateData_GlonassSlotInfo((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}